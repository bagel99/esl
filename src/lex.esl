// Copyright (c) 2009-2018, Brian G. Lucas.  See LICENSE file.

package lex
{
    // Order is warnings, errors, internal errors
    type Errors:
    (   // Warnings
	NOTIMPL,    EXPERIMENT, WRONGATTR,  OLDRETV,
	TRUNC,      TOSIGNED,   TOUNSIGN,   BADINTPTR,  AMBIGUOUS,  FLEXSIZE,
	// Errors
	BADNL,      ILLCHR,     ILLUTF8,    CMTEOF,     BADEOF,     BADCHR,
	BADHEXESC,  BADUTF8,    IDLONG,     STRLONG,    EXPECT,     EXPECTID,
	UNDEFID,    DEFID,      UNDEFFIELD, BADID,      BADREF,     BADINDEX,
	NOIDTYPE,   NOTTYPE,    NOTYPE,     NOTENUM,    BADTYPE,    OPTYPE,
	BADTYPDEF,  BADATTR,    UNDEFSTMT,  BADSTMTI,   BADSTMTT,   BADCOMPARE,
	BADASSIGN,  ILLASSIGN,  LHSASSIGN,  RHSASSIGN,  TYPEASSIGN, RHSLESS,
	RHSMORE,    FORWPROC,   FORWPARM,   FORWRETV,   WANTBOOL,   BADMETHOD,
	WANTUINT,   BADCAST,    UNDFCOMPV,  BADCOMPV,   PROPID,     BADIF,
	BADIS,      NOPROC,     NOLOOP,     NOPACK,     NOTREF,     NOTARRAY,
	ARRAYCOPY,  BADINXEXP,  NOTRECORD,  BADRECORD,  BASERECORD, BASEENUM,
	ARGSLO,     ARGSHI,     PARMTYPE,   INITHI,     BADCONST,   EXPCONST,
	BADIMPORT,  NOTVAR,     BADFLEX,    FORWNOFIX,  BADFOR,     SECTNAME,
	BADPCKREC,  BADPCKARR,  NOSIZE,     NEEDSIZE,   BADSIZE,    BADAT,
	RETTOOFEW,  RETTOOMANY, BADLEN,     BOUNDSERR,	RECURSIVE,  BADCONV,
	RANGEERR,   PACKARRAY,  PACKFIXED,  PACKSIZE,   PACKUINT,
	LONGNUM,    LONGFRAC,
	FMTNOSPEC,  FMTNOEXPR,	FMTNOPACK,
	PROGERROR,  // error statement
	COMPILER    // internal compiler error
    );
    const FirstError:Errors = BADNL;
    const ErrMsg:[Errors]@[]Char =
    {
	[NOTIMPL] =	"Feature not yet implemented: ",
	[EXPERIMENT] =  "Feature is experimental: ",
	[WRONGATTR] =   "Attribute not valid for type: ",
	[OLDRETV] =	"Depricated syntax for multiple return values",
	[TRUNC] =	"Truncation may cause loss of data",
	[TOSIGNED] =	"Converting unsigned to signed integer",
	[TOUNSIGN] =	"Converting signed to unsigned integer",
	[BADINTPTR] =	"Pointer converted from wrong size integer",
	[AMBIGUOUS] =   "Use of identifier is ambiguous: ",
	[FLEXSIZE] =    "Size of zero assumed for flex size specification",
	[BADNL] =	"End of line in string or character constant",
	[ILLCHR] =      "Illegal character in source",
	[ILLUTF8] =     "Illegal byte in UTF8 sequence",
	[CMTEOF] =	"End of file in comment",
	[BADEOF] =	"Unexpected end of file",
	[BADCHR] =	"Malformed character constant",
	[BADHEXESC] =	"Malformed hex escape in string or character constant",
	[BADUTF8] =	"Malformed unicode escape",
	[IDLONG] =	"Identifier too long",
	[STRLONG] =	"String too long",
	[EXPECT] =	"Expected: ",
	[EXPECTID] =	"Expected identifier",
	[UNDEFID] =	"Undefined identifier: ",
	[DEFID] =	"Identifier already in use: ",
	[UNDEFFIELD] =	"Undefined field or method: ",
	[BADID] =	"Unexpected identifier: ",
	[BADREF] =	"Cannot dereference incomplete type",
	[BADINDEX] =	"Illegal index specification",
	[NOIDTYPE] =	"Identifier has no type: ",
	[NOTTYPE] =	"Expected type identifier",
	[NOTYPE] =	"Error in type definition",
	[NOTENUM] =	"Enumeration type required",
	[BADTYPE] =	"Illegal use of type identifier: ",
	[OPTYPE] =	"Type not suppported for operation: ",
	[BADTYPDEF] =	"Error in type definition",
	[BADATTR] =	"Unknown attribute: ",
	[UNDEFSTMT] =	"Statement begins with undefined identifier: ",
	[BADSTMTI] =	"Statement begins with inappropriate identifier: ",
	[BADSTMTT] =	"Statement begins with inappropriate token: ",
	[BADCOMPARE] =	"Illegal comparison, bad type perhaps",
	[BADASSIGN] =	"Syntax error in possible assignment statement",
	[ILLASSIGN] =	"Illegal assignment",
	[LHSASSIGN] =	"Illegal lhs in assignment",
	[RHSASSIGN] =	"Illegal rhs in assignment",
	[TYPEASSIGN] =	"Type mismatch in assignment",
	[RHSLESS] =	"Not enough rhs values in assignment",
	[RHSMORE] =	"Too many rhs values in assignment",
	[FORWPROC] =	"Call of undefined forward procedure: ",
	[FORWPARM] =	"Parameter types changed from forward declaration: ",
	[FORWRETV] =	"Return value types changed from forward declaration: ",
	[WANTBOOL] =	"Boolean expression required",
	[BADMETHOD] =	"Method base type must have name",
	[WANTUINT] =	"Unsigned integer expression required",
	[BADCAST] =	"Illegal cast",
	[BADCONV] =	"Illegal conversion",
	[UNDFCOMPV] =	"Missing type for composite value",
	[BADCOMPV] =	"Illegal type for composite value",
	[PROPID] =	"Missing or undefined property identifier",
	[BADIF] =	"Expecting \"then\" or \"is\"",
	[BADIS] =	"Error in \"is\" clause",
	[NOPROC] =	"Return statement not in procedure",
	[NOLOOP] =	"Exit statement not in a loop",
	[NOPACK] =	"Unknown statement in package",
	[NOTREF] =	"Not a pointer",
	[NOTARRAY] =	"Not an array",
	[ARRAYCOPY] =	"Array copy with undefined length",
	[BADINXEXP] =   "Illegal array index",
	[NOTRECORD] =	"Not a record",
	[BADRECORD] =	"Syntax error in record declaration",
	[BASERECORD] =	"Base type must be a record",
	[BASEENUM] =	"Base type must be an enumeration",
	[ARGSLO] =	"Insufficient arguments to procedure call",
	[ARGSHI] =	"Too many arguments to procedure call",
	[PARMTYPE] =	"Actual parameter type not compatible with formal",
	[INITHI] =	"Too many initializers",
	[BADCONST] =	"Const requires a constant value",
	[EXPCONST] =	"Expression must be a compile-time constant",
	[BADIMPORT] =	"Unable to open file: ",
	[NOTVAR] =      "Expected variable identifier",
	[BADFLEX] =     "Flexible array must be final field",
	[FORWNOFIX]=    "Unresolved forward symbol: ",
	[BADFOR] =      "Syntax error in for statement",
	[SECTNAME] =    "Expected section name",
	[BADPCKREC] =   "Packed record too large",
	[BADPCKARR] =   "Packed array too large",
	[NOSIZE] =      "Can not specify size for fixed sized object",
	[NEEDSIZE] =    "Must specify size for variable sized object",
	[BADSIZE] =     "Specified size smaller that actual object size",
	[BADAT] =       "Illegal field offset specified",
	[RETTOOFEW] =   "Too few return values",
	[RETTOOMANY] =  "Too many return values",
	[BADLEN] =      "Not an array or array with flexible length",
	[BOUNDSERR] =   "Array bounds error",
	[RECURSIVE] =	"Illegal recursive type: ",
	[RANGEERR] =    "Value out of range for operation",
	[PACKARRAY] =   "Arg for _packXX/_unpkXX must be array/slice of bytes",
	[PACKFIXED] =   "Array for _packXX/_unpkXX must have fixed size",
	[PACKSIZE] =    "Array for _packXX/_unpkXX to large for target machine",
	[PACKUINT] =    "Scalar for _packXX must be unsigned int",
	[LONGNUM] =     "Too many digits in number",
	[LONGFRAC] =    "Too many digits in fractional part",
	[FMTNOSPEC] =	"Format lacks spec for expression",
	[FMTNOEXPR] =	"Format has expression with a spec",
	[FMTNOPACK] =	"Unable to find 'fmt' package - perhaps not imported",
	[PROGERROR] =   "Program defined error: ",
	[COMPILER] =    "Internal compiler error: "
    };
    // Lines commented ** must have the tokens consecutive
    type TokenT:
    (   NONE,	ENDF,
	DOT,	COLON,	SEMI,	COMMA,	RANGE,	AT,	QUEST,
	ASGN,	ASGNR,  INCR,	DECR,	LETOR,	LETXOR,	LETAND, // **
	NOT,	INV,    PLUS,	MINUS,	OR,	XOR,	// must be contiguous
	STAR,	DIV,	MOD,	SHL,	SHR,	AND,	// must be contiguous
	EQ,	NE,	LT,	GT,	LE,	GE,	// must be contiguous
	BAND,	BOR,					// **
	PBEG,	PEND,	ABEG,	AEND,	GBEG,	GEND,
	NUM,	FNUM,   ENUM,   STR,
	ID,		// all keywords follow this
	KTYPE,	KVAR,	KCONST,	KIMPORT,KALIAS,	KERROR,
	KPROC,	KPACKAGE,
	KASM,   KASSERT,KCALL,
	KRET,   KIF,	KWHILE,				// must be contiguous
	KFOR,	KLOOP,	KEXIT,	KFORMAT,KPRINT,
	KTHEN,	KELIF,  KELSE,	KIS,    KDO,	KWITH,  KAS,
	KIN,	KFROM,	KTO,    KDOWNTO,KBY,		// for loop support
	// attributes begin here
	KPACK,	KNOPAD,	KLSB,	KMSB,	KLE,	KBE,
	KRO,	KWO,	KINPUT,	KOUTPUT,KIO,    KAT,
	KEXTERN,KGLOBAL,KSECTION,KALIGN,
	KINLINE,KNOINLINE,KINTR,KWEAK,
	KWRAP,	KSAT,	KTRAP,
	// type properties begin here
	KMIN,	KMAX,	KBITSZ,	KFRACSZ,KMEMSZ,	KLEN
    );
    const keywords:[TokenT]@[]Char =
    {	[NONE] =	"",		// none
	[ENDF] =	"ENDOFFILE",
	[DOT] =		".",
	[COLON] =	":",
	[SEMI] =	";",
	[COMMA] =	",",
	[RANGE] =	"..",
	[AT] =		"@",
	[QUEST] =	"?",
	[ASGN] =	"=",
	[ASGNR] =       "=/",
	[INCR] =	"+=",
	[DECR] =	"-=",
	[LETOR] =       "|=",
	[LETXOR] =      "^=",
	[LETAND] =      "&=",
	[NOT] =		"!",
	[INV] =		"~",
	[PLUS] =	"+",
	[MINUS] =	"-",
	[OR] =		"|",
	[XOR] =		"^",
	[STAR] =	"*",
	[DIV] =		"/",
	[MOD] =		"%",
	[SHL] =		"<<",
	[SHR] =		">>",
	[AND] =		"&",
	[EQ] =		"==",
	[NE] =		"!=",
	[LT] =		"<",
	[GT] =		">",
	[LE] =		"<=",
	[GE] =		">=",
	[BAND] =	"&&",
	[BOR] =		"||",
	[PBEG] =	"(",
	[PEND] =	")",
	[ABEG] =	"[",
	[AEND] =	"]",
	[GBEG] =	"{",
	[GEND] =	"}",
	[NUM] =		"NUMBER",
	[FNUM] =	"FNUM",
	[ENUM] =	"ENUM",
	[STR] =		"STRING",
	[ID] =		"IDENT",
	[KTYPE] =	"type",
	[KVAR] =	"var",
	[KCONST] =	"const",
	[KIMPORT] =	"import",
	[KALIAS] =	"alias",
	[KERROR] =      "error",
	[KPROC] =	"proc",
	[KPACKAGE] =	"package",
	[KASM] =	"asm",
	[KASSERT] =     "assert",
	[KCALL] =       "call",
	[KRET] =	"return",
	[KIF] =		"if",
	[KWHILE] =	"while",
	[KFOR] =	"for",
	[KLOOP] =	"loop",
	[KEXIT] =	"exit",
	[KFORMAT] =	"format",
	[KPRINT] =	"print",
	[KTHEN] =	"then",
	[KELIF] =       "elif",
	[KELSE] =	"else",
	[KIS] =		"is",
	[KDO] =		"do",
	[KWITH] =	"with",
	[KAS] =		"as",
	[KIN] =		"in",
	[KFROM] =	"from",
	[KTO] =		"to",
	[KDOWNTO] =	"downto",
	[KBY] =		"by",
	[KPACK] =	"packed",       // attributes for types
	[KNOPAD] =	"nopad",
	[KLSB] =	"lsb",
	[KMSB] =	"msb",
	[KLE] =		"le",
	[KBE] =		"be",
	[KRO] =		"ro",
	[KWO] =		"wo",
	[KINPUT] =	"in",
	[KOUTPUT] =	"out",
	[KIO] =		"io",
	[KAT] =		"at",
	[KEXTERN] =	"external",	// attributes for vars and procs
	[KGLOBAL] =	"global",
	[KSECTION] =	"section",
	[KALIGN] =	"align",
	[KINLINE] =	"inline",	// attributes for procs
	[KNOINLINE] =   "noinline",
	[KINTR] =	"interrupt",
	[KWEAK] =       "weak",
	[KWRAP] =	"wrap",
	[KSAT] =	"sat",
	[KTRAP] =	"trap",
	[KMIN] =	"min",		// properties
	[KMAX] =	"max",
	[KBITSZ] =	"bits",
	[KFRACSZ] =     "fbits",
	[KMEMSZ] =	"size",
	[KLEN]=		"len"
    };
    type TokenList: []TokenT;
    const StringMax = 4095;
    type StringRange: 0..StringMax;
    const IdentMax = 255;
    const BufSize = 4096;
    type BufRange: 0..BufSize;
    const PathMax = 1024;	// Max chars in a pathname
    type PathRange: 0..PathMax;
    const NameMax =  256;	// Max chars in filename
    const LinesMax = 0xFFFF;	// Max lines in a file, files in a program
    type LinesRange: 0..LinesMax;
    const ErrorMax = 10;	// Max errors before terminate

    type FileContext:
    {
	prev:		@FileContext;
	filepath:	@[]Char;
	filename:	@[]Char;
	fd:		sys.fildes;
	lineno:		LinesRange;
	cchar:		BufRange;		// index into buf
	nchar:		BufRange;		// num valid chars in buf
	buf:		[BufSize]Char;
    };
    type File: @FileContext;
    var f: File;
    type Identifier: []Char;
    var ErrorCount: 0..ErrorMax;
    var Token: TokenT;			// current token
    var Ident: [IdentMax+1]Char;	// if token is an IDENT
    var Number: _uint64;		// if token is a NUM or FNUM
    var Scale:  _int16;			// power of 10 for FNUM
    var StringLen: 0..StringMax;	// if token is a STR
    var StringNul: boolean;		// if string is NUL terminated
    var StringBuf: [StringMax+1]Char;	// if token is a STR
    type State:
    (   FIRST,	// first character
	DIV,	// seen "/"
	CMTLN,	// seen "//", skipping to EOL
	CMTBK,	// seen "/*", skipping to "*"
	CMTBE,	// seen "*" in a block comment
	DOT,	// seen "."
	PLUS,	// seen "+"
	MINUS,	// seen "-"
	LT,	// seen "<"
	GT,	// seen ">"
	ASGN,	// seen "="
	NOT,	// seen "!"
	AND,	// seen "&"
	OR,	// seen "|"
	XOR,    // seen "^"
	ZERO,	// seen "0"
	BIN,  OCT,  HEX,
	DEC,  DECD, DECF, EXP1, EXP2,
	ID,   ID1,  ID2,  ID3,				// must be consecutive
	CHR,  STR,  ESC,
	HEX1, HEX2,					// must be consecutive
	U161, U162, U163, U164,				// must be consecutive
	U321, U322, U323, U324, U325, U326, U327, U328	// must be consecutive
    );
    var saves: State = FIRST;		// look behind state

    proc Lineno():0..LinesMax
    {
	if f == 0 then
	    return 0;
	return f@.lineno;
    }

    proc ErrorSub(error: Errors)
    {
	if f@.filepath != 0 then
	{   err.str(f@.filepath);
	    err.chr('/');
	}
	err.str(f@.filename);
	err.chr(':');
	err.uint(Lineno());
	err.str(": ");
	if error >= FirstError then
	{   ErrorCount += 1;
	    if ErrorCount >= ErrorMax then
	    {   err.str("\nToo many errors, quiting.\n");
		sys.exit(1);
	    }
	    err.str("Error: ");
	}
	else
	    err.str("Warning: ");
	err.str(ErrMsg[error]);
    }

    // Print error message, no parameters
    proc Error(error: Errors)
    {
	ErrorSub(error);
	err.nl();
    }

    // Print error message, parameter is arbitrary string
    proc ErrorS(error: Errors, msg: @[]_byte)
    {
	ErrorSub(error);
	err.str(msg);
	err.nl();
    }

    // Print error message, parameter is identifer
    proc ErrorI(error: Errors, ident: @Identifier)
    {
	ErrorSub(error);
	err.str(ident);
	err.nl();
    }

    // Print error message, parameter is token
    proc ErrorT(error: Errors, tok: TokenT)
    {
	ErrorSub(error);
	err.chr('\'');
	err.str(keywords[tok]);
	err.chr('\'');
	err.str(" got '");
	if Token == ID then
	    err.str(Ident);
	else
	    err.str(keywords[Token]);
	err.chr('\'');
	err.nl();
    }

    proc FileClose()
    {   var of: File;

	if f != 0 then
	{   sys.close(f@.fd);
	    if debug.files then
	    {   err.str("Close file \"");
		if f@.filepath != 0 then
		{   err.str(f@.filepath);
		    err.chr('/');
		}
		err.str(f@.filename);
		err.str("\"\n");
	    }
	    of = f;
	    f = of@.prev;
	    // sys.free(of)
	}
    }

    proc FileOpen(name: @[]Char, path: @[]Char, fd: sys.fildes)
    {   var nf: File;

	nf = File(sys.malloc(FileContext?size));
	nf@.filename = name;
	nf@.filepath = path;
	nf@.fd = fd;
	nf@.lineno = 1;
	nf@.cchar = 0;
	nf@.nchar = 0;
	nf@.prev = f;
	f = nf;
    }


    proc FillBuf()
    {   var k: _int;

	k = sys.read(f@.fd, f@.buf, BufSize);
	if k < 0 then
	    k = 0;
	f@.cchar = 0;
	f@.nchar = BufRange(k);
    }

    proc MakeFloat(hasexp: boolean): _float64
    {   var n, t: _uint64;
	var s: _int16;
	var i: _uint;
	var f: _float64;

	n = Number;
//err.str("MakeFloat: n="); err.uint64(Number); err.str(" k="); err.uint16(s);
//if hasexp then { err.str(" s="); err.int16(Scale); }
	i = 0;
	if StringLen > 0 then
	{   loop
	    {   t = (n * 10) + StringBuf[i];
	      exit t > 0x20_0000_0000_0000;	// 2^53
		n = t;
		i += 1;
	      exit i == StringLen;
	    }
	}
	s = i;	// size of fraction really used
	if hasexp then
	    s -= Scale;
//err.str(" n'="); err.uint64(n); err.str(" s'="); err.int16(s);
	f = _float64*(_uint64(n));
	if s > 0 then
	{   do
	    {	f = f / 10.0;
		s -= 1;
	    } while s != 0;
	}
	else if s < 0 then
	{   do
	    {	f = f * 10.0;
		s += 1;
	    } while s != 0;
	}
//err.str(" f="); err.hex64(_uint64(f)); err.nl();
	return f;
    }

    proc MakeNum(k: _uint, base: _uint)
    {   var n, t: _uint64;
	var i: _uint;

//err.str("MakeNum k="); err.uint(k); err.nl();
	n = 0;
	i = 0;
	while i < k do
	{   t = (n * base) + StringBuf[i];
	    if t < n then
	    {   lex.Error(LONGNUM);
		t = 1;
	    }
	    n = t;
	    i += 1;
	}
	Number = n;
    }

    proc EscChar(c: Char): Char
    {
	if c
	is 'n' then c = 0x0A;	// LF
	is 'r' then c = 0x0D;	// CR
	is 't' then c = 0x09;	// HT
	is 'b' then c = 0x08;	// BS
	is 'v' then c = 0x0B;	// VT
	is 'f' then c = 0x0C;	// FF
	return c;
    }

    proc EscHex(c: Char, h: _uint32): _uint32
    {
	if c
	is '0'..'9' then c -= '0';
	is 'A'..'F' then c = (c - 'A') + 10;
	is 'a'..'f' then c = (c - 'a') + 10;
	else
	{   Error(BADHEXESC);
	    return h;
	}
	return (h << 4) | c;
    }

    const unicodemax: [4]_uint32 =
	{ 0x0000_007F, 0x0000_07FF, 0x0000_FFFF, 0x0010_FFFF };
    const utf8pfx: [5]_uint8 = { 0x00, 0xC0, 0xE0, 0xF0, 0xF8 };

    proc EscUTF8(unicode: _uint32, j:_uint): _uint
    {   var n, i, k: _uint;

	n = 0;
	loop
	{
	  exit unicode <= unicodemax[n];
	    n += 1;
	  exit n > 3;
	}
	if n >= 4 then		// illegal unicode
	{   Error(BADUTF8);
	    return 0;
	}
	else
	{   k = j+n+1;		// need n+1 bytes
	    if k >= StringMax then
	    {   Error(STRLONG);
		return 0;
	    }
	    i = n;
	    while i > 0 do
	    {   StringBuf[j+i] = 0x80 | 0x3F & _uint8(unicode);
		unicode = unicode >> 6;
		i -= 1;
	    }
	    StringBuf[j] = utf8pfx[n] | _uint8(unicode);
	}
	return k;
    }

    proc Next():TokenT
    {   var state: State;
	var c: Char;
	var tok: TokenT;
	var i: 0..BufSize;
	var e: 0..BufSize;
	var k: 0..StringMax;
	var str, neg: boolean;
	var h: _uint32;		// for hex and unicode escapes

	state = FIRST;
	if saves != FIRST then
	{   state = saves;
	    saves = FIRST;
	}
	tok = NONE;
	i = f@.cchar;
	e = f@.nchar;
	k = 0;
	loop
	{   if i >= e then
	    {   FillBuf();
		i = f@.cchar;
		e = f@.nchar;
		exit e == 0 with
		{   if state
		    is FIRST then {}	// as it should be
		    is CMTLN, CMTBK, CMTBE then
			Error(CMTEOF);
		    else
			Error(BADEOF);
		    tok = ENDF;
		}
	    }
	    c = f@.buf[i];
	    if state
	    is FIRST then
	    {	if c
		is ':' then { tok = COLON;  i += 1; }
		is ';' then { tok = SEMI;   i += 1; }
		is ',' then { tok = COMMA;  i += 1; }
		is '@' then { tok = AT;     i += 1; }
		is '~' then { tok = INV;    i += 1; }
		is '*' then { tok = STAR;   i += 1; }
		is '%' then { tok = MOD;    i += 1; }
		is '(' then { tok = PBEG;   i += 1; }
		is ')' then { tok = PEND;   i += 1; }
		is '{' then { tok = GBEG;   i += 1; }
		is '}' then { tok = GEND;   i += 1; }
		is '?' then { tok = QUEST;  i += 1; }
		is '[' then { tok = ABEG;   i += 1; }
		is ']' then { tok = AEND;   i += 1; }
		is '.' then state = DOT;
		is '/' then state = DIV;
		is '!' then state = NOT;
		is '<' then state = LT;
		is '>' then state = GT;
		is '=' then state = ASGN;
		is '+' then state = PLUS;
		is '-' then state = MINUS;
		is '&' then state = AND;
		is '|' then state = OR;
		is '^' then state = XOR;
		is '0' then state = ZERO;
		is '1'..'9' then { StringBuf[0] = c-'0'; k = 1; state = DEC; }
		is '\'' then state = CHR;
		is '"' then { k = 0; state = STR; }
		is ' ','\t','\n','\r','\f' then // whitespace
		{ }
		is 'A'..'Z', 'a'..'z', '_' then
		{   Ident[0] = c;  k = 1; state = ID; }
		is 0xC2 .. 0xDF then		// 2 byte UTF8
		{   Ident[0] = c;  k = 1; state = ID1; }
		is 0xE0 .. 0xEF then		// 3 byte UTF8
		{   Ident[0] = c;  k = 1; state = ID2; }
		is 0xF0 .. 0xF4 then		// 4 byte UTF8
		{   Ident[0] = c;  k = 1; state = ID3; }
		else
		    Error(ILLCHR);
	    }
	    is ID then
		if c
		is 'A'..'Z', 'a'..'z', '0'..'9', '_' then
		{   Ident[k] = c;  k += 1; }
		is 0xC2 .. 0xDF then		// 2 byte UTF8
		{   Ident[k] = c;  k += 1; state = ID1; }
		is 0xE0 .. 0xEF then		// 3 byte UTF8
		{   Ident[k] = c;  k += 1; state = ID2; }
		is 0xF0 .. 0xF4 then		// 4 byte UTF8
		{   Ident[k] = c;  k += 1; state = ID3; }
		else
		{   Ident[k] = 0; tok = ID; }   // end of identifier
	    is ID1, ID2, ID3 then     // in a UTF8 sequence in identifier
		if (c & 0b1100_0000) == 0b1000_0000 then
		{   Ident[k] = c; k += 1; state -= 1; }
		else
		    Error(ILLUTF8);
	    is DIV then
		if c
		is '/' then state = CMTLN;
		is '*' then state = CMTBK;
		else    tok = DIV;
	    is CMTLN then
		if c == '\n' then state = FIRST;
	    is CMTBK then
		if c == '*' then state = CMTBE;
	    is CMTBE then
		if c == '/' then state = FIRST; else state = CMTBK;
	    is DOT then
		if c
		is '.' then { tok = RANGE; i += 1; }
		is '0'..'9' then { StringBuf[0] = c-'0'; k = 1; state = DECF; }
		else    tok = DOT;
	    is PLUS then
		if c
		is '=' then { tok = INCR; i += 1; }
		else    tok = PLUS;
	    is MINUS then
		if c
		is '=' then { tok = DECR; i += 1; }
		else    tok = MINUS;
	    is LT then
		if c
		is '=' then { tok = LE; i += 1; }
		is '<' then { tok = SHL; i += 1; }
		else    tok = LT;
	    is GT then
		if c
		is '=' then { tok = GE; i += 1; }
		is '>' then { tok = SHR; i += 1; }
		else    tok = GT;
	    is ASGN then
		if c
		is '=' then { tok = EQ; i += 1; }
		is '/' then { tok = ASGNR; i += 1; }
		else    tok = ASGN;
	    is NOT then
		if c
		is '=' then { tok = NE; i += 1; }
		else    tok = NOT;
	    is AND then
		if c
		is '&' then { tok = BAND; i += 1; }
		is '=' then { tok = LETAND; i += 1; }
		else    tok = AND;
	    is OR then
		if c
		is '|' then { tok = BOR; i += 1; }
		is '=' then { tok = LETOR; i += 1; }
		else    tok = OR;
	    is XOR then
		if c
		is '=' then { tok = LETXOR; i += 1; }
		else    tok = XOR;
	    is ZERO then
	    {   if c
		is 'b' then state = BIN;
		is 'o' then state = OCT;
		is 'x' then state = HEX;
		is '_' then state = DEC;
		is '0'..'9' then { StringBuf[k] = c-'0'; k += 1; state = DEC; }
		is '.'      then { Number = 0; state = DECD; }
		else    { Number = 0; tok = NUM; }
	    }
	    is BIN then
		if c
		is '0'..'1' then { StringBuf[k] = c-'0'; k += 1; }
		is '_' then {}
		else    { MakeNum(k, 2); tok = NUM; }
	    is OCT then
		if c
		is '0'..'7' then { StringBuf[k] = c-'0'; k += 1; }
		is '_' then {}
		else    { MakeNum(k, 8); tok = NUM; }
	    is HEX then
		if c
		is '0'..'9' then { StringBuf[k] = c-'0'; k += 1; }
		is 'A'..'F' then { StringBuf[k] = c-'A'+10; k += 1; }
		is 'a'..'f' then { StringBuf[k] = c-'a'+10; k += 1; }
		is '_' then {}
		else    { MakeNum(k, 16); tok = NUM; }
	    is DEC then
		if c
		is '0'..'9' then { StringBuf[k] = c-'0'; k += 1; }
		is '_' then {}
		is '.' then { MakeNum(k, 10); k = 0; state = DECD; }
		else    { MakeNum(k, 10); tok = NUM; }
	    is DECD then
		if c
		is '.' then     // simple decimal integer followed by ..
		{ saves = DOT; tok = NUM; }
		is '0'..'9' then { StringBuf[k] = c-'0'; k += 1; state = DECF; }
		is '_' then {}
		is 'e','E' then state = EXP1;
		else { StringLen = 0; tok = FNUM; } // no fraction
	    is DECF then
		if c
		is '0'..'9' then { StringBuf[k] = c-'0'; k += 1; }
		is '_' then {}
		is 'e','E' then { StringLen = k; state = EXP1; }
		else { StringLen = k; tok = FNUM; }
	    is EXP1 then
		if c
		is '-' then { h = 0; neg = true; state = EXP2; }
		is '+' then { h = 0; neg = false; state = EXP2; }
		is '0'..'9' then { h = c-'0'; neg = false; state = EXP2; }
		else { /* FIXME - error */ state = FIRST; }
	    is EXP2 then
		if c
		is '0'..'9' then { h = h*10 + (c-'0'); }
		else
		{   var exp: _int;
		    exp = _int(h);
		    if neg then exp = -exp;
		    Scale = exp;
		    tok = ENUM;
		}
	    is CHR then
	    {	str = false;
		if c
		is '\'' then
		{   if k == 0 then { Error(BADCHR); state = FIRST; }
		    elif k == 1 then { Number = StringBuf[0]; tok = NUM; i += 1; }
		    else { StringLen = k; StringNul = false; tok = STR; i+= 1; }
		}
		is '\n' then { Error(BADNL); state = FIRST; }
		is '\\' then state = ESC;
		else
		{   if k < StringMax then { StringBuf[k] = c; k += 1; }
		    else Error(Errors.STRLONG);
		}
	    }
	    is STR then
	    {   str = true;
		if c
		is '"' then
		{   StringBuf[k] = 0;	// terminate
		    StringLen = k+1;
		    StringNul = true;
		    tok = STR; i += 1;
		}
		is '\n' then { Error(BADNL); state = FIRST; }
		is '\\' then state = ESC;
		else
		{   if k < StringMax then { StringBuf[k] = c; k += 1; }
		    else Error(Errors.STRLONG);
		}
	    }
	    is ESC then
		if c
		is '\n' then { Error(BADNL); state = FIRST; }	// NL in escape
		is 'x' then { h = 0; state = HEX1; }
		is 'u' then { h = 0; state = U161; }
		is 'U' then { h = 0; state = U321; }
		else
		{   if k < StringMax then { StringBuf[k] = EscChar(c); k += 1; }
		    else Error(STRLONG);
		    if str then  state = STR; else state = CHR;
		}
	    is HEX1, U161 .. U163, U321 .. U327 then
		if c
		is '\n' then { Error(BADNL); state = FIRST; }	// NL in escape
		else
		{   h = EscHex(c, h);
		    state += 1;	// WARNING: depends on consecutive state
		}
	    is HEX2 then
		if c
		is '\n' then { Error(BADNL); state = FIRST; }	// NL in escape
		else
		{   h = EscHex(c, h);
		    if k < StringMax then { StringBuf[k] = Char(h); k += 1; }
		    else Error(STRLONG);
		    if str then state = STR; else state = CHR;
		}
	    is U164, U328 then
		if c
		is '\n' then { Error(BADNL); state = FIRST; }	// NL in escape
		else
		{   h = EscHex(c, h);
		    k = StringRange(EscUTF8(h, k));
		    if str then state = STR; else state = CHR;
		}
	  exit tok != NONE;
	    if c == '\n' then
		f@.lineno += 1;
	    i += 1;
	}
	f@.cchar = i;
	Token = tok;
	return tok;
    }


    proc Keyword(toklist: @TokenList): TokenT
    {   var tok: TokenT;
	var i: _uint;

	if Token == ID then
	{   i = 0;
	    loop
	    {   tok = toklist[i];
	      exit tok == NONE;
		if zstr.eq(Ident, keywords[tok]@, IdentMax) then
		    return tok;
		i += 1;
	    }
	}
	return Token;
    }

    proc Expect(expect: TokenT): TokenT
    {   var tok: TokenT;
	var toklist: [2]TokenT;

	tok = Token;
	if expect > ID then
	{   toklist[0] = expect;
	    toklist[1] = NONE;
	    tok = Keyword(toklist);
	}
	if tok == expect then
	    tok = Next();
	else
	    ErrorT(EXPECT, expect);
	return tok;
    }

    // FIXME: temporary debugging aid
    proc WhereAmI(msg: @[]_byte)
    {
	err.str(msg);
	err.str(" line="); err.uint(Lineno());
	err.str(" tok=");
	err.str(keywords[Token]);
	if Token == ID then
	{   err.str(" \"");
	    err.str(Ident);
	    err.chr('"');
	}
	err.nl();
    }

    const plist: []TokenT = { PEND, NONE };
    const alist: []TokenT = { AEND, NONE };
    const glist: []TokenT = { GEND, NONE };

    proc Skip(toklist: @TokenList): TokenT
    {   var tok, ttok: TokenT;
	var i: _uint;

	tok = Next();
/*
WhereAmI("Skip start:");
err.str("\tlist=");
i = 0; loop
{  ttok = toklist[i];
  exit ttok == NONE;
   err.chr('"'); err.str(keywords[ttok]); err.str("\" ");
   i += 1;
}
err.nl();
*/
	ttok = ENDF;
	while tok != ENDF do
	{   i = 0;
	    loop
	    {   ttok = toklist[i];
	      exit ttok == NONE || tok == ttok;
	      exit ttok > ID && zstr.eq(Ident, keywords[ttok]@, IdentMax);
		i += 1;
	    }
	  exit ttok != NONE;
	    if tok	// handle nested constructs
	    is PBEG then tok = Skip(plist);
	    is ABEG then tok = Skip(alist);
	    is GBEG then tok = Skip(glist);
	    tok = Next();
	}
/*
WhereAmI("Skip end:");
err.str("\ttok="); err.str(keywords[tok]);
err.str(" ttok="); err.str(keywords[ttok]);
err.nl();
*/
	return ttok;
    }

    proc Want(toklist: @TokenList): TokenT
    {   var tok: TokenT;

	tok = Token;
	if tok != toklist[0] then
	{   ErrorT(EXPECT, toklist[0]);
	    tok = Skip(toklist);
	}
	return tok;
    }

}
// vim: ts=8 sw=4 noet nowrap

