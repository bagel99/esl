// Copyright (c) 2009-2018, Brian G. Lucas.  See LICENSE file.

package symb
{
    proc NewIntrinsic(name: @lex.Identifier, valu: IntrinsicT)
    {   var s: Symb;

	s = New(PROC, name, VISIBLE);
	s@.addr = OffsT(valu);  // store intrinsic index in addr field
    }

    proc NewLibrary(name: @lex.Identifier, rett: Type): Symb
    {   var s: Symb;
	var srv: Symb;

	s = New(PROC, name, VISIBLE);
	s@.linkage = EXTERN;
	if rett != 0 then
	{   srv = New(VAR, anonid, PRIVATE);
	    srv@.type = rett;
	    s@.retvlist = srv;
	    s@.type = rett;
	}
	return s;
    }

    proc AddLibFormal(s: Symb, t: Type)
    {   var fs, pfs, tfs: Symb;

	fs = symb.New(VAR, "_", PRIVATE);
	fs@.linkage = FORMAL;
	fs@.type = t;
	pfs = 0;
	tfs = s@.parmlist;
	while tfs != 0 do
	{   pfs = tfs;
	    tfs = tfs@.next;
	}
	if pfs == 0 then
	    s@.parmlist = fs;
	else
	    pfs@.next = fs;
    }

    proc InitDecl()
    {   var t, taddr: Type;
	var s, s0, s1: Symb;

	// predefined _boolean
	t = type.New(ENUM);
	t@.size = 1;
	s1 = New(CONSTANT, "true", PRIVATE);
	s1@.const = ast.Const(t, 1);
	s0 = New(CONSTANT, "false", PRIVATE);
	s0@.const = ast.Const(t, 0);
	s0@.next = s1;
	t@.list = s0;
	type.Final(t);
	s = New(TYPE, "_boolean", VISIBLE);
	s@.type = t;
	t@.name = s;
	t@.lo = 0;
	t@.hi = 1;
	type.booltype = t;	// internal use by compiler
	s = Clone(s, "boolean");	// user convenience
	// now expose the constants false and true
	s = New(CONSTANT, "false", VISIBLE);
	s@.type = t;
	s@.const = ast.Const(t, 0);
	s = New(CONSTANT, "true", VISIBLE);
	s@.type = t;
	s@.const = ast.Const(t, 1);

	// predefined _byte, _memory, _address
	type.bytetype = type.NewBuiltin(UINT, "_byte", target.ByteSize);
	type.memtype = type.NewBuiltin(ARRAY, "_memory", 0);
	type.memtype@.base = type.bytetype;
	type.memtype@.align = target.ByteSize;	// Fixup alignment
	type.memtype@.flex = true;
	taddr = type.NewBuiltin(REF, "_address", Target.ptr.size);
	taddr@.base = type.memtype;
	taddr@.align = Target.ptr.align;
	type.addrtype = taddr;

	// predefined _uint*, _int*
	type.wordtype = type.NewBuiltin(UINT, "_uint", Target.regsize);
	type.swordtype = type.NewBuiltin(SINT, "_int", Target.regsize);
	type.uintptrtype = type.NewBuiltin(UINT, "_uintptr", Target.ptr.size);
	type.uinttypes[0] = type.NewBuiltin(UINT, "_uint8",   8);
	type.inttypes[0]  = type.NewBuiltin(SINT, "_int8",    8);
	type.uinttypes[1] = type.NewBuiltin(UINT, "_uint16", 16);
	type.inttypes[1]  = type.NewBuiltin(SINT, "_int16",  16);
	type.uinttypes[2] = type.NewBuiltin(UINT, "_uint32", 32);
	type.inttypes[2]  = type.NewBuiltin(SINT, "_int32",  32);
	type.uinttypes[3] = type.NewBuiltin(UINT, "_uint64", 64);
	type.inttypes[3]  = type.NewBuiltin(SINT, "_int64",  64);
	if Target.isizes[4].size != 0 then
	{   type.uinttypes[4] = type.NewBuiltin(UINT, "_uint128", 128);
	    type.inttypes[4] = type.NewBuiltin(SINT, "_int128", 128);
	}

	// the float types
	type.floattypes[0] = type.NewBuiltin(FLOAT, "_float32", 32);
	type.floattypes[1] = type.NewBuiltin(FLOAT, "_float64", 64);
	type.floattype = type.floattypes[1];    // default

	// the "unknown" type
	type.unkntype = type.New(UTYPE);
	type.unkntype@.size = target.ByteSize;	// give it non-zero size
	type.unkntype@.align = target.ByteSize;	// and alignment

	// intrinsics
	NewIntrinsic("_defined", DEF);
	NewIntrinsic("_abs", ABS);
	NewIntrinsic("_min", MIN);
	NewIntrinsic("_max", MAX);
	NewIntrinsic("_clz", CLZ);
	NewIntrinsic("_clznz", CLZNZ);
	NewIntrinsic("_ctz", CTZ);
	NewIntrinsic("_ctznz", CTZNZ);
	NewIntrinsic("_pop", POP);
	NewIntrinsic("_new", NEW);
	NewIntrinsic("_delete", DEL);
	NewIntrinsic("_set", SET);
	NewIntrinsic("_zero", ZERO);
	NewIntrinsic("_zlen", ZLEN);
	NewIntrinsic("_packle", PACKLE);
	NewIntrinsic("_packbe", PACKBE);
	NewIntrinsic("_unpkle", UNPKLE);
	NewIntrinsic("_unpkbe", UNPKBE);
	NewIntrinsic("_rol", ROL);
	NewIntrinsic("_ror", ROR);
	NewIntrinsic("_bswap", BSWAP);
	NewIntrinsic("_bitrev", BITREV);
	NewIntrinsic("_sqrt", SQRT);
	NewIntrinsic("_lo", LO);
	NewIntrinsic("_hi", HI);
	NewIntrinsic("_splice", SPLICE);

	// library routines
	libnew = NewLibrary("memalloc", taddr);
	AddLibFormal(libnew, type.wordtype);
	AddLibFormal(libnew, type.wordtype);
	AddLibFormal(libnew, type.wordtype);
	libdel = NewLibrary("memfree", 0);
	AddLibFormal(libdel, taddr);
	AddLibFormal(libdel, type.wordtype);
	AddLibFormal(libdel, type.wordtype);
    }

    proc InitTargetName()
    {   var i, n: _uint;
	var tname: [32]_byte;	// warning, fixed size
	var c: Char;
	var s: Symb;

	tname[0:8] = '_target_';
	n = zstr.len(target.TargetName@, 32);
	n = _min(n, 31-8);
	for i from 0 to n-1 do
	{   c = target.TargetName[i];
	    if c
	    is 'A'..'Z', 'a'..'z', '0'..'9' then ;
	    else c = '_';
	    tname[i+8] = c;
	}
	tname[n+8] = 0;
	s = New(CONSTANT, tname, VISIBLE);
	s@.type = type.booltype;
    }

    proc Init()
    {
	level = 0;
	symbs[0].frst = 0;
	symbs[0].last = 0;
	InitDecl();
	InitTargetName();
    }

    proc DumpST(s: Symb, full: boolean)
    {
	err.str(s@.ident);
	err.chr(':');
	type.DumpT(s@.type, full);
    }

    proc DumpFormals(ss: Symb)
    {
	err.chr('(');
	if ss != 0 then
	{   loop
	    {   DumpST(ss, false);
		ss = ss@.next;
	      exit ss == 0;
		err.str(", ");
	    }
	}
	err.chr(')');
    }

    proc DumpReturns(srv: Symb)
    {
	if srv != 0 then
	{   err.chr('(');
	    loop
	    {   DumpST(srv, false);
		srv = srv@.next;
	      exit srv == 0;
		err.chr(',');
	    }
	    err.chr(')');
	}
    }

    proc DumpLinkage(s: Symb)
    {
	if s@.linkage
	is GLOBAL then
	{   err.str(": global");
	}
	is EXTERN then
	{   err.str(": external");
	}
	is FIXED then
	{   err.str(": fixed(");
	    err.hex64(s@.xaddr);
	    err.chr(')');
	    return;
	}
	if s@.altsymb != 0 then
	{   err.str("(\"");
	    err.str(s@.altsymb@.ident);
	    err.str("\")");
	}
    }

    proc DumpS(s: Symb)
    {
	if s@.kind
	is CONSTANT then
	{   err.str("constant "); DumpST(s, false);
	    if s@.type != 0 && s@.type@.kind <= REF && s@.const != 0 then
	    {   err.chr('=');
		err.hex64(s@.const@.valu);
	    }
	}
	is TYPE then { err.str("type "); DumpST(s, true); }
	is VAR then  { err.str("var ");  DumpST(s, false); DumpLinkage(s); }
	is FIELD then     { err.str("field "); err.str(s@.ident);}
	is PROC then
	{   if s@.addr == 0 then
	    {   err.str("proc ");
		err.str(s@.ident);
		DumpFormals(s@.parmlist);
		DumpReturns(s@.retvlist);
	    }
	    else
	    {   err.str("intrinsic ");
		err.str(s@.ident);
		err.str("()");
	    }
	    DumpLinkage(s);
	}
	is PACK then      { err.str("package "); err.str(s@.ident);}
	is ALIAS then
	{   err.str("alias ");
	    err.str(s@.ident);
	    err.str(" to ");
	    err.str(s@.symblist@.ident);
	}
	is STRING then
	{   err.str("string ");
	    err.str(s@.ident);
	}
	else
	{   err.str("undefined "); err.str(s@.ident);
	}
	if s@.forward then err.str(" (forward)");
	if !s@.visible then err.str(" (invisible)");
	err.nl();
    }

    proc Dump(n: levels)
    {   var stop, i: _uint; // FIXME levels;
	var s: Symb;

	if level < n then
	   stop = 0;
	else
	   stop = level + 1 - n;
	i = level;
	loop
	{
	    err.str("*** level "); err.uint(i);
	    if symbs[i].pkg != 0 then
	    {   err.str(" package ");  err.str(symbs[i].pkg@.ident);
	    }
	    err.str(" ***\n");
	    s = symbs[i].frst;
	    while s != 0 do
	    {   DumpS(s);
		s = s@.next;
	    }
	  exit i <= stop;
	    i -= 1;
	}

    }
}
// vim: ts=8 sw=4 noet nowrap

