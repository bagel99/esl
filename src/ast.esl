// Copyright (c) 2009-2018, Brian G. Lucas.  See LICENSE file.

package ast
{
    type Op:
    (
	NULL,	NOP,
	FILE,		// source file boundary
	PACKAGE,	// package boundary
	DCLVAR,		// variable declaration
	DCLCON,		// constant declaration (for aggregates)
	CONST,	FCON,	SCON,	CLIST,	CRANGE,
	FIELD,	VAR,
	OFFSET,	INDEX,	SLICE,	BYREF,
	CAST,	CALL,	CALLI,	ASM,
	SET,	COPY,	MOVE,	AEQ,	ANE,	// record and array ops
	GETRV,	LOAD,	STORE,
	// unary ops
	ZEXT,   SEXT,   TRUNC,	ZEXTB,	SEXTB,	TRUNCB,
	BSWAP,	BITREV,
	CLZ,	CLZNZ,	CTZ,	CTZNZ,	POP,
	NEG,	NOT,	ABS,	SQRT,	ZLEN,
	FNEG,   FCVTL,  FCVTS,
	CVTUF,	CVTIF,  CVTFU,	CVTFI,
	// binary ops
	AND,    OR,     XOR,
	ADD,    SUB,	MUL,    DIV,    MOD,
	UMIN,	UMAX,	SMIN,	SMAX,		// sequential
	LSL,    LSR,	ASL,    ASR,	ROL,    ROR,
	EQ,     NE,	ULT,    UGT,    ULE,    UGE,
			SLT,    SGT,    SLE,    SGE,
	FEQ,    FNE,    FLT,    FGT,    FLE,    FGE,
	FADD,	FSUB,	FMUL,	FDIV,	FREM,
	FMIN,   FMAX, 				// sequential
	BAND,   BOR,	BNOT,
	IFEXPR,		// select expression
	SEQ,	LOOP,	EXIT,
	IF,		// one or two arm if
	SEL,		// select, multi-arm if
	IS,		// one arm of a select
	RET,		// return value
	PROC,		// procedure
	ASSERT		// assertion
    );
    const NumChildDefault: [Op]0..255 =
    {   [NULL]=	  0,	[NOP]=	  1,
	[FILE]=   1,	[PACKAGE]=1,
	[DCLVAR]= 1,	[DCLCON]= 1,
	[CONST]=  0,	[FCON]=   0,	[SCON]=   0,
	[CLIST]=  8,	[CRANGE]= 2,
	[FIELD]=  2,    [VAR]=    0,
	[OFFSET]= 1,	[INDEX]=  2,	[SLICE]=  3,	[BYREF]=  1,
	[CAST]=   1,	[CALL]=   4,	[CALLI]=  5,	[ASM]=    5,
	[SET]=    4,
	[COPY]=   4,	[MOVE]=   4,	[AEQ]=    4,	[ANE]=    4,
	[GETRV]=  1,	[LOAD]=   1,	[STORE]=  2,
	[ZEXT]=   1,	[SEXT]=   1,	[TRUNC]=  1,
	[ZEXTB]=   1,	[SEXTB]=   1,	[TRUNCB]=  1,
	[BSWAP]=  1,    [BITREV]= 1,
	[CLZ]=    1,	[CLZNZ]=  1,	[CTZ]=    1,	[CTZNZ]=  1,
	[POP]=    1,	[NEG]=    1,	[NOT]=    1,	[ABS]=	  3,
        [SQRT]=   1,	[ZLEN]=   2,
	[FNEG]=   1,    [FCVTL]=  1,    [FCVTS]=  1,
	[CVTUF]=  1,	[CVTIF]=  1,	[CVTFU]=  1,	[CVTFI]=  1,
	[AND]=	  2,    [OR]=	  2,	[XOR]=	  2,
	[ADD]=	  2,	[SUB]=    2,
	[MUL]=	  2,    [DIV]=	  2,    [MOD]=	  2,
	[UMIN]=   3,	[UMAX]=   3,	[SMIN]=   3,	[SMAX]=   3,
	[LSL]=	  2,    [LSR]=	  2,	[ASL]=	  2,    [ASR]=	  2,
	[ROL]=    2,    [ROR]=    2,
	[EQ]=	  2,    [NE]=     2,
	[ULT]=	  2,    [UGT]=	  2,    [ULE]=	  2,    [UGE]=	  2,
	[SLT]=	  2,	[SGT]=	  2,    [SLE]=	  2,    [SGE]=	  2,
	[FEQ]=    2,    [FNE]=    2,
	[FLT]=	  2,	[FGT]=	  2,    [FLE]=	  2,    [FGE]=	  2,
	[FADD]=   2,	[FSUB]=   2,
	[FMUL]=   2,	[FDIV]=   2,	[FREM]=   2,
	[FMIN]=   3,	[FMAX]=   3,
	[BAND]=	  2,	[BOR]=	  2,	[BNOT]=	  2,
	[IFEXPR]= 3,
	[SEQ]=    8,	[LOOP]=   1,	[EXIT]=   2,
	[IF]=     3,	[SEL]=    8,	[IS]=     4,
	[RET]=    1,	[PROC]=   3,    [ASSERT]= 1
    };
    type NSubNodes: _uint32;
    type AstNode:
    {
	op:	Op;		// what kind of node is this
	lineno:	_uint16;	// source code line number
	seqno:	_uint16;	// used by LLVM
	width:	type.BitSize;	// current width in bits
	num:	NSubNodes;	// number of subnodes
	max:	NSubNodes;	// maximum allocated slots for subnode
	type:	Type;
	symb:	Symb;
	valu:	type.Valu;
	child:	[]@AstNode;
    };
    type Ast: @AstNode;

    var Null: Ast;


    const OpName: [Op]@[]Char =
    {   [NULL]=  "NULL",	[NOP]=   "NOP",
	[FILE]=  "FILE",	[PACKAGE]="PACKAGE",
	[DCLVAR]="DCLVAR",	[DCLCON]="DCLCON",
	[CONST]= "CONST",	[FCON]=  "FCONST",
	[SCON]=  "STRCON",
	[CLIST]= "CLIST",	[CRANGE]="CRANGE",
	[FIELD]= "FIELD",	[VAR]=   "VAR",
	[OFFSET]="OFFSET",	[INDEX]= "INDEX",
	[SLICE]= "SLICE",	[BYREF]= "BYREF",
	[CAST]=  "CAST",
	[CALL]=  "CALL",	[CALLI]= "CALLI",
	[ASM]=   "ASM",
	[SET]=   "SET",
	[COPY]=  "COPY",	[MOVE]=  "MOVE",
	[AEQ]=   "AEQ",		[ANE]=   "ANE",
	[GETRV]= "GETRV",
	[LOAD]=  "LOAD",	[STORE]= "STORE",
	[ZEXT]=  "ZEXT",	[SEXT]=  "SEXT",	[TRUNC]= "TRUNC",
	[ZEXTB]= "ZEXTB",	[SEXTB]= "SEXTB",	[TRUNCB]="TRUNCB",
	[BSWAP]= "BSWAP",	[BITREV]="BITREV",
	[CLZ]=   "CLZ",		[CLZNZ]= "CLZNZ",
	[CTZ]=   "CTZ",		[CTZNZ]= "CTZNZ",
	[POP]=   "POP",
	[NEG]=   "NEG",		[NOT]=   "NOT",		[ABS]=   "ABS",
	[SQRT]=  "SQRT",	[ZLEN]=  "ZLEN",
	[FNEG]=  "FNEG",	[FCVTL]= "FCVTL",       [FCVTS]= "FCVTS",
	[CVTUF]= "CVTUF",	[CVTIF]= "CVTIF",
	[CVTFU]= "CVTFU",	[CVTFI]= "CVTFI",
	[AND]=   "AND",		[OR]=    "OR",		[XOR]=   "XOR",
	[ADD]=   "ADD",		[SUB]=   "SUB",
	[MUL]=   "MUL",		[DIV]=   "DIV",		[MOD]=   "MOD",
	[UMIN]=  "UMIN",	[UMAX]=  "UMAX",
	[SMIN]=  "SMIN",	[SMAX]=  "SMAX",
	[LSL]=   "LSL",		[LSR]=   "LSR",
	[ASL]=   "ASL",		[ASR]=   "ASR",
	[ROL]=   "ROL",		[ROR]=   "ROR",
	[EQ]=    "EQ",		[NE]=    "NE",
	[ULT]=   "ULT",		[UGT]=   "UGT",
	[ULE]=   "ULE",		[UGE]=   "UGE",
	[SLT]=   "SLT",		[SGT]=   "SGT",
	[SLE]=   "SLE",		[SGE]=   "SGE",
	[FEQ]=   "FEQ",		[FNE]=   "FNE",
	[FLT]=   "FLT",		[FGT]=   "FGT",
	[FLE]=   "FLE",		[FGE]=   "FGE",
	[FADD]=  "FADD",	[FSUB]=  "FSUB",
	[FMUL]=  "FMUL",	[FDIV]=  "FDIV",	[FREM]=  "FREM",
	[FMIN]=  "FMIN",	[FMAX]=  "FMAX",
	[BAND]=  "BAND",	[BOR]=   "BOR",		[BNOT]=  "BNOT",
	[IFEXPR]="IFEXPR",
	[SEQ]=   "SEQ",		[LOOP]=  "LOOP",	[EXIT]=  "EXIT",
	[IF]=    "IF",		[SEL]=   "SEL",		[IS]=    "IS",
	[RET]=   "RET",
	[PROC]=  "PROC",	[ASSERT]="ASSERT"
    };

    proc Print(node: Ast)
    {   var s: Symb;
	var t: Type;

	t = node@.type;
	if node@.op == ASM then t = 0;	// ASM overloads to point to typelist
	err.str(OpName[node@.op]);
	err.str("(sz=");
	err.uint(node@.width);
	err.str(" ln=");
	err.uint(node@.lineno);
	err.str(" nc=");
	err.uint(node@.num);
	if node@.op
	is OFFSET, COPY, GETRV, CLZ, CTZ then
	{   err.str(" val=");
	    err.uint64(node@.valu);
	}
	is CONST then
	{   err.str(" val=");
	    if node@.type@.kind == SINT then
		err.int64(_int64(node@.valu));
	    else
		err.uint64(node@.valu);
	}
	is FCON then
	{   err.str(" val=");
	    err.hex64(node@.valu);
	}
	is SCON then
	{   err.str(" id ");
	    err.uint32(_uint32(node@.valu));
	    err.str(" val=\"");
	    err.strn(node@.symb@.ident, node@.type.Span()-1);
	    err.chr('"');
	}
	is DCLVAR, VAR, PROC, CALL, FILE, PACKAGE then
	{
	    err.str(" name=");
	    s = node@.symb;
	    if s != 0 then
		err.str(s@.ident);
	    else
		err.str("*NULL*");
	}
	is FIELD then
	{   err.str(" bits=");
	    err.uint64(node@.valu);
	}
	err.chr(')');
	if t != 0 then
	{   err.chr(':');
	    type.DumpT(t, false);
	}
	err.nl();
    }

    const blanks:[]_byte =
	"                                                                ";

    proc DumpSub(tree: Ast, level:_uint)
    {   var i: NSubNodes;

	sys.write(2, blanks, level);
	if tree == 0 then
	    err.str("*NULL*\n");
	else
	{   Print(tree);
	    i = 0;
	    while i < tree@.num do
	    {
		DumpSub(tree@.child[i], level+1);
		i += 1;
	    }
	}
    }

    proc Dump(tree: Ast)
    {
	DumpSub(tree, 0);
    }

    proc IsConstVal(p: Ast, val: Valu): boolean
    {
	return p@.op == CONST && p@.valu == val;
    }

    proc Alloc(op:Op, nc:NSubNodes): Ast
    {   var pa: Ast;

	pa = Ast(sys.zalloc(AstNode?size + nc * Ast?size));
	pa@.op = op;
	pa@.lineno = lex.Lineno();
	pa@.num = 0;
	pa@.max = nc;
	return pa;
    }

    proc Dup(from: Ast): Ast
    {   var pa: Ast;
	var i: _uint;

	pa = Ast(sys.zalloc(AstNode?size + from@.max * Ast?size));
	pa@ = from@;	// record copy
	i = 0;
	while i < from@.num do
	{   pa@.child[i] = from@.child[i];
	    i += 1;
	}
	pa@.lineno = lex.Lineno();
	return pa;
    }

    proc Expand(po: Ast, newsize:NSubNodes): Ast
    {   var pn: Ast;
	var size, i: NSubNodes;

	size = po@.max;
	while size < newsize do
	{   if size >= 16 then
		size += 16;
	    else
		size = 2 * size;
	}
	pn = Alloc(po@.op, size);
	pn@ = po@;	// record copy
	i = 0;
	while i < po@.max do
	{   pn@.child[i] = po@.child[i];
	    i += 1;
	}
	pn@.max =   size;
	return pn;
    }

    proc New(op:Op, t:type.Type): Ast
    {   var pa: Ast;

	pa = Alloc(op, NumChildDefault[op]);
	pa@.type = t;
	if t != 0 then
	    pa@.width = t@.width;
	return pa;
    }

    proc New1(op:Op, t:type.Type, pc0:Ast): Ast
    {   var pa: Ast;
	var n: NSubNodes;

	n = NumChildDefault[op];
	if n < 1 then
	    n = 1;
	pa = Alloc(op, n);
	pa@.child[0] = pc0;
	pa@.num = 1;
	pa@.type = t;
	if pc0 != 0 then
	    pa@.width = pc0@.width;
	return pa;
    }

    proc New2(op:Op, t:type.Type, pc0:Ast, pc1:Ast): Ast
    {   var pa: Ast;
	var n: NSubNodes;

	n = NumChildDefault[op];
	if n < 2 then
	    n = 2;
	pa = Alloc(op, n);
	pa@.child[0] = pc0;
	pa@.child[1] = pc1;
	pa@.num = 2;
	pa@.type = t;
	if pc0 != 0 then
	    pa@.width = pc0@.width;
	return pa;
    }

    proc New3(op:Op, t:type.Type, pc0:Ast, pc1:Ast, pc2:Ast): Ast
    {   var pa: Ast;
	var n: NSubNodes;

	n = NumChildDefault[op];
	if n < 3 then
	    n = 3;
	pa = Alloc(op, n);
	pa@.child[0] = pc0;
	pa@.child[1] = pc1;
	pa@.child[2] = pc2;
	pa@.num = 3;
	pa@.type = t;
	if pc0 != 0 then
	    pa@.width = pc0@.width;
	return pa;
    }

    proc New4(op:Op, t:type.Type, pc0:Ast, pc1:Ast, pc2:Ast, pc3: Ast): Ast
    {   var pa: Ast;
	var n: NSubNodes;

	n = NumChildDefault[op];
	if n < 4 then
	    n = 4;
	pa = Alloc(op, n);
	pa@.child[0] = pc0;
	pa@.child[1] = pc1;
	pa@.child[2] = pc2;
	pa@.child[3] = pc3;
	pa@.num = 4;
	pa@.type = t;
	if pc0 != 0 then
	    pa@.width = pc0@.width;
	return pa;
    }

    proc Child(pp:Ast, pc:Ast): Ast
    {   var n: NSubNodes;

	if pp != 0 then
	{   n = pp@.num + 1;
	    if n > pp@.max then
		pp = Expand(pp, n);
	    pp@.child[pp@.num] = pc;
	    pp@.num = n;
	}
	return pp;
    }

    proc ChildIndexed(pp:Ast, n:NSubNodes, pc:Ast): Ast
    {
	n += 1;
	if n > pp@.max then
	    pp = Expand(pp, n);
	pp@.child[n-1] = pc;
	if n > pp@.num then
	    pp@.num = n;
	return pp;
    }

    proc Const(t: Type, value: type.Valu): Ast
    {   var pa: Ast;

	if t@.kind == FLOAT then
	    pa = New(FCON, t);
	else
	    pa = New(CONST, t);
	pa@.valu = value;
	if t != 0 then
	    pa@.width = t@.width;
	return pa;
    }

    proc ConstW(value: type.Valu): Ast
    {   var pa: Ast;

	pa = New(CONST, type.wordtype);
	pa@.valu = value;
	pa@.width = type.wordtype@.width;
	return pa;
    }

    proc OpIfExpr(ctree: Ast, ttree: Ast, ftree: Ast, t: Type): Ast
    {   var tree: Ast;

	if ctree@.op == CONST then
	{   if ctree@.valu != 0 then
		tree = ttree;
	    else
		tree = ftree;
	}
	else
	    tree = New3(IFEXPR, ttree@.type, ctree, ttree, ftree);
	tree@.width = t@.width;
	return tree;
    }

    proc CheckConstTruncate(node: Ast, size: type.BitSize)
    {
	// assert node@.op == CONST
	if size >= type.Valu?bits then return;
	if node@.type@.kind
	is SINT then
	{   if type.SValu(node@.valu) < 0 then
	    {   if type.SValu(node@.valu) >> (size+1) != -1 then
		    lex.Error(TRUNC);
	    }
	    else
	    {   if node@.valu >> (size+1) != 0 then
		    lex.Error(TRUNC);
	    }
	}
	is FLOAT then {}    // just ignore for now
	else
	{   if node@.valu >> size != 0 then
		lex.Error(TRUNC);
	}
    }

    proc Trunc(tree: Ast, t: Type): Ast
    {
	tree = New1(TRUNC, t, tree);
	tree@.width = t@.size;
        return tree;
    }

    // Warning: if node is CONST and is referenced more than once in
    // the DAG, bad things may happen.
    proc Extend(tree: Ast, size: type.BitSize, iscast: boolean): Ast
    {
	if tree@.width < size then
	{   if tree@.op != CONST && tree@.op != FCON then
	    {   if tree@.type@.kind
		is FLOAT then
		    tree = New1(FCVTL, tree@.type, tree);
		is SINT then
		    tree = New1(SEXT, tree@.type, tree);
		else
		    tree = New1(ZEXT, tree@.type, tree);
	    }
	    tree@.width = size;
	}
	else if tree@.width > size then
	{
	    if tree@.op != CONST && tree@.op != FCON then
	    {   if tree@.type@.kind == FLOAT then
		    tree = New1(FCVTS, tree@.type, tree);
		else
		    tree = New1(TRUNC, tree@.type, tree);
		if feature.trunc && !iscast then lex.Error(TRUNC);
	    }
	    else
		CheckConstTruncate(tree, size);
	    tree@.width = size;
	}
	return tree;
    }

    proc ExtendT(tree: Ast, t: Type): Ast
    {
	tree = Extend(tree, t@.width, false);
	tree@.type = t;
	return tree;
    }

    proc ExtendCast(tree: Ast, t: Type): Ast
    {
	if tree.op == FIELD then
	{   // don't extend FIELD here, just preserve it with a NOP
	    tree = New1(NOP, tree@.type, tree);
	}
	else
	    tree = Extend(tree, t@.width, true);
	tree@.type = t;
	return tree;
    }

    proc Cast(tree: Ast, to: Type): Ast
    {   var ok: boolean;
	var fm: Type;

	if tree == 0 then return tree;
	fm = tree@.type;
	ok = true;
	if to@.kind
	is ENUM then
	{   if fm@.kind
	    is ENUM, UINT then			// ENUM, UINT -> ENUM
		tree = ExtendCast(tree, to);
	    else
		ok = false;
	}
	is UINT then
	{   if fm@.kind
	    is ENUM, UINT, SINT then		// ENUM|UINT|SINT -> UINT
		tree = ExtendCast(tree, to);
	    is REF then				// REF -> UINT
	    {   tree = New1(CAST, to, tree);
		tree@.width = to@.size;	// FIXME: width?
	    }
	    is RECORD, ARRAY then		// PACKED -> UINT
	    {   if fm@.packed && tree@.width == to@.size then
		    tree@.type = to;
		else
		    ok = false;
	    }
	    is FLOAT then
	    {   tree = New1(CAST, to, tree);
		tree@.width = to@.width;
	    }
	    else
		ok = false;
	}
	is SINT then
	{   if fm@.kind
	    is UINT, SINT then			// UINT|SINT -> SINT
		tree = ExtendCast(tree, to);
	    else
		ok = false;
	}
	is FLOAT then
	{   if fm@.kind == UINT then
	    {	if tree@.op == CONST then
		{   var val: _uint64;
		    val = tree@.valu;
		    if to@.size == 32 then
		    {	// Must convert to internal 64 bit form
			val = ((val << 32) & 0xFF800000_00000000) |
			      ((val << 29) & 0x000FFFFF_00000000);
		    }
		    tree = New(FCON, to);
		    tree.valu = val;
		}
		else
		{   tree = New1(CAST, to, tree);
		    tree@.width = to@.width;
		}
	    }
	    else
		ok = false;
	}
	is REF then
	{   if fm@.kind
	    is REF then				// REF -> REF
	    {   tree = New1(CAST, to, tree);
		tree@.width = Target.ptr.size;
	    }
	    is UINT then			// UINT -> REF
	    {   if tree@.width != Target.ptr.size then lex.Error(BADINTPTR);
		tree = New1(CAST, to, tree);
		tree@.width = to@.size;	// FIXME: width?
	    }
	    is ARRAY then	// cast from slice of memory
	    {   if tree@.op == LOAD then
		    tree = tree@.child[0];	// undo load
		// Should check for large enough slice?
		if tree@.op == SLICE && tree@.type@.base@.base == type.bytetype then
		{   tree = New1(CAST, to, tree);
		    tree@.width = to@.size;	// width?
		}
		else
		    ok = false;
	    }
	    else
		ok = false;
	}
	is RECORD, ARRAY then
	{   if to@.packed && fm@.kind == UINT then
		tree = ExtendCast(tree, to);
	    else
		ok = false;
	}
	if !ok then
	{   lex.Error(BADCAST);
err.str("fm="); type.DumpT(fm, false);
err.str("\nto="); type.DumpT(to, false); err.nl();
	}
	return tree;
    }

    proc ForceBoolean(tree: Ast): Ast
    {
	if tree@.type != 0 && !type.Compat(tree@.type, type.booltype) then
	    lex.Error(WANTBOOL);
	if tree@.width > 1 then		// llvm wants a 1-bit boolean
	{   if tree@.op != CONST then
		tree = New2(NE, type.booltype, tree, Const(tree@.type, 0));
	    tree@.width = 1;
	}
	return tree;
    }

    // Until all hosts have the popcnt instruction
    proc popcnt(x: type.Valu): _uint
    {   var n: _uint;

	n = 0;
	while x != 0 do
	{   n += 1;
	    x = x & (x-1);
	}
	return n;
    }

    proc OpUnary(op:Op, rhs:Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if rhs != 0 then
	{   if rhs@.op == CONST then	// constant folding
	    {   if op
		is NEG  then rhs@.valu = type.Valu(-rhs@.valu);
		is NOT  then rhs@.valu = ~rhs@.valu;
		is BNOT then rhs@.valu = rhs@.valu ^ 1;
		is ABS  then
		{   if rhs@.type@.kind == SINT && type.SValu(rhs@.valu) < 0 then
			rhs@.valu = type.Valu(-type.SValu(rhs@.valu));
		}
		is CLZ, CLZNZ  then
		{   if rhs@.valu == 0 then
			rhs@.valu = rhs@.width;
		    else
			rhs@.valu = _clznz(rhs@.valu) -
			    (Valu?size*target.ByteSize - rhs@.width);
		}
		is CTZ, CTZNZ  then
		{   if rhs@.valu == 0 then
			rhs@.valu = 0;
		    else
			rhs@.valu = _ctznz(rhs@.valu);
		}
		is POP  then rhs@.valu = _pop(rhs@.valu);
		else lex.ErrorS(COMPILER, "Unhandled unary operation");
		tree = rhs;
	    }
	    elif rhs@.op == FCON && op == FNEG then
	    {   rhs@.valu = _uint64(-_float64(rhs@.valu));
		tree =  rhs;
	    }
	    else
		tree = New1(op, rhs@.type, rhs);
	}
	return tree;
    }

    // BAND, BOR
    proc OpBool(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   lhs = ForceBoolean(lhs);
	    rhs = ForceBoolean(rhs);
	    if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared
		tree = ast.Const(lhs@.type, lhs@.valu);
	        if op
		is BOR  then tree@.valu = tree@.valu | rhs@.valu;
		is BAND then tree@.valu = tree@.valu & rhs@.valu;
	    }
	    else
		tree = New2(op, type.booltype, lhs, rhs);
	}
	return tree;
    }

    proc OpBinary(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {
	var sl, sr: type.BitSize;

	sl = lhs@.width;
	sr = rhs@.width;
	// make LHS as wide as result wants it
	if t != 0 && t@.width > sl then
	{  lhs = ExtendT(lhs, t);
	   sl = t@.width;
	}
	if sl > sr then
	    rhs = Extend(rhs, sl, false);
	else if sr > sl then
	    lhs = Extend(lhs, sr, false);
	return New2(op, lhs@.type, lhs, rhs);
    }

    // EQ, NE, ULT, UGT, ULE, UGE, SLT, SGT, SLE, SGE
    proc OpCompare(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared, assume LHS
		tree = ast.Const(lhs@.type, lhs@.valu);
	        if op
		is EQ then  tree@.valu = _uint(tree@.valu == rhs@.valu);
		is NE then  tree@.valu = _uint(tree@.valu != rhs@.valu);
		is ULT then tree@.valu = _uint(tree@.valu < rhs@.valu);
		is UGT then tree@.valu = _uint(tree@.valu > rhs@.valu);
		is ULE then tree@.valu = _uint(tree@.valu <= rhs@.valu);
		is UGE then tree@.valu = _uint(tree@.valu >= rhs@.valu);
		is SLT then
		    tree@.valu = _uint(type.SValu(tree@.valu) < type.SValu(rhs@.valu));
		is SGT then
		    tree@.valu = _uint(type.SValu(tree@.valu) > type.SValu(rhs@.valu));
		is SLE then
		    tree@.valu = _uint(type.SValu(tree@.valu) <= type.SValu(rhs@.valu));
		is SGE then
		    tree@.valu = _uint(type.SValu(tree@.valu) >= type.SValu(rhs@.valu));
	    }
	    else
	    {   // FIXME: all the kinds should be examined for legality
		// for the various ops
		if lhs@.type@.kind == REF || lhs@.type@.kind == REFPROC then
		{   if rhs@.op == CONST then
		    {   if op == EQ || op == NE then
			    rhs@.width = Target.ptr.size;
		    }
		    // Do this here to skip extending stuff
		    tree = New2(op, lhs@.type, lhs, rhs);
		}
		else
		    tree = OpBinary(op, lhs, rhs, 0);
	    }
	    tree@.type = type.booltype;
	    tree@.width = 1;
	}
	return tree;
    }

    // ADD, SUB
    proc OpAdd(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared
		tree = ast.Const(lhs@.type, lhs@.valu);
		if op
		is ADD then tree@.valu += rhs@.valu;
		is SUB then tree@.valu -= rhs@.valu;
	    }
	    else
		tree = OpBinary(op, lhs, rhs, t);
	}
	return tree;
    }

    proc OpShfL(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;
	var result: Valu;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if rhs@.type@.kind != UINT then
		lex.ErrorS(OPTYPE, "shift count");
	    else
	    {   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
		{   // new CONST in case it is shared
		    tree = ast.Const(lhs@.type, lhs@.valu);
		    tree@.valu = tree@.valu << rhs@.valu;
		}
		else
		    tree = OpBinary(op, lhs, rhs, t);
	    }
	}
	return tree;
    }

    proc OpShfR(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;
	var result: Valu;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if rhs@.type@.kind != UINT then
		lex.ErrorS(OPTYPE, "shift count");
	    else
	    {   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
		{   // new CONST in case it is shared
		    tree = ast.Const(lhs@.type, lhs@.valu);
		    if op
		    is LSR then tree@.valu = tree@.valu >> rhs@.valu;
		    is ASR then tree@.valu = Valu(type.SValu(tree@.valu) >> rhs@.valu);
		}
		else
		    tree = OpBinary(op, lhs, rhs, t);
	    }
	}
	return tree;
    }

    proc OpMul(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared
		tree = ast.Const(lhs@.type, lhs@.valu);
	        if op
		is MUL then tree@.valu = tree@.valu * rhs@.valu;
		is LSL,ASL then tree@.valu = tree@.valu << rhs@.valu;
	    }
	    else
		tree = OpBinary(op, lhs, rhs, t);
	}
	return tree;
    }

    proc OpDiv(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared
		tree = ast.Const(lhs@.type, lhs@.valu);
	        if op
		is DIV then tree@.valu = tree@.valu / rhs@.valu;
		is MOD then tree@.valu = tree@.valu % rhs@.valu;
		is LSR then tree@.valu = tree@.valu >> rhs@.valu;
		is ASR then tree@.valu = Valu(type.SValu(tree@.valu) << rhs@.valu);
	    }
	    else
		tree = OpBinary(op, lhs, rhs, t);   // FIXME - widen not needed
//		tree = OpBinary(op, lhs, rhs, 0);
	}
	return tree;
    }

    // MIN, MAX
    proc OpMinMax(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared, assume LHS
		tree = ast.Const(lhs@.type, lhs@.valu);
		if op
		is UMIN then
		{   if rhs@.valu < lhs.valu then tree.valu = rhs.valu;
		}
		is UMAX then
		{   if rhs@.valu > lhs.valu then tree.valu = rhs.valu;
		}
		is SMIN then
		{   if type.SValu(rhs@.valu) < type.SValu(lhs.valu) then
			tree.valu = rhs.valu;
		}
		is SMAX then
		{   if type.SValu(rhs@.valu) > type.SValu(lhs.valu) then
			tree.valu = rhs.valu;
		}
	    }
	    else
		tree = OpBinary(op, lhs, rhs, 0);
	}
	return tree;
    }

    // AND, OR, XOR
    proc OpLogic(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   // new CONST in case it is shared, assume LHS
		tree = ast.Const(lhs@.type, lhs@.valu);
	        if op
		is OR then  tree@.valu = tree@.valu | rhs@.valu;
		is XOR then tree@.valu = tree@.valu ^ rhs@.valu;
		is AND then tree@.valu = tree@.valu & rhs@.valu;
	    }
	    else
		tree = OpBinary(op, lhs, rhs, 0);
	}
	return tree;
    }

    // FADD, FSUB, FMUL, FDIV, FREM, FMIN, FMAX
    proc OpFloat(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;
	var sl, sr: type.BitSize;

	// LHS known to be FLOAT, so must the RHS
	if rhs@.type@.kind != FLOAT then
	{   lex.ErrorS(OPTYPE, "floating point operation");
	    return lhs;
	}
	tree = 0;
	// FIXME - constant folding
	if rhs@.op == FCON then
	{   if lhs@.op == FCON then
	    {	// new CONST in case it is shared
		tree = ast.Const(lhs@.type, lhs.valu);
		if op
		is FADD then
		    tree.valu = _uint64(_float64(lhs.valu) + _float64(rhs.valu));
		is FSUB then
		    tree.valu = _uint64(_float64(lhs.valu) - _float64(rhs.valu));
		is FMUL then
		    tree.valu = _uint64(_float64(lhs.valu) * _float64(rhs.valu));
		is FDIV then
		    tree.valu = _uint64(_float64(lhs.valu) / _float64(rhs.valu));
		is FMIN then
		    tree.valu = _uint64(_min(_float64(lhs.valu),_float64(rhs.valu)));
		is FMAX then
		    tree.valu = _uint64(_max(_float64(lhs.valu),_float64(rhs.valu)));
		else	// FREM not supported
		    lex.Error(OPTYPE);
		return tree;
	    }
	    else	// rhs is FCON so change width to that of lhs
	    {	rhs@.type = lhs@.type;
		rhs@.width = lhs@.width;
	    }
	}
	sl = lhs@.width;
	sr = rhs@.width;
//err.str("sl="); err.uint(sl); err.str(" sr="); err.uint(sr); err.nl();
	// make LHS as wide as result wants it
	if t != 0 && t@.width > sl then
	{   lhs = ExtendT(lhs, t);
	    sl = t@.width;
	}
	if sl > sr then
	    rhs = ExtendT(rhs, lhs@.type);
	else if sr > sl then
	    lhs = ExtendT(lhs, rhs@.type);
	return New2(op, lhs@.type, lhs, rhs);
    }

    proc CheckRefAttributes(to: Type, fm: Type): boolean
    {
	if to == 0 || fm == 0 then return false;
	// Check endian
	if to@.memorder != fm@.memorder then
	    return false;
	// Check alignment
	if to@.align > fm.align then
	    return false;
	if to@.kind == REF && fm@.kind == REF then
	    return CheckRefAttributes(to@.base, fm@.base);
	return true;
    }

    proc CoerceToRef(tree: Ast): Ast
    {
	if tree@.op == LOAD then
	    tree = tree@.child[0];		// undo the load
	else if tree@.op == BSWAP && tree@.child[0]@.op == LOAD then
	    tree = tree@.child[0]@.child[0];
	// FIXME: this is very likely wrong
	if tree@.op
	is SCON, CLIST then
	    tree = New1(BYREF, type.MakeRef(tree@.type), tree);
	is VAR then
	    {}
	else
	    tree = New1(BYREF, tree@.type, tree);
	return tree;
    }

    proc Adjust(tree: Ast, to: Type): Ast
    {   var fm: Type;
	var ok: boolean;

	fm = tree@.type;
	if fm == 0 then		// undefined type
	    return tree;
	ok = true;
	if to@.kind
	is REF then
	{   if to@.base != 0 then
	    {   if fm@.kind == REF && (to@.base == type.memtype || type.Compat(to, fm)) then
		{   if fm@.base != to@.base then
		    {   tree = Cast(tree, to);
			fm = tree@.type;
		    }
		}
		else
		{   tree = CoerceToRef(tree);
		    fm = tree@.type;
		    // Coerce to REF memtype is always OK
		    if to@.base == type.memtype || type.Compat(to, fm) then
		    {   if fm != to then
			{   tree = Cast(tree, to);
			    fm = tree@.type;
			}
		    }
		    else ok = false;
		}
		// Fix types when formal is a flex
		if to@.flex && !fm@.flex then
		    tree = New1(CAST, to, tree);
		// Check attributes
		if ok && !CheckRefAttributes(to, fm) then
		    lex.ErrorS(NOTIMPL, "Ref alignment or endian mismatch\n");
	    }
	}
	is REFPROC then
	{   ok = type.Compat(to, fm);
	}
	is ENUM then
	{   ok = type.Compat(fm, to);
	    if to@.width != tree@.width then
		tree = ExtendT(tree, to);
	}
	is UINT then
	{   ok = type.Compat(fm, to);
	    if !ok then
	    {   if fm.kind == SINT then
		{   if feature.trunc then lex.Error(TOUNSIGN);
		    ok = true;
		}
	    }
	    if to@.width != tree@.width then
		tree = ExtendT(tree, to);
	}
	is SINT then
	{   ok = type.Compat(fm, to);
	    if !ok && fm.kind == UINT then
	    {   if feature.trunc then lex.Error(TOSIGNED);
		ok = true;
	    }
	    if to@.width != tree@.width then
		tree = ExtendT(tree, to);
	}
	is FLOAT then
	{   ok = type.Compat(fm, to);
	    if to@.width != tree@.width then
		tree = ExtendT(tree, to);
	}
	is RECORD, ARRAY then
	{   if fm.packed && to.packed then
	    {   ok = type.Compat(fm, to);
	        if ok && to@.width != tree@.width then
		    tree = ExtendT(tree, to);
	    }
	}
	if !ok then
{
	    lex.Error(TYPEASSIGN);
err.str("fm="); type.DumpT(fm, false);
err.str("\nto="); type.DumpT(to, false);
err.nl();
}
//	tree = CheckSwap(lhs, tree);    // FIXME - do for parms and retv?
	return tree;
    }



    proc Init()
    {
	Null = New(NULL, type.unkntype);
    }
}
// vim: ts=8 sw=4 noet nowrap

