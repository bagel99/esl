// Copyright (c) 2009, 2010, Brian G. Lucas.  See LICENSE file.
// $Id: lex.esl 599 2011-08-12 20:25:17Z bgl $

package lex
{
    // Order is warnings, errors, internal errors
    type Errors:
    (   // Warnings
	NOTIMPL,    TRUNC,      TOSIGNED,   TOUNSIGN,   BADINTPTR,
	// Errors
	BADNL,      ILLCHR,     ILLUTF8,    CMTEOF,     BADEOF,     BADCHR,
	BADHEXESC,  BADUTF8,    IDLONG,     STRLONG,    EXPECT,     EXPECTID,
	UNDEFID,    DEFID,      UNDEFFIELD, BADID,      BADREF,     BADINDEX,
	NOIDTYPE,   NOTTYPE,    NOTYPE,     NOTENUM,    BADTYPE,    OPTYPE,
	BADTYPDEF,  BADATTR,    UNDEFSTMT,  BADSTMTI,   BADSTMTT,   BADCOMPARE,
	BADASSIGN,  ILLASSIGN,  LHSASSIGN,  RHSASSIGN,  TYPEASSIGN, RHSLESS,
	RHSMORE,    BADRETURN,  FORWPROC,   FORWPARM,   FORWRETV,   WANTBOOL,
	WANTUINT,   BADCAST,    UNDFCOMPV,  BADCOMPV,   PROPID,     BADIF,
	BADIS,      NOPROC,     NOLOOP,     NOPACK,     NOTREF,     NOTARRAY,
	ARRAYCOPY,  NOTRECORD,  BADRECORD,  BASERECORD, BASEENUM,   ARGSLO,
	ARGSHI,     PARMTYPE,   INITHI,     BADCONST,   EXPCONST,   BADIMPORT,
	// Internal Errors
	BADLIST,    BADPACKREC, ASSIGNCONST,BADPTRCONST
    );
    const FirstError:Errors = BADNL;
    const InternalError:Errors = BADLIST;
    const ErrMsg:[Errors]@[]Char =
    {
	[NOTIMPL] =	"Feature not yet implemented: ",
	[TRUNC] =	"Truncation may cause loss of data",
	[TOSIGNED] =	"Converting unsigned to signed integer",
	[TOUNSIGN] =	"Converting signed to unsigned integer",
	[BADINTPTR] =	"Pointer converted from wrong size integer",
	[BADNL] =	"End of line in string or character constant",
	[CMTEOF] =	"End of file in comment",
	[BADEOF] =	"Unexpected end of file",
	[BADCHR] =	"Malformed character constant",
	[BADHEXESC] =	"Malformed hex escape in string or character constant",
	[BADUTF8] =	"Malformed unicode escape",
	[IDLONG] =	"Identifier too long",
	[STRLONG] =	"String too long",
	[EXPECT] =	"Expected: ",
	[EXPECTID] =	"Expected identifier",
	[UNDEFID] =	"Undefined identifier: ",
	[DEFID] =	"Identifier already in use: ",
	[UNDEFFIELD] =	"Undefined field: ",
	[BADID] =	"Unexpected identifier: ",
	[BADREF] =	"Cannot dereference incomplete type",
	[BADINDEX] =	"Illegal index specification",
	[NOIDTYPE] =	"Identifier has no type: ",
	[NOTTYPE] =	"Expected type identifier",
	[NOTYPE] =	"Error in type definition",
	[NOTENUM] =	"Enumeration type required",
	[BADTYPE] =	"Illegal use of type identifier: ",
	[OPTYPE] =	"Operation not suppported for type",
	[BADTYPDEF] =	"Error in type definition",
	[BADATTR] =	"Unknown attribute: ",
	[UNDEFSTMT] =	"Statement begins with undefined identifier: ",
	[BADSTMTI] =	"Statement begins with inappropriate identifier: ",
	[BADSTMTT] =	"Statement begins with inappropriate token: ",
	[BADCOMPARE] =	"Illegal comparison, bad type perhaps",
	[BADASSIGN] =	"Syntax error in possible assignment statement",
	[ILLASSIGN] =	"Illegal assignment",
	[LHSASSIGN] =	"Illegal lhs in assignment",
	[RHSASSIGN] =	"Illegal rhs in assignment",
	[TYPEASSIGN] =	"Type mismatch in assignment",
	[RHSLESS] =	"Not enough rhs values in assignment",
	[RHSMORE] =	"Too many rhs values in assignment",
	[BADRETURN] =	"Return with no value in procedure that expects one",
	[FORWPROC] =	"Call of undefined forward procedure: ",
	[FORWPARM] =	"Parameter types changed from forward declaration: ",
	[FORWRETV] =	"Return value types changed from forward declaration: ",
	[WANTBOOL] =	"Boolean expression required",
	[WANTUINT] =	"Unsigned integer expression required",
	[BADCAST] =	"Illegal cast",
	[UNDFCOMPV] =	"Missing type for composite value",
	[BADCOMPV] =	"Illegal type for composite value",
	[PROPID] =	"Missing or undefined property identifier",
	[BADIF] =	"Expecting \"then\" or \"is\"",
	[BADIS] =	"Error in \"is\" clause",
	[NOPROC] =	"Return statement not in procedure",
	[NOLOOP] =	"Exit statement not in a loop",
	[NOPACK] =	"Unknown statement in package",
	[NOTREF] =	"Not a pointer",
	[NOTARRAY] =	"Not an array",
	[ARRAYCOPY] =	"Array copy with undefined length",
	[NOTRECORD] =	"Not a record",
	[BADRECORD] =	"Syntax error in record declaration",
	[BASERECORD] =	"Base type must be a record",
	[BASEENUM] =	"Base type must be an enumeration",
	[ARGSLO] =	"Insufficient arguments to procedure call",
	[ARGSHI] =	"Too many arguments to procedure call",
	[PARMTYPE] =	"Actual parameter type not compatible with formal",
	[INITHI] =	"Too many initializers",
	[BADCONST] =	"Const requires a constant value",
	[EXPCONST] =	"Expression must be a compile-time constant",
	[BADIMPORT] =	"Unable to import: ",
	[BADPACKREC] =	"Expecting LIST for packed record",
	[ASSIGNCONST] = "Assignment to constant",
	[BADPTRCONST] = "Illegal pointer constant"
    };
    // Lines commented ** must have the tokens consecutive
    type TokenT:
    (   NONE,	ENDF,
	DOT,	COLON,	SEMI,	COMMA,	RANGE,	AT,	QUEST,
	ASGN,	INCR,	DECR,				// **
	NOT,	INV,    PLUS,	MINUS,	OR,	XOR,	// must be contiguous
	STAR,	DIV,	MOD,	SHL,	SHR,	AND,	// must be contiguous
	EQ,	NE,	LT,	GT,	LE,	GE,	// must be contiguous
	BAND,	BOR,					// **
	PBEG,	PEND,	ABEG,	AEND,	GBEG,	GEND,
	NUM,	STR,
	ID,		// all keywords follow this
	KTYPE,	KVAR,	KCONST,	KPROC,	KPACKAGE,
	KRET,
	KIF,	KTHEN,	KELSE,	KIS,
	KFOR,	KWHILE,	KDO,	KLOOP,	KEXIT,	KWITH,
	KIMPORT,KALIAS,	KAS,    KASM,
	// attributes begin here
	KPACK,	KMPACK,	KLSB,	KMSB,	KLE,	KBE,
	KRO,	KWO,	KINPUT,	KOUTPUT,
	KEXTERN,KGLOBAL,KSECTION,KALIGN,
	KINLINE,KINTR,
	// type properties begin here
	KMIN,	KMAX,	KBITSZ,	KMEMSZ,	KLEN
    );
    const keywords:[TokenT]@[]Char =
    {	[NONE] =	"",		// none
	[ENDF] =	"ENDOFFILE",
	[DOT] =		".",
	[COLON] =	":",
	[SEMI] =	";",
	[COMMA] =	",",
	[RANGE] =	"..",
	[AT] =		"@",
	[QUEST] =	"?",
	[ASGN] =	"=",
	[INCR] =	"+=",
	[DECR] =	"-=",
	[NOT] =		"!",
	[INV] =		"~",
	[PLUS] =	"+",
	[MINUS] =	"-",
	[OR] =		"|",
	[XOR] =		"^",
	[STAR] =	"*",
	[DIV] =		"/",
	[MOD] =		"%",
	[SHL] =		"<<",
	[SHR] =		">>",
	[AND] =		"&",
	[EQ] =		"==",
	[NE] =		"!=",
	[LT] =		"<",
	[GT] =		">",
	[LE] =		"<=",
	[GE] =		">=",
	[BAND] =	"&&",
	[BOR] =		"||",
	[PBEG] =	"(",
	[PEND] =	")",
	[ABEG] =	"[",
	[AEND] =	"]",
	[GBEG] =	"{",
	[GEND] =	"}",
	[NUM] =		"NUMBER",
	[STR] =		"STRING",
	[ID] =		"IDENT",
	[KTYPE] =	"type",
	[KVAR] =	"var",
	[KCONST] =	"const",
	[KPROC] =	"proc",
	[KPACKAGE] =	"package",
	[KRET] =	"return",
	[KIF] =		"if",
	[KTHEN] =	"then",
	[KELSE] =	"else",
	[KIS] =		"is",
	[KFOR] =	"for",
	[KWHILE] =	"while",
	[KDO] =		"do",
	[KLOOP] =	"loop",
	[KEXIT] =	"exit",
	[KWITH] =	"with",
	[KIMPORT] =	"import",
	[KALIAS] =	"alias",
	[KAS] =		"as",
	[KASM] =	"asm",
	[KPACK] =	"packed",       // attributes for types
	[KMPACK] =	"mempacked",
	[KLSB] =	"lsb",
	[KMSB] =	"msb",
	[KLE] =		"le",
	[KBE] =		"be",
	[KRO] =		"ro",
	[KWO] =		"wo",
	[KINPUT] =	"in",
	[KOUTPUT] =	"out",
	[KEXTERN] =	"external",	// attributes for vars and procs
	[KGLOBAL] =	"global",
	[KSECTION] =	"section",
	[KALIGN] =	"align",
	[KINLINE] =	"inline",	// attributes for procs
	[KINTR] =	"interrupt",
	[KMIN] =	"min",		// properties
	[KMAX] =	"max",
	[KBITSZ] =	"bits",
	[KMEMSZ] =	"size",
	[KLEN]=		"len"
    }; 
    type TokenList: []TokenT;
    const StringMax = 4095;
    type StringRange: 0..StringMax;
    const IdentMax = 63;
    const BufSize = 4096;
    type BufRange: 0..BufSize;
    const PathMax = 1024;	// Max chars in a pathname
    type PathRange: 0..PathMax;
    const NameMax =  256;	// Max chars in filename
    const LinesMax = 0xFFFF;	// Max lines in a file, files in a program
    type LinesRange: 0..LinesMax;
    const ErrorMax = 10;	// Max errors before terminate
    type SearchPathEntry:
    {   next:		@SearchPathEntry;
	pathname:	[PathMax]Char;		// FIXME: make flexible
    };
    type Path: @SearchPathEntry;
    var  pathhead, pathtail:Path;

    type FileListEntry:
    {   next:		@FileListEntry;
	fileno:		LinesRange;
	filename:	[NameMax]Char;		// FIXME: make flexible
    };
    type FileList: @FileListEntry;
    var  filehead, filetail: FileList;

    type FileContext:
    {
	prev:		@FileContext;
	fd:		sys.fildes;
	lineno:		LinesRange;
	cchar:		BufRange;		// index into buf
	nchar:		BufRange;		// num valid chars in buf
	filepath:	Path;
	filename:	[NameMax]Char;		// FIXME: point to FileList
	buf:		[BufSize]Char;
    };
    type File: @FileContext;
    var f: File;

    type Identifier: []Char;
    var ErrorCount: 0..ErrorMax;
    var Token: TokenT;			// current token
    var Ident: [IdentMax+1]Char;	// if token is an IDENT
    var Number: _uint64;		// if token is a NUM
    var StringLen: 0..StringMax;	// if token is a STR
    var StringBuf: [StringMax+1]Char;	// if token is a STR
    type State:
      ( FIRST,	// first character
	DIV,	// seen "/"
	CMTLN,	// seen "//", skipping to EOL
	CMTBK,	// seen "/*", skipping to "*"
	CMTBE,	// seen "*" in a block comment
	DOT,	// seen "."
	PLUS,
	MINUS,
	LT,
	GT,
	ASGN,
	NOT,
	AND,
	OR,
	ZERO,	// seen "0"
	BIN,
	OCT,
	HEX,
	DEC,
	ID,
	CHR, CHREND,
	STR,
	ESC,
	HEX1, HEX2,					// must be consecutive
	U161, U162, U163, U164,				// must be consecutive
	U321, U322, U323, U324, U325, U326, U327, U328	// must be consecutive
      );

    // These are for error message use
    proc Filename(): []Char;

    proc Lineno():0..LinesMax
    {
	if f == 0 then
	    return 0;
	return f@.lineno;
    }

    proc ErrorSub(error: Errors)
    {
	if f@.filepath != 0 then
	{   err.str(f@.filepath@.pathname);
	    err.chr('/');
	}
	err.str(f@.filename);
	err.chr(':');
	err.uint(Lineno());
	err.str(": ");
	if error >= FirstError then
	{   if error >= InternalError then
		err.str("Internal ");
	    err.str("Error: ");
	    ErrorCount += 1;
	}
	else
	    err.str("Warning: ");
	err.str(ErrMsg[error]);
	if ErrorCount >= ErrorMax then
	{
	    err.str("Too many errors, quiting.\n");
	    sys.exit(1);
	}
    }

    // Print error message, no parameters
    proc Error(error: Errors)
    {
	ErrorSub(error);
	err.nl();
    }

    // Print error message, parameter is arbitrary string
    proc ErrorS(error: Errors, msg: @[]_byte)
    {
	ErrorSub(error);
	err.str(msg);
	err.nl();
    }

    // Print error message, parameter is identifer
    proc ErrorI(error: Errors, ident: @Identifier)
    {
	ErrorSub(error);
	err.str(ident);
	err.nl();
    }

    // Print error message, parameter is token
    proc ErrorT(error: Errors, tok: TokenT)
    {
	ErrorSub(error);
	err.chr('\'');
	err.str(keywords[tok]);
	err.chr('\'');
	err.nl();
    }

    proc SearchPathAdd(newpath: @[]Char, prepend: boolean): Path
    {   var np: Path;

	np = Path(sys.malloc(SearchPathEntry?size));
	zstr.copy(np@.pathname, newpath, PathMax);
	if pathhead == 0 then
	{   np@.next = 0;
	    pathhead = np;
	    pathtail = np;
	}
	else
	{   if prepend then
	    {   np@.next = pathhead;
		pathhead = np;
	    }
	    else
	    {   np@.next = 0;
		pathtail@.next = np;
		pathtail = np;
	    }
	}
	if debug.files then
	{   var pp: Path;
	    err.str("New search path \"");
	    pp = pathhead;
	    while (pp != 0) do
	    {   err.str(pp@.pathname);
		err.chr(':');
		pp = pp@.next;
	    }
	    err.str("\"\n");
	}
	return np;
    }

    // Search to see if we have not imported this yet
    proc FileCheck(filename: @[]Char): boolean
    {   var fp: FileList;

	fp = filehead;
	while fp != 0 do
	{   if zstr.eq(fp@.filename, filename, NameMax) then
		return false;	// already imported
	    fp = fp@.next;
	}
	return true;
    }

    proc FileOpen(filename: @[]Char): boolean
    {   var nf: File;
	var fd: sys.fildes;
	var pp: Path;
	var fp: FileList;
	var i: _uint;
	var pathbuf: [PathMax]Char;

	nf = File(sys.malloc(FileContext?size));
	if f != 0 then		// this is a nested file
	{   // search SearchPath trying to open file
	    pp = pathhead;
	    while pp != 0 do
	    {
		zstr.copy(pathbuf, pp@.pathname, PathMax);
		zstr.cat(pathbuf, "/", PathMax);
		i = zstr.len(pathbuf, PathMax);
		zstr.cat(pathbuf, filename, PathMax);
		zstr.cat(pathbuf, ".esl", PathMax);
		fd = sys.open(pathbuf, sys.O_RDONLY, 0);
	      exit fd >= 0;
		pp = pp@.next;
	    }
	    if fd >= 0 then
	    {   fp = FileList(sys.malloc(FileListEntry?size));
		zstr.copy(fp@.filename, filename, NameMax);
		if filehead == 0 then
		    filehead = fp;
		else
		    filetail@.next = fp;
		filetail = fp;
	    }
	}
	else			// this is the outer file
	{   zstr.copy(pathbuf, filename, PathMax);
	    fd = sys.open(pathbuf, sys.O_RDONLY, 0);
	    i = zstr.rfind(pathbuf, '/', PathMax);
	    if i == PathMax then		// '/' not found
	    {   pp = SearchPathAdd(".", true);
		i = 0;
	    }
	    else
	    {   pathbuf[i] = 0;	// terminate
		pp = SearchPathAdd(pathbuf, true);
		i += 1;
	    }
	}
	if debug.files then
	{   err.str("Open  file \"");
	    if pp != 0 then
	    {   err.str(pp@.pathname);
		err.chr('/');
	    }
	    err.str(pathbuf[i:]);
	    err.str("\"\n");
	}
	if feature.mflag then
	{
	    msg.str(" \\\n ");
	    if pp != 0 && (pp@.pathname[0] != '.' || pp@.pathname[1] != 0) then
	    {   msg.str(pp@.pathname);
		msg.chr('/');
	    }
	    msg.str(pathbuf[i:]);
	}
	if fd < 0 then
	{
	    // free(nf)
	    return false;
	}
	zstr.copy(nf@.filename, pathbuf[i:], NameMax);
	nf@.filepath = pp;
	nf@.fd = fd;
	nf@.lineno = 1;
	nf@.cchar = 0;
	nf@.nchar = 0;
	nf@.prev = f;
	f = nf;
	return true;        
    }

    proc FileClose()
    {   var of: File;

	if f != 0 then
	{   sys.close(f@.fd);
	    if debug.files then
	    {   err.str("Close file \"");
		if f@.filepath != 0 then
		{   err.str(f@.filepath@.pathname);
		    err.chr('/');
		}
		err.str(f@.filename);
		err.str("\"\n");
	    }
	    of = f;
	    f = of@.prev;
	    // sys.free(of)
	}
    }

    proc FillBuf()
    {   var k: _int;

	k = sys.read(f@.fd, f@.buf, BufSize);
	if k < 0 then
	    k = 0;
	f@.cchar = 0;
	f@.nchar = BufRange(k);
    }

    proc EscChar(c: Char): Char
    {
	if c
	is 'n' then c = 0x0A;	// LF
	is 'r' then c = 0x0D;	// CR
	is 't' then c = 0x09;	// HT
	is 'b' then c = 0x08;	// BS
	is 'v' then c = 0x0B;	// VT
	is 'f' then c = 0x0C;	// FF
	return c;
    }

    proc EscHex(c: Char, h: _uint32): _uint32
    {
	if c
	is '0'..'9' then c -= '0';
	is 'A'..'F' then c = (c - 'A') + 10;
	is 'a'..'f' then c = (c - 'a') + 10;
	else
	{   Error(BADHEXESC);
	    return h;
	} 
	return (h << 4) | c;
    }

    const unicodemax: [4]_uint32 =
	{ 0x0000_007F, 0x0000_07FF, 0x0000_FFFF, 0x0010_FFFF };
    const utf8pfx: [5]_uint8 = { 0x00, 0xC0, 0xE0, 0xF0, 0xF8 };

    proc EscUTF8(unicode: _uint32, j:_uint): _uint
    {   var n, i, k: _uint;

	n = 0;
	loop
	{
	  exit unicode <= unicodemax[n];
	    n += 1;
	  exit n > 3;
	}
	if n >= 4 then		// illegal unicode
	{   Error(BADUTF8);
	    return 0;
	}
	else
	{   k = j+n+1;		// need n+1 bytes
	    if k >= StringMax then
	    {   Error(STRLONG);
		return 0;
	    }
	    i = n;
	    while i > 0 do
	    {   StringBuf[j+i] = 0x80 | 0x3F & _uint8(unicode);
		unicode = unicode >> 6;
		i -= 1;
	    }
	    StringBuf[j] = utf8pfx[n] | _uint8(unicode);
	}
	return k;	
    }

    proc Next():TokenT
    {   var state: State;
	var c: Char;
	var tok: TokenT;
	var i: 0..BufSize;
	var e: 0..BufSize;
	var j: 0..StringMax;
	var str: boolean;
	var h: _uint32;		// for hex and unicode escapes
	var n: _uint64;		// for numbers

	state = FIRST;
	tok = NONE;
	i = f@.cchar;
	e = f@.nchar;
	loop
	{   if i >= e then
	    {   FillBuf();
		i = f@.cchar;
		e = f@.nchar;
		exit e == 0 with
		{   if state
		    is FIRST then {}	// as it should be
		    is CMTLN, CMTBK, CMTBE then
			Error(CMTEOF);
		    else
			Error(BADEOF);
		    tok = ENDF;
		}		 
	    }
	    c = f@.buf[i];
	    if state
	    is FIRST then
	    {	if c
		is ':' then { tok = COLON;  i += 1; }
		is ';' then { tok = SEMI;   i += 1; }
		is ',' then { tok = COMMA;  i += 1; }
		is '@' then { tok = AT;     i += 1; }
		is '~' then { tok = INV;    i += 1; }
		is '^' then { tok = XOR;    i += 1; }
		is '*' then { tok = STAR;   i += 1; }
		is '%' then { tok = MOD;    i += 1; }
		is '(' then { tok = PBEG;   i += 1; }
		is ')' then { tok = PEND;   i += 1; }
		is '{' then { tok = GBEG;   i += 1; }
		is '}' then { tok = GEND;   i += 1; }
		is '?' then { tok = QUEST;  i += 1; }
		is '[' then { tok = ABEG;   i += 1; }
		is ']' then { tok = AEND;   i += 1; }
		is '.' then state = DOT;
		is '/' then state = DIV;
		is '!' then state = NOT;
		is '<' then state = LT;
		is '>' then state = GT;
		is '=' then state = ASGN;
		is '+' then state = PLUS;
		is '-' then state = MINUS;
		is '&' then state = AND;
		is '|' then state = OR;
		is '0' then      { n = 0;     state = ZERO; }
		is '1'..'9' then { n = c-'0'; state = DEC; }
		is '\'' then state = CHR;
		is '"' then { j = 0; state = STR; }
		is 'A'..'Z', 'a'..'z', '_' then
		{   Ident[0] = c;  j = 1; state = ID; }
	    }
	    is DIV then
		if c
		is '/' then state = CMTLN;
		is '*' then state = CMTBK;
		else    tok = DIV;
	    is CMTLN then
		if c == '\n' then state = FIRST;
	    is CMTBK then
		if c == '*' then state = CMTBE;
	    is CMTBE then
		if c == '/' then state = FIRST; else state = CMTBK;
	    is DOT then
		if c
		is '.' then { tok = RANGE; i += 1; }
		else    tok = DOT;
	    is PLUS then
		if c
		is '=' then { tok = INCR; i += 1; }
		else    tok = PLUS;
	    is MINUS then
		if c
		is '=' then { tok = DECR; i += 1; }
		else    tok = MINUS;
	    is LT then
		if c
		is '=' then { tok = LE; i += 1; }
		is '<' then { tok = SHL; i += 1; }
		else    tok = LT;
	    is GT then
		if c
		is '=' then { tok = GE; i += 1; }
		is '>' then { tok = SHR; i += 1; }
		else    tok = GT;
	    is ASGN then
		if c
		is '=' then { tok = EQ; i += 1; }
		else    tok = ASGN;
	    is NOT then
		if c
		is '=' then { tok = NE; i += 1; }
		else    tok = NOT;
	    is AND then
		if c
		is '&' then { tok = BAND; i += 1; }
		else    tok = AND;
	    is OR then
		if c
		is '|' then { tok = BOR; i += 1; }
		else    tok = OR;
	    is ZERO then
	    {   if c
		is 'b' then state = BIN;
		is 'o' then state = OCT;
		is 'x' then state = HEX;
		is '0'..'9' then { n = c-'0'; state = DEC; }
		is '_' then state = DEC;
		else    { Number = n; tok = NUM; }
	    }
	    is DEC then
		if c
		is '0'..'9' then n = n*10 + (c-'0');
		is '_' then {}
		else    { Number = n; tok = NUM; }
	    is BIN then
		if c
		is '0'..'1' then n = (n<<1) + (c-'0');
		is '_' then {}
		else    { Number = n; tok = NUM; }
	    is OCT then
		if c
		is '0'..'7' then n = (n<<3) + (c-'0');
		is '_' then {}
		else    { Number = n; tok = NUM; }
	    is HEX then
		if c
		is '0'..'9' then n = (n<<4) + (c-'0');
		is 'A'..'F' then n = (n<<4) + (c-'A'+10);
		is 'a'..'f' then n = (n<<4) + (c-'a'+10);
		is '_' then {}
		else    { Number = n; tok = NUM; }
	    is ID then
		if c
		is 'A'..'Z', 'a'..'z', '0'..'9', '_' then
		{   Ident[j] = c; j += 1; }
		else
		{   Ident[j] = 0; tok = ID; }
	    is CHR then
	    {	str = false;
		if c
		is '\'' then { Error(BADCHR); state = FIRST; }
		is '\n' then { Error(BADNL); state = FIRST; }	
		is '\\' then state = ESC;
		else     { h = c; state = CHREND; }
	    }
	    is CHREND then
		if c
		is '\'' then { Number = h; tok = NUM; i += 1; }
		else     { Error(BADCHR); state = FIRST; }
	    is STR then
	    {   str = true;
		if c
		is '"' then
		{   StringBuf[j] = 0;	// terminate
		    StringLen = j+1;
		    tok = STR; i += 1;
		}
		is '\n' then { Error(BADNL); state = FIRST; }
		is '\\' then state = ESC;
		else
		{   if j < StringMax then { StringBuf[j] = c; j += 1; }
		    else Error(Errors.STRLONG);
		}
	    }
	    is ESC then
		if c
		is '\n' then { Error(BADNL); state = FIRST; }	// NL in escape
		is 'x' then { h = 0; state = HEX1; }
		is 'u' then { h = 0; state = U161; }
		is 'U' then { h = 0; state = U321; }
		else
		{   if str then
		    {   if j < StringMax then { StringBuf[j] = EscChar(c); j += 1; }
			else Error(STRLONG);
			state = STR;
		    }
		    else { h = EscChar(c); state= CHREND; }
		}
	    is HEX1, U161 .. U163, U321 .. U327 then
		if c
		is '\n' then { Error(BADNL); state = FIRST; }	// NL in escape
		else
		{   h = EscHex(c, h);
		    state += 1;	// WARNING: depends on consecutive state
		}
	    is HEX2 then
		if c
		is '\n' then { Error(BADNL); state = FIRST; }	// NL in escape
		else
		{   h = EscHex(c, h);
		    if str then
		    {   if j < StringMax then { StringBuf[j] = Char(h); j += 1; }
			else Error(STRLONG);
			state = STR;
		    }
		    else state = CHREND;
		}
	    is U164, U328 then
		if c
		is '\n' then { Error(BADNL); state = FIRST; }	// NL in escape
		else
		{   h = EscHex(c, h);
		    if str then
		    {   j = StringRange(EscUTF8(h, j));
			state = STR;
		    }
		    else state = CHREND;
		}
	  exit tok != NONE;
	    if c == '\n' then
		f@.lineno += 1;
	    i += 1;
	}
	f@.cchar = i;
	Token = tok;
	return tok;
    }


    proc Expect(expect: TokenT): TokenT
    {   var tok: TokenT;

	if Token == expect then
	    tok = Next();
	else
	    ErrorT(EXPECT, expect);
	return tok;
    }

    proc Keyword(toklist: @TokenList): TokenT
    {   var tok: TokenT;
	var i: _uint;

	if Token == ID then
	{   i = 0;
	    loop
	    {   tok = toklist[i];
	      exit tok == NONE;
		if zstr.eq(Ident, keywords[tok]@, IdentMax) then
		    return tok;
		i += 1;
	    }
	}
	return Token;
    }

    // FIXME: temporary debugging aid
    proc WhereAmI(msg: @[]_byte)
    {
	err.str(msg);
	err.str(" line="); err.uint(Lineno());
	err.str(" tok=");
	err.str(keywords[Token]);
	if Token == ID then
	{   err.str(" \"");
	    err.str(Ident);
	    err.chr('"');
	}
	err.nl();
    }

    const plist: []TokenT = { PEND, NONE };
    const alist: []TokenT = { AEND, NONE };
    const glist: []TokenT = { GEND, NONE };

    proc Skip(toklist: @TokenList): TokenT
    {   var tok, ttok: TokenT;
	var i: _uint;

	tok = Next();
//WhereAmI("Skip start:");
//err.str("\tlist=");
//i = 0; loop
//{  ttok = toklist[i];
//  exit ttok == NONE;
//   err.chr('"'); err.str(keywords[ttok]); err.str("\" ");
//   i += 1;
//}
//err.nl();
	ttok = ENDF;
	while tok != ENDF do
	{   i = 0;
	    loop
	    {   ttok = toklist[i];
	      exit ttok == NONE || tok == ttok;
	      exit ttok > ID && zstr.eq(Ident, keywords[ttok]@, IdentMax);
		i += 1;
	    }
	  exit ttok != NONE;
	    if tok	// handle nested constructs
	    is PBEG then tok = Skip(plist);
	    is ABEG then tok = Skip(alist);
	    is GBEG then tok = Skip(glist);
	    tok = Next();
	}
//WhereAmI("Skip end:");
//err.str("\ttok="); err.str(keywords[tok]);
//err.str(" ttok="); err.str(keywords[ttok]);
//err.nl();
	return ttok;
    }

    proc Want(toklist: @TokenList): TokenT
    {   var tok: TokenT;

	tok = Token;
	if tok != toklist[0] then
	{   ErrorT(EXPECT, toklist[0]);
	    tok = Skip(toklist);
	}
	return tok;
    }

}
// vim: ts=8 sw=4 noet nowrap

