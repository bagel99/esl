// Copyright (c) 2009-2011, Brian G. Lucas.  See LICENSE file.
// $Id: symb1.esl 661 2011-12-09 21:35:58Z bgl $

package symb
{
    type SymbT: (USYMB, CONSTANT, TYPE, VAR, FIELD, PROC, PACK, FILE, ALIAS);
    type LinkT: (LOCAL, NORMAL, GLOBAL, EXTERN, FIXED, INLINE);
    type OffsT: 0..0xFFFF;
    type IntrinsicT: (NONE, DEF, ABS, MIN, MAX, NEW, DEL);
    type SymbNode:
    {
	next:	  @SymbNode;	// for lists
	type:	  Type;
	package:  @SymbNode;	// containing proc/package/file
	parmlist: @SymbNode;	// for procedures
	retvlist: type.TypeList;// for procedures, retval types
	symblist: @SymbNode;	// for packages, procedures, aliases
	altsymb:  @SymbNode;	// alternate name, e.g. external name
	const:    @AstNode;	// for constants, initializer, default value
	xaddr:    Valu;		// externally fixed address
	addr:	  OffsT;	// e.g. field offset or intrinsic #
	lineno:   _uint16;	// line number where declared
	dbtag:    _uint16;	// tag for debug information
	kind:	  SymbT;	// TYPE, VAR, ...
	linkage:  LinkT;	// LOCAL, NORMAL, ...
	forward:  boolean;	// forward declared
	bound:    boolean;	// is a bound procedure
	hasdef:   boolean;	// has default value
	isparam:  boolean;	// is a formal parameter
	ispad:    boolean;      // is a field used for padding
	used:	  boolean;	// was ever used (looked up)
	declared: boolean;	// used in llvm generation
	ident:	  []Char;
    };
    type Symb: @SymbNode;

    const NestMax = 31;
    type levels: 0..NestMax;
    var  level: levels;
    var  curpack: Symb;		// current package, 0 if not in a package
    var  curproc: Symb;		// current procedure, 0 if not in a procedure
    var  libnew: Symb;
    var  libdel: Symb;
    type symblist:
      { frst:	Symb;
	last:	Symb;
      };
    var  symbs: [NestMax+1]symblist;

    // Check for anonymous identifier
    proc IsAnon(id: @lex.Identifier): boolean
    {
	return zstr.eq(id, "_", lex.IdentMax);
    }

    // Check for uniqueness, fields, enum constants
    proc IsUniqueLocal(s: Symb, id: @lex.Identifier): boolean
    {
	if IsAnon(id) then return true;
	while s != 0 do
	{   if zstr.eq(s@.ident, id, lex.IdentMax) then return false;
	    s = s@.next;
	}
	return true;
    }
	
    // Install symbol in symbol table
    proc MakeVisible(s: Symb)
    {
	if symbs[level].frst == 0 then
	    symbs[level].frst = s;
	else
	    symbs[level].last@.next = s;
	symbs[level].last = s;
    }

    type Visibility: (VISIBLE, DELAYED, PRIVATE);

    proc New(kind: SymbT, name: @lex.Identifier, vis: Visibility): Symb
    {   var s: Symb;

	s = 0;
	if vis != PRIVATE then	// not private, see if already in use
	{   s = symbs[level].frst;
	    while s != 0 && !zstr.eq(s@.ident, name, lex.IdentMax) do
		s = s@.next;
	}
	if s != 0 then
	{   if s@.forward then
		return s;
	    else    // already defined, error message and make a new one
		lex.ErrorI(DEFID, name);
	}
	s = Symb(sys.malloc(SymbNode?size + zstr.len(name, lex.IdentMax)));
	zstr.copy(s@.ident, name, lex.IdentMax);
	s@.kind = kind;
	s@.next = 0;
	if curproc != 0 then
	{   s@.linkage = LOCAL;
	    s@.package = curproc;
	}
	else if curpack != 0 then
	{   s@.linkage = NORMAL;
	    s@.package = curpack;
	}
	else
	{   s@.linkage = GLOBAL;
	    s@.package = 0;
	}
	s@.lineno = lex.Lineno();
	if vis == VISIBLE then	// install in symbol table now
	    MakeVisible(s);
	return s;
    }

    alias lex.PathMax as PathMax;
    proc NewFile(path: @[]_byte, file: @[]_byte): Symb
    {   var full: [PathMax]Char;

	zstr.copy(full, path, PathMax);
	zstr.cat(full, "/", PathMax);
	zstr.cat(full, file, PathMax);
	return New(FILE, full, PRIVATE);
    }
	
    proc Clone(os: Symb, name: @lex.Identifier): Symb
     {  var ns: Symb;

	ns = New(ALIAS, name, VISIBLE);
	ns@.symblist = os;
	return ns;
    }

    proc FindLocal(as: Symb, name: @lex.Identifier): Symb
    {   var s: Symb;

	s = as;
	while s != 0 do
	{   if zstr.eq(s@.ident, name, lex.IdentMax) then
	    {   if s@.kind == ALIAS then
		    s = s@.symblist;
		return s;
	    }
	    s = s@.next;
	}
	return s;
    }

    proc FindMethod(as: Symb, name: @lex.Identifier): Symb
    {   var s: Symb;

	s = as;
	while s != 0 && !zstr.eq(s@.ident, name, lex.IdentMax) do
	    s = s@.next;
	return s;
    }

    proc FindPackage(ps: Symb): Symb
    {   var s: Symb;
	var tok: TokenT;

	s = 0;
	tok = Token;
	if tok == ID then   // usually true
	    tok = Next();
	loop		    // loop thru package prefixes
	{ exit tok != DOT with lex.Expect(DOT);
	    tok = Next();
	  exit tok != ID with lex.Expect(ID);
	    s = FindLocal(ps@.symblist, lex.Ident);
	  exit s == 0 || s@.kind != PACK;
	    tok = Next();
	    ps = s;
	}
	return s;
    }

    proc FindTop(name: @lex.Identifier): Symb
    {   var s: Symb;
	var i: levels;

	i = level;
	loop
	{   s = FindLocal(symbs[i].frst, name);
	    if s != 0 then
	    {   s@.used = true;
		return s;
	    }
	  exit i == 0;
	    i -= 1;
	}
	return 0;
    }

    proc Find(name: @lex.Identifier): Symb
    {   var s: Symb;

	s = FindTop(name);
	if s != 0 && s@.kind == PACK then
	    s = FindPackage(s);
	return s;
    }

    proc FindKind(name: @lex.Identifier, kind:SymbT): Symb
    {   var s: Symb;

	s = Find(name);
	if s != 0 then
	{   if s@.kind != kind then
		if kind
		is TYPE then lex.Error(NOTTYPE);
		is VAR  then lex.Error(NOTVAR);
	}
	else lex.ErrorI(UNDEFID, name);
	return s;
    }

    proc IsDefined(name: @lex.Identifier): boolean
    {   var s: Symb;
	var tok: TokenT;

	s = FindTop(name);
	loop
	{   tok = Next();
	  exit s == 0 || s@.kind != PACK || tok != DOT;
	    tok = Next();
	  exit tok != ID;
	    s = FindLocal(s@.symblist, lex.Ident);
	}
	return s != 0;
    }

    proc Save(): Symb
    {
	return symbs[level].frst;
    }

    proc Push(init: Symb): Symb
    {
	if level < NestMax then
	{   level += 1;
	    if init == 0 then
	    {
		symbs[level].frst = 0;
		symbs[level].last = 0;
	    }
	    else
	    {
		symbs[level].frst = init;
		while init@.next != 0 do
		    init = init@.next;
		symbs[level].last = init;
	    }
	}
	else
	{	// FIXME: error
	}
	return init;
    }

    proc Pop()
    {
	if level > 0 then
	{
	    if feature.unused && curproc != 0 then
	    {   var s: Symb;
		s = symbs[level].frst;
		while s != 0 do
		{   if !s@.used && !s@.isparam then
		    {   err.str("In ");
			if curpack != 0 then
			{   err.str(curpack@.ident);
			    err.chr('.');
			}
			err.str(curproc@.ident);
			err.str(" unused: ");
			err.str(s@.ident);
			err.nl();
		    }
		    s = s@.next;
		}
	    }
	    level -= 1;
	}
	else
	{	// FIXME: error
	}
    }
}
// vim: ts=8 sw=4 noet nowrap

