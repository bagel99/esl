// Copyright (c) 2009-2011, Brian G. Lucas.  See LICENSE file.
// $Id$

package target
{
    alias type.NINTS as IntSizesMax;
    const TargetsMax = 31;
    type SizeAlign:
    {   size:	0..255;
	align:	0..255;
    };
    type ModelT:
    {
	memorder:   type.MemOrderT;
	bitorder:   type.BitOrderT;
	membits:    0..255;		// number of bits in smallest addressable
	regsize:    0..255;		// width of integer registers
	mustalign:  boolean;
	nisize:     0..IntSizesMax-1;
	ptr:	    SizeAlign;
	isizes:     [IntSizesMax]SizeAlign;
    };
    type TargetT:
    {
	name:       @[]Char;
	triple:     @[]Char;
	model:	    @ModelT;
    };

    const DefaultTarget: []_byte = "x86";   // FIXME
    var   TargetName: @[]Char;
    var   Triple:     @[]Char;
    const Model32LEU: ModelT =  // 32-bit little-endian no-alignment
    {   LE, LSB, 8, 32, false,
	4,
	{32, 32},
	{   {8, 8}, {16,16}, {32,32}, {64,32}, {0,0}, {0,0}  }
    };
    const Model32LEA: ModelT =  // 32-bit little-endian strict alignment
    {   LE, LSB, 8, 32, true,
	4,
	{32, 32},
	{   {8, 8}, {16,16}, {32,32}, {64,32}, {0,0}, {0,0}  }
    };
    const Model64LEU: ModelT =  // 64-bit little-endian no-alignment
    {   LE, LSB, 8, 64, false,
	5,
	{64, 64},
	{   {8, 8}, {16,16}, {32,32}, {64,64}, {128,64}, {0,0}  }
    };
    const Model32BEA: ModelT =  // 32-bit big-endian strict alignment
    {   BE, MSB, 8, 32, true,
	5,
	{32, 32},
	{   {8, 8}, {16,16}, {32,32}, {64,32}, {0,0}, {0,0}  }
    };
    const Model64BEA: ModelT =  // 64-bit big-endian strict alignment
    {   BE, MSB, 8, 64, true,
	4,
	{64, 64},
	{   {8, 8}, {16,16}, {32,32}, {64,64}, {128,128}, {0,0}  }
    };
    const Model16LEA: ModelT =  // 16-bit little-endian strict alignment
    {   LE, LSB, 8, 16, true,
	3,
	{16, 16},
	{   {8, 8}, {16,16}, {32,16}, {0,0}, {0,0}, {0,0}  }
    };

    const Targets: []TargetT =
    {   {   "x86",      "i386-unknown-linux-gnu",       Model32LEU },
	{   "i386",     "i386-unknown-linux-gnu",       Model32LEU },
	{   "i486",     "i486-unknown-linux-gnu",       Model32LEU },
	{   "i586",     "i586-unknown-linux-gnu",       Model32LEU },
	{   "i686",     "i686-unknown-linux-gnu",       Model32LEU },
	{   "x86-64",   "x86_64-unknown-linux-gnu",     Model64LEU },
	{   "x86_64",   "x86_64-unknown-linux-gnu",     Model64LEU },
	{   "x86_64-darwin", "x86_64-apple-darwin10",   Model64LEU },
 	{   "cortex-m0", "thumbv6m-unknown-unknown",    Model32LEU },
 	{   "cortex-m3", "thumbv7m-unknown-unknown",    Model32LEU },
 	{   "cortex-m3-align", "thumbv7m-unknown-unknown", Model32LEA },
	{   "cortex-m4", "thumbv7m-unknown-unknown",    Model32LEU },
	{   "arm920t",  "thumb-unknown-unknown",	Model32LEA }, // ARMV4T/ARM920T
	{   "mips",     "mips-unknown-unknown",		Model32BEA },
	{   "mipsle",   "mips-unknown-unknown",		Model32LEA },
 	{   "xcore",    "xcore-unknown-unknown",	Model32LEA },
	{   "bfin",     "bfin-unknown-unknown",		Model32LEA },
	{   "ppc32",    "ppc32-unknown-linux",		Model32BEA },
	{   "ppc64",    "ppc64-unknown-linux",		Model64BEA },
	{   "s390x",    "systemz-unknown-linux",	Model64BEA },
	{   "systemz",  "systemz-unknown-linux",	Model64BEA },
	{   "aarch64",  "aarch64-unknown-linux",	Model64LEU },
 	{   "msp430", "msp430-generic-generic",		Model16LEA }
    };

    var Target: @ModelT;

    proc list()
    {   var i: _uint;

        err.str("Supported targets and generated triples:\n");
	i = 0;
	while i < Targets?len do
	{   err.str(Targets[i].name);
	    err.str(": ");
	    err.str(Targets[i].triple);
	    err.nl();
	    i += 1;
	}
    }

    proc set(name: @[]_byte): boolean
    {   var i: _uint;

	if name == 0 then name = DefaultTarget;
	i = 0;
	while i < Targets?len do
	{   if zstr.eq(name, Targets[i].name, lex.IdentMax) then
	    {   Target = Targets[i].model;
		TargetName = Targets[i].name;
		Triple = Targets[i].triple;
		return true;
	    }
	    i += 1;
	}
	return false;
    }

    proc isize(bits: type.BitSize): type.BitSize
    {   var i: 0..IntSizesMax;

	i = 0;
	while i < Target.nisize && Target.isizes[i].size < bits do
	    i += 1;
	return Target.isizes[i].size;
    }

    proc ialign(bits: type.BitSize): type.BitSize
    {   var i: 0..IntSizesMax;

	i = 0;
	while i < Target.nisize && Target.isizes[i].size < bits do
	    i += 1;
	return Target.isizes[i].align;
    }

    proc utype(bits: type.BitSize): Type
    {   var i: 0..IntSizesMax;

	i = 0;
	while i < Target.nisize && Target.isizes[i].size < bits do
	    i += 1;
	return type.uinttypes[i];
    }   

    proc stype(bits: type.BitSize): Type
    {   var i: 0..IntSizesMax;

	i = 0;
	while i < Target.nisize && Target.isizes[i].size < bits do
	    i += 1;
	return type.inttypes[i];
    }   
}
// vim: ts=8 sw=4 noet nowrap

