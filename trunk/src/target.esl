// Copyright (c) 2009-2011, Brian G. Lucas.  See LICENSE file.
// $Id: target.esl 688 2012-05-11 19:35:01Z bgl $

package target
{
    const IntSizesMax = 8;
    const TargetsMax = 31;
    type SizeAlign:
      { size:	0..255;
	align:	0..255;
      };
    type TargetT:
      {
	name:		@[]Char;
	triple:		@[]Char;
	order:		type.MemOrderT;
	membits:	0..255;		// number of bits in smallest addressable
	regsize:	0..255;		// width of integer registers
	mustalign:	boolean;
	rsvd:		0..255;
	nisize:		0..IntSizesMax-1;
	ptr:		SizeAlign;
	isizes:		[IntSizesMax]SizeAlign;
      };

    const DefaultTarget: []_byte = "x86";   // FIXME
    var   TargetName: @[]_byte;
    const NumTargets = 16;
    const Targets: [NumTargets]TargetT =
    {   {   "x86", "i386-unknown-linux-gnu",
	    LE, 8, 32, false, 0,
	    4,
	    {32, 32},
	    {   {8, 8}, {16,16}, {32,32}, {64,32},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "x86-64", "x86_64-unknown-linux-gnu",   // FIXME: remove, clash with triples
	    LE, 8, 64, false, 0,
	    4,
	    {64, 64},
	    {   {8, 8}, {16,16}, {32,32}, {64,64},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "x86_64", "x86_64-unknown-linux-gnu",
	    LE, 8, 64, false, 0,
	    4,
	    {64, 64},
	    {   {8, 8}, {16,16}, {32,32}, {64,64},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "x86_64-darwin", "x86_64-apple-darwin10",
	    LE, 8, 64, false, 0,
	    4,
	    {64, 64},
	    {   {8, 8}, {16,16}, {32,32}, {64,64},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "msp430", "msp430-generic-generic",
	    LE, 8, 16, true, 0,
	    3,
	    {16, 16},
	    {   {8, 8}, {16,16}, {32,16}, {0,0},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "cortex-m0", "thumbv6m-unknown-unknown",
	    LE, 8, 32, true, 0,	// need a version with no alignment
	    4,
	    {32, 32},
	    {   {8, 8}, {16,16}, {32,32}, {64,32},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "cortex-m3", "thumbv7m-unknown-unknown",
	    LE, 8, 32, true, 0,	// need a version with no alignment
	    4,
	    {32, 32},
	    {   {8, 8}, {16,16}, {32,32}, {64,32},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "cortex-m4", "thumbv7m-unknown-unknown",
	    LE, 8, 32, true, 0,	// need a version with no alignment
	    4,
	    {32, 32},
	    {   {8, 8}, {16,16}, {32,32}, {64,32},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "arm920t", "thumb-unknown-unknown",	    // ARMV4T - ARM920T
	    LE, 8, 32, true, 0,	// need a version with no alignment
	    4,
	    {32, 32},
	    {   {8, 8}, {16,16}, {32,32}, {64,32},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "xcore", "xcore-unknown-unknown",
	    LE, 8, 32, true, 0,
	    4,
	    {32, 32},
	    {   {8, 8}, {16,16}, {32,32}, {64,32},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "bfin", "bfin-unknown-unknown",
	    LE, 8, 32, true, 0,
	    4,
	    {32, 32},
	    {   {8, 8}, {16,16}, {32,32}, {64,32},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "ppc32", "ppc32-unknown-linux",
	    BE, 8, 32, true, 0,
	    4,
	    {32, 32},
	    {   {8, 8}, {16,16}, {32,32}, {64,32},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "ppc64", "ppc64-unknown-linux",
	    BE, 8, 64, true, 0,
	    4,
	    {64, 64},
	    {   {8, 8}, {16,16}, {32,32}, {64,64},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "s390x", "systemz-unknown-linux",
	    BE, 8, 64, true, 0,
	    4,
	    {64, 64},
	    {   {8, 8}, {16,16}, {32,32}, {64,64},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "systemz", "systemz-unknown-linux",
	    BE, 8, 64, true, 0,
	    4,
	    {64, 64},
	    {   {8, 8}, {16,16}, {32,32}, {64,64},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	},
	{   "mips", "mips-unknown-unknown",
	    BE, 8, 32, true, 0,
	    4,
	    {32, 32},
	    {   {8, 8}, {16,16}, {32,32}, {64,32},
		{0,0},  {0,0},   {0,0},   {0,0}
	    }
	}
    };
    var Target: @TargetT;

    proc list()
    {   var i: 0..TargetsMax;

        err.str("Supported targets and generated triples:\n");
	i = 0;
	while i < NumTargets do
	{   err.str(Targets[i].name);
	    err.str(": ");
	    err.str(Targets[i].triple);
	    err.nl();
	    i += 1;
	}
    }

    proc set(name: @[]_byte): boolean
    {   var i: 0..TargetsMax;

	if name == 0 then name = DefaultTarget;
	i = 0;
	while i < NumTargets do
	{   if zstr.eq(name, Targets[i].name, lex.IdentMax) then
	    {   Target = Targets[i];
		TargetName = Targets[i].name;
		return true;
	    }
	    i += 1;
	}
	return false;
    }

    proc isize(bits: type.BitSize): type.BitSize
    {   var i: 0..IntSizesMax;

	i = 0;
	while i < Target.nisize && Target.isizes[i].size < bits do
	    i += 1;
	return Target.isizes[i].size;
    }

    proc ialign(bits: type.BitSize): type.BitSize
    {   var i: 0..IntSizesMax;

	i = 0;
	while i < Target.nisize && Target.isizes[i].size < bits do
	    i += 1;
	return Target.isizes[i].align;
    }
   
}
// vim: ts=8 sw=4 noet nowrap

