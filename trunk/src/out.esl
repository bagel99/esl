/*
 * Unbuffered Formatted Output
 * Assumes target wordsize is 32-bits or more.
 *
 * Copyright (c) 2009-2011, Brian G. Lucas.  See LICENSE file.
 * $Id: out.esl 728 2012-09-26 21:57:27Z bgl $
 */

import sys;
import zstr;

package out
{
    alias sys.fildes as fildes;

    proc (o: fildes) nl()
    {
	sys.write(o, "\n", 1);
    }

    proc (o: fildes) chr(c: _byte)
    {   var buf: [1]_byte;

	buf[0] = c;
	sys.write(o, buf, 1);
    }

    proc (o: fildes) str(s:@[]_byte)
    {   var n: _uint;

	n = zstr.len(s, 0xFFFF);
	sys.write(o, s, n);
    }

    proc (o: fildes) strn(s:@[]_byte, len:_uint)
    {
	sys.write(o, s, len);
    }

    const hexchr: [16]_byte =
	{'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

    proc (o: fildes) hex8(in: _uint8)
    {   var buf: [2]_byte;

	buf[0] = hexchr[(in>>4)&0xF];
	buf[1] = hexchr[in&0xF];
	sys.write(o, buf, 2);
    }

    proc (o: fildes) hex16(in:_uint16)
    {   var buf: [4]_byte;

	buf[0] = hexchr[(in>>12)&0xF];
	buf[1] = hexchr[(in>>8)&0xF];
	buf[2] = hexchr[(in>>4)&0xF];
	buf[3] = hexchr[in&0xF];
	sys.write(o, buf, 4);
    }

    proc (o: fildes) hex32(in:_uint32)
    {	var buf: [8]_byte;
	var i: _uint;

	i = 7;
	loop
	{   buf[i] = hexchr[in&0xF];
	  exit i == 0;
	    i -= 1;
	    in = in >> 4;
	}
	sys.write(o, buf, 8);
    }

    proc (o: fildes) hex64(in: _uint64)
    {   var buf: [16]_byte;
	var i: 0..15;

	i = 15;
	loop
	{   buf[i] = hexchr[_uint(in)&0xF];
	  exit i == 0;
	    i -= 1;
	    in = in >> 4;
	}
	sys.write(o, buf, 16);
    }  

    proc (o: fildes) hex(in: _uint):: inline
    {
	if _uint?size == _uint64?size then
	    o.hex64(in);
	else
	    o.hex32(_uint32(in));
    }

    proc (o: fildes)  uint64(in: _uint64)
    {	var i: _uint;
	var buf: [20]_byte;

	i = 20;
	if in == 0 then
	{   i -= 1;
	    buf[i] = '0';
	}
	else
	{   while in != 0 do
	    {   i -= 1;
		buf[i] = _byte((in % 10) + '0');
		in = in / 10;
	    }
	}
	sys.write(o, buf[i:], 20-i);
    }

    proc (o: fildes)  uint32(in: _uint32)
    {	var i: _uint;
	var buf: [10]_byte;

	if _uint?size == _uint64?size then  // extend to native
	    o.uint64(_uint64(in));
	else
	{   i = 10;
	    if in == 0 then
	    {   i -= 1;
		buf[i] = '0';
	    }
	    else
	    {   while in != 0 do
		{   i -= 1;
		    buf[i] = _byte((in % 10) + '0');
		    in = in / 10;
		}
	    }
	    sys.write(o, buf[i:], 10-i);
 	}
    }

    proc (o: fildes) uint16(in: _uint16)
    {
	if _uint?size == _uint64?size then  // extend to native
	    o.uint64(_uint64(in));
	else
	    o.uint32(_uint32(in));
    }

    proc (o: fildes) uint8(in: _uint8)
    {
	if _uint?size == _uint64?size then  // extend to native
	    o.uint64(_uint64(in));
	else
	    o.uint32(_uint32(in));
   }

    proc (o: fildes) uint(in: _uint):: inline
    {
	if _uint?size == _uint64?size then
	    o.uint64(in);
	else
	    o.uint32(_uint32(in));
    }

    proc (o: fildes) int64(in: _int64)
    {	var ui: _uint64;

	if in < 0 then
	{   sys.write(o, "-", 1);
	    ui = _uint64(-in);
	}
	else
	    ui = _uint64(in);
	o.uint64(ui);
    }	

    proc (o: fildes) int32(in: _int32)
    {	var ui: _uint32;

	if _int?size == _int64?size then  // extend to native
	    o.int64(_int64(in));
	else
	{   if in < 0 then
	    {   sys.write(o, "-", 1);
		ui = _uint64(-in);
	    }
	    else
		ui = _uint64(in);
	    o.uint32(ui);
	}
    }	

    proc (o: fildes) int16(in: _int16)
    {
	if _int?size == _int64?size then  // extend to native
	    o.int64(_int64(in));
	else
	    o.int32(_int32(in));
    }

    proc (o: fildes) int8(in: _int8)
    {
	if _int?size == _int64?size then  // extend to native
	    o.int64(_int64(in));
	else
	    o.int32(_int32(in));
    }

    proc (o: fildes) int(in: _int):: inline
    {
	if _int?size == _int64?size then
	    o.int64(in);
	else
	    o.int32(_int32(in));
    }
}
// vim: ts=8 sw=4 noet nowrap

