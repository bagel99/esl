target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:32"
target triple = "i386-unknown-linux-gnu"
%A.1 = type {i8, i8, i8, i8}
%A.2 = type {%A.1, i8, i8, i8}
@debug = global %A.2 zeroinitializer, align 1
%A.3 = type {i8, i8, i8, i8, i8, i8}
@feature = global %A.3 zeroinitializer, align 1
declare external [0 x i8]* @malloc(i32);
declare external void @memset([0 x i8]*, i32, i32);
define internal [0 x i8]* @sys_zalloc(i32 %nbytes.arg) nounwind {
L.0:
	%rv.0 = alloca [0 x i8]*
	%nbytes = alloca i32
	store i32 %nbytes.arg, i32* %nbytes
	%ptr = alloca [0 x i8]*
	%0 = load i32* %nbytes
	%1 = call [0 x i8]* @malloc(i32 %0)
	%2 = bitcast [0 x i8]* %1 to [0 x i8]*
	store [0 x i8]* %2, [0 x i8]** %ptr
	%3 = load [0 x i8]** %ptr
	%4 = bitcast [0 x i8]* %3 to [0 x i8]*
	%5 = load i32* %nbytes
	call void @memset([0 x i8]* %4, i32 0, i32 %5)
	%6 = load [0 x i8]** %ptr
	%7 = bitcast [0 x i8]* %6 to [0 x i8]*
	store [0 x i8]* %7, [0 x i8]** %rv.0
	br label %return
return:
	%8 = load [0 x i8]** %rv.0
	ret [0 x i8]* %8
}
declare external void @memcpy([0 x i8]*, [0 x i8]*, i32);
define internal [0 x i8]* @sys_memdup([0 x i8]* %fm.arg, i32 %len.arg) nounwind {
L.0:
	%rv.0 = alloca [0 x i8]*
	%fm = alloca [0 x i8]*
	%len = alloca i32
	store [0 x i8]* %fm.arg, [0 x i8]** %fm
	store i32 %len.arg, i32* %len
	%ptr = alloca [0 x i8]*
	%0 = load i32* %len
	%1 = call [0 x i8]* @malloc(i32 %0)
	%2 = bitcast [0 x i8]* %1 to [0 x i8]*
	store [0 x i8]* %2, [0 x i8]** %ptr
	%3 = load [0 x i8]** %ptr
	%4 = bitcast [0 x i8]* %3 to [0 x i8]*
	%5 = load [0 x i8]** %fm
	%6 = bitcast [0 x i8]* %5 to [0 x i8]*
	%7 = load i32* %len
	call void @memcpy([0 x i8]* %4, [0 x i8]* %6, i32 %7)
	%8 = load [0 x i8]** %ptr
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	store [0 x i8]* %9, [0 x i8]** %rv.0
	br label %return
return:
	%10 = load [0 x i8]** %rv.0
	ret [0 x i8]* %10
}
define internal zeroext i8 @zstr_eq([0 x i8]* %s1.arg, [0 x i8]* %s2.arg, i32 %max.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%s1 = alloca [0 x i8]*
	%s2 = alloca [0 x i8]*
	%max = alloca i32
	store [0 x i8]* %s1.arg, [0 x i8]** %s1
	store [0 x i8]* %s2.arg, [0 x i8]** %s2
	store i32 %max.arg, i32* %max
	%i = alloca i32
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load i32* %i
	%1 = load i32* %max
	%2 = icmp ult i32 %0, %1
	br i1 %2, label %L.4, label %L.5
L.4:
	%3 = load [0 x i8]** %s1
	%4 = load i32* %i
	%5 = getelementptr [0 x i8]* %3, i32 0, i32 %4
	%6 = load i8* %5
	%7 = load [0 x i8]** %s2
	%8 = load i32* %i
	%9 = getelementptr [0 x i8]* %7, i32 0, i32 %8
	%10 = load i8* %9
	%11 = icmp eq i8 %6, %10
	br label %L.5
L.5:
	%12 = phi i1 [ false, %L.1 ], [ %11, %L.4 ]
	%13 = xor i1 %12, true
	br i1 %13, label %L.2, label %L.3
L.3:
	%14 = load [0 x i8]** %s1
	%15 = load i32* %i
	%16 = getelementptr [0 x i8]* %14, i32 0, i32 %15
	%17 = load i8* %16
	%18 = icmp eq i8 %17, 0
	br i1 %18, label %L.7, label %L.6
L.7:
	store i8 1, i8* %rv.0
	br label %return
L.6:
	%19 = load i32* %i
	%20 = add i32 %19, 1
	store i32 %20, i32* %i
	br label %L.1
L.2:
	store i8 0, i8* %rv.0
	br label %return
return:
	%21 = load i8* %rv.0
	ret i8 %21
}
define internal i32 @zstr_len([0 x i8]* %s.arg, i32 %max.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%s = alloca [0 x i8]*
	%max = alloca i32
	store [0 x i8]* %s.arg, [0 x i8]** %s
	store i32 %max.arg, i32* %max
	%i = alloca i32
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load i32* %i
	%1 = load i32* %max
	%2 = icmp ult i32 %0, %1
	br i1 %2, label %L.4, label %L.5
L.4:
	%3 = load [0 x i8]** %s
	%4 = load i32* %i
	%5 = getelementptr [0 x i8]* %3, i32 0, i32 %4
	%6 = load i8* %5
	%7 = icmp ne i8 %6, 0
	br label %L.5
L.5:
	%8 = phi i1 [ false, %L.1 ], [ %7, %L.4 ]
	%9 = xor i1 %8, true
	br i1 %9, label %L.2, label %L.3
L.3:
	%10 = load i32* %i
	%11 = add i32 %10, 1
	store i32 %11, i32* %i
	br label %L.1
L.2:
	%12 = load i32* %i
	store i32 %12, i32* %rv.0
	br label %return
return:
	%13 = load i32* %rv.0
	ret i32 %13
}
define internal i32 @zstr_find([0 x i8]* %s.arg, i8 zeroext %c.arg, i32 %max.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%s = alloca [0 x i8]*
	%c = alloca i8
	%max = alloca i32
	store [0 x i8]* %s.arg, [0 x i8]** %s
	store i8 %c.arg, i8* %c
	store i32 %max.arg, i32* %max
	%i = alloca i32
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load i32* %i
	%1 = load i32* %max
	%2 = icmp ult i32 %0, %1
	br i1 %2, label %L.6, label %L.7
L.6:
	%3 = load [0 x i8]** %s
	%4 = load i32* %i
	%5 = getelementptr [0 x i8]* %3, i32 0, i32 %4
	%6 = load i8* %5
	%7 = load i8* %c
	%8 = icmp ne i8 %6, %7
	br label %L.7
L.7:
	%9 = phi i1 [ false, %L.1 ], [ %8, %L.6 ]
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load [0 x i8]** %s
	%11 = load i32* %i
	%12 = getelementptr [0 x i8]* %10, i32 0, i32 %11
	%13 = load i8* %12
	%14 = icmp ne i8 %13, 0
	br label %L.5
L.5:
	%15 = phi i1 [ false, %L.7 ], [ %14, %L.4 ]
	%16 = xor i1 %15, true
	br i1 %16, label %L.2, label %L.3
L.3:
	%17 = load i32* %i
	%18 = add i32 %17, 1
	store i32 %18, i32* %i
	br label %L.1
L.2:
	%19 = load i32* %i
	store i32 %19, i32* %rv.0
	br label %return
return:
	%20 = load i32* %rv.0
	ret i32 %20
}
define internal i32 @zstr_rfind([0 x i8]* %s.arg, i8 zeroext %c.arg, i32 %max.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%s = alloca [0 x i8]*
	%c = alloca i8
	%max = alloca i32
	store [0 x i8]* %s.arg, [0 x i8]** %s
	store i8 %c.arg, i8* %c
	store i32 %max.arg, i32* %max
	%i = alloca i32
	%0 = load [0 x i8]** %s
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = load i32* %max
	%3 = call i32 @zstr_len([0 x i8]* %1, i32 %2)
	store i32 %3, i32* %i
	br label %L.1
L.1:
	%4 = load [0 x i8]** %s
	%5 = load i32* %i
	%6 = getelementptr [0 x i8]* %4, i32 0, i32 %5
	%7 = load i8* %6
	%8 = load i8* %c
	%9 = icmp ne i8 %7, %8
	%10 = xor i1 %9, true
	br i1 %10, label %L.2, label %L.3
L.3:
	%11 = load i32* %i
	%12 = icmp eq i32 %11, 0
	br i1 %12, label %L.5, label %L.4
L.5:
	%13 = load i32* %max
	store i32 %13, i32* %i
	br label %L.2
L.4:
	%14 = load i32* %i
	%15 = sub i32 %14, 1
	store i32 %15, i32* %i
	br label %L.1
L.2:
	%16 = load i32* %i
	store i32 %16, i32* %rv.0
	br label %return
return:
	%17 = load i32* %rv.0
	ret i32 %17
}
define internal void @zstr_copy([0 x i8]* %to.arg, [0 x i8]* %fm.arg, i32 %max.arg) nounwind {
L.0:
	%to = alloca [0 x i8]*
	%fm = alloca [0 x i8]*
	%max = alloca i32
	store [0 x i8]* %to.arg, [0 x i8]** %to
	store [0 x i8]* %fm.arg, [0 x i8]** %fm
	store i32 %max.arg, i32* %max
	%i = alloca i32
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load i32* %i
	%1 = load i32* %max
	%2 = icmp ult i32 %0, %1
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	%4 = load [0 x i8]** %fm
	%5 = load i32* %i
	%6 = getelementptr [0 x i8]* %4, i32 0, i32 %5
	%7 = load i8* %6
	%8 = load [0 x i8]** %to
	%9 = load i32* %i
	%10 = getelementptr [0 x i8]* %8, i32 0, i32 %9
	store i8 %7, i8* %10
	%11 = load [0 x i8]** %fm
	%12 = load i32* %i
	%13 = getelementptr [0 x i8]* %11, i32 0, i32 %12
	%14 = load i8* %13
	%15 = icmp eq i8 %14, 0
	br i1 %15, label %L.2, label %L.4
L.4:
	%16 = load i32* %i
	%17 = add i32 %16, 1
	store i32 %17, i32* %i
	br label %L.1
L.2:
	br label %return
return:
	ret void
}
define internal void @zstr_cat([0 x i8]* %to.arg, [0 x i8]* %fm.arg, i32 %max.arg) nounwind {
L.0:
	%to = alloca [0 x i8]*
	%fm = alloca [0 x i8]*
	%max = alloca i32
	store [0 x i8]* %to.arg, [0 x i8]** %to
	store [0 x i8]* %fm.arg, [0 x i8]** %fm
	store i32 %max.arg, i32* %max
	%i = alloca i32
	%j = alloca i32
	%0 = load [0 x i8]** %to
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = load i32* %max
	%3 = call i32 @zstr_len([0 x i8]* %1, i32 %2)
	store i32 %3, i32* %i
	store i32 0, i32* %j
	br label %L.1
L.1:
	%4 = load i32* %i
	%5 = load i32* %max
	%6 = icmp ult i32 %4, %5
	%7 = xor i1 %6, true
	br i1 %7, label %L.2, label %L.3
L.3:
	%8 = load [0 x i8]** %fm
	%9 = load i32* %j
	%10 = getelementptr [0 x i8]* %8, i32 0, i32 %9
	%11 = load i8* %10
	%12 = load [0 x i8]** %to
	%13 = load i32* %i
	%14 = getelementptr [0 x i8]* %12, i32 0, i32 %13
	store i8 %11, i8* %14
	%15 = load [0 x i8]** %fm
	%16 = load i32* %j
	%17 = getelementptr [0 x i8]* %15, i32 0, i32 %16
	%18 = load i8* %17
	%19 = icmp eq i8 %18, 0
	br i1 %19, label %L.2, label %L.4
L.4:
	%20 = load i32* %i
	%21 = add i32 %20, 1
	store i32 %21, i32* %i
	%22 = load i32* %j
	%23 = add i32 %22, 1
	store i32 %23, i32* %j
	br label %L.1
L.2:
	br label %return
return:
	ret void
}
declare external i32 @write(i32, [0 x i8]*, i32);
@S.1 = internal constant [2 x i8] c"\0A\00"define internal void @out_nl(i32 %o.arg) nounwind {
L.0:
	%o = alloca i32
	store i32 %o.arg, i32* %o
	%0 = load i32* %o
	%1 = getelementptr [2 x i8]* @S.1
	%2 = bitcast [2 x i8]* %1 to [0 x i8]*
	%3 = call i32 @write(i32 %0, [0 x i8]* %2, i32 1)
	br label %return
return:
	ret void
}
define internal void @out_chr(i32 %o.arg, i8 zeroext %c.arg) nounwind {
L.0:
	%o = alloca i32
	%c = alloca i8
	store i32 %o.arg, i32* %o
	store i8 %c.arg, i8* %c
	%buf = alloca [1 x i8]
	%0 = load i8* %c
	%1 = getelementptr [1 x i8]* %buf, i32 0, i32 0
	store i8 %0, i8* %1
	%2 = load i32* %o
	%3 = getelementptr [1 x i8]* %buf
	%4 = bitcast [1 x i8]* %3 to [0 x i8]*
	%5 = call i32 @write(i32 %2, [0 x i8]* %4, i32 1)
	br label %return
return:
	ret void
}
define internal void @out_str(i32 %o.arg, [0 x i8]* %s.arg) nounwind {
L.0:
	%o = alloca i32
	%s = alloca [0 x i8]*
	store i32 %o.arg, i32* %o
	store [0 x i8]* %s.arg, [0 x i8]** %s
	%n = alloca i32
	%0 = load [0 x i8]** %s
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = call i32 @zstr_len([0 x i8]* %1, i32 65535)
	store i32 %2, i32* %n
	%3 = load i32* %o
	%4 = load [0 x i8]** %s
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	%6 = load i32* %n
	%7 = call i32 @write(i32 %3, [0 x i8]* %5, i32 %6)
	br label %return
return:
	ret void
}
define internal void @out_strn(i32 %o.arg, [0 x i8]* %s.arg, i32 %len.arg) nounwind {
L.0:
	%o = alloca i32
	%s = alloca [0 x i8]*
	%len = alloca i32
	store i32 %o.arg, i32* %o
	store [0 x i8]* %s.arg, [0 x i8]** %s
	store i32 %len.arg, i32* %len
	%0 = load i32* %o
	%1 = load [0 x i8]** %s
	%2 = bitcast [0 x i8]* %1 to [0 x i8]*
	%3 = load i32* %len
	%4 = call i32 @write(i32 %0, [0 x i8]* %2, i32 %3)
	br label %return
return:
	ret void
}
@out_hex = internal constant [16 x i8] [ i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70 ], align 1
define internal void @out_hex8(i32 %o.arg, i8 zeroext %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i8
	store i32 %o.arg, i32* %o
	store i8 %in.arg, i8* %in
	%buf = alloca [2 x i8]
	%0 = load i8* %in
	%1 = lshr i8 %0, 4
	%2 = and i8 %1, 15
	%3 = zext i8 %2 to i32
	%4 = getelementptr [16 x i8]* @out_hex, i32 0, i32 %3
	%5 = load i8* %4
	%6 = getelementptr [2 x i8]* %buf, i32 0, i32 0
	store i8 %5, i8* %6
	%7 = load i8* %in
	%8 = and i8 %7, 15
	%9 = zext i8 %8 to i32
	%10 = getelementptr [16 x i8]* @out_hex, i32 0, i32 %9
	%11 = load i8* %10
	%12 = getelementptr [2 x i8]* %buf, i32 0, i32 1
	store i8 %11, i8* %12
	%13 = getelementptr [2 x i8]* %buf
	%14 = bitcast [2 x i8]* %13 to [0 x i8]*
	%15 = call i32 @write(i32 0, [0 x i8]* %14, i32 2)
	br label %return
return:
	ret void
}
define internal void @out_hex16(i32 %o.arg, i16 zeroext %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i16
	store i32 %o.arg, i32* %o
	store i16 %in.arg, i16* %in
	%buf = alloca [4 x i8]
	%0 = load i16* %in
	%1 = lshr i16 %0, 12
	%2 = and i16 %1, 15
	%3 = zext i16 %2 to i32
	%4 = getelementptr [16 x i8]* @out_hex, i32 0, i32 %3
	%5 = load i8* %4
	%6 = getelementptr [4 x i8]* %buf, i32 0, i32 0
	store i8 %5, i8* %6
	%7 = load i16* %in
	%8 = lshr i16 %7, 8
	%9 = and i16 %8, 15
	%10 = zext i16 %9 to i32
	%11 = getelementptr [16 x i8]* @out_hex, i32 0, i32 %10
	%12 = load i8* %11
	%13 = getelementptr [4 x i8]* %buf, i32 0, i32 1
	store i8 %12, i8* %13
	%14 = load i16* %in
	%15 = lshr i16 %14, 4
	%16 = and i16 %15, 15
	%17 = zext i16 %16 to i32
	%18 = getelementptr [16 x i8]* @out_hex, i32 0, i32 %17
	%19 = load i8* %18
	%20 = getelementptr [4 x i8]* %buf, i32 0, i32 2
	store i8 %19, i8* %20
	%21 = load i16* %in
	%22 = and i16 %21, 15
	%23 = zext i16 %22 to i32
	%24 = getelementptr [16 x i8]* @out_hex, i32 0, i32 %23
	%25 = load i8* %24
	%26 = getelementptr [4 x i8]* %buf, i32 0, i32 3
	store i8 %25, i8* %26
	%27 = load i32* %o
	%28 = getelementptr [4 x i8]* %buf
	%29 = bitcast [4 x i8]* %28 to [0 x i8]*
	%30 = call i32 @write(i32 %27, [0 x i8]* %29, i32 4)
	br label %return
return:
	ret void
}
define internal void @out_hex32(i32 %o.arg, i32 %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i32
	store i32 %o.arg, i32* %o
	store i32 %in.arg, i32* %in
	%buf = alloca [8 x i8]
	%i = alloca i32
	store i32 7, i32* %i
	br label %L.1
L.1:
	%0 = load i32* %in
	%1 = and i32 %0, 15
	%2 = getelementptr [16 x i8]* @out_hex, i32 0, i32 %1
	%3 = load i8* %2
	%4 = load i32* %i
	%5 = getelementptr [8 x i8]* %buf, i32 0, i32 %4
	store i8 %3, i8* %5
	%6 = load i32* %i
	%7 = icmp eq i32 %6, 0
	br i1 %7, label %L.2, label %L.3
L.3:
	%8 = load i32* %i
	%9 = sub i32 %8, 1
	store i32 %9, i32* %i
	%10 = load i32* %in
	%11 = lshr i32 %10, 4
	store i32 %11, i32* %in
	br label %L.1
L.2:
	%12 = load i32* %o
	%13 = getelementptr [8 x i8]* %buf
	%14 = bitcast [8 x i8]* %13 to [0 x i8]*
	%15 = call i32 @write(i32 %12, [0 x i8]* %14, i32 8)
	br label %return
return:
	ret void
}
define internal void @out_hex64(i32 %o.arg, i64 %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i64
	store i32 %o.arg, i32* %o
	store i64 %in.arg, i64* %in
	%buf = alloca [16 x i8]
	%i = alloca i8
	store i8 15, i8* %i
	br label %L.1
L.1:
	%0 = load i64* %in
	%1 = trunc i64 %0 to i32
	%2 = and i32 %1, 15
	%3 = getelementptr [16 x i8]* @out_hex, i32 0, i32 %2
	%4 = load i8* %3
	%5 = load i8* %i
	%6 = zext i8 %5 to i32
	%7 = getelementptr [16 x i8]* %buf, i32 0, i32 %6
	store i8 %4, i8* %7
	%8 = load i8* %i
	%9 = icmp eq i8 %8, 0
	br i1 %9, label %L.2, label %L.3
L.3:
	%10 = load i8* %i
	%11 = sub i8 %10, 1
	store i8 %11, i8* %i
	%12 = load i64* %in
	%13 = lshr i64 %12, 4
	store i64 %13, i64* %in
	br label %L.1
L.2:
	%14 = load i32* %o
	%15 = getelementptr [16 x i8]* %buf
	%16 = bitcast [16 x i8]* %15 to [0 x i8]*
	%17 = call i32 @write(i32 %14, [0 x i8]* %16, i32 16)
	br label %return
return:
	ret void
}
define internal void @out_uint64(i32 %o.arg, i64 %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i64
	store i32 %o.arg, i32* %o
	store i64 %in.arg, i64* %in
	%i = alloca i32
	%buf = alloca [20 x i8]
	store i32 20, i32* %i
	%0 = load i64* %in
	%1 = icmp eq i64 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i32* %i
	%3 = sub i32 %2, 1
	store i32 %3, i32* %i
	%4 = load i32* %i
	%5 = getelementptr [20 x i8]* %buf, i32 0, i32 %4
	store i8 48, i8* %5
	br label %L.1
L.3:
	br label %L.4
L.4:
	%6 = load i64* %in
	%7 = icmp ne i64 %6, 0
	%8 = xor i1 %7, true
	br i1 %8, label %L.5, label %L.6
L.6:
	%9 = load i32* %i
	%10 = sub i32 %9, 1
	store i32 %10, i32* %i
	%11 = load i64* %in
	%12 = urem i64 %11, 10
	%13 = add i64 %12, 48
	%14 = trunc i64 %13 to i8
	%15 = load i32* %i
	%16 = getelementptr [20 x i8]* %buf, i32 0, i32 %15
	store i8 %14, i8* %16
	%17 = load i64* %in
	%18 = udiv i64 %17, 10
	store i64 %18, i64* %in
	br label %L.4
L.5:
	br label %L.1
L.1:
	%19 = load i32* %o
	%20 = load i32* %i
	%21 = getelementptr [20 x i8]* %buf, i32 0, i32 %20
	%22 = bitcast i8* %21 to [20 x i8]*
	%23 = getelementptr [20 x i8]* %22
	%24 = bitcast [20 x i8]* %23 to [0 x i8]*
	%25 = load i32* %i
	%26 = sub i32 20, %25
	%27 = call i32 @write(i32 %19, [0 x i8]* %24, i32 %26)
	br label %return
return:
	ret void
}
define internal void @out_uint32(i32 %o.arg, i32 %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i32
	store i32 %o.arg, i32* %o
	store i32 %in.arg, i32* %in
	%i = alloca i32
	%buf = alloca [10 x i8]
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load i32* %o
	%1 = load i32* %in
	%2 = zext i32 %1 to i64
	call void @out_uint64(i32 %0, i64 %2)
	br label %L.1
L.3:
	store i32 10, i32* %i
	%3 = load i32* %in
	%4 = icmp eq i32 %3, 0
	br i1 %4, label %L.5, label %L.6
L.5:
	%5 = load i32* %i
	%6 = sub i32 %5, 1
	store i32 %6, i32* %i
	%7 = load i32* %i
	%8 = getelementptr [10 x i8]* %buf, i32 0, i32 %7
	store i8 48, i8* %8
	br label %L.4
L.6:
	br label %L.7
L.7:
	%9 = load i32* %in
	%10 = icmp ne i32 %9, 0
	%11 = xor i1 %10, true
	br i1 %11, label %L.8, label %L.9
L.9:
	%12 = load i32* %i
	%13 = sub i32 %12, 1
	store i32 %13, i32* %i
	%14 = load i32* %in
	%15 = urem i32 %14, 10
	%16 = add i32 %15, 48
	%17 = trunc i32 %16 to i8
	%18 = load i32* %i
	%19 = getelementptr [10 x i8]* %buf, i32 0, i32 %18
	store i8 %17, i8* %19
	%20 = load i32* %in
	%21 = udiv i32 %20, 10
	store i32 %21, i32* %in
	br label %L.7
L.8:
	br label %L.4
L.4:
	%22 = load i32* %o
	%23 = load i32* %i
	%24 = getelementptr [10 x i8]* %buf, i32 0, i32 %23
	%25 = bitcast i8* %24 to [10 x i8]*
	%26 = getelementptr [10 x i8]* %25
	%27 = bitcast [10 x i8]* %26 to [0 x i8]*
	%28 = load i32* %i
	%29 = sub i32 10, %28
	%30 = call i32 @write(i32 %22, [0 x i8]* %27, i32 %29)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @out_uint16(i32 %o.arg, i16 zeroext %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i16
	store i32 %o.arg, i32* %o
	store i16 %in.arg, i16* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load i32* %o
	%1 = load i16* %in
	%2 = zext i16 %1 to i64
	call void @out_uint64(i32 %0, i64 %2)
	br label %L.1
L.3:
	%3 = load i32* %o
	%4 = load i16* %in
	%5 = zext i16 %4 to i32
	call void @out_uint32(i32 %3, i32 %5)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @out_uint8(i32 %o.arg, i8 zeroext %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i8
	store i32 %o.arg, i32* %o
	store i8 %in.arg, i8* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load i32* %o
	%1 = load i8* %in
	%2 = zext i8 %1 to i64
	call void @out_uint64(i32 %0, i64 %2)
	br label %L.1
L.3:
	%3 = load i32* %o
	%4 = load i8* %in
	%5 = zext i8 %4 to i32
	call void @out_uint32(i32 %3, i32 %5)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define void @out_uint(i32 %o.arg, i32 %in.arg) alwaysinline nounwind {
L.0:
	%o = alloca i32
	%in = alloca i32
	store i32 %o.arg, i32* %o
	store i32 %in.arg, i32* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load i32* %o
	%1 = load i32* %in
	%2 = zext i32 %1 to i64
	call void @out_uint64(i32 %0, i64 %2)
	br label %L.1
L.3:
	%3 = load i32* %o
	%4 = load i32* %in
	call void @out_uint32(i32 %3, i32 %4)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.3 = internal constant [2 x i8] c"-\00"define internal void @out_int64(i32 %o.arg, i64 %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i64
	store i32 %o.arg, i32* %o
	store i64 %in.arg, i64* %in
	%ui = alloca i64
	%0 = load i64* %in
	%1 = icmp slt i64 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i32* %o
	%3 = getelementptr [2 x i8]* @S.3
	%4 = bitcast [2 x i8]* %3 to [0 x i8]*
	%5 = call i32 @write(i32 %2, [0 x i8]* %4, i32 1)
	%6 = load i64* %in
	%7 = sub i64 0, %6
	store i64 %7, i64* %ui
	br label %L.1
L.3:
	%8 = load i64* %in
	store i64 %8, i64* %ui
	br label %L.1
L.1:
	%9 = load i32* %o
	%10 = load i64* %ui
	call void @out_uint64(i32 %9, i64 %10)
	br label %return
return:
	ret void
}
@S.4 = internal constant [2 x i8] c"-\00"define internal void @out_int32(i32 %o.arg, i32 %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i32
	store i32 %o.arg, i32* %o
	store i32 %in.arg, i32* %in
	%ui = alloca i32
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load i32* %o
	%1 = load i32* %in
	%2 = sext i32 %1 to i64
	call void @out_int64(i32 %0, i64 %2)
	br label %L.1
L.3:
	%3 = load i32* %in
	%4 = icmp slt i32 %3, 0
	br i1 %4, label %L.5, label %L.6
L.5:
	%5 = load i32* %o
	%6 = getelementptr [2 x i8]* @S.4
	%7 = bitcast [2 x i8]* %6 to [0 x i8]*
	%8 = call i32 @write(i32 %5, [0 x i8]* %7, i32 1)
	%9 = load i32* %in
	%10 = sub i32 0, %9
	%11 = sext i32 %10 to i64
	%12 = trunc i64 %11 to i32
	store i32 %12, i32* %ui
	br label %L.4
L.6:
	%13 = load i32* %in
	%14 = sext i32 %13 to i64
	%15 = trunc i64 %14 to i32
	store i32 %15, i32* %ui
	br label %L.4
L.4:
	%16 = load i32* %o
	%17 = load i32* %ui
	call void @out_uint32(i32 %16, i32 %17)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @out_int16(i32 %o.arg, i16 signext %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i16
	store i32 %o.arg, i32* %o
	store i16 %in.arg, i16* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load i32* %o
	%1 = load i16* %in
	%2 = sext i16 %1 to i64
	call void @out_int64(i32 %0, i64 %2)
	br label %L.1
L.3:
	%3 = load i32* %o
	%4 = load i16* %in
	%5 = sext i16 %4 to i32
	call void @out_int32(i32 %3, i32 %5)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @out_int8(i32 %o.arg, i8 signext %in.arg) nounwind {
L.0:
	%o = alloca i32
	%in = alloca i8
	store i32 %o.arg, i32* %o
	store i8 %in.arg, i8* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load i32* %o
	%1 = load i8* %in
	%2 = sext i8 %1 to i64
	call void @out_int64(i32 %0, i64 %2)
	br label %L.1
L.3:
	%3 = load i32* %o
	%4 = load i8* %in
	%5 = sext i8 %4 to i32
	call void @out_int32(i32 %3, i32 %5)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define void @out_int(i32 %o.arg, i32 %in.arg) alwaysinline nounwind {
L.0:
	%o = alloca i32
	%in = alloca i32
	store i32 %o.arg, i32* %o
	store i32 %in.arg, i32* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load i32* %o
	%1 = load i32* %in
	%2 = sext i32 %1 to i64
	call void @out_int64(i32 %0, i64 %2)
	br label %L.1
L.3:
	%3 = load i32* %o
	%4 = load i32* %in
	call void @out_int32(i32 %3, i32 %4)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.6 = internal constant [30 x i8] c"Feature not yet implemented: \00";
@S.7 = internal constant [42 x i8] c"Use of ':' deprecated, use 'then' instead\00";
@S.8 = internal constant [34 x i8] c"Truncation may cause loss of data\00";
@S.9 = internal constant [38 x i8] c"Converting unsigned to signed integer\00";
@S.10 = internal constant [38 x i8] c"Converting signed to unsigned integer\00";
@S.11 = internal constant [42 x i8] c"Pointer converted from wrong size integer\00";
@S.12 = internal constant [44 x i8] c"End of line in string or character constant\00";
@S.13 = internal constant [23 x i8] c"End of file in comment\00";
@S.14 = internal constant [23 x i8] c"Unexpected end of file\00";
@S.15 = internal constant [29 x i8] c"Malformed character constant\00";
@S.16 = internal constant [53 x i8] c"Malformed hex escape in string or character constant\00";
@S.17 = internal constant [25 x i8] c"Malformed unicode escape\00";
@S.18 = internal constant [20 x i8] c"Identifier too long\00";
@S.19 = internal constant [16 x i8] c"String too long\00";
@S.20 = internal constant [11 x i8] c"Expected: \00";
@S.21 = internal constant [20 x i8] c"Expected identifier\00";
@S.22 = internal constant [23 x i8] c"Undefined identifier: \00";
@S.23 = internal constant [28 x i8] c"Identifier already in use: \00";
@S.24 = internal constant [18 x i8] c"Undefined field: \00";
@S.25 = internal constant [24 x i8] c"Unexpected identifier: \00";
@S.26 = internal constant [35 x i8] c"Cannot dereference incomplete type\00";
@S.27 = internal constant [28 x i8] c"Illegal index specification\00";
@S.28 = internal constant [25 x i8] c"Identifier has no type: \00";
@S.29 = internal constant [25 x i8] c"Expected type identifier\00";
@S.30 = internal constant [25 x i8] c"Error in type definition\00";
@S.31 = internal constant [26 x i8] c"Enumeration type required\00";
@S.32 = internal constant [33 x i8] c"Illegal use of type identifier: \00";
@S.33 = internal constant [34 x i8] c"Operation not suppported for type\00";
@S.34 = internal constant [25 x i8] c"Error in type definition\00";
@S.35 = internal constant [20 x i8] c"Unknown attribute: \00";
@S.36 = internal constant [45 x i8] c"Statement begins with undefined identifier: \00";
@S.37 = internal constant [49 x i8] c"Statement begins with inappropriate identifier: \00";
@S.38 = internal constant [44 x i8] c"Statement begins with inappropriate token: \00";
@S.39 = internal constant [37 x i8] c"Illegal comparison, bad type perhaps\00";
@S.40 = internal constant [46 x i8] c"Syntax error in possible assignment statement\00";
@S.41 = internal constant [19 x i8] c"Illegal assignment\00";
@S.42 = internal constant [26 x i8] c"Illegal lhs in assignment\00";
@S.43 = internal constant [26 x i8] c"Illegal rhs in assignment\00";
@S.44 = internal constant [28 x i8] c"Type mismatch in assignment\00";
@S.45 = internal constant [36 x i8] c"Not enough rhs values in assignment\00";
@S.46 = internal constant [34 x i8] c"Too many rhs values in assignment\00";
@S.47 = internal constant [51 x i8] c"Return with no value in procedure that expects one\00";
@S.48 = internal constant [38 x i8] c"Call of undefined forward procedure: \00";
@S.49 = internal constant [51 x i8] c"Parameter types changed from forward declaration: \00";
@S.50 = internal constant [54 x i8] c"Return value types changed from forward declaration: \00";
@S.51 = internal constant [28 x i8] c"Boolean expression required\00";
@S.52 = internal constant [37 x i8] c"Unsigned integer expression required\00";
@S.53 = internal constant [13 x i8] c"Illegal cast\00";
@S.54 = internal constant [33 x i8] c"Missing type for composite value\00";
@S.55 = internal constant [33 x i8] c"Illegal type for composite value\00";
@S.56 = internal constant [41 x i8] c"Missing or undefined property identifier\00";
@S.57 = internal constant [25 x i8] c"Expecting \22then\22 or \22is\22\00";
@S.58 = internal constant [21 x i8] c"Error in \22is\22 clause\00";
@S.59 = internal constant [34 x i8] c"Return statement not in procedure\00";
@S.60 = internal constant [29 x i8] c"Exit statement not in a loop\00";
@S.61 = internal constant [29 x i8] c"Unknown statement in package\00";
@S.62 = internal constant [14 x i8] c"Not a pointer\00";
@S.63 = internal constant [13 x i8] c"Not an array\00";
@S.64 = internal constant [33 x i8] c"Array copy with undefined length\00";
@S.65 = internal constant [13 x i8] c"Not a record\00";
@S.66 = internal constant [35 x i8] c"Syntax error in record declaration\00";
@S.67 = internal constant [27 x i8] c"Base type must be a record\00";
@S.68 = internal constant [33 x i8] c"Base type must be an enumeration\00";
@S.69 = internal constant [41 x i8] c"Insufficient arguments to procedure call\00";
@S.70 = internal constant [37 x i8] c"Too many arguments to procedure call\00";
@S.71 = internal constant [49 x i8] c"Actual parameter type not compatible with formal\00";
@S.72 = internal constant [22 x i8] c"Too many initializers\00";
@S.73 = internal constant [32 x i8] c"Const requires a constant value\00";
@S.74 = internal constant [43 x i8] c"Expression must be a compile-time constant\00";
@S.75 = internal constant [19 x i8] c"Unable to import: \00";
@S.76 = internal constant [33 x i8] c"Expecting LIST for packed record\00";
@S.77 = internal constant [23 x i8] c"Assignment to constant\00";
@S.78 = internal constant [25 x i8] c"Illegal pointer constant\00";
@lex_ErrMsg = internal constant [74 x [0 x i8]*] [ [0 x i8] * bitcast( [30 x i8]* getelementptr( [30 x i8]* @S.6 )  to [0 x i8]* ), [0 x i8] * bitcast( [42 x i8]* getelementptr( [42 x i8]* @S.7 )  to [0 x i8]* ), [0 x i8] * bitcast( [34 x i8]* getelementptr( [34 x i8]* @S.8 )  to [0 x i8]* ), [0 x i8] * bitcast( [38 x i8]* getelementptr( [38 x i8]* @S.9 )  to [0 x i8]* ), [0 x i8] * bitcast( [38 x i8]* getelementptr( [38 x i8]* @S.10 )  to [0 x i8]* ), [0 x i8] * bitcast( [42 x i8]* getelementptr( [42 x i8]* @S.11 )  to [0 x i8]* ), [0 x i8] * bitcast( [44 x i8]* getelementptr( [44 x i8]* @S.12 )  to [0 x i8]* ), [0 x i8] * bitcast( [23 x i8]* getelementptr( [23 x i8]* @S.13 )  to [0 x i8]* ), [0 x i8] * bitcast( [23 x i8]* getelementptr( [23 x i8]* @S.14 )  to [0 x i8]* ), [0 x i8] * bitcast( [29 x i8]* getelementptr( [29 x i8]* @S.15 )  to [0 x i8]* ), [0 x i8] * bitcast( [53 x i8]* getelementptr( [53 x i8]* @S.16 )  to [0 x i8]* ), [0 x i8] * bitcast( [25 x i8]* getelementptr( [25 x i8]* @S.17 )  to [0 x i8]* ), [0 x i8] * bitcast( [20 x i8]* getelementptr( [20 x i8]* @S.18 )  to [0 x i8]* ), [0 x i8] * bitcast( [16 x i8]* getelementptr( [16 x i8]* @S.19 )  to [0 x i8]* ), [0 x i8] * bitcast( [11 x i8]* getelementptr( [11 x i8]* @S.20 )  to [0 x i8]* ), [0 x i8] * bitcast( [20 x i8]* getelementptr( [20 x i8]* @S.21 )  to [0 x i8]* ), [0 x i8] * bitcast( [23 x i8]* getelementptr( [23 x i8]* @S.22 )  to [0 x i8]* ), [0 x i8] * bitcast( [28 x i8]* getelementptr( [28 x i8]* @S.23 )  to [0 x i8]* ), [0 x i8] * bitcast( [18 x i8]* getelementptr( [18 x i8]* @S.24 )  to [0 x i8]* ), [0 x i8] * bitcast( [24 x i8]* getelementptr( [24 x i8]* @S.25 )  to [0 x i8]* ), [0 x i8] * bitcast( [35 x i8]* getelementptr( [35 x i8]* @S.26 )  to [0 x i8]* ), [0 x i8] * bitcast( [28 x i8]* getelementptr( [28 x i8]* @S.27 )  to [0 x i8]* ), [0 x i8] * bitcast( [25 x i8]* getelementptr( [25 x i8]* @S.28 )  to [0 x i8]* ), [0 x i8] * bitcast( [25 x i8]* getelementptr( [25 x i8]* @S.29 )  to [0 x i8]* ), [0 x i8] * bitcast( [25 x i8]* getelementptr( [25 x i8]* @S.30 )  to [0 x i8]* ), [0 x i8] * bitcast( [26 x i8]* getelementptr( [26 x i8]* @S.31 )  to [0 x i8]* ), [0 x i8] * bitcast( [33 x i8]* getelementptr( [33 x i8]* @S.32 )  to [0 x i8]* ), [0 x i8] * bitcast( [34 x i8]* getelementptr( [34 x i8]* @S.33 )  to [0 x i8]* ), [0 x i8] * bitcast( [25 x i8]* getelementptr( [25 x i8]* @S.34 )  to [0 x i8]* ), [0 x i8] * bitcast( [20 x i8]* getelementptr( [20 x i8]* @S.35 )  to [0 x i8]* ), [0 x i8] * bitcast( [45 x i8]* getelementptr( [45 x i8]* @S.36 )  to [0 x i8]* ), [0 x i8] * bitcast( [49 x i8]* getelementptr( [49 x i8]* @S.37 )  to [0 x i8]* ), [0 x i8] * bitcast( [44 x i8]* getelementptr( [44 x i8]* @S.38 )  to [0 x i8]* ), [0 x i8] * bitcast( [37 x i8]* getelementptr( [37 x i8]* @S.39 )  to [0 x i8]* ), [0 x i8] * bitcast( [46 x i8]* getelementptr( [46 x i8]* @S.40 )  to [0 x i8]* ), [0 x i8] * bitcast( [19 x i8]* getelementptr( [19 x i8]* @S.41 )  to [0 x i8]* ), [0 x i8] * bitcast( [26 x i8]* getelementptr( [26 x i8]* @S.42 )  to [0 x i8]* ), [0 x i8] * bitcast( [26 x i8]* getelementptr( [26 x i8]* @S.43 )  to [0 x i8]* ), [0 x i8] * bitcast( [28 x i8]* getelementptr( [28 x i8]* @S.44 )  to [0 x i8]* ), [0 x i8] * bitcast( [36 x i8]* getelementptr( [36 x i8]* @S.45 )  to [0 x i8]* ), [0 x i8] * bitcast( [34 x i8]* getelementptr( [34 x i8]* @S.46 )  to [0 x i8]* ), [0 x i8] * bitcast( [51 x i8]* getelementptr( [51 x i8]* @S.47 )  to [0 x i8]* ), [0 x i8] * bitcast( [38 x i8]* getelementptr( [38 x i8]* @S.48 )  to [0 x i8]* ), [0 x i8] * bitcast( [51 x i8]* getelementptr( [51 x i8]* @S.49 )  to [0 x i8]* ), [0 x i8] * bitcast( [54 x i8]* getelementptr( [54 x i8]* @S.50 )  to [0 x i8]* ), [0 x i8] * bitcast( [28 x i8]* getelementptr( [28 x i8]* @S.51 )  to [0 x i8]* ), [0 x i8] * bitcast( [37 x i8]* getelementptr( [37 x i8]* @S.52 )  to [0 x i8]* ), [0 x i8] * bitcast( [13 x i8]* getelementptr( [13 x i8]* @S.53 )  to [0 x i8]* ), [0 x i8] * bitcast( [33 x i8]* getelementptr( [33 x i8]* @S.54 )  to [0 x i8]* ), [0 x i8] * bitcast( [33 x i8]* getelementptr( [33 x i8]* @S.55 )  to [0 x i8]* ), [0 x i8] * bitcast( [41 x i8]* getelementptr( [41 x i8]* @S.56 )  to [0 x i8]* ), [0 x i8] * bitcast( [25 x i8]* getelementptr( [25 x i8]* @S.57 )  to [0 x i8]* ), [0 x i8] * bitcast( [21 x i8]* getelementptr( [21 x i8]* @S.58 )  to [0 x i8]* ), [0 x i8] * bitcast( [34 x i8]* getelementptr( [34 x i8]* @S.59 )  to [0 x i8]* ), [0 x i8] * bitcast( [29 x i8]* getelementptr( [29 x i8]* @S.60 )  to [0 x i8]* ), [0 x i8] * bitcast( [29 x i8]* getelementptr( [29 x i8]* @S.61 )  to [0 x i8]* ), [0 x i8] * bitcast( [14 x i8]* getelementptr( [14 x i8]* @S.62 )  to [0 x i8]* ), [0 x i8] * bitcast( [13 x i8]* getelementptr( [13 x i8]* @S.63 )  to [0 x i8]* ), [0 x i8] * bitcast( [33 x i8]* getelementptr( [33 x i8]* @S.64 )  to [0 x i8]* ), [0 x i8] * bitcast( [13 x i8]* getelementptr( [13 x i8]* @S.65 )  to [0 x i8]* ), [0 x i8] * bitcast( [35 x i8]* getelementptr( [35 x i8]* @S.66 )  to [0 x i8]* ), [0 x i8] * bitcast( [27 x i8]* getelementptr( [27 x i8]* @S.67 )  to [0 x i8]* ), [0 x i8] * bitcast( [33 x i8]* getelementptr( [33 x i8]* @S.68 )  to [0 x i8]* ), [0 x i8] * bitcast( [41 x i8]* getelementptr( [41 x i8]* @S.69 )  to [0 x i8]* ), [0 x i8] * bitcast( [37 x i8]* getelementptr( [37 x i8]* @S.70 )  to [0 x i8]* ), [0 x i8] * bitcast( [49 x i8]* getelementptr( [49 x i8]* @S.71 )  to [0 x i8]* ), [0 x i8] * bitcast( [22 x i8]* getelementptr( [22 x i8]* @S.72 )  to [0 x i8]* ), [0 x i8] * bitcast( [32 x i8]* getelementptr( [32 x i8]* @S.73 )  to [0 x i8]* ), [0 x i8] * bitcast( [43 x i8]* getelementptr( [43 x i8]* @S.74 )  to [0 x i8]* ), [0 x i8] * bitcast( [19 x i8]* getelementptr( [19 x i8]* @S.75 )  to [0 x i8]* ), [0 x i8]* zeroinitializer, [0 x i8] * bitcast( [33 x i8]* getelementptr( [33 x i8]* @S.76 )  to [0 x i8]* ), [0 x i8] * bitcast( [23 x i8]* getelementptr( [23 x i8]* @S.77 )  to [0 x i8]* ), [0 x i8] * bitcast( [25 x i8]* getelementptr( [25 x i8]* @S.78 )  to [0 x i8]* ) ], align 4
@S.80 = internal constant [1 x i8] c"\00";
@S.81 = internal constant [10 x i8] c"ENDOFFILE\00";
@S.82 = internal constant [2 x i8] c".\00";
@S.83 = internal constant [2 x i8] c":\00";
@S.84 = internal constant [2 x i8] c";\00";
@S.85 = internal constant [2 x i8] c",\00";
@S.86 = internal constant [3 x i8] c"..\00";
@S.87 = internal constant [2 x i8] c"@\00";
@S.88 = internal constant [2 x i8] c"?\00";
@S.89 = internal constant [2 x i8] c"=\00";
@S.90 = internal constant [3 x i8] c"+=\00";
@S.91 = internal constant [3 x i8] c"-=\00";
@S.92 = internal constant [2 x i8] c"!\00";
@S.93 = internal constant [2 x i8] c"~\00";
@S.94 = internal constant [2 x i8] c"+\00";
@S.95 = internal constant [2 x i8] c"-\00";
@S.96 = internal constant [2 x i8] c"|\00";
@S.97 = internal constant [2 x i8] c"^\00";
@S.98 = internal constant [2 x i8] c"*\00";
@S.99 = internal constant [2 x i8] c"/\00";
@S.100 = internal constant [2 x i8] c"%\00";
@S.101 = internal constant [3 x i8] c"<<\00";
@S.102 = internal constant [3 x i8] c">>\00";
@S.103 = internal constant [2 x i8] c"&\00";
@S.104 = internal constant [3 x i8] c"==\00";
@S.105 = internal constant [3 x i8] c"!=\00";
@S.106 = internal constant [2 x i8] c"<\00";
@S.107 = internal constant [2 x i8] c">\00";
@S.108 = internal constant [3 x i8] c"<=\00";
@S.109 = internal constant [3 x i8] c">=\00";
@S.110 = internal constant [3 x i8] c"&&\00";
@S.111 = internal constant [3 x i8] c"||\00";
@S.112 = internal constant [2 x i8] c"(\00";
@S.113 = internal constant [2 x i8] c")\00";
@S.114 = internal constant [2 x i8] c"[\00";
@S.115 = internal constant [2 x i8] c"]\00";
@S.116 = internal constant [2 x i8] c"{\00";
@S.117 = internal constant [2 x i8] c"}\00";
@S.118 = internal constant [7 x i8] c"NUMBER\00";
@S.119 = internal constant [7 x i8] c"STRING\00";
@S.120 = internal constant [6 x i8] c"IDENT\00";
@S.121 = internal constant [5 x i8] c"type\00";
@S.122 = internal constant [4 x i8] c"var\00";
@S.123 = internal constant [6 x i8] c"const\00";
@S.124 = internal constant [5 x i8] c"proc\00";
@S.125 = internal constant [8 x i8] c"package\00";
@S.126 = internal constant [7 x i8] c"return\00";
@S.127 = internal constant [3 x i8] c"if\00";
@S.128 = internal constant [5 x i8] c"then\00";
@S.129 = internal constant [5 x i8] c"else\00";
@S.130 = internal constant [3 x i8] c"is\00";
@S.131 = internal constant [4 x i8] c"for\00";
@S.132 = internal constant [6 x i8] c"while\00";
@S.133 = internal constant [3 x i8] c"do\00";
@S.134 = internal constant [5 x i8] c"loop\00";
@S.135 = internal constant [5 x i8] c"exit\00";
@S.136 = internal constant [5 x i8] c"with\00";
@S.137 = internal constant [7 x i8] c"import\00";
@S.138 = internal constant [6 x i8] c"alias\00";
@S.139 = internal constant [3 x i8] c"as\00";
@S.140 = internal constant [5 x i8] c"when\00";
@S.141 = internal constant [4 x i8] c"asm\00";
@S.142 = internal constant [7 x i8] c"packed\00";
@S.143 = internal constant [10 x i8] c"mempacked\00";
@S.144 = internal constant [4 x i8] c"lsb\00";
@S.145 = internal constant [4 x i8] c"msb\00";
@S.146 = internal constant [3 x i8] c"le\00";
@S.147 = internal constant [3 x i8] c"be\00";
@S.148 = internal constant [3 x i8] c"ro\00";
@S.149 = internal constant [3 x i8] c"wo\00";
@S.150 = internal constant [3 x i8] c"in\00";
@S.151 = internal constant [4 x i8] c"out\00";
@S.152 = internal constant [9 x i8] c"external\00";
@S.153 = internal constant [7 x i8] c"global\00";
@S.154 = internal constant [8 x i8] c"section\00";
@S.155 = internal constant [6 x i8] c"align\00";
@S.156 = internal constant [7 x i8] c"inline\00";
@S.157 = internal constant [10 x i8] c"interrupt\00";
@S.158 = internal constant [4 x i8] c"min\00";
@S.159 = internal constant [4 x i8] c"max\00";
@S.160 = internal constant [5 x i8] c"bits\00";
@S.161 = internal constant [5 x i8] c"size\00";
@S.162 = internal constant [4 x i8] c"len\00";
@lex_keywords = internal constant [83 x [0 x i8]*] [ [0 x i8] * bitcast( [1 x i8]* getelementptr( [1 x i8]* @S.80 )  to [0 x i8]* ), [0 x i8] * bitcast( [10 x i8]* getelementptr( [10 x i8]* @S.81 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.82 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.83 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.84 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.85 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.86 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.87 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.88 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.89 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.90 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.91 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.92 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.93 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.94 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.95 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.96 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.97 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.98 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.99 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.100 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.101 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.102 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.103 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.104 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.105 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.106 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.107 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.108 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.109 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.110 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.111 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.112 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.113 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.114 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.115 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.116 )  to [0 x i8]* ), [0 x i8] * bitcast( [2 x i8]* getelementptr( [2 x i8]* @S.117 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.118 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.119 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.120 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.121 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.122 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.123 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.124 )  to [0 x i8]* ), [0 x i8] * bitcast( [8 x i8]* getelementptr( [8 x i8]* @S.125 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.126 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.127 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.128 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.129 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.130 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.131 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.132 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.133 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.134 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.135 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.136 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.137 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.138 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.139 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.140 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.141 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.142 )  to [0 x i8]* ), [0 x i8] * bitcast( [10 x i8]* getelementptr( [10 x i8]* @S.143 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.144 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.145 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.146 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.147 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.148 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.149 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.150 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.151 )  to [0 x i8]* ), [0 x i8] * bitcast( [9 x i8]* getelementptr( [9 x i8]* @S.152 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.153 )  to [0 x i8]* ), [0 x i8] * bitcast( [8 x i8]* getelementptr( [8 x i8]* @S.154 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.155 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.156 )  to [0 x i8]* ), [0 x i8] * bitcast( [10 x i8]* getelementptr( [10 x i8]* @S.157 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.158 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.159 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.160 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.161 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.162 )  to [0 x i8]* ) ], align 4
%lex.SearchPathEntry = type {%lex.SearchPathEntry*, [1024 x i8]}
@lex_pathhead = internal global %lex.SearchPathEntry* zeroinitializer, align 4
@lex_pathtail = internal global %lex.SearchPathEntry* zeroinitializer, align 4
%lex.FileListEntry = type {%lex.FileListEntry*, i16, [256 x i8]}
@lex_filehead = internal global %lex.FileListEntry* zeroinitializer, align 4
@lex_filetail = internal global %lex.FileListEntry* zeroinitializer, align 4
%lex.FileContext = type {%lex.FileContext*, i32, i16, i16, i16, i8, i8, %lex.SearchPathEntry*, [256 x i8], [4096 x i8]}
@lex_f = internal global %lex.FileContext* zeroinitializer, align 4
@lex_ErrorCount = internal global i8 0, align 1
@lex_Token = internal global i8 0, align 1
@lex_Ident = internal global [64 x i8] zeroinitializer, align 1
@lex_Number = internal global i64 0, align 4
@lex_StringLen = internal global i16 0, align 2
@lex_StringBuf = internal global [4096 x i8] zeroinitializer, align 1
define internal zeroext i16 @lex_Lineno() nounwind {
L.0:
	%rv.0 = alloca i16
	%0 = load %lex.FileContext** @lex_f
	%1 = icmp eq %lex.FileContext* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	store i16 0, i16* %rv.0
	br label %return
L.1:
	%2 = load %lex.FileContext** @lex_f
	%3 = getelementptr %lex.FileContext* %2, i32 0, i32 2
	%4 = load i16* %3
	store i16 %4, i16* %rv.0
	br label %return
return:
	%5 = load i16* %rv.0
	ret i16 %5
}
@S.163 = internal constant [3 x i8] c": \00"@S.164 = internal constant [10 x i8] c"Internal \00"@S.165 = internal constant [8 x i8] c"Error: \00"@S.166 = internal constant [10 x i8] c"Warning: \00"@S.167 = internal constant [27 x i8] c"Too many errors, quiting.\0A\00"declare external void @exit(i32);
define internal void @lex_ErrorSub(i8 zeroext %error.arg) nounwind {
L.0:
	%error = alloca i8
	store i8 %error.arg, i8* %error
	%0 = load %lex.FileContext** @lex_f
	%1 = getelementptr %lex.FileContext* %0, i32 0, i32 7
	%2 = load %lex.SearchPathEntry** %1
	%3 = icmp ne %lex.SearchPathEntry* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %lex.FileContext** @lex_f
	%5 = getelementptr %lex.FileContext* %4, i32 0, i32 7
	%6 = load %lex.SearchPathEntry** %5
	%7 = getelementptr %lex.SearchPathEntry* %6, i32 0, i32 1
	%8 = getelementptr [1024 x i8]* %7
	%9 = bitcast [1024 x i8]* %8 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %9)
	call void @out_chr(i32 2, i8 47)
	br label %L.1
L.1:
	%10 = load %lex.FileContext** @lex_f
	%11 = getelementptr %lex.FileContext* %10, i32 0, i32 8
	%12 = getelementptr [256 x i8]* %11
	%13 = bitcast [256 x i8]* %12 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %13)
	call void @out_chr(i32 2, i8 58)
	%14 = call i16 @lex_Lineno()
	%15 = zext i16 %14 to i32
	call void @out_uint(i32 2, i32 %15)
	%16 = getelementptr [3 x i8]* @S.163
	%17 = bitcast [3 x i8]* %16 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %17)
	%18 = load i8* %error
	%19 = icmp uge i8 %18, 6
	br i1 %19, label %L.4, label %L.5
L.4:
	%20 = load i8* %error
	%21 = icmp uge i8 %20, 70
	br i1 %21, label %L.7, label %L.6
L.7:
	%22 = getelementptr [10 x i8]* @S.164
	%23 = bitcast [10 x i8]* %22 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %23)
	br label %L.6
L.6:
	%24 = getelementptr [8 x i8]* @S.165
	%25 = bitcast [8 x i8]* %24 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %25)
	%26 = load i8* @lex_ErrorCount
	%27 = add i8 %26, 1
	store i8 %27, i8* @lex_ErrorCount
	br label %L.3
L.5:
	%28 = getelementptr [10 x i8]* @S.166
	%29 = bitcast [10 x i8]* %28 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %29)
	br label %L.3
L.3:
	%30 = load i8* %error
	%31 = zext i8 %30 to i32
	%32 = getelementptr [74 x [0 x i8]*]* @lex_ErrMsg, i32 0, i32 %31
	%33 = load [0 x i8]** %32
	%34 = bitcast [0 x i8]* %33 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %34)
	%35 = load i8* @lex_ErrorCount
	%36 = zext i8 %35 to i32
	%37 = icmp uge i32 %36, 10
	br i1 %37, label %L.9, label %L.8
L.9:
	%38 = getelementptr [27 x i8]* @S.167
	%39 = bitcast [27 x i8]* %38 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %39)
	call void @exit(i32 1)
	br label %L.8
L.8:
	br label %return
return:
	ret void
}
define internal void @lex_Error(i8 zeroext %error.arg) nounwind {
L.0:
	%error = alloca i8
	store i8 %error.arg, i8* %error
	%0 = load i8* %error
	call void @lex_ErrorSub(i8 %0)
	call void @out_nl(i32 2)
	br label %return
return:
	ret void
}
define internal void @lex_ErrorS(i8 zeroext %error.arg, [0 x i8]* %msg.arg) nounwind {
L.0:
	%error = alloca i8
	%msg = alloca [0 x i8]*
	store i8 %error.arg, i8* %error
	store [0 x i8]* %msg.arg, [0 x i8]** %msg
	%0 = load i8* %error
	call void @lex_ErrorSub(i8 %0)
	%1 = load [0 x i8]** %msg
	%2 = bitcast [0 x i8]* %1 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %2)
	call void @out_nl(i32 2)
	br label %return
return:
	ret void
}
define internal void @lex_ErrorI(i8 zeroext %error.arg, [0 x i8]* %ident.arg) nounwind {
L.0:
	%error = alloca i8
	%ident = alloca [0 x i8]*
	store i8 %error.arg, i8* %error
	store [0 x i8]* %ident.arg, [0 x i8]** %ident
	%0 = load i8* %error
	call void @lex_ErrorSub(i8 %0)
	%1 = load [0 x i8]** %ident
	%2 = bitcast [0 x i8]* %1 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %2)
	call void @out_nl(i32 2)
	br label %return
return:
	ret void
}
define internal void @lex_ErrorT(i8 zeroext %error.arg, i8 zeroext %tok.arg) nounwind {
L.0:
	%error = alloca i8
	%tok = alloca i8
	store i8 %error.arg, i8* %error
	store i8 %tok.arg, i8* %tok
	%0 = load i8* %error
	call void @lex_ErrorSub(i8 %0)
	call void @out_chr(i32 2, i8 39)
	%1 = load i8* %tok
	%2 = zext i8 %1 to i32
	%3 = getelementptr [83 x [0 x i8]*]* @lex_keywords, i32 0, i32 %2
	%4 = load [0 x i8]** %3
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %5)
	call void @out_chr(i32 2, i8 39)
	call void @out_nl(i32 2)
	br label %return
return:
	ret void
}
@S.168 = internal constant [18 x i8] c"New search path \22\00"@S.169 = internal constant [3 x i8] c"\22\0A\00"define internal %lex.SearchPathEntry* @lex_SearchPathAdd([0 x i8]* %newpath.arg, i8 zeroext %prepend.arg) nounwind {
L.0:
	%rv.0 = alloca %lex.SearchPathEntry*
	%newpath = alloca [0 x i8]*
	%prepend = alloca i8
	store [0 x i8]* %newpath.arg, [0 x i8]** %newpath
	store i8 %prepend.arg, i8* %prepend
	%np = alloca %lex.SearchPathEntry*
	%0 = call [0 x i8]* @malloc(i32 1028)
	%1 = bitcast [0 x i8]* %0 to %lex.SearchPathEntry*
	%2 = bitcast %lex.SearchPathEntry* %1 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %2, %lex.SearchPathEntry** %np
	%3 = load %lex.SearchPathEntry** %np
	%4 = getelementptr %lex.SearchPathEntry* %3, i32 0, i32 1
	%5 = getelementptr [1024 x i8]* %4
	%6 = bitcast [1024 x i8]* %5 to [0 x i8]*
	%7 = load [0 x i8]** %newpath
	%8 = bitcast [0 x i8]* %7 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %6, [0 x i8]* %8, i32 1024)
	%9 = load %lex.SearchPathEntry** @lex_pathhead
	%10 = icmp eq %lex.SearchPathEntry* %9, null
	br i1 %10, label %L.2, label %L.3
L.2:
	%11 = bitcast %lex.SearchPathEntry* null to %lex.SearchPathEntry*
	%12 = load %lex.SearchPathEntry** %np
	%13 = getelementptr %lex.SearchPathEntry* %12, i32 0, i32 0
	store %lex.SearchPathEntry* %11, %lex.SearchPathEntry** %13
	%14 = load %lex.SearchPathEntry** %np
	%15 = bitcast %lex.SearchPathEntry* %14 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %15, %lex.SearchPathEntry** @lex_pathhead
	%16 = load %lex.SearchPathEntry** %np
	%17 = bitcast %lex.SearchPathEntry* %16 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %17, %lex.SearchPathEntry** @lex_pathtail
	br label %L.1
L.3:
	%18 = load i8* %prepend
	%19 = icmp ne i8 %18, 0
	br i1 %19, label %L.5, label %L.6
L.5:
	%20 = load %lex.SearchPathEntry** @lex_pathhead
	%21 = bitcast %lex.SearchPathEntry* %20 to %lex.SearchPathEntry*
	%22 = load %lex.SearchPathEntry** %np
	%23 = getelementptr %lex.SearchPathEntry* %22, i32 0, i32 0
	store %lex.SearchPathEntry* %21, %lex.SearchPathEntry** %23
	%24 = load %lex.SearchPathEntry** %np
	%25 = bitcast %lex.SearchPathEntry* %24 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %25, %lex.SearchPathEntry** @lex_pathhead
	br label %L.4
L.6:
	%26 = bitcast %lex.SearchPathEntry* null to %lex.SearchPathEntry*
	%27 = load %lex.SearchPathEntry** %np
	%28 = getelementptr %lex.SearchPathEntry* %27, i32 0, i32 0
	store %lex.SearchPathEntry* %26, %lex.SearchPathEntry** %28
	%29 = load %lex.SearchPathEntry** %np
	%30 = bitcast %lex.SearchPathEntry* %29 to %lex.SearchPathEntry*
	%31 = load %lex.SearchPathEntry** @lex_pathtail
	%32 = getelementptr %lex.SearchPathEntry* %31, i32 0, i32 0
	store %lex.SearchPathEntry* %30, %lex.SearchPathEntry** %32
	%33 = load %lex.SearchPathEntry** %np
	%34 = bitcast %lex.SearchPathEntry* %33 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %34, %lex.SearchPathEntry** @lex_pathtail
	br label %L.4
L.4:
	br label %L.1
L.1:
	%35 = getelementptr %A.2* @debug, i32 0, i32 2
	%36 = load i8* %35
	%37 = icmp ne i8 %36, 0
	br i1 %37, label %L.8, label %L.7
L.8:
	%pp = alloca %lex.SearchPathEntry*
	%38 = getelementptr [18 x i8]* @S.168
	%39 = bitcast [18 x i8]* %38 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %39)
	%40 = load %lex.SearchPathEntry** @lex_pathhead
	%41 = bitcast %lex.SearchPathEntry* %40 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %41, %lex.SearchPathEntry** %pp
	br label %L.9
L.9:
	%42 = load %lex.SearchPathEntry** %pp
	%43 = icmp ne %lex.SearchPathEntry* %42, null
	%44 = xor i1 %43, true
	br i1 %44, label %L.10, label %L.11
L.11:
	%45 = load %lex.SearchPathEntry** %pp
	%46 = getelementptr %lex.SearchPathEntry* %45, i32 0, i32 1
	%47 = getelementptr [1024 x i8]* %46
	%48 = bitcast [1024 x i8]* %47 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %48)
	call void @out_chr(i32 2, i8 58)
	%49 = load %lex.SearchPathEntry** %pp
	%50 = getelementptr %lex.SearchPathEntry* %49, i32 0, i32 0
	%51 = load %lex.SearchPathEntry** %50
	%52 = bitcast %lex.SearchPathEntry* %51 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %52, %lex.SearchPathEntry** %pp
	br label %L.9
L.10:
	%53 = getelementptr [3 x i8]* @S.169
	%54 = bitcast [3 x i8]* %53 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %54)
	br label %L.7
L.7:
	%55 = load %lex.SearchPathEntry** %np
	%56 = bitcast %lex.SearchPathEntry* %55 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %56, %lex.SearchPathEntry** %rv.0
	br label %return
return:
	%57 = load %lex.SearchPathEntry** %rv.0
	ret %lex.SearchPathEntry* %57
}
define internal zeroext i8 @lex_FileCheck([0 x i8]* %filename.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%filename = alloca [0 x i8]*
	store [0 x i8]* %filename.arg, [0 x i8]** %filename
	%fp = alloca %lex.FileListEntry*
	%0 = load %lex.FileListEntry** @lex_filehead
	%1 = bitcast %lex.FileListEntry* %0 to %lex.FileListEntry*
	store %lex.FileListEntry* %1, %lex.FileListEntry** %fp
	br label %L.1
L.1:
	%2 = load %lex.FileListEntry** %fp
	%3 = icmp ne %lex.FileListEntry* %2, null
	%4 = xor i1 %3, true
	br i1 %4, label %L.2, label %L.3
L.3:
	%5 = load %lex.FileListEntry** %fp
	%6 = getelementptr %lex.FileListEntry* %5, i32 0, i32 2
	%7 = getelementptr [256 x i8]* %6
	%8 = bitcast [256 x i8]* %7 to [0 x i8]*
	%9 = load [0 x i8]** %filename
	%10 = bitcast [0 x i8]* %9 to [0 x i8]*
	%11 = call i8 @zstr_eq([0 x i8]* %8, [0 x i8]* %10, i32 256)
	%12 = icmp ne i8 %11, 0
	br i1 %12, label %L.5, label %L.4
L.5:
	store i8 0, i8* %rv.0
	br label %return
L.4:
	%13 = load %lex.FileListEntry** %fp
	%14 = getelementptr %lex.FileListEntry* %13, i32 0, i32 0
	%15 = load %lex.FileListEntry** %14
	%16 = bitcast %lex.FileListEntry* %15 to %lex.FileListEntry*
	store %lex.FileListEntry* %16, %lex.FileListEntry** %fp
	br label %L.1
L.2:
	store i8 1, i8* %rv.0
	br label %return
return:
	%17 = load i8* %rv.0
	ret i8 %17
}
@S.170 = internal constant [2 x i8] c"/\00"@S.171 = internal constant [5 x i8] c".esl\00"declare external i32 @open([0 x i8]*, i32, i32);
@S.172 = internal constant [2 x i8] c".\00"@S.173 = internal constant [13 x i8] c"Open  file \22\00"@S.174 = internal constant [3 x i8] c"\22\0A\00"@S.175 = internal constant [5 x i8] c" \5C\0A \00"define internal zeroext i8 @lex_FileOpen([0 x i8]* %filename.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%filename = alloca [0 x i8]*
	store [0 x i8]* %filename.arg, [0 x i8]** %filename
	%nf = alloca %lex.FileContext*
	%fd = alloca i32
	%pp = alloca %lex.SearchPathEntry*
	%fp = alloca %lex.FileListEntry*
	%i = alloca i32
	%pathbuf = alloca [1024 x i8]
	%0 = call [0 x i8]* @malloc(i32 4372)
	%1 = bitcast [0 x i8]* %0 to %lex.FileContext*
	%2 = bitcast %lex.FileContext* %1 to %lex.FileContext*
	store %lex.FileContext* %2, %lex.FileContext** %nf
	%3 = load %lex.FileContext** @lex_f
	%4 = icmp ne %lex.FileContext* %3, null
	br i1 %4, label %L.2, label %L.3
L.2:
	%5 = load %lex.SearchPathEntry** @lex_pathhead
	%6 = bitcast %lex.SearchPathEntry* %5 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %6, %lex.SearchPathEntry** %pp
	br label %L.4
L.4:
	%7 = load %lex.SearchPathEntry** %pp
	%8 = icmp ne %lex.SearchPathEntry* %7, null
	%9 = xor i1 %8, true
	br i1 %9, label %L.5, label %L.6
L.6:
	%10 = getelementptr [1024 x i8]* %pathbuf
	%11 = bitcast [1024 x i8]* %10 to [0 x i8]*
	%12 = load %lex.SearchPathEntry** %pp
	%13 = getelementptr %lex.SearchPathEntry* %12, i32 0, i32 1
	%14 = getelementptr [1024 x i8]* %13
	%15 = bitcast [1024 x i8]* %14 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %11, [0 x i8]* %15, i32 1024)
	%16 = getelementptr [1024 x i8]* %pathbuf
	%17 = bitcast [1024 x i8]* %16 to [0 x i8]*
	%18 = getelementptr [2 x i8]* @S.170
	%19 = bitcast [2 x i8]* %18 to [0 x i8]*
	call void @zstr_cat([0 x i8]* %17, [0 x i8]* %19, i32 1024)
	%20 = getelementptr [1024 x i8]* %pathbuf
	%21 = bitcast [1024 x i8]* %20 to [0 x i8]*
	%22 = call i32 @zstr_len([0 x i8]* %21, i32 1024)
	store i32 %22, i32* %i
	%23 = getelementptr [1024 x i8]* %pathbuf
	%24 = bitcast [1024 x i8]* %23 to [0 x i8]*
	%25 = load [0 x i8]** %filename
	%26 = bitcast [0 x i8]* %25 to [0 x i8]*
	call void @zstr_cat([0 x i8]* %24, [0 x i8]* %26, i32 1024)
	%27 = getelementptr [1024 x i8]* %pathbuf
	%28 = bitcast [1024 x i8]* %27 to [0 x i8]*
	%29 = getelementptr [5 x i8]* @S.171
	%30 = bitcast [5 x i8]* %29 to [0 x i8]*
	call void @zstr_cat([0 x i8]* %28, [0 x i8]* %30, i32 1024)
	%31 = getelementptr [1024 x i8]* %pathbuf
	%32 = bitcast [1024 x i8]* %31 to [0 x i8]*
	%33 = call i32 @open([0 x i8]* %32, i32 0, i32 0)
	store i32 %33, i32* %fd
	%34 = load i32* %fd
	%35 = icmp sge i32 %34, 0
	br i1 %35, label %L.5, label %L.7
L.7:
	%36 = load %lex.SearchPathEntry** %pp
	%37 = getelementptr %lex.SearchPathEntry* %36, i32 0, i32 0
	%38 = load %lex.SearchPathEntry** %37
	%39 = bitcast %lex.SearchPathEntry* %38 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %39, %lex.SearchPathEntry** %pp
	br label %L.4
L.5:
	%40 = load i32* %fd
	%41 = icmp sge i32 %40, 0
	br i1 %41, label %L.9, label %L.8
L.9:
	%42 = call [0 x i8]* @malloc(i32 264)
	%43 = bitcast [0 x i8]* %42 to %lex.FileListEntry*
	%44 = bitcast %lex.FileListEntry* %43 to %lex.FileListEntry*
	store %lex.FileListEntry* %44, %lex.FileListEntry** %fp
	%45 = load %lex.FileListEntry** %fp
	%46 = getelementptr %lex.FileListEntry* %45, i32 0, i32 2
	%47 = getelementptr [256 x i8]* %46
	%48 = bitcast [256 x i8]* %47 to [0 x i8]*
	%49 = load [0 x i8]** %filename
	%50 = bitcast [0 x i8]* %49 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %48, [0 x i8]* %50, i32 256)
	%51 = load %lex.FileListEntry** @lex_filehead
	%52 = icmp eq %lex.FileListEntry* %51, null
	br i1 %52, label %L.11, label %L.12
L.11:
	%53 = load %lex.FileListEntry** %fp
	%54 = bitcast %lex.FileListEntry* %53 to %lex.FileListEntry*
	store %lex.FileListEntry* %54, %lex.FileListEntry** @lex_filehead
	br label %L.10
L.12:
	%55 = load %lex.FileListEntry** %fp
	%56 = bitcast %lex.FileListEntry* %55 to %lex.FileListEntry*
	%57 = load %lex.FileListEntry** @lex_filetail
	%58 = getelementptr %lex.FileListEntry* %57, i32 0, i32 0
	store %lex.FileListEntry* %56, %lex.FileListEntry** %58
	br label %L.10
L.10:
	%59 = load %lex.FileListEntry** %fp
	%60 = bitcast %lex.FileListEntry* %59 to %lex.FileListEntry*
	store %lex.FileListEntry* %60, %lex.FileListEntry** @lex_filetail
	br label %L.8
L.8:
	br label %L.1
L.3:
	%61 = getelementptr [1024 x i8]* %pathbuf
	%62 = bitcast [1024 x i8]* %61 to [0 x i8]*
	%63 = load [0 x i8]** %filename
	%64 = bitcast [0 x i8]* %63 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %62, [0 x i8]* %64, i32 1024)
	%65 = getelementptr [1024 x i8]* %pathbuf
	%66 = bitcast [1024 x i8]* %65 to [0 x i8]*
	%67 = call i32 @open([0 x i8]* %66, i32 0, i32 0)
	store i32 %67, i32* %fd
	%68 = getelementptr [1024 x i8]* %pathbuf
	%69 = bitcast [1024 x i8]* %68 to [0 x i8]*
	%70 = call i32 @zstr_rfind([0 x i8]* %69, i8 47, i32 1024)
	store i32 %70, i32* %i
	%71 = load i32* %i
	%72 = icmp eq i32 %71, 1024
	br i1 %72, label %L.14, label %L.15
L.14:
	%73 = getelementptr [2 x i8]* @S.172
	%74 = bitcast [2 x i8]* %73 to [0 x i8]*
	%75 = call %lex.SearchPathEntry* @lex_SearchPathAdd([0 x i8]* %74, i8 1)
	%76 = bitcast %lex.SearchPathEntry* %75 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %76, %lex.SearchPathEntry** %pp
	store i32 0, i32* %i
	br label %L.13
L.15:
	%77 = load i32* %i
	%78 = getelementptr [1024 x i8]* %pathbuf, i32 0, i32 %77
	store i8 0, i8* %78
	%79 = getelementptr [1024 x i8]* %pathbuf
	%80 = bitcast [1024 x i8]* %79 to [0 x i8]*
	%81 = call %lex.SearchPathEntry* @lex_SearchPathAdd([0 x i8]* %80, i8 1)
	%82 = bitcast %lex.SearchPathEntry* %81 to %lex.SearchPathEntry*
	store %lex.SearchPathEntry* %82, %lex.SearchPathEntry** %pp
	%83 = load i32* %i
	%84 = add i32 %83, 1
	store i32 %84, i32* %i
	br label %L.13
L.13:
	br label %L.1
L.1:
	%85 = getelementptr %A.2* @debug, i32 0, i32 2
	%86 = load i8* %85
	%87 = icmp ne i8 %86, 0
	br i1 %87, label %L.17, label %L.16
L.17:
	%88 = getelementptr [13 x i8]* @S.173
	%89 = bitcast [13 x i8]* %88 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %89)
	%90 = load %lex.SearchPathEntry** %pp
	%91 = icmp ne %lex.SearchPathEntry* %90, null
	br i1 %91, label %L.19, label %L.18
L.19:
	%92 = load %lex.SearchPathEntry** %pp
	%93 = getelementptr %lex.SearchPathEntry* %92, i32 0, i32 1
	%94 = getelementptr [1024 x i8]* %93
	%95 = bitcast [1024 x i8]* %94 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %95)
	call void @out_chr(i32 2, i8 47)
	br label %L.18
L.18:
	%96 = load i32* %i
	%97 = getelementptr [1024 x i8]* %pathbuf, i32 0, i32 %96
	%98 = bitcast i8* %97 to [1024 x i8]*
	%99 = getelementptr [1024 x i8]* %98
	%100 = bitcast [1024 x i8]* %99 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %100)
	%101 = getelementptr [3 x i8]* @S.174
	%102 = bitcast [3 x i8]* %101 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %102)
	br label %L.16
L.16:
	%103 = getelementptr %A.3* @feature, i32 0, i32 2
	%104 = load i8* %103
	%105 = icmp ne i8 %104, 0
	br i1 %105, label %L.21, label %L.20
L.21:
	%106 = getelementptr [5 x i8]* @S.175
	%107 = bitcast [5 x i8]* %106 to [0 x i8]*
	call void @out_str(i32 1, [0 x i8]* %107)
	%108 = load %lex.SearchPathEntry** %pp
	%109 = icmp ne %lex.SearchPathEntry* %108, null
	br i1 %109, label %L.22, label %L.23
L.22:
	%110 = load %lex.SearchPathEntry** %pp
	%111 = getelementptr %lex.SearchPathEntry* %110, i32 0, i32 1
	%112 = getelementptr [1024 x i8]* %111, i32 0, i32 0
	%113 = load i8* %112
	%114 = icmp ne i8 %113, 46
	br i1 %114, label %L.25, label %L.24
L.24:
	%115 = load %lex.SearchPathEntry** %pp
	%116 = getelementptr %lex.SearchPathEntry* %115, i32 0, i32 1
	%117 = getelementptr [1024 x i8]* %116, i32 0, i32 1
	%118 = load i8* %117
	%119 = icmp ne i8 %118, 0
	br label %L.25
L.25:
	%120 = phi i1 [ true, %L.22 ], [ %119, %L.24 ]
	br label %L.23
L.23:
	%121 = phi i1 [ false, %L.21 ], [ %120, %L.25 ]
	br i1 %121, label %L.27, label %L.26
L.27:
	%122 = load %lex.SearchPathEntry** %pp
	%123 = getelementptr %lex.SearchPathEntry* %122, i32 0, i32 1
	%124 = getelementptr [1024 x i8]* %123
	%125 = bitcast [1024 x i8]* %124 to [0 x i8]*
	call void @out_str(i32 1, [0 x i8]* %125)
	call void @out_chr(i32 1, i8 47)
	br label %L.26
L.26:
	%126 = load i32* %i
	%127 = getelementptr [1024 x i8]* %pathbuf, i32 0, i32 %126
	%128 = bitcast i8* %127 to [1024 x i8]*
	%129 = getelementptr [1024 x i8]* %128
	%130 = bitcast [1024 x i8]* %129 to [0 x i8]*
	call void @out_str(i32 1, [0 x i8]* %130)
	br label %L.20
L.20:
	%131 = load i32* %fd
	%132 = icmp slt i32 %131, 0
	br i1 %132, label %L.29, label %L.28
L.29:
	store i8 0, i8* %rv.0
	br label %return
L.28:
	%133 = load %lex.FileContext** %nf
	%134 = getelementptr %lex.FileContext* %133, i32 0, i32 8
	%135 = getelementptr [256 x i8]* %134
	%136 = bitcast [256 x i8]* %135 to [0 x i8]*
	%137 = load i32* %i
	%138 = getelementptr [1024 x i8]* %pathbuf, i32 0, i32 %137
	%139 = bitcast i8* %138 to [1024 x i8]*
	%140 = getelementptr [1024 x i8]* %139
	%141 = bitcast [1024 x i8]* %140 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %136, [0 x i8]* %141, i32 256)
	%142 = load %lex.SearchPathEntry** %pp
	%143 = bitcast %lex.SearchPathEntry* %142 to %lex.SearchPathEntry*
	%144 = load %lex.FileContext** %nf
	%145 = getelementptr %lex.FileContext* %144, i32 0, i32 7
	store %lex.SearchPathEntry* %143, %lex.SearchPathEntry** %145
	%146 = load i32* %fd
	%147 = load %lex.FileContext** %nf
	%148 = getelementptr %lex.FileContext* %147, i32 0, i32 1
	store i32 %146, i32* %148
	%149 = load %lex.FileContext** %nf
	%150 = getelementptr %lex.FileContext* %149, i32 0, i32 2
	store i16 1, i16* %150
	%151 = load %lex.FileContext** %nf
	%152 = getelementptr %lex.FileContext* %151, i32 0, i32 3
	store i16 0, i16* %152
	%153 = load %lex.FileContext** %nf
	%154 = getelementptr %lex.FileContext* %153, i32 0, i32 4
	store i16 0, i16* %154
	%155 = load %lex.FileContext** @lex_f
	%156 = bitcast %lex.FileContext* %155 to %lex.FileContext*
	%157 = load %lex.FileContext** %nf
	%158 = getelementptr %lex.FileContext* %157, i32 0, i32 0
	store %lex.FileContext* %156, %lex.FileContext** %158
	%159 = load %lex.FileContext** %nf
	%160 = bitcast %lex.FileContext* %159 to %lex.FileContext*
	store %lex.FileContext* %160, %lex.FileContext** @lex_f
	store i8 1, i8* %rv.0
	br label %return
return:
	%161 = load i8* %rv.0
	ret i8 %161
}
declare external void @close(i32);
@S.176 = internal constant [13 x i8] c"Close file \22\00"@S.177 = internal constant [3 x i8] c"\22\0A\00"define internal void @lex_FileClose() nounwind {
L.0:
	%of = alloca %lex.FileContext*
	%0 = load %lex.FileContext** @lex_f
	%1 = icmp ne %lex.FileContext* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %lex.FileContext** @lex_f
	%3 = getelementptr %lex.FileContext* %2, i32 0, i32 1
	%4 = load i32* %3
	call void @close(i32 %4)
	%5 = getelementptr %A.2* @debug, i32 0, i32 2
	%6 = load i8* %5
	%7 = icmp ne i8 %6, 0
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = getelementptr [13 x i8]* @S.176
	%9 = bitcast [13 x i8]* %8 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %9)
	%10 = load %lex.FileContext** @lex_f
	%11 = getelementptr %lex.FileContext* %10, i32 0, i32 7
	%12 = load %lex.SearchPathEntry** %11
	%13 = icmp ne %lex.SearchPathEntry* %12, null
	br i1 %13, label %L.6, label %L.5
L.6:
	%14 = load %lex.FileContext** @lex_f
	%15 = getelementptr %lex.FileContext* %14, i32 0, i32 7
	%16 = load %lex.SearchPathEntry** %15
	%17 = getelementptr %lex.SearchPathEntry* %16, i32 0, i32 1
	%18 = getelementptr [1024 x i8]* %17
	%19 = bitcast [1024 x i8]* %18 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %19)
	call void @out_chr(i32 2, i8 47)
	br label %L.5
L.5:
	%20 = load %lex.FileContext** @lex_f
	%21 = getelementptr %lex.FileContext* %20, i32 0, i32 8
	%22 = getelementptr [256 x i8]* %21
	%23 = bitcast [256 x i8]* %22 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %23)
	%24 = getelementptr [3 x i8]* @S.177
	%25 = bitcast [3 x i8]* %24 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %25)
	br label %L.3
L.3:
	%26 = load %lex.FileContext** @lex_f
	%27 = bitcast %lex.FileContext* %26 to %lex.FileContext*
	store %lex.FileContext* %27, %lex.FileContext** %of
	%28 = load %lex.FileContext** %of
	%29 = getelementptr %lex.FileContext* %28, i32 0, i32 0
	%30 = load %lex.FileContext** %29
	%31 = bitcast %lex.FileContext* %30 to %lex.FileContext*
	store %lex.FileContext* %31, %lex.FileContext** @lex_f
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
declare external i32 @read(i32, [0 x i8]*, i32);
define internal void @lex_FillBuf() nounwind {
L.0:
	%k = alloca i32
	%0 = load %lex.FileContext** @lex_f
	%1 = getelementptr %lex.FileContext* %0, i32 0, i32 1
	%2 = load i32* %1
	%3 = load %lex.FileContext** @lex_f
	%4 = getelementptr %lex.FileContext* %3, i32 0, i32 9
	%5 = getelementptr [4096 x i8]* %4
	%6 = bitcast [4096 x i8]* %5 to [0 x i8]*
	%7 = call i32 @read(i32 %2, [0 x i8]* %6, i32 4096)
	store i32 %7, i32* %k
	%8 = load i32* %k
	%9 = icmp slt i32 %8, 0
	br i1 %9, label %L.2, label %L.1
L.2:
	store i32 0, i32* %k
	br label %L.1
L.1:
	%10 = load %lex.FileContext** @lex_f
	%11 = getelementptr %lex.FileContext* %10, i32 0, i32 3
	store i16 0, i16* %11
	%12 = load i32* %k
	%13 = trunc i32 %12 to i16
	%14 = load %lex.FileContext** @lex_f
	%15 = getelementptr %lex.FileContext* %14, i32 0, i32 4
	store i16 %13, i16* %15
	br label %return
return:
	ret void
}
define internal zeroext i8 @lex_EscChar(i8 zeroext %c.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%c = alloca i8
	store i8 %c.arg, i8* %c
	%0 = load i8* %c
	%1 = zext i8 %0 to i32
	switch i32 %1, label %L.1 [
		i32 110, label %L.3
		i32 114, label %L.4
		i32 116, label %L.5
		i32 98, label %L.6
		i32 118, label %L.7
		i32 102, label %L.8
	]
L.3:
	store i8 10, i8* %c
	br label %L.2
L.4:
	store i8 13, i8* %c
	br label %L.2
L.5:
	store i8 9, i8* %c
	br label %L.2
L.6:
	store i8 8, i8* %c
	br label %L.2
L.7:
	store i8 11, i8* %c
	br label %L.2
L.8:
	store i8 12, i8* %c
	br label %L.2
L.1:
	br label %L.2
L.2:
	%2 = load i8* %c
	store i8 %2, i8* %rv.0
	br label %return
return:
	%3 = load i8* %rv.0
	ret i8 %3
}
define internal i32 @lex_EscHex(i8 zeroext %c.arg, i32 %h.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%c = alloca i8
	%h = alloca i32
	store i8 %c.arg, i8* %c
	store i32 %h.arg, i32* %h
	%0 = load i8* %c
	%1 = zext i8 %0 to i32
	switch i32 %1, label %L.1 [
		i32 48, label %L.3
		i32 49, label %L.3
		i32 50, label %L.3
		i32 51, label %L.3
		i32 52, label %L.3
		i32 53, label %L.3
		i32 54, label %L.3
		i32 55, label %L.3
		i32 56, label %L.3
		i32 57, label %L.3
		i32 65, label %L.4
		i32 66, label %L.4
		i32 67, label %L.4
		i32 68, label %L.4
		i32 69, label %L.4
		i32 70, label %L.4
		i32 97, label %L.5
		i32 98, label %L.5
		i32 99, label %L.5
		i32 100, label %L.5
		i32 101, label %L.5
		i32 102, label %L.5
	]
L.3:
	%2 = load i8* %c
	%3 = sub i8 %2, 48
	store i8 %3, i8* %c
	br label %L.2
L.4:
	%4 = load i8* %c
	%5 = sub i8 %4, 65
	%6 = add i8 %5, 10
	store i8 %6, i8* %c
	br label %L.2
L.5:
	%7 = load i8* %c
	%8 = sub i8 %7, 97
	%9 = add i8 %8, 10
	store i8 %9, i8* %c
	br label %L.2
L.1:
	call void @lex_Error(i8 10)
	%10 = load i32* %h
	store i32 %10, i32* %rv.0
	br label %return
L.2:
	%11 = load i32* %h
	%12 = shl i32 %11, 4
	%13 = load i8* %c
	%14 = zext i8 %13 to i32
	%15 = or i32 %12, %14
	store i32 %15, i32* %rv.0
	br label %return
return:
	%16 = load i32* %rv.0
	ret i32 %16
}
@lex_unicodemax = internal constant [4 x i32] [ i32 127, i32 2047, i32 65535, i32 1114111 ], align 4
@lex_utf8pfx = internal constant [5 x i8] [ i8 0, i8 192, i8 224, i8 240, i8 248 ], align 1
define internal i32 @lex_EscUTF8(i32 %unicode.arg, i32 %j.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%unicode = alloca i32
	%j = alloca i32
	store i32 %unicode.arg, i32* %unicode
	store i32 %j.arg, i32* %j
	%n = alloca i32
	%i = alloca i32
	%k = alloca i32
	store i32 0, i32* %n
	br label %L.1
L.1:
	%0 = load i32* %unicode
	%1 = load i32* %n
	%2 = getelementptr [4 x i32]* @lex_unicodemax, i32 0, i32 %1
	%3 = load i32* %2
	%4 = icmp ule i32 %0, %3
	br i1 %4, label %L.2, label %L.3
L.3:
	%5 = load i32* %n
	%6 = add i32 %5, 1
	store i32 %6, i32* %n
	%7 = load i32* %n
	%8 = icmp ugt i32 %7, 3
	br i1 %8, label %L.2, label %L.4
L.4:
	br label %L.1
L.2:
	%9 = load i32* %n
	%10 = icmp uge i32 %9, 4
	br i1 %10, label %L.6, label %L.7
L.6:
	call void @lex_Error(i8 11)
	store i32 0, i32* %rv.0
	br label %return
L.7:
	%11 = load i32* %j
	%12 = load i32* %n
	%13 = add i32 %11, %12
	%14 = add i32 %13, 1
	store i32 %14, i32* %k
	%15 = load i32* %k
	%16 = icmp uge i32 %15, 4095
	br i1 %16, label %L.9, label %L.8
L.9:
	call void @lex_Error(i8 13)
	store i32 0, i32* %rv.0
	br label %return
L.8:
	%17 = load i32* %n
	store i32 %17, i32* %i
	br label %L.10
L.10:
	%18 = load i32* %i
	%19 = icmp ugt i32 %18, 0
	%20 = xor i1 %19, true
	br i1 %20, label %L.11, label %L.12
L.12:
	%21 = load i32* %unicode
	%22 = trunc i32 %21 to i8
	%23 = and i8 63, %22
	%24 = or i8 128, %23
	%25 = load i32* %j
	%26 = load i32* %i
	%27 = add i32 %25, %26
	%28 = getelementptr [4096 x i8]* @lex_StringBuf, i32 0, i32 %27
	store i8 %24, i8* %28
	%29 = load i32* %unicode
	%30 = lshr i32 %29, 6
	store i32 %30, i32* %unicode
	%31 = load i32* %i
	%32 = sub i32 %31, 1
	store i32 %32, i32* %i
	br label %L.10
L.11:
	%33 = load i32* %n
	%34 = getelementptr [5 x i8]* @lex_utf8pfx, i32 0, i32 %33
	%35 = load i8* %34
	%36 = load i32* %unicode
	%37 = trunc i32 %36 to i8
	%38 = or i8 %35, %37
	%39 = load i32* %j
	%40 = getelementptr [4096 x i8]* @lex_StringBuf, i32 0, i32 %39
	store i8 %38, i8* %40
	br label %L.5
L.5:
	%41 = load i32* %k
	store i32 %41, i32* %rv.0
	br label %return
return:
	%42 = load i32* %rv.0
	ret i32 %42
}
define internal zeroext i8 @lex_Next() nounwind {
L.0:
	%rv.0 = alloca i8
	%state = alloca i8
	%c = alloca i8
	%tok = alloca i8
	%i = alloca i16
	%e = alloca i16
	%j = alloca i16
	%str = alloca i8
	%h = alloca i32
	%n = alloca i64
	store i8 0, i8* %state
	store i8 0, i8* %tok
	%0 = load %lex.FileContext** @lex_f
	%1 = getelementptr %lex.FileContext* %0, i32 0, i32 3
	%2 = load i16* %1
	store i16 %2, i16* %i
	%3 = load %lex.FileContext** @lex_f
	%4 = getelementptr %lex.FileContext* %3, i32 0, i32 4
	%5 = load i16* %4
	store i16 %5, i16* %e
	br label %L.1
L.1:
	%6 = load i16* %i
	%7 = load i16* %e
	%8 = icmp uge i16 %6, %7
	br i1 %8, label %L.4, label %L.3
L.4:
	call void @lex_FillBuf()
	%9 = load %lex.FileContext** @lex_f
	%10 = getelementptr %lex.FileContext* %9, i32 0, i32 3
	%11 = load i16* %10
	store i16 %11, i16* %i
	%12 = load %lex.FileContext** @lex_f
	%13 = getelementptr %lex.FileContext* %12, i32 0, i32 4
	%14 = load i16* %13
	store i16 %14, i16* %e
	%15 = load i16* %e
	%16 = icmp eq i16 %15, 0
	br i1 %16, label %L.6, label %L.5
L.6:
	%17 = load i8* %state
	%18 = zext i8 %17 to i32
	switch i32 %18, label %L.7 [
		i32 0, label %L.9
		i32 2, label %L.10
		i32 3, label %L.10
		i32 4, label %L.10
	]
L.9:
	br label %L.8
L.10:
	call void @lex_Error(i8 7)
	br label %L.8
L.7:
	call void @lex_Error(i8 8)
	br label %L.8
L.8:
	store i8 1, i8* %tok
	br label %L.2
L.5:
	br label %L.3
L.3:
	%19 = load %lex.FileContext** @lex_f
	%20 = getelementptr %lex.FileContext* %19, i32 0, i32 9
	%21 = load i16* %i
	%22 = zext i16 %21 to i32
	%23 = getelementptr [4096 x i8]* %20, i32 0, i32 %22
	%24 = load i8* %23
	store i8 %24, i8* %c
	%25 = load i8* %state
	%26 = zext i8 %25 to i32
	switch i32 %26, label %L.11 [
		i32 0, label %L.13
		i32 1, label %L.14
		i32 2, label %L.15
		i32 3, label %L.16
		i32 4, label %L.17
		i32 5, label %L.18
		i32 6, label %L.19
		i32 7, label %L.20
		i32 8, label %L.21
		i32 9, label %L.22
		i32 10, label %L.23
		i32 11, label %L.24
		i32 12, label %L.25
		i32 13, label %L.26
		i32 14, label %L.27
		i32 18, label %L.28
		i32 15, label %L.29
		i32 16, label %L.30
		i32 17, label %L.31
		i32 19, label %L.32
		i32 20, label %L.33
		i32 21, label %L.34
		i32 22, label %L.35
		i32 23, label %L.36
		i32 24, label %L.37
		i32 26, label %L.37
		i32 27, label %L.37
		i32 28, label %L.37
		i32 30, label %L.37
		i32 31, label %L.37
		i32 32, label %L.37
		i32 33, label %L.37
		i32 34, label %L.37
		i32 35, label %L.37
		i32 36, label %L.37
		i32 25, label %L.38
		i32 29, label %L.39
		i32 37, label %L.39
	]
L.13:
	%27 = load i8* %c
	%28 = zext i8 %27 to i32
	switch i32 %28, label %L.40 [
		i32 58, label %L.42
		i32 59, label %L.43
		i32 44, label %L.44
		i32 64, label %L.45
		i32 126, label %L.46
		i32 94, label %L.47
		i32 42, label %L.48
		i32 37, label %L.49
		i32 40, label %L.50
		i32 41, label %L.51
		i32 123, label %L.52
		i32 125, label %L.53
		i32 63, label %L.54
		i32 91, label %L.55
		i32 93, label %L.56
		i32 46, label %L.57
		i32 47, label %L.58
		i32 33, label %L.59
		i32 60, label %L.60
		i32 62, label %L.61
		i32 61, label %L.62
		i32 43, label %L.63
		i32 45, label %L.64
		i32 38, label %L.65
		i32 124, label %L.66
		i32 48, label %L.67
		i32 49, label %L.68
		i32 50, label %L.68
		i32 51, label %L.68
		i32 52, label %L.68
		i32 53, label %L.68
		i32 54, label %L.68
		i32 55, label %L.68
		i32 56, label %L.68
		i32 57, label %L.68
		i32 39, label %L.69
		i32 34, label %L.70
		i32 65, label %L.71
		i32 66, label %L.71
		i32 67, label %L.71
		i32 68, label %L.71
		i32 69, label %L.71
		i32 70, label %L.71
		i32 71, label %L.71
		i32 72, label %L.71
		i32 73, label %L.71
		i32 74, label %L.71
		i32 75, label %L.71
		i32 76, label %L.71
		i32 77, label %L.71
		i32 78, label %L.71
		i32 79, label %L.71
		i32 80, label %L.71
		i32 81, label %L.71
		i32 82, label %L.71
		i32 83, label %L.71
		i32 84, label %L.71
		i32 85, label %L.71
		i32 86, label %L.71
		i32 87, label %L.71
		i32 88, label %L.71
		i32 89, label %L.71
		i32 90, label %L.71
		i32 97, label %L.71
		i32 98, label %L.71
		i32 99, label %L.71
		i32 100, label %L.71
		i32 101, label %L.71
		i32 102, label %L.71
		i32 103, label %L.71
		i32 104, label %L.71
		i32 105, label %L.71
		i32 106, label %L.71
		i32 107, label %L.71
		i32 108, label %L.71
		i32 109, label %L.71
		i32 110, label %L.71
		i32 111, label %L.71
		i32 112, label %L.71
		i32 113, label %L.71
		i32 114, label %L.71
		i32 115, label %L.71
		i32 116, label %L.71
		i32 117, label %L.71
		i32 118, label %L.71
		i32 119, label %L.71
		i32 120, label %L.71
		i32 121, label %L.71
		i32 122, label %L.71
		i32 95, label %L.71
	]
L.42:
	store i8 3, i8* %tok
	%29 = load i16* %i
	%30 = add i16 %29, 1
	store i16 %30, i16* %i
	br label %L.41
L.43:
	store i8 4, i8* %tok
	%31 = load i16* %i
	%32 = add i16 %31, 1
	store i16 %32, i16* %i
	br label %L.41
L.44:
	store i8 5, i8* %tok
	%33 = load i16* %i
	%34 = add i16 %33, 1
	store i16 %34, i16* %i
	br label %L.41
L.45:
	store i8 7, i8* %tok
	%35 = load i16* %i
	%36 = add i16 %35, 1
	store i16 %36, i16* %i
	br label %L.41
L.46:
	store i8 13, i8* %tok
	%37 = load i16* %i
	%38 = add i16 %37, 1
	store i16 %38, i16* %i
	br label %L.41
L.47:
	store i8 17, i8* %tok
	%39 = load i16* %i
	%40 = add i16 %39, 1
	store i16 %40, i16* %i
	br label %L.41
L.48:
	store i8 18, i8* %tok
	%41 = load i16* %i
	%42 = add i16 %41, 1
	store i16 %42, i16* %i
	br label %L.41
L.49:
	store i8 20, i8* %tok
	%43 = load i16* %i
	%44 = add i16 %43, 1
	store i16 %44, i16* %i
	br label %L.41
L.50:
	store i8 32, i8* %tok
	%45 = load i16* %i
	%46 = add i16 %45, 1
	store i16 %46, i16* %i
	br label %L.41
L.51:
	store i8 33, i8* %tok
	%47 = load i16* %i
	%48 = add i16 %47, 1
	store i16 %48, i16* %i
	br label %L.41
L.52:
	store i8 36, i8* %tok
	%49 = load i16* %i
	%50 = add i16 %49, 1
	store i16 %50, i16* %i
	br label %L.41
L.53:
	store i8 37, i8* %tok
	%51 = load i16* %i
	%52 = add i16 %51, 1
	store i16 %52, i16* %i
	br label %L.41
L.54:
	store i8 8, i8* %tok
	%53 = load i16* %i
	%54 = add i16 %53, 1
	store i16 %54, i16* %i
	br label %L.41
L.55:
	store i8 34, i8* %tok
	%55 = load i16* %i
	%56 = add i16 %55, 1
	store i16 %56, i16* %i
	br label %L.41
L.56:
	store i8 35, i8* %tok
	%57 = load i16* %i
	%58 = add i16 %57, 1
	store i16 %58, i16* %i
	br label %L.41
L.57:
	store i8 5, i8* %state
	br label %L.41
L.58:
	store i8 1, i8* %state
	br label %L.41
L.59:
	store i8 11, i8* %state
	br label %L.41
L.60:
	store i8 8, i8* %state
	br label %L.41
L.61:
	store i8 9, i8* %state
	br label %L.41
L.62:
	store i8 10, i8* %state
	br label %L.41
L.63:
	store i8 6, i8* %state
	br label %L.41
L.64:
	store i8 7, i8* %state
	br label %L.41
L.65:
	store i8 12, i8* %state
	br label %L.41
L.66:
	store i8 13, i8* %state
	br label %L.41
L.67:
	store i64 0, i64* %n
	store i8 14, i8* %state
	br label %L.41
L.68:
	%59 = load i8* %c
	%60 = sub i8 %59, 48
	%61 = zext i8 %60 to i64
	store i64 %61, i64* %n
	store i8 18, i8* %state
	br label %L.41
L.69:
	store i8 20, i8* %state
	br label %L.41
L.70:
	store i16 0, i16* %j
	store i8 22, i8* %state
	br label %L.41
L.71:
	%62 = load i8* %c
	%63 = getelementptr [64 x i8]* @lex_Ident, i32 0, i32 0
	store i8 %62, i8* %63
	store i16 1, i16* %j
	store i8 19, i8* %state
	br label %L.41
L.40:
	br label %L.41
L.41:
	br label %L.12
L.14:
	%64 = load i8* %c
	%65 = zext i8 %64 to i32
	switch i32 %65, label %L.72 [
		i32 47, label %L.74
		i32 42, label %L.75
	]
L.74:
	store i8 2, i8* %state
	br label %L.73
L.75:
	store i8 3, i8* %state
	br label %L.73
L.72:
	store i8 19, i8* %tok
	br label %L.73
L.73:
	br label %L.12
L.15:
	%66 = load i8* %c
	%67 = icmp eq i8 %66, 10
	br i1 %67, label %L.77, label %L.76
L.77:
	store i8 0, i8* %state
	br label %L.76
L.76:
	br label %L.12
L.16:
	%68 = load i8* %c
	%69 = icmp eq i8 %68, 42
	br i1 %69, label %L.79, label %L.78
L.79:
	store i8 4, i8* %state
	br label %L.78
L.78:
	br label %L.12
L.17:
	%70 = load i8* %c
	%71 = icmp eq i8 %70, 47
	br i1 %71, label %L.81, label %L.82
L.81:
	store i8 0, i8* %state
	br label %L.80
L.82:
	store i8 3, i8* %state
	br label %L.80
L.80:
	br label %L.12
L.18:
	%72 = load i8* %c
	%73 = zext i8 %72 to i32
	switch i32 %73, label %L.83 [
		i32 46, label %L.85
	]
L.85:
	store i8 6, i8* %tok
	%74 = load i16* %i
	%75 = add i16 %74, 1
	store i16 %75, i16* %i
	br label %L.84
L.83:
	store i8 2, i8* %tok
	br label %L.84
L.84:
	br label %L.12
L.19:
	%76 = load i8* %c
	%77 = zext i8 %76 to i32
	switch i32 %77, label %L.86 [
		i32 61, label %L.88
	]
L.88:
	store i8 10, i8* %tok
	%78 = load i16* %i
	%79 = add i16 %78, 1
	store i16 %79, i16* %i
	br label %L.87
L.86:
	store i8 14, i8* %tok
	br label %L.87
L.87:
	br label %L.12
L.20:
	%80 = load i8* %c
	%81 = zext i8 %80 to i32
	switch i32 %81, label %L.89 [
		i32 61, label %L.91
	]
L.91:
	store i8 11, i8* %tok
	%82 = load i16* %i
	%83 = add i16 %82, 1
	store i16 %83, i16* %i
	br label %L.90
L.89:
	store i8 15, i8* %tok
	br label %L.90
L.90:
	br label %L.12
L.21:
	%84 = load i8* %c
	%85 = zext i8 %84 to i32
	switch i32 %85, label %L.92 [
		i32 61, label %L.94
		i32 60, label %L.95
	]
L.94:
	store i8 28, i8* %tok
	%86 = load i16* %i
	%87 = add i16 %86, 1
	store i16 %87, i16* %i
	br label %L.93
L.95:
	store i8 21, i8* %tok
	%88 = load i16* %i
	%89 = add i16 %88, 1
	store i16 %89, i16* %i
	br label %L.93
L.92:
	store i8 26, i8* %tok
	br label %L.93
L.93:
	br label %L.12
L.22:
	%90 = load i8* %c
	%91 = zext i8 %90 to i32
	switch i32 %91, label %L.96 [
		i32 61, label %L.98
		i32 62, label %L.99
	]
L.98:
	store i8 29, i8* %tok
	%92 = load i16* %i
	%93 = add i16 %92, 1
	store i16 %93, i16* %i
	br label %L.97
L.99:
	store i8 22, i8* %tok
	%94 = load i16* %i
	%95 = add i16 %94, 1
	store i16 %95, i16* %i
	br label %L.97
L.96:
	store i8 27, i8* %tok
	br label %L.97
L.97:
	br label %L.12
L.23:
	%96 = load i8* %c
	%97 = zext i8 %96 to i32
	switch i32 %97, label %L.100 [
		i32 61, label %L.102
	]
L.102:
	store i8 24, i8* %tok
	%98 = load i16* %i
	%99 = add i16 %98, 1
	store i16 %99, i16* %i
	br label %L.101
L.100:
	store i8 9, i8* %tok
	br label %L.101
L.101:
	br label %L.12
L.24:
	%100 = load i8* %c
	%101 = zext i8 %100 to i32
	switch i32 %101, label %L.103 [
		i32 61, label %L.105
	]
L.105:
	store i8 25, i8* %tok
	%102 = load i16* %i
	%103 = add i16 %102, 1
	store i16 %103, i16* %i
	br label %L.104
L.103:
	store i8 12, i8* %tok
	br label %L.104
L.104:
	br label %L.12
L.25:
	%104 = load i8* %c
	%105 = zext i8 %104 to i32
	switch i32 %105, label %L.106 [
		i32 38, label %L.108
	]
L.108:
	store i8 30, i8* %tok
	%106 = load i16* %i
	%107 = add i16 %106, 1
	store i16 %107, i16* %i
	br label %L.107
L.106:
	store i8 23, i8* %tok
	br label %L.107
L.107:
	br label %L.12
L.26:
	%108 = load i8* %c
	%109 = zext i8 %108 to i32
	switch i32 %109, label %L.109 [
		i32 124, label %L.111
	]
L.111:
	store i8 31, i8* %tok
	%110 = load i16* %i
	%111 = add i16 %110, 1
	store i16 %111, i16* %i
	br label %L.110
L.109:
	store i8 16, i8* %tok
	br label %L.110
L.110:
	br label %L.12
L.27:
	%112 = load i8* %c
	%113 = zext i8 %112 to i32
	switch i32 %113, label %L.112 [
		i32 98, label %L.114
		i32 111, label %L.115
		i32 120, label %L.116
		i32 48, label %L.117
		i32 49, label %L.117
		i32 50, label %L.117
		i32 51, label %L.117
		i32 52, label %L.117
		i32 53, label %L.117
		i32 54, label %L.117
		i32 55, label %L.117
		i32 56, label %L.117
		i32 57, label %L.117
		i32 95, label %L.118
	]
L.114:
	store i8 15, i8* %state
	br label %L.113
L.115:
	store i8 16, i8* %state
	br label %L.113
L.116:
	store i8 17, i8* %state
	br label %L.113
L.117:
	%114 = load i8* %c
	%115 = sub i8 %114, 48
	%116 = zext i8 %115 to i64
	store i64 %116, i64* %n
	store i8 18, i8* %state
	br label %L.113
L.118:
	store i8 18, i8* %state
	br label %L.113
L.112:
	%117 = load i64* %n
	store i64 %117, i64* @lex_Number
	store i8 38, i8* %tok
	br label %L.113
L.113:
	br label %L.12
L.28:
	%118 = load i8* %c
	%119 = zext i8 %118 to i32
	switch i32 %119, label %L.119 [
		i32 48, label %L.121
		i32 49, label %L.121
		i32 50, label %L.121
		i32 51, label %L.121
		i32 52, label %L.121
		i32 53, label %L.121
		i32 54, label %L.121
		i32 55, label %L.121
		i32 56, label %L.121
		i32 57, label %L.121
		i32 95, label %L.122
	]
L.121:
	%120 = load i64* %n
	%121 = mul i64 %120, 10
	%122 = load i8* %c
	%123 = sub i8 %122, 48
	%124 = zext i8 %123 to i64
	%125 = add i64 %121, %124
	store i64 %125, i64* %n
	br label %L.120
L.122:
	br label %L.120
L.119:
	%126 = load i64* %n
	store i64 %126, i64* @lex_Number
	store i8 38, i8* %tok
	br label %L.120
L.120:
	br label %L.12
L.29:
	%127 = load i8* %c
	%128 = zext i8 %127 to i32
	switch i32 %128, label %L.123 [
		i32 48, label %L.125
		i32 49, label %L.125
		i32 95, label %L.126
	]
L.125:
	%129 = load i64* %n
	%130 = shl i64 %129, 1
	%131 = load i8* %c
	%132 = sub i8 %131, 48
	%133 = zext i8 %132 to i64
	%134 = add i64 %130, %133
	store i64 %134, i64* %n
	br label %L.124
L.126:
	br label %L.124
L.123:
	%135 = load i64* %n
	store i64 %135, i64* @lex_Number
	store i8 38, i8* %tok
	br label %L.124
L.124:
	br label %L.12
L.30:
	%136 = load i8* %c
	%137 = zext i8 %136 to i32
	switch i32 %137, label %L.127 [
		i32 48, label %L.129
		i32 49, label %L.129
		i32 50, label %L.129
		i32 51, label %L.129
		i32 52, label %L.129
		i32 53, label %L.129
		i32 54, label %L.129
		i32 55, label %L.129
		i32 95, label %L.130
	]
L.129:
	%138 = load i64* %n
	%139 = shl i64 %138, 3
	%140 = load i8* %c
	%141 = sub i8 %140, 48
	%142 = zext i8 %141 to i64
	%143 = add i64 %139, %142
	store i64 %143, i64* %n
	br label %L.128
L.130:
	br label %L.128
L.127:
	%144 = load i64* %n
	store i64 %144, i64* @lex_Number
	store i8 38, i8* %tok
	br label %L.128
L.128:
	br label %L.12
L.31:
	%145 = load i8* %c
	%146 = zext i8 %145 to i32
	switch i32 %146, label %L.131 [
		i32 48, label %L.133
		i32 49, label %L.133
		i32 50, label %L.133
		i32 51, label %L.133
		i32 52, label %L.133
		i32 53, label %L.133
		i32 54, label %L.133
		i32 55, label %L.133
		i32 56, label %L.133
		i32 57, label %L.133
		i32 65, label %L.134
		i32 66, label %L.134
		i32 67, label %L.134
		i32 68, label %L.134
		i32 69, label %L.134
		i32 70, label %L.134
		i32 97, label %L.135
		i32 98, label %L.135
		i32 99, label %L.135
		i32 100, label %L.135
		i32 101, label %L.135
		i32 102, label %L.135
		i32 95, label %L.136
	]
L.133:
	%147 = load i64* %n
	%148 = shl i64 %147, 4
	%149 = load i8* %c
	%150 = sub i8 %149, 48
	%151 = zext i8 %150 to i64
	%152 = add i64 %148, %151
	store i64 %152, i64* %n
	br label %L.132
L.134:
	%153 = load i64* %n
	%154 = shl i64 %153, 4
	%155 = load i8* %c
	%156 = sub i8 %155, 65
	%157 = add i8 %156, 10
	%158 = zext i8 %157 to i64
	%159 = add i64 %154, %158
	store i64 %159, i64* %n
	br label %L.132
L.135:
	%160 = load i64* %n
	%161 = shl i64 %160, 4
	%162 = load i8* %c
	%163 = sub i8 %162, 97
	%164 = add i8 %163, 10
	%165 = zext i8 %164 to i64
	%166 = add i64 %161, %165
	store i64 %166, i64* %n
	br label %L.132
L.136:
	br label %L.132
L.131:
	%167 = load i64* %n
	store i64 %167, i64* @lex_Number
	store i8 38, i8* %tok
	br label %L.132
L.132:
	br label %L.12
L.32:
	%168 = load i8* %c
	%169 = zext i8 %168 to i32
	switch i32 %169, label %L.137 [
		i32 65, label %L.139
		i32 66, label %L.139
		i32 67, label %L.139
		i32 68, label %L.139
		i32 69, label %L.139
		i32 70, label %L.139
		i32 71, label %L.139
		i32 72, label %L.139
		i32 73, label %L.139
		i32 74, label %L.139
		i32 75, label %L.139
		i32 76, label %L.139
		i32 77, label %L.139
		i32 78, label %L.139
		i32 79, label %L.139
		i32 80, label %L.139
		i32 81, label %L.139
		i32 82, label %L.139
		i32 83, label %L.139
		i32 84, label %L.139
		i32 85, label %L.139
		i32 86, label %L.139
		i32 87, label %L.139
		i32 88, label %L.139
		i32 89, label %L.139
		i32 90, label %L.139
		i32 97, label %L.139
		i32 98, label %L.139
		i32 99, label %L.139
		i32 100, label %L.139
		i32 101, label %L.139
		i32 102, label %L.139
		i32 103, label %L.139
		i32 104, label %L.139
		i32 105, label %L.139
		i32 106, label %L.139
		i32 107, label %L.139
		i32 108, label %L.139
		i32 109, label %L.139
		i32 110, label %L.139
		i32 111, label %L.139
		i32 112, label %L.139
		i32 113, label %L.139
		i32 114, label %L.139
		i32 115, label %L.139
		i32 116, label %L.139
		i32 117, label %L.139
		i32 118, label %L.139
		i32 119, label %L.139
		i32 120, label %L.139
		i32 121, label %L.139
		i32 122, label %L.139
		i32 48, label %L.139
		i32 49, label %L.139
		i32 50, label %L.139
		i32 51, label %L.139
		i32 52, label %L.139
		i32 53, label %L.139
		i32 54, label %L.139
		i32 55, label %L.139
		i32 56, label %L.139
		i32 57, label %L.139
		i32 95, label %L.139
	]
L.139:
	%170 = load i8* %c
	%171 = load i16* %j
	%172 = zext i16 %171 to i32
	%173 = getelementptr [64 x i8]* @lex_Ident, i32 0, i32 %172
	store i8 %170, i8* %173
	%174 = load i16* %j
	%175 = add i16 %174, 1
	store i16 %175, i16* %j
	br label %L.138
L.137:
	%176 = load i16* %j
	%177 = zext i16 %176 to i32
	%178 = getelementptr [64 x i8]* @lex_Ident, i32 0, i32 %177
	store i8 0, i8* %178
	store i8 40, i8* %tok
	br label %L.138
L.138:
	br label %L.12
L.33:
	store i8 0, i8* %str
	%179 = load i8* %c
	%180 = zext i8 %179 to i32
	switch i32 %180, label %L.140 [
		i32 39, label %L.142
		i32 10, label %L.143
		i32 92, label %L.144
	]
L.142:
	call void @lex_Error(i8 9)
	store i8 0, i8* %state
	br label %L.141
L.143:
	call void @lex_Error(i8 6)
	store i8 0, i8* %state
	br label %L.141
L.144:
	store i8 23, i8* %state
	br label %L.141
L.140:
	%181 = load i8* %c
	%182 = zext i8 %181 to i32
	store i32 %182, i32* %h
	store i8 21, i8* %state
	br label %L.141
L.141:
	br label %L.12
L.34:
	%183 = load i8* %c
	%184 = zext i8 %183 to i32
	switch i32 %184, label %L.145 [
		i32 39, label %L.147
	]
L.147:
	%185 = load i32* %h
	%186 = zext i32 %185 to i64
	store i64 %186, i64* @lex_Number
	store i8 38, i8* %tok
	%187 = load i16* %i
	%188 = add i16 %187, 1
	store i16 %188, i16* %i
	br label %L.146
L.145:
	call void @lex_Error(i8 9)
	store i8 0, i8* %state
	br label %L.146
L.146:
	br label %L.12
L.35:
	store i8 1, i8* %str
	%189 = load i8* %c
	%190 = zext i8 %189 to i32
	switch i32 %190, label %L.148 [
		i32 34, label %L.150
		i32 10, label %L.151
		i32 92, label %L.152
	]
L.150:
	%191 = load i16* %j
	%192 = zext i16 %191 to i32
	%193 = getelementptr [4096 x i8]* @lex_StringBuf, i32 0, i32 %192
	store i8 0, i8* %193
	%194 = load i16* %j
	%195 = add i16 %194, 1
	store i16 %195, i16* @lex_StringLen
	store i8 39, i8* %tok
	%196 = load i16* %i
	%197 = add i16 %196, 1
	store i16 %197, i16* %i
	br label %L.149
L.151:
	call void @lex_Error(i8 6)
	store i8 0, i8* %state
	br label %L.149
L.152:
	store i8 23, i8* %state
	br label %L.149
L.148:
	%198 = load i16* %j
	%199 = zext i16 %198 to i32
	%200 = icmp ult i32 %199, 4095
	br i1 %200, label %L.154, label %L.155
L.154:
	%201 = load i8* %c
	%202 = load i16* %j
	%203 = zext i16 %202 to i32
	%204 = getelementptr [4096 x i8]* @lex_StringBuf, i32 0, i32 %203
	store i8 %201, i8* %204
	%205 = load i16* %j
	%206 = add i16 %205, 1
	store i16 %206, i16* %j
	br label %L.153
L.155:
	call void @lex_Error(i8 13)
	br label %L.153
L.153:
	br label %L.149
L.149:
	br label %L.12
L.36:
	%207 = load i8* %c
	%208 = zext i8 %207 to i32
	switch i32 %208, label %L.156 [
		i32 10, label %L.158
		i32 120, label %L.159
		i32 117, label %L.160
		i32 85, label %L.161
	]
L.158:
	call void @lex_Error(i8 6)
	store i8 0, i8* %state
	br label %L.157
L.159:
	store i32 0, i32* %h
	store i8 24, i8* %state
	br label %L.157
L.160:
	store i32 0, i32* %h
	store i8 26, i8* %state
	br label %L.157
L.161:
	store i32 0, i32* %h
	store i8 30, i8* %state
	br label %L.157
L.156:
	%209 = load i8* %str
	%210 = icmp ne i8 %209, 0
	br i1 %210, label %L.163, label %L.164
L.163:
	%211 = load i16* %j
	%212 = zext i16 %211 to i32
	%213 = icmp ult i32 %212, 4095
	br i1 %213, label %L.166, label %L.167
L.166:
	%214 = load i8* %c
	%215 = call i8 @lex_EscChar(i8 %214)
	%216 = load i16* %j
	%217 = zext i16 %216 to i32
	%218 = getelementptr [4096 x i8]* @lex_StringBuf, i32 0, i32 %217
	store i8 %215, i8* %218
	%219 = load i16* %j
	%220 = add i16 %219, 1
	store i16 %220, i16* %j
	br label %L.165
L.167:
	call void @lex_Error(i8 13)
	br label %L.165
L.165:
	store i8 22, i8* %state
	br label %L.162
L.164:
	%221 = load i8* %c
	%222 = call i8 @lex_EscChar(i8 %221)
	%223 = zext i8 %222 to i32
	store i32 %223, i32* %h
	store i8 21, i8* %state
	br label %L.162
L.162:
	br label %L.157
L.157:
	br label %L.12
L.37:
	%224 = load i8* %c
	%225 = zext i8 %224 to i32
	switch i32 %225, label %L.168 [
		i32 10, label %L.170
	]
L.170:
	call void @lex_Error(i8 6)
	store i8 0, i8* %state
	br label %L.169
L.168:
	%226 = load i8* %c
	%227 = load i32* %h
	%228 = call i32 @lex_EscHex(i8 %226, i32 %227)
	store i32 %228, i32* %h
	%229 = load i8* %state
	%230 = add i8 %229, 1
	store i8 %230, i8* %state
	br label %L.169
L.169:
	br label %L.12
L.38:
	%231 = load i8* %c
	%232 = zext i8 %231 to i32
	switch i32 %232, label %L.171 [
		i32 10, label %L.173
	]
L.173:
	call void @lex_Error(i8 6)
	store i8 0, i8* %state
	br label %L.172
L.171:
	%233 = load i8* %c
	%234 = load i32* %h
	%235 = call i32 @lex_EscHex(i8 %233, i32 %234)
	store i32 %235, i32* %h
	%236 = load i8* %str
	%237 = icmp ne i8 %236, 0
	br i1 %237, label %L.175, label %L.176
L.175:
	%238 = load i16* %j
	%239 = zext i16 %238 to i32
	%240 = icmp ult i32 %239, 4095
	br i1 %240, label %L.178, label %L.179
L.178:
	%241 = load i32* %h
	%242 = trunc i32 %241 to i8
	%243 = load i16* %j
	%244 = zext i16 %243 to i32
	%245 = getelementptr [4096 x i8]* @lex_StringBuf, i32 0, i32 %244
	store i8 %242, i8* %245
	%246 = load i16* %j
	%247 = add i16 %246, 1
	store i16 %247, i16* %j
	br label %L.177
L.179:
	call void @lex_Error(i8 13)
	br label %L.177
L.177:
	store i8 22, i8* %state
	br label %L.174
L.176:
	store i8 21, i8* %state
	br label %L.174
L.174:
	br label %L.172
L.172:
	br label %L.12
L.39:
	%248 = load i8* %c
	%249 = zext i8 %248 to i32
	switch i32 %249, label %L.180 [
		i32 10, label %L.182
	]
L.182:
	call void @lex_Error(i8 6)
	store i8 0, i8* %state
	br label %L.181
L.180:
	%250 = load i8* %c
	%251 = load i32* %h
	%252 = call i32 @lex_EscHex(i8 %250, i32 %251)
	store i32 %252, i32* %h
	%253 = load i8* %str
	%254 = icmp ne i8 %253, 0
	br i1 %254, label %L.184, label %L.185
L.184:
	%255 = load i32* %h
	%256 = load i16* %j
	%257 = zext i16 %256 to i32
	%258 = call i32 @lex_EscUTF8(i32 %255, i32 %257)
	%259 = trunc i32 %258 to i16
	store i16 %259, i16* %j
	store i8 22, i8* %state
	br label %L.183
L.185:
	store i8 21, i8* %state
	br label %L.183
L.183:
	br label %L.181
L.181:
	br label %L.12
L.11:
	br label %L.12
L.12:
	%260 = load i8* %tok
	%261 = icmp ne i8 %260, 0
	br i1 %261, label %L.2, label %L.186
L.186:
	%262 = load i8* %c
	%263 = icmp eq i8 %262, 10
	br i1 %263, label %L.188, label %L.187
L.188:
	%264 = load %lex.FileContext** @lex_f
	%265 = getelementptr %lex.FileContext* %264, i32 0, i32 2
	%266 = load i16* %265
	%267 = add i16 %266, 1
	store i16 %267, i16* %265
	br label %L.187
L.187:
	%268 = load i16* %i
	%269 = add i16 %268, 1
	store i16 %269, i16* %i
	br label %L.1
L.2:
	%270 = load i16* %i
	%271 = load %lex.FileContext** @lex_f
	%272 = getelementptr %lex.FileContext* %271, i32 0, i32 3
	store i16 %270, i16* %272
	%273 = load i8* %tok
	store i8 %273, i8* @lex_Token
	%274 = load i8* %tok
	store i8 %274, i8* %rv.0
	br label %return
return:
	%275 = load i8* %rv.0
	ret i8 %275
}
define internal zeroext i8 @lex_Expect(i8 zeroext %expect.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%expect = alloca i8
	store i8 %expect.arg, i8* %expect
	%tok = alloca i8
	%0 = load i8* @lex_Token
	%1 = load i8* %expect
	%2 = icmp eq i8 %0, %1
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	br label %L.1
L.3:
	%4 = load i8* %expect
	call void @lex_ErrorT(i8 14, i8 %4)
	br label %L.1
L.1:
	%5 = load i8* %tok
	store i8 %5, i8* %rv.0
	br label %return
return:
	%6 = load i8* %rv.0
	ret i8 %6
}
define internal zeroext i8 @lex_Keyword([0 x i8]* %toklist.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%toklist = alloca [0 x i8]*
	store [0 x i8]* %toklist.arg, [0 x i8]** %toklist
	%tok = alloca i8
	%i = alloca i32
	%0 = load i8* @lex_Token
	%1 = icmp eq i8 %0, 40
	br i1 %1, label %L.2, label %L.1
L.2:
	store i32 0, i32* %i
	br label %L.3
L.3:
	%2 = load [0 x i8]** %toklist
	%3 = load i32* %i
	%4 = getelementptr [0 x i8]* %2, i32 0, i32 %3
	%5 = load i8* %4
	store i8 %5, i8* %tok
	%6 = load i8* %tok
	%7 = icmp eq i8 %6, 0
	br i1 %7, label %L.4, label %L.5
L.5:
	%8 = getelementptr [64 x i8]* @lex_Ident
	%9 = bitcast [64 x i8]* %8 to [0 x i8]*
	%10 = load i8* %tok
	%11 = zext i8 %10 to i32
	%12 = getelementptr [83 x [0 x i8]*]* @lex_keywords, i32 0, i32 %11
	%13 = load [0 x i8]** %12
	%14 = getelementptr [0 x i8]* %13
	%15 = bitcast [0 x i8]* %14 to [0 x i8]*
	%16 = call i8 @zstr_eq([0 x i8]* %9, [0 x i8]* %15, i32 63)
	%17 = icmp ne i8 %16, 0
	br i1 %17, label %L.7, label %L.6
L.7:
	%18 = load i8* %tok
	store i8 %18, i8* %rv.0
	br label %return
L.6:
	%19 = load i32* %i
	%20 = add i32 %19, 1
	store i32 %20, i32* %i
	br label %L.3
L.4:
	br label %L.1
L.1:
	%21 = load i8* @lex_Token
	store i8 %21, i8* %rv.0
	br label %return
return:
	%22 = load i8* %rv.0
	ret i8 %22
}
@S.180 = internal constant [6 x i8] c" tok=\00"@S.181 = internal constant [3 x i8] c" \22\00"define internal void @lex_WhereAmI([0 x i8]* %msg.arg) nounwind {
L.0:
	%msg = alloca [0 x i8]*
	store [0 x i8]* %msg.arg, [0 x i8]** %msg
	%0 = load [0 x i8]** %msg
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %1)
	%2 = getelementptr [6 x i8]* @S.180
	%3 = bitcast [6 x i8]* %2 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %3)
	%4 = load i8* @lex_Token
	%5 = zext i8 %4 to i32
	%6 = getelementptr [83 x [0 x i8]*]* @lex_keywords, i32 0, i32 %5
	%7 = load [0 x i8]** %6
	%8 = bitcast [0 x i8]* %7 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %8)
	%9 = load i8* @lex_Token
	%10 = icmp eq i8 %9, 40
	br i1 %10, label %L.2, label %L.1
L.2:
	%11 = getelementptr [3 x i8]* @S.181
	%12 = bitcast [3 x i8]* %11 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %12)
	%13 = getelementptr [64 x i8]* @lex_Ident
	%14 = bitcast [64 x i8]* %13 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %14)
	call void @out_chr(i32 2, i8 34)
	br label %L.1
L.1:
	call void @out_nl(i32 2)
	br label %return
return:
	ret void
}
@lex_plist = internal constant [2 x i8] [ i8 33, i8 0 ], align 1
@lex_alist = internal constant [2 x i8] [ i8 35, i8 0 ], align 1
@lex_glist = internal constant [2 x i8] [ i8 37, i8 0 ], align 1
define internal zeroext i8 @lex_Skip([0 x i8]* %toklist.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%toklist = alloca [0 x i8]*
	store [0 x i8]* %toklist.arg, [0 x i8]** %toklist
	%tok = alloca i8
	%ttok = alloca i8
	%i = alloca i32
	%0 = call i8 @lex_Next()
	store i8 %0, i8* %tok
	br label %L.1
L.1:
	%1 = load i8* %tok
	%2 = icmp ne i8 %1, 1
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	store i32 0, i32* %i
	br label %L.4
L.4:
	%4 = load [0 x i8]** %toklist
	%5 = load i32* %i
	%6 = getelementptr [0 x i8]* %4, i32 0, i32 %5
	%7 = load i8* %6
	store i8 %7, i8* %ttok
	%8 = load i8* %ttok
	%9 = icmp eq i8 %8, 0
	br i1 %9, label %L.8, label %L.7
L.7:
	%10 = load i8* %tok
	%11 = load i8* %ttok
	%12 = icmp eq i8 %10, %11
	br label %L.8
L.8:
	%13 = phi i1 [ true, %L.4 ], [ %12, %L.7 ]
	br i1 %13, label %L.5, label %L.6
L.6:
	%14 = load i32* %i
	%15 = add i32 %14, 1
	store i32 %15, i32* %i
	br label %L.4
L.5:
	%16 = load i8* %ttok
	%17 = icmp ne i8 %16, 0
	br i1 %17, label %L.2, label %L.9
L.9:
	%18 = load i8* %tok
	%19 = zext i8 %18 to i32
	switch i32 %19, label %L.10 [
		i32 32, label %L.12
		i32 34, label %L.13
		i32 36, label %L.14
	]
L.12:
	%20 = getelementptr [2 x i8]* @lex_plist
	%21 = bitcast [2 x i8]* %20 to [0 x i8]*
	%22 = call i8 @lex_Skip([0 x i8]* %21)
	store i8 %22, i8* %tok
	br label %L.11
L.13:
	%23 = getelementptr [2 x i8]* @lex_alist
	%24 = bitcast [2 x i8]* %23 to [0 x i8]*
	%25 = call i8 @lex_Skip([0 x i8]* %24)
	store i8 %25, i8* %tok
	br label %L.11
L.14:
	%26 = getelementptr [2 x i8]* @lex_glist
	%27 = bitcast [2 x i8]* %26 to [0 x i8]*
	%28 = call i8 @lex_Skip([0 x i8]* %27)
	store i8 %28, i8* %tok
	br label %L.11
L.10:
	br label %L.11
L.11:
	%29 = call i8 @lex_Next()
	store i8 %29, i8* %tok
	br label %L.1
L.2:
	%30 = load i8* %tok
	store i8 %30, i8* %rv.0
	br label %return
return:
	%31 = load i8* %rv.0
	ret i8 %31
}
define internal zeroext i8 @lex_Want([0 x i8]* %toklist.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%toklist = alloca [0 x i8]*
	store [0 x i8]* %toklist.arg, [0 x i8]** %toklist
	%tok = alloca i8
	%0 = load i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8* %tok
	%2 = load [0 x i8]** %toklist
	%3 = getelementptr [0 x i8]* %2, i32 0, i32 0
	%4 = load i8* %3
	%5 = icmp ne i8 %1, %4
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load [0 x i8]** %toklist
	%7 = getelementptr [0 x i8]* %6, i32 0, i32 0
	%8 = load i8* %7
	call void @lex_ErrorT(i8 14, i8 %8)
	%9 = load [0 x i8]** %toklist
	%10 = bitcast [0 x i8]* %9 to [0 x i8]*
	%11 = call i8 @lex_Skip([0 x i8]* %10)
	store i8 %11, i8* %tok
	br label %L.1
L.1:
	%12 = load i8* %tok
	store i8 %12, i8* %rv.0
	br label %return
return:
	%13 = load i8* %rv.0
	ret i8 %13
}
%type.TypeListEntry = type {%type.TypeListEntry*, %type.TypeNode*}
%symb.SymbNode = type {%symb.SymbNode*, %type.TypeNode*, %symb.SymbNode*, %symb.SymbNode*, %type.TypeListEntry*, %symb.SymbNode*, %symb.SymbNode*, i64, i64, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8, [0 x i8]}
%type.TypeNode = type {%type.TypeNode*, %type.TypeNode*, %type.TypeNode*, %symb.SymbNode*, %symb.SymbNode*, %symb.SymbNode*, i64, i64, i32, i32, i32, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8}
@type_unkntype = internal global %type.TypeNode* zeroinitializer, align 4
@type_booltype = internal global %type.TypeNode* zeroinitializer, align 4
@type_bytetype = internal global %type.TypeNode* zeroinitializer, align 4
@type_wordtype = internal global %type.TypeNode* zeroinitializer, align 4
@type_swordtype = internal global %type.TypeNode* zeroinitializer, align 4
@type_memtype = internal global %type.TypeNode* zeroinitializer, align 4
@type_uinttypes = internal global [4 x %type.TypeNode*] zeroinitializer, align 4
@type_inttypes = internal global [4 x %type.TypeNode*] zeroinitializer, align 4
@target_DefaultTarget = internal constant [4 x i8] c"x86\00", align 1
@target_TargetName = internal global [0 x i8]* zeroinitializer, align 4
%target.SizeAlign = type {i8, i8}
%target.TargetT = type {[0 x i8]*, [0 x i8]*, i8, i8, i8, i8, i8, i8, %target.SizeAlign, [8 x %target.SizeAlign]}
@S.188 = internal constant [4 x i8] c"x86\00";
@S.189 = internal constant [23 x i8] c"i386-unknown-linux-gnu\00";
@S.201 = internal constant [7 x i8] c"x86-64\00";
@S.202 = internal constant [25 x i8] c"x86_64-unknown-linux-gnu\00";
@S.214 = internal constant [7 x i8] c"x86_64\00";
@S.215 = internal constant [25 x i8] c"x86_64-unknown-linux-gnu\00";
@S.227 = internal constant [14 x i8] c"x86_64-darwin\00";
@S.228 = internal constant [22 x i8] c"x86_64-apple-darwin10\00";
@S.240 = internal constant [7 x i8] c"msp430\00";
@S.241 = internal constant [23 x i8] c"msp430-generic-generic\00";
@S.253 = internal constant [10 x i8] c"cortex-m3\00";
@S.254 = internal constant [23 x i8] c"thumb2-unknown-unknown\00";
@S.266 = internal constant [8 x i8] c"arm920t\00";
@S.267 = internal constant [22 x i8] c"thumb-unknown-unknown\00";
@S.279 = internal constant [6 x i8] c"xcore\00";
@S.280 = internal constant [22 x i8] c"xcore-unknown-unknown\00";
@S.292 = internal constant [5 x i8] c"bfin\00";
@S.293 = internal constant [21 x i8] c"bfin-unknown-unknown\00";
@S.305 = internal constant [6 x i8] c"ppc32\00";
@S.306 = internal constant [20 x i8] c"ppc32-unknown-linux\00";
@S.318 = internal constant [6 x i8] c"ppc64\00";
@S.319 = internal constant [20 x i8] c"ppc64-unknown-linux\00";
@S.331 = internal constant [6 x i8] c"s390x\00";
@S.332 = internal constant [22 x i8] c"systemz-unknown-linux\00";
@S.344 = internal constant [8 x i8] c"systemz\00";
@S.345 = internal constant [22 x i8] c"systemz-unknown-linux\00";
@S.357 = internal constant [5 x i8] c"mips\00";
@S.358 = internal constant [21 x i8] c"mips-unknown-unknown\00";
@target_Targets = internal constant [14 x %target.TargetT] [ %target.TargetT { [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.188 )  to [0 x i8]* ), [0 x i8] * bitcast( [23 x i8]* getelementptr( [23 x i8]* @S.189 )  to [0 x i8]* ), i8 2, i8 8, i8 32, i8 0, i8 0, i8 4, %target.SizeAlign { i8 32, i8 32 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 32 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.201 )  to [0 x i8]* ), [0 x i8] * bitcast( [25 x i8]* getelementptr( [25 x i8]* @S.202 )  to [0 x i8]* ), i8 2, i8 8, i8 64, i8 0, i8 0, i8 4, %target.SizeAlign { i8 64, i8 64 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 64 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.214 )  to [0 x i8]* ), [0 x i8] * bitcast( [25 x i8]* getelementptr( [25 x i8]* @S.215 )  to [0 x i8]* ), i8 2, i8 8, i8 64, i8 0, i8 0, i8 4, %target.SizeAlign { i8 64, i8 64 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 64 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [14 x i8]* getelementptr( [14 x i8]* @S.227 )  to [0 x i8]* ), [0 x i8] * bitcast( [22 x i8]* getelementptr( [22 x i8]* @S.228 )  to [0 x i8]* ), i8 2, i8 8, i8 64, i8 0, i8 0, i8 4, %target.SizeAlign { i8 64, i8 64 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 64 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.240 )  to [0 x i8]* ), [0 x i8] * bitcast( [23 x i8]* getelementptr( [23 x i8]* @S.241 )  to [0 x i8]* ), i8 2, i8 8, i8 16, i8 1, i8 0, i8 3, %target.SizeAlign { i8 16, i8 16 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 16 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [10 x i8]* getelementptr( [10 x i8]* @S.253 )  to [0 x i8]* ), [0 x i8] * bitcast( [23 x i8]* getelementptr( [23 x i8]* @S.254 )  to [0 x i8]* ), i8 2, i8 8, i8 32, i8 1, i8 0, i8 4, %target.SizeAlign { i8 32, i8 32 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 32 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [8 x i8]* getelementptr( [8 x i8]* @S.266 )  to [0 x i8]* ), [0 x i8] * bitcast( [22 x i8]* getelementptr( [22 x i8]* @S.267 )  to [0 x i8]* ), i8 2, i8 8, i8 32, i8 1, i8 0, i8 4, %target.SizeAlign { i8 32, i8 32 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 32 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.279 )  to [0 x i8]* ), [0 x i8] * bitcast( [22 x i8]* getelementptr( [22 x i8]* @S.280 )  to [0 x i8]* ), i8 2, i8 8, i8 32, i8 1, i8 0, i8 4, %target.SizeAlign { i8 32, i8 32 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 32 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.292 )  to [0 x i8]* ), [0 x i8] * bitcast( [21 x i8]* getelementptr( [21 x i8]* @S.293 )  to [0 x i8]* ), i8 2, i8 8, i8 32, i8 1, i8 0, i8 4, %target.SizeAlign { i8 32, i8 32 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 32 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.305 )  to [0 x i8]* ), [0 x i8] * bitcast( [20 x i8]* getelementptr( [20 x i8]* @S.306 )  to [0 x i8]* ), i8 1, i8 8, i8 32, i8 1, i8 0, i8 4, %target.SizeAlign { i8 32, i8 32 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 32 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.318 )  to [0 x i8]* ), [0 x i8] * bitcast( [20 x i8]* getelementptr( [20 x i8]* @S.319 )  to [0 x i8]* ), i8 1, i8 8, i8 64, i8 1, i8 0, i8 4, %target.SizeAlign { i8 64, i8 64 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 64 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.331 )  to [0 x i8]* ), [0 x i8] * bitcast( [22 x i8]* getelementptr( [22 x i8]* @S.332 )  to [0 x i8]* ), i8 1, i8 8, i8 64, i8 1, i8 0, i8 4, %target.SizeAlign { i8 64, i8 64 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 64 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [8 x i8]* getelementptr( [8 x i8]* @S.344 )  to [0 x i8]* ), [0 x i8] * bitcast( [22 x i8]* getelementptr( [22 x i8]* @S.345 )  to [0 x i8]* ), i8 1, i8 8, i8 64, i8 1, i8 0, i8 4, %target.SizeAlign { i8 64, i8 64 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 64 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] }, %target.TargetT { [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.357 )  to [0 x i8]* ), [0 x i8] * bitcast( [21 x i8]* getelementptr( [21 x i8]* @S.358 )  to [0 x i8]* ), i8 1, i8 8, i8 32, i8 1, i8 0, i8 4, %target.SizeAlign { i8 32, i8 32 }, [8 x %target.SizeAlign] [ %target.SizeAlign { i8 8, i8 8 }, %target.SizeAlign { i8 16, i8 16 }, %target.SizeAlign { i8 32, i8 32 }, %target.SizeAlign { i8 64, i8 32 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 }, %target.SizeAlign { i8 0, i8 0 } ] } ], align 4
@target_Target = internal global %target.TargetT* zeroinitializer, align 4
@S.369 = internal constant [42 x i8] c"Supported targets and generated triples:\0A\00"@S.370 = internal constant [3 x i8] c": \00"define internal void @target_list() nounwind {
L.0:
	%i = alloca i8
	%0 = getelementptr [42 x i8]* @S.369
	%1 = bitcast [42 x i8]* %0 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %1)
	store i8 0, i8* %i
	br label %L.1
L.1:
	%2 = load i8* %i
	%3 = zext i8 %2 to i32
	%4 = icmp ult i32 %3, 14
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load i8* %i
	%7 = zext i8 %6 to i32
	%8 = getelementptr [14 x %target.TargetT]* @target_Targets, i32 0, i32 %7
	%9 = getelementptr %target.TargetT* %8, i32 0, i32 0
	%10 = load [0 x i8]** %9
	%11 = bitcast [0 x i8]* %10 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %11)
	%12 = getelementptr [3 x i8]* @S.370
	%13 = bitcast [3 x i8]* %12 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %13)
	%14 = load i8* %i
	%15 = zext i8 %14 to i32
	%16 = getelementptr [14 x %target.TargetT]* @target_Targets, i32 0, i32 %15
	%17 = getelementptr %target.TargetT* %16, i32 0, i32 1
	%18 = load [0 x i8]** %17
	%19 = bitcast [0 x i8]* %18 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %19)
	call void @out_nl(i32 2)
	%20 = load i8* %i
	%21 = add i8 %20, 1
	store i8 %21, i8* %i
	br label %L.1
L.2:
	br label %return
return:
	ret void
}
define internal zeroext i8 @target_set([0 x i8]* %name.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%name = alloca [0 x i8]*
	store [0 x i8]* %name.arg, [0 x i8]** %name
	%i = alloca i8
	%0 = load [0 x i8]** %name
	%1 = icmp eq [0 x i8]* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = getelementptr [4 x i8]* @target_DefaultTarget
	%3 = bitcast [4 x i8]* %2 to [0 x i8]*
	store [0 x i8]* %3, [0 x i8]** %name
	br label %L.1
L.1:
	store i8 0, i8* %i
	br label %L.3
L.3:
	%4 = load i8* %i
	%5 = zext i8 %4 to i32
	%6 = icmp ult i32 %5, 14
	%7 = xor i1 %6, true
	br i1 %7, label %L.4, label %L.5
L.5:
	%8 = load [0 x i8]** %name
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	%10 = load i8* %i
	%11 = zext i8 %10 to i32
	%12 = getelementptr [14 x %target.TargetT]* @target_Targets, i32 0, i32 %11
	%13 = getelementptr %target.TargetT* %12, i32 0, i32 0
	%14 = load [0 x i8]** %13
	%15 = bitcast [0 x i8]* %14 to [0 x i8]*
	%16 = call i8 @zstr_eq([0 x i8]* %9, [0 x i8]* %15, i32 63)
	%17 = icmp ne i8 %16, 0
	br i1 %17, label %L.7, label %L.6
L.7:
	%18 = load i8* %i
	%19 = zext i8 %18 to i32
	%20 = getelementptr [14 x %target.TargetT]* @target_Targets, i32 0, i32 %19
	%21 = getelementptr %target.TargetT* %20
	%22 = bitcast %target.TargetT* %21 to %target.TargetT*
	store %target.TargetT* %22, %target.TargetT** @target_Target
	%23 = load i8* %i
	%24 = zext i8 %23 to i32
	%25 = getelementptr [14 x %target.TargetT]* @target_Targets, i32 0, i32 %24
	%26 = getelementptr %target.TargetT* %25, i32 0, i32 0
	%27 = load [0 x i8]** %26
	%28 = bitcast [0 x i8]* %27 to [0 x i8]*
	store [0 x i8]* %28, [0 x i8]** @target_TargetName
	store i8 1, i8* %rv.0
	br label %return
L.6:
	%29 = load i8* %i
	%30 = add i8 %29, 1
	store i8 %30, i8* %i
	br label %L.3
L.4:
	store i8 0, i8* %rv.0
	br label %return
return:
	%31 = load i8* %rv.0
	ret i8 %31
}
define internal i32 @target_isize(i32 %bits.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%bits = alloca i32
	store i32 %bits.arg, i32* %bits
	%i = alloca i8
	store i8 0, i8* %i
	br label %L.1
L.1:
	%0 = load i8* %i
	%1 = load %target.TargetT** @target_Target
	%2 = getelementptr %target.TargetT* %1, i32 0, i32 7
	%3 = load i8* %2
	%4 = icmp ult i8 %0, %3
	br i1 %4, label %L.4, label %L.5
L.4:
	%5 = load %target.TargetT** @target_Target
	%6 = getelementptr %target.TargetT* %5, i32 0, i32 9
	%7 = load i8* %i
	%8 = zext i8 %7 to i32
	%9 = getelementptr [8 x %target.SizeAlign]* %6, i32 0, i32 %8
	%10 = getelementptr %target.SizeAlign* %9, i32 0, i32 0
	%11 = load i8* %10
	%12 = zext i8 %11 to i32
	%13 = load i32* %bits
	%14 = icmp ult i32 %12, %13
	br label %L.5
L.5:
	%15 = phi i1 [ false, %L.1 ], [ %14, %L.4 ]
	%16 = xor i1 %15, true
	br i1 %16, label %L.2, label %L.3
L.3:
	%17 = load i8* %i
	%18 = add i8 %17, 1
	store i8 %18, i8* %i
	br label %L.1
L.2:
	%19 = load %target.TargetT** @target_Target
	%20 = getelementptr %target.TargetT* %19, i32 0, i32 9
	%21 = load i8* %i
	%22 = zext i8 %21 to i32
	%23 = getelementptr [8 x %target.SizeAlign]* %20, i32 0, i32 %22
	%24 = getelementptr %target.SizeAlign* %23, i32 0, i32 0
	%25 = load i8* %24
	%26 = zext i8 %25 to i32
	store i32 %26, i32* %rv.0
	br label %return
return:
	%27 = load i32* %rv.0
	ret i32 %27
}
define internal i32 @target_ialign(i32 %bits.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%bits = alloca i32
	store i32 %bits.arg, i32* %bits
	%i = alloca i8
	store i8 0, i8* %i
	br label %L.1
L.1:
	%0 = load i8* %i
	%1 = load %target.TargetT** @target_Target
	%2 = getelementptr %target.TargetT* %1, i32 0, i32 7
	%3 = load i8* %2
	%4 = icmp ult i8 %0, %3
	br i1 %4, label %L.4, label %L.5
L.4:
	%5 = load %target.TargetT** @target_Target
	%6 = getelementptr %target.TargetT* %5, i32 0, i32 9
	%7 = load i8* %i
	%8 = zext i8 %7 to i32
	%9 = getelementptr [8 x %target.SizeAlign]* %6, i32 0, i32 %8
	%10 = getelementptr %target.SizeAlign* %9, i32 0, i32 0
	%11 = load i8* %10
	%12 = zext i8 %11 to i32
	%13 = load i32* %bits
	%14 = icmp ult i32 %12, %13
	br label %L.5
L.5:
	%15 = phi i1 [ false, %L.1 ], [ %14, %L.4 ]
	%16 = xor i1 %15, true
	br i1 %16, label %L.2, label %L.3
L.3:
	%17 = load i8* %i
	%18 = add i8 %17, 1
	store i8 %18, i8* %i
	br label %L.1
L.2:
	%19 = load %target.TargetT** @target_Target
	%20 = getelementptr %target.TargetT* %19, i32 0, i32 9
	%21 = load i8* %i
	%22 = zext i8 %21 to i32
	%23 = getelementptr [8 x %target.SizeAlign]* %20, i32 0, i32 %22
	%24 = getelementptr %target.SizeAlign* %23, i32 0, i32 1
	%25 = load i8* %24
	%26 = zext i8 %25 to i32
	store i32 %26, i32* %rv.0
	br label %return
return:
	%27 = load i32* %rv.0
	ret i32 %27
}
@symb_level = internal global i8 0, align 1
@symb_curpack = internal global %symb.SymbNode* zeroinitializer, align 4
@symb_curproc = internal global %symb.SymbNode* zeroinitializer, align 4
%symb.symblist = type {%symb.SymbNode*, %symb.SymbNode*}
@symb_symbs = internal global [32 x %symb.symblist] zeroinitializer, align 4
@S.371 = internal constant [2 x i8] c"_\00"define internal zeroext i8 @symb_IsAnon([0 x i8]* %id.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%id = alloca [0 x i8]*
	store [0 x i8]* %id.arg, [0 x i8]** %id
	%0 = load [0 x i8]** %id
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = getelementptr [2 x i8]* @S.371
	%3 = bitcast [2 x i8]* %2 to [0 x i8]*
	%4 = call i8 @zstr_eq([0 x i8]* %1, [0 x i8]* %3, i32 63)
	store i8 %4, i8* %rv.0
	br label %return
return:
	%5 = load i8* %rv.0
	ret i8 %5
}
define internal zeroext i8 @symb_IsUniqueLocal(%symb.SymbNode* %s.arg, [0 x i8]* %id.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%s = alloca %symb.SymbNode*
	%id = alloca [0 x i8]*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	store [0 x i8]* %id.arg, [0 x i8]** %id
	%0 = load [0 x i8]** %id
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = call i8 @symb_IsAnon([0 x i8]* %1)
	%3 = icmp ne i8 %2, 0
	br i1 %3, label %L.2, label %L.1
L.2:
	store i8 1, i8* %rv.0
	br label %return
L.1:
	br label %L.3
L.3:
	%4 = load %symb.SymbNode** %s
	%5 = icmp ne %symb.SymbNode* %4, null
	%6 = xor i1 %5, true
	br i1 %6, label %L.4, label %L.5
L.5:
	%7 = load %symb.SymbNode** %s
	%8 = getelementptr %symb.SymbNode* %7, i32 0, i32 19
	%9 = getelementptr [0 x i8]* %8
	%10 = bitcast [0 x i8]* %9 to [0 x i8]*
	%11 = load [0 x i8]** %id
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	%13 = call i8 @zstr_eq([0 x i8]* %10, [0 x i8]* %12, i32 63)
	%14 = icmp ne i8 %13, 0
	br i1 %14, label %L.7, label %L.6
L.7:
	store i8 0, i8* %rv.0
	br label %return
L.6:
	%15 = load %symb.SymbNode** %s
	%16 = getelementptr %symb.SymbNode* %15, i32 0, i32 0
	%17 = load %symb.SymbNode** %16
	%18 = bitcast %symb.SymbNode* %17 to %symb.SymbNode*
	store %symb.SymbNode* %18, %symb.SymbNode** %s
	br label %L.3
L.4:
	store i8 1, i8* %rv.0
	br label %return
return:
	%19 = load i8* %rv.0
	ret i8 %19
}
define internal void @symb_MakeVisible(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%0 = load i8* @symb_level
	%1 = zext i8 %0 to i32
	%2 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %1
	%3 = getelementptr %symb.symblist* %2, i32 0, i32 0
	%4 = load %symb.SymbNode** %3
	%5 = icmp eq %symb.SymbNode* %4, null
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = load %symb.SymbNode** %s
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	%8 = load i8* @symb_level
	%9 = zext i8 %8 to i32
	%10 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %9
	%11 = getelementptr %symb.symblist* %10, i32 0, i32 0
	store %symb.SymbNode* %7, %symb.SymbNode** %11
	br label %L.1
L.3:
	%12 = load %symb.SymbNode** %s
	%13 = bitcast %symb.SymbNode* %12 to %symb.SymbNode*
	%14 = load i8* @symb_level
	%15 = zext i8 %14 to i32
	%16 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %15
	%17 = getelementptr %symb.symblist* %16, i32 0, i32 1
	%18 = load %symb.SymbNode** %17
	%19 = getelementptr %symb.SymbNode* %18, i32 0, i32 0
	store %symb.SymbNode* %13, %symb.SymbNode** %19
	br label %L.1
L.1:
	%20 = load %symb.SymbNode** %s
	%21 = bitcast %symb.SymbNode* %20 to %symb.SymbNode*
	%22 = load i8* @symb_level
	%23 = zext i8 %22 to i32
	%24 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %23
	%25 = getelementptr %symb.symblist* %24, i32 0, i32 1
	store %symb.SymbNode* %21, %symb.SymbNode** %25
	br label %return
return:
	ret void
}
define internal %symb.SymbNode* @symb_New(i8 zeroext %kind.arg, [0 x i8]* %name.arg, i8 zeroext %vis.arg) nounwind {
L.0:
	%rv.0 = alloca %symb.SymbNode*
	%kind = alloca i8
	%name = alloca [0 x i8]*
	%vis = alloca i8
	store i8 %kind.arg, i8* %kind
	store [0 x i8]* %name.arg, [0 x i8]** %name
	store i8 %vis.arg, i8* %vis
	%s = alloca %symb.SymbNode*
	%0 = load i8* %vis
	%1 = icmp ne i8 %0, 2
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load i8* @symb_level
	%3 = zext i8 %2 to i32
	%4 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %3
	%5 = getelementptr %symb.symblist* %4, i32 0, i32 0
	%6 = load %symb.SymbNode** %5
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	store %symb.SymbNode* %7, %symb.SymbNode** %s
	br label %L.3
L.3:
	%8 = load %symb.SymbNode** %s
	%9 = icmp ne %symb.SymbNode* %8, null
	br i1 %9, label %L.6, label %L.7
L.6:
	%10 = load %symb.SymbNode** %s
	%11 = getelementptr %symb.SymbNode* %10, i32 0, i32 19
	%12 = getelementptr [0 x i8]* %11
	%13 = bitcast [0 x i8]* %12 to [0 x i8]*
	%14 = load [0 x i8]** %name
	%15 = bitcast [0 x i8]* %14 to [0 x i8]*
	%16 = call i8 @zstr_eq([0 x i8]* %13, [0 x i8]* %15, i32 63)
	%17 = icmp ne i8 %16, 0
	%18 = xor i1 %17, true
	br label %L.7
L.7:
	%19 = phi i1 [ false, %L.3 ], [ %18, %L.6 ]
	%20 = xor i1 %19, true
	br i1 %20, label %L.4, label %L.5
L.5:
	%21 = load %symb.SymbNode** %s
	%22 = getelementptr %symb.SymbNode* %21, i32 0, i32 0
	%23 = load %symb.SymbNode** %22
	%24 = bitcast %symb.SymbNode* %23 to %symb.SymbNode*
	store %symb.SymbNode* %24, %symb.SymbNode** %s
	br label %L.3
L.4:
	%25 = load %symb.SymbNode** %s
	%26 = icmp ne %symb.SymbNode* %25, null
	br i1 %26, label %L.9, label %L.8
L.9:
	%27 = load %symb.SymbNode** %s
	%28 = getelementptr %symb.SymbNode* %27, i32 0, i32 14
	%29 = load i8* %28
	%30 = icmp ne i8 %29, 0
	%31 = xor i1 %30, true
	br i1 %31, label %L.11, label %L.10
L.11:
	%32 = load [0 x i8]** %name
	%33 = bitcast [0 x i8]* %32 to [0 x i8]*
	call void @lex_ErrorI(i8 17, [0 x i8]* %33)
	br label %L.10
L.10:
	%34 = load %symb.SymbNode** %s
	%35 = bitcast %symb.SymbNode* %34 to %symb.SymbNode*
	store %symb.SymbNode* %35, %symb.SymbNode** %rv.0
	br label %return
L.8:
	br label %L.1
L.1:
	%36 = load [0 x i8]** %name
	%37 = bitcast [0 x i8]* %36 to [0 x i8]*
	%38 = call i32 @zstr_len([0 x i8]* %37, i32 63)
	%39 = add i32 60, %38
	%40 = call [0 x i8]* @malloc(i32 %39)
	%41 = bitcast [0 x i8]* %40 to %symb.SymbNode*
	%42 = bitcast %symb.SymbNode* %41 to %symb.SymbNode*
	store %symb.SymbNode* %42, %symb.SymbNode** %s
	%43 = load %symb.SymbNode** %s
	%44 = getelementptr %symb.SymbNode* %43, i32 0, i32 19
	%45 = getelementptr [0 x i8]* %44
	%46 = bitcast [0 x i8]* %45 to [0 x i8]*
	%47 = load [0 x i8]** %name
	%48 = bitcast [0 x i8]* %47 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %46, [0 x i8]* %48, i32 63)
	%49 = load i8* %kind
	%50 = load %symb.SymbNode** %s
	%51 = getelementptr %symb.SymbNode* %50, i32 0, i32 12
	store i8 %49, i8* %51
	%52 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%53 = load %symb.SymbNode** %s
	%54 = getelementptr %symb.SymbNode* %53, i32 0, i32 0
	store %symb.SymbNode* %52, %symb.SymbNode** %54
	%55 = load %symb.SymbNode** @symb_curproc
	%56 = icmp ne %symb.SymbNode* %55, null
	br i1 %56, label %L.13, label %L.14
L.13:
	%57 = load %symb.SymbNode** %s
	%58 = getelementptr %symb.SymbNode* %57, i32 0, i32 13
	store i8 0, i8* %58
	%59 = load %symb.SymbNode** @symb_curproc
	%60 = bitcast %symb.SymbNode* %59 to %symb.SymbNode*
	%61 = load %symb.SymbNode** %s
	%62 = getelementptr %symb.SymbNode* %61, i32 0, i32 2
	store %symb.SymbNode* %60, %symb.SymbNode** %62
	br label %L.12
L.14:
	%63 = load %symb.SymbNode** @symb_curpack
	%64 = icmp ne %symb.SymbNode* %63, null
	br i1 %64, label %L.16, label %L.17
L.16:
	%65 = load %symb.SymbNode** %s
	%66 = getelementptr %symb.SymbNode* %65, i32 0, i32 13
	store i8 1, i8* %66
	%67 = load %symb.SymbNode** @symb_curpack
	%68 = bitcast %symb.SymbNode* %67 to %symb.SymbNode*
	%69 = load %symb.SymbNode** %s
	%70 = getelementptr %symb.SymbNode* %69, i32 0, i32 2
	store %symb.SymbNode* %68, %symb.SymbNode** %70
	br label %L.15
L.17:
	%71 = load %symb.SymbNode** %s
	%72 = getelementptr %symb.SymbNode* %71, i32 0, i32 13
	store i8 2, i8* %72
	%73 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%74 = load %symb.SymbNode** %s
	%75 = getelementptr %symb.SymbNode* %74, i32 0, i32 2
	store %symb.SymbNode* %73, %symb.SymbNode** %75
	br label %L.15
L.15:
	br label %L.12
L.12:
	%76 = call i16 @lex_Lineno()
	%77 = load %symb.SymbNode** %s
	%78 = getelementptr %symb.SymbNode* %77, i32 0, i32 10
	store i16 %76, i16* %78
	%79 = load i8* %vis
	%80 = icmp eq i8 %79, 0
	br i1 %80, label %L.19, label %L.18
L.19:
	%81 = load %symb.SymbNode** %s
	%82 = bitcast %symb.SymbNode* %81 to %symb.SymbNode*
	call void @symb_MakeVisible(%symb.SymbNode* %82)
	br label %L.18
L.18:
	%83 = load %symb.SymbNode** %s
	%84 = bitcast %symb.SymbNode* %83 to %symb.SymbNode*
	store %symb.SymbNode* %84, %symb.SymbNode** %rv.0
	br label %return
return:
	%85 = load %symb.SymbNode** %rv.0
	ret %symb.SymbNode* %85
}
@S.372 = internal constant [2 x i8] c"/\00"define internal %symb.SymbNode* @symb_NewFile([0 x i8]* %path.arg, [0 x i8]* %file.arg) nounwind {
L.0:
	%rv.0 = alloca %symb.SymbNode*
	%path = alloca [0 x i8]*
	%file = alloca [0 x i8]*
	store [0 x i8]* %path.arg, [0 x i8]** %path
	store [0 x i8]* %file.arg, [0 x i8]** %file
	%full = alloca [1024 x i8]
	%0 = getelementptr [1024 x i8]* %full
	%1 = bitcast [1024 x i8]* %0 to [0 x i8]*
	%2 = load [0 x i8]** %path
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	call void @zstr_copy([0 x i8]* %1, [0 x i8]* %3, i32 1024)
	%4 = getelementptr [1024 x i8]* %full
	%5 = bitcast [1024 x i8]* %4 to [0 x i8]*
	%6 = getelementptr [2 x i8]* @S.372
	%7 = bitcast [2 x i8]* %6 to [0 x i8]*
	call void @zstr_cat([0 x i8]* %5, [0 x i8]* %7, i32 1024)
	%8 = getelementptr [1024 x i8]* %full
	%9 = bitcast [1024 x i8]* %8 to [0 x i8]*
	%10 = load [0 x i8]** %file
	%11 = bitcast [0 x i8]* %10 to [0 x i8]*
	call void @zstr_cat([0 x i8]* %9, [0 x i8]* %11, i32 1024)
	%12 = getelementptr [1024 x i8]* %full
	%13 = bitcast [1024 x i8]* %12 to [0 x i8]*
	%14 = call %symb.SymbNode* @symb_New(i8 7, [0 x i8]* %13, i8 2)
	%15 = bitcast %symb.SymbNode* %14 to %symb.SymbNode*
	store %symb.SymbNode* %15, %symb.SymbNode** %rv.0
	br label %return
return:
	%16 = load %symb.SymbNode** %rv.0
	ret %symb.SymbNode* %16
}
define internal %symb.SymbNode* @symb_Clone(%symb.SymbNode* %os.arg, [0 x i8]* %name.arg) nounwind {
L.0:
	%rv.0 = alloca %symb.SymbNode*
	%os = alloca %symb.SymbNode*
	%name = alloca [0 x i8]*
	store %symb.SymbNode* %os.arg, %symb.SymbNode** %os
	store [0 x i8]* %name.arg, [0 x i8]** %name
	%ns = alloca %symb.SymbNode*
	%0 = load [0 x i8]** %name
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = call %symb.SymbNode* @symb_New(i8 8, [0 x i8]* %1, i8 0)
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %ns
	%4 = load %symb.SymbNode** %os
	%5 = bitcast %symb.SymbNode* %4 to %symb.SymbNode*
	%6 = load %symb.SymbNode** %ns
	%7 = getelementptr %symb.SymbNode* %6, i32 0, i32 5
	store %symb.SymbNode* %5, %symb.SymbNode** %7
	%8 = load %symb.SymbNode** %ns
	%9 = bitcast %symb.SymbNode* %8 to %symb.SymbNode*
	store %symb.SymbNode* %9, %symb.SymbNode** %rv.0
	br label %return
return:
	%10 = load %symb.SymbNode** %rv.0
	ret %symb.SymbNode* %10
}
define internal %symb.SymbNode* @symb_FindLocal(%symb.SymbNode* %as.arg, [0 x i8]* %name.arg) nounwind {
L.0:
	%rv.0 = alloca %symb.SymbNode*
	%as = alloca %symb.SymbNode*
	%name = alloca [0 x i8]*
	store %symb.SymbNode* %as.arg, %symb.SymbNode** %as
	store [0 x i8]* %name.arg, [0 x i8]** %name
	%s = alloca %symb.SymbNode*
	%0 = load %symb.SymbNode** %as
	%1 = bitcast %symb.SymbNode* %0 to %symb.SymbNode*
	store %symb.SymbNode* %1, %symb.SymbNode** %s
	br label %L.1
L.1:
	%2 = load %symb.SymbNode** %s
	%3 = icmp ne %symb.SymbNode* %2, null
	%4 = xor i1 %3, true
	br i1 %4, label %L.2, label %L.3
L.3:
	%5 = load %symb.SymbNode** %s
	%6 = getelementptr %symb.SymbNode* %5, i32 0, i32 19
	%7 = getelementptr [0 x i8]* %6
	%8 = bitcast [0 x i8]* %7 to [0 x i8]*
	%9 = load [0 x i8]** %name
	%10 = bitcast [0 x i8]* %9 to [0 x i8]*
	%11 = call i8 @zstr_eq([0 x i8]* %8, [0 x i8]* %10, i32 63)
	%12 = icmp ne i8 %11, 0
	br i1 %12, label %L.5, label %L.4
L.5:
	%13 = load %symb.SymbNode** %s
	%14 = getelementptr %symb.SymbNode* %13, i32 0, i32 12
	%15 = load i8* %14
	%16 = icmp eq i8 %15, 8
	br i1 %16, label %L.7, label %L.6
L.7:
	%17 = load %symb.SymbNode** %s
	%18 = getelementptr %symb.SymbNode* %17, i32 0, i32 5
	%19 = load %symb.SymbNode** %18
	%20 = bitcast %symb.SymbNode* %19 to %symb.SymbNode*
	store %symb.SymbNode* %20, %symb.SymbNode** %s
	br label %L.6
L.6:
	%21 = load %symb.SymbNode** %s
	%22 = bitcast %symb.SymbNode* %21 to %symb.SymbNode*
	store %symb.SymbNode* %22, %symb.SymbNode** %rv.0
	br label %return
L.4:
	%23 = load %symb.SymbNode** %s
	%24 = getelementptr %symb.SymbNode* %23, i32 0, i32 0
	%25 = load %symb.SymbNode** %24
	%26 = bitcast %symb.SymbNode* %25 to %symb.SymbNode*
	store %symb.SymbNode* %26, %symb.SymbNode** %s
	br label %L.1
L.2:
	%27 = load %symb.SymbNode** %s
	%28 = bitcast %symb.SymbNode* %27 to %symb.SymbNode*
	store %symb.SymbNode* %28, %symb.SymbNode** %rv.0
	br label %return
return:
	%29 = load %symb.SymbNode** %rv.0
	ret %symb.SymbNode* %29
}
define internal %symb.SymbNode* @symb_FindMethod(%symb.SymbNode* %as.arg, [0 x i8]* %name.arg) nounwind {
L.0:
	%rv.0 = alloca %symb.SymbNode*
	%as = alloca %symb.SymbNode*
	%name = alloca [0 x i8]*
	store %symb.SymbNode* %as.arg, %symb.SymbNode** %as
	store [0 x i8]* %name.arg, [0 x i8]** %name
	%s = alloca %symb.SymbNode*
	%0 = load %symb.SymbNode** %as
	%1 = bitcast %symb.SymbNode* %0 to %symb.SymbNode*
	store %symb.SymbNode* %1, %symb.SymbNode** %s
	br label %L.1
L.1:
	%2 = load %symb.SymbNode** %s
	%3 = icmp ne %symb.SymbNode* %2, null
	br i1 %3, label %L.4, label %L.5
L.4:
	%4 = load %symb.SymbNode** %s
	%5 = getelementptr %symb.SymbNode* %4, i32 0, i32 19
	%6 = getelementptr [0 x i8]* %5
	%7 = bitcast [0 x i8]* %6 to [0 x i8]*
	%8 = load [0 x i8]** %name
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	%10 = call i8 @zstr_eq([0 x i8]* %7, [0 x i8]* %9, i32 63)
	%11 = icmp ne i8 %10, 0
	%12 = xor i1 %11, true
	br label %L.5
L.5:
	%13 = phi i1 [ false, %L.1 ], [ %12, %L.4 ]
	%14 = xor i1 %13, true
	br i1 %14, label %L.2, label %L.3
L.3:
	%15 = load %symb.SymbNode** %s
	%16 = getelementptr %symb.SymbNode* %15, i32 0, i32 6
	%17 = load %symb.SymbNode** %16
	%18 = bitcast %symb.SymbNode* %17 to %symb.SymbNode*
	store %symb.SymbNode* %18, %symb.SymbNode** %s
	br label %L.1
L.2:
	%19 = load %symb.SymbNode** %s
	%20 = bitcast %symb.SymbNode* %19 to %symb.SymbNode*
	store %symb.SymbNode* %20, %symb.SymbNode** %rv.0
	br label %return
return:
	%21 = load %symb.SymbNode** %rv.0
	ret %symb.SymbNode* %21
}
define internal %symb.SymbNode* @symb_FindPackage(%symb.SymbNode* %ps.arg) nounwind {
L.0:
	%rv.0 = alloca %symb.SymbNode*
	%ps = alloca %symb.SymbNode*
	store %symb.SymbNode* %ps.arg, %symb.SymbNode** %ps
	%s = alloca %symb.SymbNode*
	%tok = alloca i8
	%0 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %0, %symb.SymbNode** %s
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 40
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = call i8 @lex_Next()
	store i8 %4, i8* %tok
	br label %L.1
L.1:
	br label %L.3
L.3:
	%5 = load i8* %tok
	%6 = icmp ne i8 %5, 2
	br i1 %6, label %L.6, label %L.5
L.6:
	%7 = call i8 @lex_Expect(i8 2)
	br label %L.4
L.5:
	%8 = call i8 @lex_Next()
	store i8 %8, i8* %tok
	%9 = load i8* %tok
	%10 = icmp ne i8 %9, 40
	br i1 %10, label %L.8, label %L.7
L.8:
	%11 = call i8 @lex_Expect(i8 40)
	br label %L.4
L.7:
	%12 = load %symb.SymbNode** %ps
	%13 = getelementptr %symb.SymbNode* %12, i32 0, i32 5
	%14 = load %symb.SymbNode** %13
	%15 = bitcast %symb.SymbNode* %14 to %symb.SymbNode*
	%16 = getelementptr [64 x i8]* @lex_Ident
	%17 = bitcast [64 x i8]* %16 to [0 x i8]*
	%18 = call %symb.SymbNode* @symb_FindLocal(%symb.SymbNode* %15, [0 x i8]* %17)
	%19 = bitcast %symb.SymbNode* %18 to %symb.SymbNode*
	store %symb.SymbNode* %19, %symb.SymbNode** %s
	%20 = load %symb.SymbNode** %s
	%21 = icmp eq %symb.SymbNode* %20, null
	br i1 %21, label %L.11, label %L.10
L.10:
	%22 = load %symb.SymbNode** %s
	%23 = getelementptr %symb.SymbNode* %22, i32 0, i32 12
	%24 = load i8* %23
	%25 = icmp ne i8 %24, 6
	br label %L.11
L.11:
	%26 = phi i1 [ true, %L.7 ], [ %25, %L.10 ]
	br i1 %26, label %L.4, label %L.9
L.9:
	%27 = call i8 @lex_Next()
	store i8 %27, i8* %tok
	%28 = load %symb.SymbNode** %s
	%29 = bitcast %symb.SymbNode* %28 to %symb.SymbNode*
	store %symb.SymbNode* %29, %symb.SymbNode** %ps
	br label %L.3
L.4:
	%30 = load %symb.SymbNode** %s
	%31 = bitcast %symb.SymbNode* %30 to %symb.SymbNode*
	store %symb.SymbNode* %31, %symb.SymbNode** %rv.0
	br label %return
return:
	%32 = load %symb.SymbNode** %rv.0
	ret %symb.SymbNode* %32
}
define internal %symb.SymbNode* @symb_FindTop([0 x i8]* %name.arg) nounwind {
L.0:
	%rv.0 = alloca %symb.SymbNode*
	%name = alloca [0 x i8]*
	store [0 x i8]* %name.arg, [0 x i8]** %name
	%s = alloca %symb.SymbNode*
	%i = alloca i8
	%0 = load i8* @symb_level
	store i8 %0, i8* %i
	br label %L.1
L.1:
	%1 = load i8* %i
	%2 = zext i8 %1 to i32
	%3 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %2
	%4 = getelementptr %symb.symblist* %3, i32 0, i32 0
	%5 = load %symb.SymbNode** %4
	%6 = bitcast %symb.SymbNode* %5 to %symb.SymbNode*
	%7 = load [0 x i8]** %name
	%8 = bitcast [0 x i8]* %7 to [0 x i8]*
	%9 = call %symb.SymbNode* @symb_FindLocal(%symb.SymbNode* %6, [0 x i8]* %8)
	%10 = bitcast %symb.SymbNode* %9 to %symb.SymbNode*
	store %symb.SymbNode* %10, %symb.SymbNode** %s
	%11 = load %symb.SymbNode** %s
	%12 = icmp ne %symb.SymbNode* %11, null
	br i1 %12, label %L.4, label %L.3
L.4:
	%13 = load %symb.SymbNode** %s
	%14 = getelementptr %symb.SymbNode* %13, i32 0, i32 17
	store i8 1, i8* %14
	%15 = load %symb.SymbNode** %s
	%16 = bitcast %symb.SymbNode* %15 to %symb.SymbNode*
	store %symb.SymbNode* %16, %symb.SymbNode** %rv.0
	br label %return
L.3:
	%17 = load i8* %i
	%18 = icmp eq i8 %17, 0
	br i1 %18, label %L.2, label %L.5
L.5:
	%19 = load i8* %i
	%20 = sub i8 %19, 1
	store i8 %20, i8* %i
	br label %L.1
L.2:
	%21 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %21, %symb.SymbNode** %rv.0
	br label %return
return:
	%22 = load %symb.SymbNode** %rv.0
	ret %symb.SymbNode* %22
}
define internal %symb.SymbNode* @symb_Find([0 x i8]* %name.arg) nounwind {
L.0:
	%rv.0 = alloca %symb.SymbNode*
	%name = alloca [0 x i8]*
	store [0 x i8]* %name.arg, [0 x i8]** %name
	%s = alloca %symb.SymbNode*
	%0 = load [0 x i8]** %name
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = call %symb.SymbNode* @symb_FindTop([0 x i8]* %1)
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %s
	%4 = load %symb.SymbNode** %s
	%5 = icmp ne %symb.SymbNode* %4, null
	br i1 %5, label %L.1, label %L.2
L.1:
	%6 = load %symb.SymbNode** %s
	%7 = getelementptr %symb.SymbNode* %6, i32 0, i32 12
	%8 = load i8* %7
	%9 = icmp eq i8 %8, 6
	br label %L.2
L.2:
	%10 = phi i1 [ false, %L.0 ], [ %9, %L.1 ]
	br i1 %10, label %L.4, label %L.3
L.4:
	%11 = load %symb.SymbNode** %s
	%12 = bitcast %symb.SymbNode* %11 to %symb.SymbNode*
	%13 = call %symb.SymbNode* @symb_FindPackage(%symb.SymbNode* %12)
	%14 = bitcast %symb.SymbNode* %13 to %symb.SymbNode*
	store %symb.SymbNode* %14, %symb.SymbNode** %s
	br label %L.3
L.3:
	%15 = load %symb.SymbNode** %s
	%16 = bitcast %symb.SymbNode* %15 to %symb.SymbNode*
	store %symb.SymbNode* %16, %symb.SymbNode** %rv.0
	br label %return
return:
	%17 = load %symb.SymbNode** %rv.0
	ret %symb.SymbNode* %17
}
define internal %symb.SymbNode* @symb_Save() nounwind {
L.0:
	%rv.0 = alloca %symb.SymbNode*
	%0 = load i8* @symb_level
	%1 = zext i8 %0 to i32
	%2 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %1
	%3 = getelementptr %symb.symblist* %2, i32 0, i32 0
	%4 = load %symb.SymbNode** %3
	%5 = bitcast %symb.SymbNode* %4 to %symb.SymbNode*
	store %symb.SymbNode* %5, %symb.SymbNode** %rv.0
	br label %return
return:
	%6 = load %symb.SymbNode** %rv.0
	ret %symb.SymbNode* %6
}
define internal void @symb_Push(%symb.SymbNode* %init.arg) nounwind {
L.0:
	%init = alloca %symb.SymbNode*
	store %symb.SymbNode* %init.arg, %symb.SymbNode** %init
	%0 = load i8* @symb_level
	%1 = zext i8 %0 to i32
	%2 = icmp ult i32 %1, 31
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = load i8* @symb_level
	%4 = add i8 %3, 1
	store i8 %4, i8* @symb_level
	%5 = load %symb.SymbNode** %init
	%6 = icmp eq %symb.SymbNode* %5, null
	br i1 %6, label %L.5, label %L.6
L.5:
	%7 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%8 = load i8* @symb_level
	%9 = zext i8 %8 to i32
	%10 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %9
	%11 = getelementptr %symb.symblist* %10, i32 0, i32 0
	store %symb.SymbNode* %7, %symb.SymbNode** %11
	%12 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%13 = load i8* @symb_level
	%14 = zext i8 %13 to i32
	%15 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %14
	%16 = getelementptr %symb.symblist* %15, i32 0, i32 1
	store %symb.SymbNode* %12, %symb.SymbNode** %16
	br label %L.4
L.6:
	%17 = load %symb.SymbNode** %init
	%18 = bitcast %symb.SymbNode* %17 to %symb.SymbNode*
	%19 = load i8* @symb_level
	%20 = zext i8 %19 to i32
	%21 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %20
	%22 = getelementptr %symb.symblist* %21, i32 0, i32 0
	store %symb.SymbNode* %18, %symb.SymbNode** %22
	br label %L.7
L.7:
	%23 = load %symb.SymbNode** %init
	%24 = getelementptr %symb.SymbNode* %23, i32 0, i32 0
	%25 = load %symb.SymbNode** %24
	%26 = icmp ne %symb.SymbNode* %25, null
	%27 = xor i1 %26, true
	br i1 %27, label %L.8, label %L.9
L.9:
	%28 = load %symb.SymbNode** %init
	%29 = getelementptr %symb.SymbNode* %28, i32 0, i32 0
	%30 = load %symb.SymbNode** %29
	%31 = bitcast %symb.SymbNode* %30 to %symb.SymbNode*
	store %symb.SymbNode* %31, %symb.SymbNode** %init
	br label %L.7
L.8:
	%32 = load %symb.SymbNode** %init
	%33 = bitcast %symb.SymbNode* %32 to %symb.SymbNode*
	%34 = load i8* @symb_level
	%35 = zext i8 %34 to i32
	%36 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %35
	%37 = getelementptr %symb.symblist* %36, i32 0, i32 1
	store %symb.SymbNode* %33, %symb.SymbNode** %37
	br label %L.4
L.4:
	br label %L.1
L.3:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.373 = internal constant [4 x i8] c"In \00"@S.374 = internal constant [10 x i8] c" unused: \00"define internal void @symb_Pop() nounwind {
L.0:
	%0 = load i8* @symb_level
	%1 = icmp ugt i8 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = getelementptr %A.3* @feature, i32 0, i32 1
	%3 = load i8* %2
	%4 = icmp ne i8 %3, 0
	br i1 %4, label %L.4, label %L.5
L.4:
	%5 = load %symb.SymbNode** @symb_curproc
	%6 = icmp ne %symb.SymbNode* %5, null
	br label %L.5
L.5:
	%7 = phi i1 [ false, %L.2 ], [ %6, %L.4 ]
	br i1 %7, label %L.7, label %L.6
L.7:
	%s = alloca %symb.SymbNode*
	%8 = load i8* @symb_level
	%9 = zext i8 %8 to i32
	%10 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %9
	%11 = getelementptr %symb.symblist* %10, i32 0, i32 0
	%12 = load %symb.SymbNode** %11
	%13 = bitcast %symb.SymbNode* %12 to %symb.SymbNode*
	store %symb.SymbNode* %13, %symb.SymbNode** %s
	br label %L.8
L.8:
	%14 = load %symb.SymbNode** %s
	%15 = icmp ne %symb.SymbNode* %14, null
	%16 = xor i1 %15, true
	br i1 %16, label %L.9, label %L.10
L.10:
	%17 = load %symb.SymbNode** %s
	%18 = getelementptr %symb.SymbNode* %17, i32 0, i32 17
	%19 = load i8* %18
	%20 = icmp ne i8 %19, 0
	%21 = xor i1 %20, true
	br i1 %21, label %L.11, label %L.12
L.11:
	%22 = load %symb.SymbNode** %s
	%23 = getelementptr %symb.SymbNode* %22, i32 0, i32 16
	%24 = load i8* %23
	%25 = icmp ne i8 %24, 0
	%26 = xor i1 %25, true
	br label %L.12
L.12:
	%27 = phi i1 [ false, %L.10 ], [ %26, %L.11 ]
	br i1 %27, label %L.14, label %L.13
L.14:
	%28 = getelementptr [4 x i8]* @S.373
	%29 = bitcast [4 x i8]* %28 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %29)
	%30 = load %symb.SymbNode** @symb_curpack
	%31 = icmp ne %symb.SymbNode* %30, null
	br i1 %31, label %L.16, label %L.15
L.16:
	%32 = load %symb.SymbNode** @symb_curpack
	%33 = getelementptr %symb.SymbNode* %32, i32 0, i32 19
	%34 = getelementptr [0 x i8]* %33
	%35 = bitcast [0 x i8]* %34 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %35)
	call void @out_chr(i32 2, i8 46)
	br label %L.15
L.15:
	%36 = load %symb.SymbNode** @symb_curproc
	%37 = getelementptr %symb.SymbNode* %36, i32 0, i32 19
	%38 = getelementptr [0 x i8]* %37
	%39 = bitcast [0 x i8]* %38 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %39)
	%40 = getelementptr [10 x i8]* @S.374
	%41 = bitcast [10 x i8]* %40 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %41)
	%42 = load %symb.SymbNode** %s
	%43 = getelementptr %symb.SymbNode* %42, i32 0, i32 19
	%44 = getelementptr [0 x i8]* %43
	%45 = bitcast [0 x i8]* %44 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %45)
	call void @out_nl(i32 2)
	br label %L.13
L.13:
	%46 = load %symb.SymbNode** %s
	%47 = getelementptr %symb.SymbNode* %46, i32 0, i32 0
	%48 = load %symb.SymbNode** %47
	%49 = bitcast %symb.SymbNode* %48 to %symb.SymbNode*
	store %symb.SymbNode* %49, %symb.SymbNode** %s
	br label %L.8
L.9:
	br label %L.6
L.6:
	%50 = load i8* @symb_level
	%51 = sub i8 %50, 1
	store i8 %51, i8* @symb_level
	br label %L.1
L.3:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @symb_NewIntrinsic([0 x i8]* %name.arg, i8 zeroext %valu.arg) nounwind {
L.0:
	%name = alloca [0 x i8]*
	%valu = alloca i8
	store [0 x i8]* %name.arg, [0 x i8]** %name
	store i8 %valu.arg, i8* %valu
	%s = alloca %symb.SymbNode*
	%0 = load [0 x i8]** %name
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = call %symb.SymbNode* @symb_New(i8 5, [0 x i8]* %1, i8 0)
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %s
	%4 = load i8* %valu
	%5 = zext i8 %4 to i64
	%6 = load %symb.SymbNode** %s
	%7 = getelementptr %symb.SymbNode* %6, i32 0, i32 7
	store i64 %5, i64* %7
	br label %return
return:
	ret void
}
@S.375 = internal constant [5 x i8] c"true\00"@S.376 = internal constant [6 x i8] c"false\00"@S.377 = internal constant [9 x i8] c"_boolean\00"@S.378 = internal constant [8 x i8] c"boolean\00"@S.379 = internal constant [6 x i8] c"false\00"@S.380 = internal constant [5 x i8] c"true\00"@S.381 = internal constant [6 x i8] c"_byte\00"@S.382 = internal constant [8 x i8] c"_memory\00"@S.383 = internal constant [9 x i8] c"_address\00"@S.384 = internal constant [6 x i8] c"_uint\00"@S.385 = internal constant [5 x i8] c"_int\00"@S.386 = internal constant [7 x i8] c"_uint8\00"@S.387 = internal constant [6 x i8] c"_int8\00"@S.388 = internal constant [8 x i8] c"_uint16\00"@S.389 = internal constant [7 x i8] c"_int16\00"@S.390 = internal constant [8 x i8] c"_uint32\00"@S.391 = internal constant [7 x i8] c"_int32\00"@S.392 = internal constant [8 x i8] c"_uint64\00"@S.393 = internal constant [7 x i8] c"_int64\00"@S.394 = internal constant [5 x i8] c"_abs\00"@S.395 = internal constant [5 x i8] c"_min\00"@S.396 = internal constant [5 x i8] c"_max\00"define internal void @symb_InitDecl() nounwind {
L.0:
	%t = alloca %type.TypeNode*
	%s = alloca %symb.SymbNode*
	%s0 = alloca %symb.SymbNode*
	%s1 = alloca %symb.SymbNode*
	%0 = call %type.TypeNode* @type_New(i8 1)
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	store %type.TypeNode* %1, %type.TypeNode** %t
	%2 = load %type.TypeNode** %t
	%3 = getelementptr %type.TypeNode* %2, i32 0, i32 8
	store i32 1, i32* %3
	%4 = getelementptr [5 x i8]* @S.375
	%5 = bitcast [5 x i8]* %4 to [0 x i8]*
	%6 = call %symb.SymbNode* @symb_New(i8 1, [0 x i8]* %5, i8 2)
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	store %symb.SymbNode* %7, %symb.SymbNode** %s1
	%8 = load %symb.SymbNode** %s1
	%9 = getelementptr %symb.SymbNode* %8, i32 0, i32 7
	store i64 1, i64* %9
	%10 = getelementptr [6 x i8]* @S.376
	%11 = bitcast [6 x i8]* %10 to [0 x i8]*
	%12 = call %symb.SymbNode* @symb_New(i8 1, [0 x i8]* %11, i8 2)
	%13 = bitcast %symb.SymbNode* %12 to %symb.SymbNode*
	store %symb.SymbNode* %13, %symb.SymbNode** %s0
	%14 = load %symb.SymbNode** %s0
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 7
	store i64 0, i64* %15
	%16 = load %symb.SymbNode** %s1
	%17 = bitcast %symb.SymbNode* %16 to %symb.SymbNode*
	%18 = load %symb.SymbNode** %s0
	%19 = getelementptr %symb.SymbNode* %18, i32 0, i32 0
	store %symb.SymbNode* %17, %symb.SymbNode** %19
	%20 = load %symb.SymbNode** %s0
	%21 = bitcast %symb.SymbNode* %20 to %symb.SymbNode*
	%22 = load %type.TypeNode** %t
	%23 = getelementptr %type.TypeNode* %22, i32 0, i32 4
	store %symb.SymbNode* %21, %symb.SymbNode** %23
	%24 = load %type.TypeNode** %t
	%25 = bitcast %type.TypeNode* %24 to %type.TypeNode*
	call void @type_Final(%type.TypeNode* %25)
	%26 = getelementptr [9 x i8]* @S.377
	%27 = bitcast [9 x i8]* %26 to [0 x i8]*
	%28 = call %symb.SymbNode* @symb_New(i8 2, [0 x i8]* %27, i8 0)
	%29 = bitcast %symb.SymbNode* %28 to %symb.SymbNode*
	store %symb.SymbNode* %29, %symb.SymbNode** %s
	%30 = load %type.TypeNode** %t
	%31 = bitcast %type.TypeNode* %30 to %type.TypeNode*
	%32 = load %symb.SymbNode** %s
	%33 = getelementptr %symb.SymbNode* %32, i32 0, i32 1
	store %type.TypeNode* %31, %type.TypeNode** %33
	%34 = load %symb.SymbNode** %s
	%35 = bitcast %symb.SymbNode* %34 to %symb.SymbNode*
	%36 = load %type.TypeNode** %t
	%37 = getelementptr %type.TypeNode* %36, i32 0, i32 3
	store %symb.SymbNode* %35, %symb.SymbNode** %37
	%38 = load %type.TypeNode** %t
	%39 = bitcast %type.TypeNode* %38 to %type.TypeNode*
	store %type.TypeNode* %39, %type.TypeNode** @type_booltype
	%40 = load %symb.SymbNode** %s
	%41 = bitcast %symb.SymbNode* %40 to %symb.SymbNode*
	%42 = getelementptr [8 x i8]* @S.378
	%43 = bitcast [8 x i8]* %42 to [0 x i8]*
	%44 = call %symb.SymbNode* @symb_Clone(%symb.SymbNode* %41, [0 x i8]* %43)
	%45 = bitcast %symb.SymbNode* %44 to %symb.SymbNode*
	store %symb.SymbNode* %45, %symb.SymbNode** %s
	%46 = getelementptr [6 x i8]* @S.379
	%47 = bitcast [6 x i8]* %46 to [0 x i8]*
	%48 = call %symb.SymbNode* @symb_New(i8 1, [0 x i8]* %47, i8 0)
	%49 = bitcast %symb.SymbNode* %48 to %symb.SymbNode*
	store %symb.SymbNode* %49, %symb.SymbNode** %s
	%50 = load %type.TypeNode** %t
	%51 = bitcast %type.TypeNode* %50 to %type.TypeNode*
	%52 = load %symb.SymbNode** %s
	%53 = getelementptr %symb.SymbNode* %52, i32 0, i32 1
	store %type.TypeNode* %51, %type.TypeNode** %53
	%54 = load %symb.SymbNode** %s
	%55 = getelementptr %symb.SymbNode* %54, i32 0, i32 7
	store i64 0, i64* %55
	%56 = getelementptr [5 x i8]* @S.380
	%57 = bitcast [5 x i8]* %56 to [0 x i8]*
	%58 = call %symb.SymbNode* @symb_New(i8 1, [0 x i8]* %57, i8 0)
	%59 = bitcast %symb.SymbNode* %58 to %symb.SymbNode*
	store %symb.SymbNode* %59, %symb.SymbNode** %s
	%60 = load %type.TypeNode** %t
	%61 = bitcast %type.TypeNode* %60 to %type.TypeNode*
	%62 = load %symb.SymbNode** %s
	%63 = getelementptr %symb.SymbNode* %62, i32 0, i32 1
	store %type.TypeNode* %61, %type.TypeNode** %63
	%64 = load %symb.SymbNode** %s
	%65 = getelementptr %symb.SymbNode* %64, i32 0, i32 7
	store i64 1, i64* %65
	%66 = getelementptr [6 x i8]* @S.381
	%67 = bitcast [6 x i8]* %66 to [0 x i8]*
	%68 = load %target.TargetT** @target_Target
	%69 = getelementptr %target.TargetT* %68, i32 0, i32 3
	%70 = load i8* %69
	%71 = zext i8 %70 to i32
	%72 = call %type.TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %67, i32 %71)
	%73 = bitcast %type.TypeNode* %72 to %type.TypeNode*
	store %type.TypeNode* %73, %type.TypeNode** @type_bytetype
	%74 = getelementptr [8 x i8]* @S.382
	%75 = bitcast [8 x i8]* %74 to [0 x i8]*
	%76 = call %type.TypeNode* @type_NewBuiltin(i8 5, [0 x i8]* %75, i32 0)
	%77 = bitcast %type.TypeNode* %76 to %type.TypeNode*
	store %type.TypeNode* %77, %type.TypeNode** @type_memtype
	%78 = load %type.TypeNode** @type_bytetype
	%79 = bitcast %type.TypeNode* %78 to %type.TypeNode*
	%80 = load %type.TypeNode** @type_memtype
	%81 = getelementptr %type.TypeNode* %80, i32 0, i32 0
	store %type.TypeNode* %79, %type.TypeNode** %81
	%82 = load %target.TargetT** @target_Target
	%83 = getelementptr %target.TargetT* %82, i32 0, i32 3
	%84 = load i8* %83
	%85 = zext i8 %84 to i32
	%86 = load %type.TypeNode** @type_memtype
	%87 = getelementptr %type.TypeNode* %86, i32 0, i32 10
	store i32 %85, i32* %87
	%88 = load %type.TypeNode** @type_memtype
	%89 = getelementptr %type.TypeNode* %88, i32 0, i32 18
	store i8 1, i8* %89
	%90 = getelementptr [9 x i8]* @S.383
	%91 = bitcast [9 x i8]* %90 to [0 x i8]*
	%92 = load %target.TargetT** @target_Target
	%93 = getelementptr %target.TargetT* %92, i32 0, i32 8
	%94 = getelementptr %target.SizeAlign* %93, i32 0, i32 0
	%95 = load i8* %94
	%96 = zext i8 %95 to i32
	%97 = call %type.TypeNode* @type_NewBuiltin(i8 4, [0 x i8]* %91, i32 %96)
	%98 = bitcast %type.TypeNode* %97 to %type.TypeNode*
	store %type.TypeNode* %98, %type.TypeNode** %t
	%99 = load %type.TypeNode** @type_memtype
	%100 = bitcast %type.TypeNode* %99 to %type.TypeNode*
	%101 = load %type.TypeNode** %t
	%102 = getelementptr %type.TypeNode* %101, i32 0, i32 0
	store %type.TypeNode* %100, %type.TypeNode** %102
	%103 = load %target.TargetT** @target_Target
	%104 = getelementptr %target.TargetT* %103, i32 0, i32 8
	%105 = getelementptr %target.SizeAlign* %104, i32 0, i32 1
	%106 = load i8* %105
	%107 = zext i8 %106 to i32
	%108 = load %type.TypeNode** %t
	%109 = getelementptr %type.TypeNode* %108, i32 0, i32 10
	store i32 %107, i32* %109
	%110 = getelementptr [6 x i8]* @S.384
	%111 = bitcast [6 x i8]* %110 to [0 x i8]*
	%112 = load %target.TargetT** @target_Target
	%113 = getelementptr %target.TargetT* %112, i32 0, i32 4
	%114 = load i8* %113
	%115 = zext i8 %114 to i32
	%116 = call %type.TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %111, i32 %115)
	%117 = bitcast %type.TypeNode* %116 to %type.TypeNode*
	store %type.TypeNode* %117, %type.TypeNode** @type_wordtype
	%118 = getelementptr [5 x i8]* @S.385
	%119 = bitcast [5 x i8]* %118 to [0 x i8]*
	%120 = load %target.TargetT** @target_Target
	%121 = getelementptr %target.TargetT* %120, i32 0, i32 4
	%122 = load i8* %121
	%123 = zext i8 %122 to i32
	%124 = call %type.TypeNode* @type_NewBuiltin(i8 3, [0 x i8]* %119, i32 %123)
	%125 = bitcast %type.TypeNode* %124 to %type.TypeNode*
	store %type.TypeNode* %125, %type.TypeNode** @type_swordtype
	%126 = getelementptr [7 x i8]* @S.386
	%127 = bitcast [7 x i8]* %126 to [0 x i8]*
	%128 = call %type.TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %127, i32 8)
	%129 = bitcast %type.TypeNode* %128 to %type.TypeNode*
	%130 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 0
	store %type.TypeNode* %129, %type.TypeNode** %130
	%131 = getelementptr [6 x i8]* @S.387
	%132 = bitcast [6 x i8]* %131 to [0 x i8]*
	%133 = call %type.TypeNode* @type_NewBuiltin(i8 3, [0 x i8]* %132, i32 8)
	%134 = bitcast %type.TypeNode* %133 to %type.TypeNode*
	%135 = getelementptr [4 x %type.TypeNode*]* @type_inttypes, i32 0, i32 0
	store %type.TypeNode* %134, %type.TypeNode** %135
	%136 = getelementptr [8 x i8]* @S.388
	%137 = bitcast [8 x i8]* %136 to [0 x i8]*
	%138 = call %type.TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %137, i32 16)
	%139 = bitcast %type.TypeNode* %138 to %type.TypeNode*
	%140 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 1
	store %type.TypeNode* %139, %type.TypeNode** %140
	%141 = getelementptr [7 x i8]* @S.389
	%142 = bitcast [7 x i8]* %141 to [0 x i8]*
	%143 = call %type.TypeNode* @type_NewBuiltin(i8 3, [0 x i8]* %142, i32 16)
	%144 = bitcast %type.TypeNode* %143 to %type.TypeNode*
	%145 = getelementptr [4 x %type.TypeNode*]* @type_inttypes, i32 0, i32 1
	store %type.TypeNode* %144, %type.TypeNode** %145
	%146 = getelementptr [8 x i8]* @S.390
	%147 = bitcast [8 x i8]* %146 to [0 x i8]*
	%148 = call %type.TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %147, i32 32)
	%149 = bitcast %type.TypeNode* %148 to %type.TypeNode*
	%150 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 2
	store %type.TypeNode* %149, %type.TypeNode** %150
	%151 = getelementptr [7 x i8]* @S.391
	%152 = bitcast [7 x i8]* %151 to [0 x i8]*
	%153 = call %type.TypeNode* @type_NewBuiltin(i8 3, [0 x i8]* %152, i32 32)
	%154 = bitcast %type.TypeNode* %153 to %type.TypeNode*
	%155 = getelementptr [4 x %type.TypeNode*]* @type_inttypes, i32 0, i32 2
	store %type.TypeNode* %154, %type.TypeNode** %155
	%156 = getelementptr [8 x i8]* @S.392
	%157 = bitcast [8 x i8]* %156 to [0 x i8]*
	%158 = call %type.TypeNode* @type_NewBuiltin(i8 2, [0 x i8]* %157, i32 64)
	%159 = bitcast %type.TypeNode* %158 to %type.TypeNode*
	%160 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 3
	store %type.TypeNode* %159, %type.TypeNode** %160
	%161 = getelementptr [7 x i8]* @S.393
	%162 = bitcast [7 x i8]* %161 to [0 x i8]*
	%163 = call %type.TypeNode* @type_NewBuiltin(i8 3, [0 x i8]* %162, i32 64)
	%164 = bitcast %type.TypeNode* %163 to %type.TypeNode*
	%165 = getelementptr [4 x %type.TypeNode*]* @type_inttypes, i32 0, i32 3
	store %type.TypeNode* %164, %type.TypeNode** %165
	%166 = call %type.TypeNode* @type_New(i8 0)
	%167 = bitcast %type.TypeNode* %166 to %type.TypeNode*
	store %type.TypeNode* %167, %type.TypeNode** @type_unkntype
	%168 = load %target.TargetT** @target_Target
	%169 = getelementptr %target.TargetT* %168, i32 0, i32 3
	%170 = load i8* %169
	%171 = zext i8 %170 to i32
	%172 = load %type.TypeNode** @type_unkntype
	%173 = getelementptr %type.TypeNode* %172, i32 0, i32 8
	store i32 %171, i32* %173
	%174 = load %target.TargetT** @target_Target
	%175 = getelementptr %target.TargetT* %174, i32 0, i32 3
	%176 = load i8* %175
	%177 = zext i8 %176 to i32
	%178 = load %type.TypeNode** @type_unkntype
	%179 = getelementptr %type.TypeNode* %178, i32 0, i32 10
	store i32 %177, i32* %179
	%180 = getelementptr [5 x i8]* @S.394
	%181 = bitcast [5 x i8]* %180 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %181, i8 1)
	%182 = getelementptr [5 x i8]* @S.395
	%183 = bitcast [5 x i8]* %182 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %183, i8 2)
	%184 = getelementptr [5 x i8]* @S.396
	%185 = bitcast [5 x i8]* %184 to [0 x i8]*
	call void @symb_NewIntrinsic([0 x i8]* %185, i8 3)
	br label %return
return:
	ret void
}
define internal void @symb_Init() nounwind {
L.0:
	store i8 0, i8* @symb_level
	%0 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%1 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 0
	%2 = getelementptr %symb.symblist* %1, i32 0, i32 0
	store %symb.SymbNode* %0, %symb.SymbNode** %2
	%3 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%4 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 0
	%5 = getelementptr %symb.symblist* %4, i32 0, i32 1
	store %symb.SymbNode* %3, %symb.SymbNode** %5
	call void @symb_InitDecl()
	br label %return
return:
	ret void
}
define internal void @symb_DumpST(%symb.SymbNode* %s.arg, i8 zeroext %full.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	%full = alloca i8
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	store i8 %full.arg, i8* %full
	%0 = load %symb.SymbNode** %s
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 19
	%2 = getelementptr [0 x i8]* %1
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %3)
	call void @out_chr(i32 2, i8 58)
	%4 = load %symb.SymbNode** %s
	%5 = getelementptr %symb.SymbNode* %4, i32 0, i32 1
	%6 = load %type.TypeNode** %5
	%7 = bitcast %type.TypeNode* %6 to %type.TypeNode*
	%8 = load i8* %full
	call void @type_DumpT(%type.TypeNode* %7, i8 %8)
	br label %return
return:
	ret void
}
@S.397 = internal constant [3 x i8] c", \00"define internal void @symb_DumpFormals(%symb.SymbNode* %ss.arg) nounwind {
L.0:
	%ss = alloca %symb.SymbNode*
	store %symb.SymbNode* %ss.arg, %symb.SymbNode** %ss
	call void @out_chr(i32 2, i8 40)
	%0 = load %symb.SymbNode** %ss
	%1 = icmp ne %symb.SymbNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	br label %L.3
L.3:
	%2 = load %symb.SymbNode** %ss
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	call void @symb_DumpST(%symb.SymbNode* %3, i8 0)
	%4 = load %symb.SymbNode** %ss
	%5 = getelementptr %symb.SymbNode* %4, i32 0, i32 0
	%6 = load %symb.SymbNode** %5
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	store %symb.SymbNode* %7, %symb.SymbNode** %ss
	%8 = load %symb.SymbNode** %ss
	%9 = icmp eq %symb.SymbNode* %8, null
	br i1 %9, label %L.4, label %L.5
L.5:
	%10 = getelementptr [3 x i8]* @S.397
	%11 = bitcast [3 x i8]* %10 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %11)
	br label %L.3
L.4:
	br label %L.1
L.1:
	call void @out_chr(i32 2, i8 41)
	br label %return
return:
	ret void
}
@S.398 = internal constant [10 x i8] c"constant \00"@S.399 = internal constant [6 x i8] c"type \00"@S.400 = internal constant [5 x i8] c"var \00"@S.401 = internal constant [7 x i8] c"field \00"@S.402 = internal constant [6 x i8] c"proc \00"@S.403 = internal constant [11 x i8] c"intrinsic \00"@S.404 = internal constant [3 x i8] c"()\00"@S.405 = internal constant [9 x i8] c"package \00"@S.406 = internal constant [7 x i8] c"alias \00"@S.407 = internal constant [11 x i8] c"undefined \00"define internal void @symb_DumpS(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%tl = alloca %type.TypeListEntry*
	%0 = load %symb.SymbNode** %s
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 12
	%2 = load i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 1, label %L.3
		i32 2, label %L.4
		i32 3, label %L.5
		i32 4, label %L.6
		i32 5, label %L.7
		i32 6, label %L.8
		i32 8, label %L.9
	]
L.3:
	%4 = getelementptr [10 x i8]* @S.398
	%5 = bitcast [10 x i8]* %4 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %5)
	%6 = load %symb.SymbNode** %s
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	call void @symb_DumpST(%symb.SymbNode* %7, i8 0)
	call void @out_chr(i32 2, i8 61)
	%8 = load %symb.SymbNode** %s
	%9 = getelementptr %symb.SymbNode* %8, i32 0, i32 7
	%10 = load i64* %9
	call void @out_hex64(i32 2, i64 %10)
	br label %L.2
L.4:
	%11 = getelementptr [6 x i8]* @S.399
	%12 = bitcast [6 x i8]* %11 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %12)
	%13 = load %symb.SymbNode** %s
	%14 = bitcast %symb.SymbNode* %13 to %symb.SymbNode*
	call void @symb_DumpST(%symb.SymbNode* %14, i8 1)
	br label %L.2
L.5:
	%15 = getelementptr [5 x i8]* @S.400
	%16 = bitcast [5 x i8]* %15 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %16)
	%17 = load %symb.SymbNode** %s
	%18 = bitcast %symb.SymbNode* %17 to %symb.SymbNode*
	call void @symb_DumpST(%symb.SymbNode* %18, i8 0)
	br label %L.2
L.6:
	%19 = getelementptr [7 x i8]* @S.401
	%20 = bitcast [7 x i8]* %19 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %20)
	%21 = load %symb.SymbNode** %s
	%22 = getelementptr %symb.SymbNode* %21, i32 0, i32 19
	%23 = getelementptr [0 x i8]* %22
	%24 = bitcast [0 x i8]* %23 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %24)
	br label %L.2
L.7:
	%25 = load %symb.SymbNode** %s
	%26 = getelementptr %symb.SymbNode* %25, i32 0, i32 7
	%27 = load i64* %26
	%28 = icmp eq i64 %27, 0
	br i1 %28, label %L.11, label %L.12
L.11:
	%29 = getelementptr [6 x i8]* @S.402
	%30 = bitcast [6 x i8]* %29 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %30)
	%31 = load %symb.SymbNode** %s
	%32 = getelementptr %symb.SymbNode* %31, i32 0, i32 19
	%33 = getelementptr [0 x i8]* %32
	%34 = bitcast [0 x i8]* %33 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %34)
	%35 = load %symb.SymbNode** %s
	%36 = getelementptr %symb.SymbNode* %35, i32 0, i32 3
	%37 = load %symb.SymbNode** %36
	%38 = bitcast %symb.SymbNode* %37 to %symb.SymbNode*
	call void @symb_DumpFormals(%symb.SymbNode* %38)
	%39 = load %symb.SymbNode** %s
	%40 = getelementptr %symb.SymbNode* %39, i32 0, i32 4
	%41 = load %type.TypeListEntry** %40
	%42 = bitcast %type.TypeListEntry* %41 to %type.TypeListEntry*
	store %type.TypeListEntry* %42, %type.TypeListEntry** %tl
	%43 = load %type.TypeListEntry** %tl
	%44 = icmp ne %type.TypeListEntry* %43, null
	br i1 %44, label %L.14, label %L.13
L.14:
	call void @out_chr(i32 2, i8 58)
	br label %L.15
L.15:
	%45 = load %type.TypeListEntry** %tl
	%46 = getelementptr %type.TypeListEntry* %45, i32 0, i32 1
	%47 = load %type.TypeNode** %46
	%48 = bitcast %type.TypeNode* %47 to %type.TypeNode*
	call void @type_DumpT(%type.TypeNode* %48, i8 0)
	%49 = load %type.TypeListEntry** %tl
	%50 = getelementptr %type.TypeListEntry* %49, i32 0, i32 0
	%51 = load %type.TypeListEntry** %50
	%52 = bitcast %type.TypeListEntry* %51 to %type.TypeListEntry*
	store %type.TypeListEntry* %52, %type.TypeListEntry** %tl
	%53 = load %type.TypeListEntry** %tl
	%54 = icmp eq %type.TypeListEntry* %53, null
	br i1 %54, label %L.16, label %L.17
L.17:
	call void @out_chr(i32 2, i8 44)
	br label %L.15
L.16:
	br label %L.13
L.13:
	br label %L.10
L.12:
	%55 = getelementptr [11 x i8]* @S.403
	%56 = bitcast [11 x i8]* %55 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %56)
	%57 = load %symb.SymbNode** %s
	%58 = getelementptr %symb.SymbNode* %57, i32 0, i32 19
	%59 = getelementptr [0 x i8]* %58
	%60 = bitcast [0 x i8]* %59 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %60)
	%61 = getelementptr [3 x i8]* @S.404
	%62 = bitcast [3 x i8]* %61 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %62)
	br label %L.10
L.10:
	br label %L.2
L.8:
	%63 = getelementptr [9 x i8]* @S.405
	%64 = bitcast [9 x i8]* %63 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %64)
	%65 = load %symb.SymbNode** %s
	%66 = getelementptr %symb.SymbNode* %65, i32 0, i32 19
	%67 = getelementptr [0 x i8]* %66
	%68 = bitcast [0 x i8]* %67 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %68)
	br label %L.2
L.9:
	%69 = getelementptr [7 x i8]* @S.406
	%70 = bitcast [7 x i8]* %69 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %70)
	%71 = load %symb.SymbNode** %s
	%72 = getelementptr %symb.SymbNode* %71, i32 0, i32 19
	%73 = getelementptr [0 x i8]* %72
	%74 = bitcast [0 x i8]* %73 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %74)
	br label %L.2
L.1:
	%75 = getelementptr [11 x i8]* @S.407
	%76 = bitcast [11 x i8]* %75 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %76)
	%77 = load %symb.SymbNode** %s
	%78 = getelementptr %symb.SymbNode* %77, i32 0, i32 19
	%79 = getelementptr [0 x i8]* %78
	%80 = bitcast [0 x i8]* %79 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %80)
	call void @out_nl(i32 2)
	br label %L.2
L.2:
	call void @out_nl(i32 2)
	br label %return
return:
	ret void
}
@S.408 = internal constant [11 x i8] c"*** level \00"@S.409 = internal constant [6 x i8] c" ***\0A\00"define internal void @symb_Dump(i8 zeroext %n.arg) nounwind {
L.0:
	%n = alloca i8
	store i8 %n.arg, i8* %n
	%stop = alloca i32
	%i = alloca i32
	%s = alloca %symb.SymbNode*
	%0 = load i8* @symb_level
	%1 = load i8* %n
	%2 = icmp ult i8 %0, %1
	br i1 %2, label %L.2, label %L.3
L.2:
	store i32 0, i32* %stop
	br label %L.1
L.3:
	%3 = load i8* @symb_level
	%4 = add i8 %3, 1
	%5 = load i8* %n
	%6 = sub i8 %4, %5
	%7 = zext i8 %6 to i32
	store i32 %7, i32* %stop
	br label %L.1
L.1:
	%8 = load i8* @symb_level
	%9 = zext i8 %8 to i32
	store i32 %9, i32* %i
	br label %L.4
L.4:
	%10 = getelementptr [11 x i8]* @S.408
	%11 = bitcast [11 x i8]* %10 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %11)
	%12 = load i32* %i
	call void @out_uint(i32 2, i32 %12)
	%13 = getelementptr [6 x i8]* @S.409
	%14 = bitcast [6 x i8]* %13 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %14)
	%15 = load i32* %i
	%16 = getelementptr [32 x %symb.symblist]* @symb_symbs, i32 0, i32 %15
	%17 = getelementptr %symb.symblist* %16, i32 0, i32 0
	%18 = load %symb.SymbNode** %17
	%19 = bitcast %symb.SymbNode* %18 to %symb.SymbNode*
	store %symb.SymbNode* %19, %symb.SymbNode** %s
	br label %L.6
L.6:
	%20 = load %symb.SymbNode** %s
	%21 = icmp ne %symb.SymbNode* %20, null
	%22 = xor i1 %21, true
	br i1 %22, label %L.7, label %L.8
L.8:
	%23 = load %symb.SymbNode** %s
	%24 = bitcast %symb.SymbNode* %23 to %symb.SymbNode*
	call void @symb_DumpS(%symb.SymbNode* %24)
	%25 = load %symb.SymbNode** %s
	%26 = getelementptr %symb.SymbNode* %25, i32 0, i32 0
	%27 = load %symb.SymbNode** %26
	%28 = bitcast %symb.SymbNode* %27 to %symb.SymbNode*
	store %symb.SymbNode* %28, %symb.SymbNode** %s
	br label %L.6
L.7:
	%29 = load i32* %i
	%30 = load i32* %stop
	%31 = icmp ule i32 %29, %30
	br i1 %31, label %L.5, label %L.9
L.9:
	%32 = load i32* %i
	%33 = sub i32 %32, 1
	store i32 %33, i32* %i
	br label %L.4
L.5:
	br label %return
return:
	ret void
}
@ast_NumChildDefault = internal constant [72 x i8] [ i8 0, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 0, i8 0, i8 0, i8 4, i8 5, i8 5, i8 0, i8 8, i8 1, i8 1, i8 2, i8 3, i8 1, i8 4, i8 4, i8 4, i8 4, i8 1, i8 1, i8 2, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 3, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 3, i8 3, i8 3, i8 3, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 3, i8 8, i8 1, i8 2, i8 3, i8 8, i8 4, i8 1, i8 3 ], align 1
%ast.AstNode = type {i8, i8, i16, i16, i8, i8, i32, i32, i16, i16, i64, %type.TypeNode*, %symb.SymbNode*, [0 x %ast.AstNode*]}
define internal %ast.AstNode* @ast_Alloc(i8 zeroext %op.arg, i16 zeroext %nc.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%op = alloca i8
	%nc = alloca i16
	store i8 %op.arg, i8* %op
	store i16 %nc.arg, i16* %nc
	%pa = alloca %ast.AstNode*
	%0 = load i16* %nc
	%1 = zext i16 %0 to i32
	%2 = mul i32 %1, 4
	%3 = add i32 36, %2
	%4 = call [0 x i8]* @sys_zalloc(i32 %3)
	%5 = bitcast [0 x i8]* %4 to %ast.AstNode*
	%6 = bitcast %ast.AstNode* %5 to %ast.AstNode*
	store %ast.AstNode* %6, %ast.AstNode** %pa
	%7 = load i8* %op
	%8 = load %ast.AstNode** %pa
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 0
	store i8 %7, i8* %9
	%10 = call i16 @lex_Lineno()
	%11 = load %ast.AstNode** %pa
	%12 = getelementptr %ast.AstNode* %11, i32 0, i32 8
	store i16 %10, i16* %12
	%13 = load %ast.AstNode** %pa
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 2
	store i16 0, i16* %14
	%15 = load i16* %nc
	%16 = load %ast.AstNode** %pa
	%17 = getelementptr %ast.AstNode* %16, i32 0, i32 3
	store i16 %15, i16* %17
	%18 = load %ast.AstNode** %pa
	%19 = bitcast %ast.AstNode* %18 to %ast.AstNode*
	store %ast.AstNode* %19, %ast.AstNode** %rv.0
	br label %return
return:
	%20 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %20
}
define internal %ast.AstNode* @ast_Expand(%ast.AstNode* %po.arg, i16 zeroext %newsize.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%po = alloca %ast.AstNode*
	%newsize = alloca i16
	store %ast.AstNode* %po.arg, %ast.AstNode** %po
	store i16 %newsize.arg, i16* %newsize
	%pn = alloca %ast.AstNode*
	%size = alloca i16
	%i = alloca i16
	%0 = load %ast.AstNode** %po
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 3
	%2 = load i16* %1
	store i16 %2, i16* %size
	br label %L.1
L.1:
	%3 = load i16* %size
	%4 = load i16* %newsize
	%5 = icmp ult i16 %3, %4
	%6 = xor i1 %5, true
	br i1 %6, label %L.2, label %L.3
L.3:
	%7 = load i16* %size
	%8 = icmp uge i16 %7, 16
	br i1 %8, label %L.5, label %L.6
L.5:
	%9 = load i16* %size
	%10 = add i16 %9, 16
	store i16 %10, i16* %size
	br label %L.4
L.6:
	%11 = load i16* %size
	%12 = mul i16 2, %11
	store i16 %12, i16* %size
	br label %L.4
L.4:
	br label %L.1
L.2:
	%13 = load %ast.AstNode** %po
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 0
	%15 = load i8* %14
	%16 = load i16* %size
	%17 = call %ast.AstNode* @ast_Alloc(i8 %15, i16 %16)
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	store %ast.AstNode* %18, %ast.AstNode** %pn
	%19 = load %ast.AstNode** %po
	%20 = getelementptr %ast.AstNode* %19, i32 0, i32 0
	%21 = load i8* %20
	%22 = load %ast.AstNode** %pn
	%23 = getelementptr %ast.AstNode* %22, i32 0, i32 0
	store i8 %21, i8* %23
	%24 = load %ast.AstNode** %po
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 1
	%26 = load i8* %25
	%27 = load %ast.AstNode** %pn
	%28 = getelementptr %ast.AstNode* %27, i32 0, i32 1
	store i8 %26, i8* %28
	%29 = load %ast.AstNode** %po
	%30 = getelementptr %ast.AstNode* %29, i32 0, i32 6
	%31 = load i32* %30
	%32 = load %ast.AstNode** %pn
	%33 = getelementptr %ast.AstNode* %32, i32 0, i32 6
	store i32 %31, i32* %33
	%34 = load %ast.AstNode** %po
	%35 = getelementptr %ast.AstNode* %34, i32 0, i32 7
	%36 = load i32* %35
	%37 = load %ast.AstNode** %pn
	%38 = getelementptr %ast.AstNode* %37, i32 0, i32 7
	store i32 %36, i32* %38
	%39 = load %ast.AstNode** %po
	%40 = getelementptr %ast.AstNode* %39, i32 0, i32 8
	%41 = load i16* %40
	%42 = load %ast.AstNode** %pn
	%43 = getelementptr %ast.AstNode* %42, i32 0, i32 8
	store i16 %41, i16* %43
	%44 = load %ast.AstNode** %po
	%45 = getelementptr %ast.AstNode* %44, i32 0, i32 2
	%46 = load i16* %45
	%47 = load %ast.AstNode** %pn
	%48 = getelementptr %ast.AstNode* %47, i32 0, i32 2
	store i16 %46, i16* %48
	%49 = load %ast.AstNode** %po
	%50 = getelementptr %ast.AstNode* %49, i32 0, i32 9
	%51 = load i16* %50
	%52 = load %ast.AstNode** %pn
	%53 = getelementptr %ast.AstNode* %52, i32 0, i32 9
	store i16 %51, i16* %53
	%54 = load %ast.AstNode** %po
	%55 = getelementptr %ast.AstNode* %54, i32 0, i32 10
	%56 = load i64* %55
	%57 = load %ast.AstNode** %pn
	%58 = getelementptr %ast.AstNode* %57, i32 0, i32 10
	store i64 %56, i64* %58
	%59 = load %ast.AstNode** %po
	%60 = getelementptr %ast.AstNode* %59, i32 0, i32 11
	%61 = load %type.TypeNode** %60
	%62 = bitcast %type.TypeNode* %61 to %type.TypeNode*
	%63 = load %ast.AstNode** %pn
	%64 = getelementptr %ast.AstNode* %63, i32 0, i32 11
	store %type.TypeNode* %62, %type.TypeNode** %64
	%65 = load %ast.AstNode** %po
	%66 = getelementptr %ast.AstNode* %65, i32 0, i32 12
	%67 = load %symb.SymbNode** %66
	%68 = bitcast %symb.SymbNode* %67 to %symb.SymbNode*
	%69 = load %ast.AstNode** %pn
	%70 = getelementptr %ast.AstNode* %69, i32 0, i32 12
	store %symb.SymbNode* %68, %symb.SymbNode** %70
	store i16 0, i16* %i
	br label %L.7
L.7:
	%71 = load i16* %i
	%72 = load %ast.AstNode** %po
	%73 = getelementptr %ast.AstNode* %72, i32 0, i32 3
	%74 = load i16* %73
	%75 = icmp ult i16 %71, %74
	%76 = xor i1 %75, true
	br i1 %76, label %L.8, label %L.9
L.9:
	%77 = load %ast.AstNode** %po
	%78 = getelementptr %ast.AstNode* %77, i32 0, i32 13
	%79 = load i16* %i
	%80 = zext i16 %79 to i32
	%81 = getelementptr [0 x %ast.AstNode*]* %78, i32 0, i32 %80
	%82 = load %ast.AstNode** %81
	%83 = bitcast %ast.AstNode* %82 to %ast.AstNode*
	%84 = load %ast.AstNode** %pn
	%85 = getelementptr %ast.AstNode* %84, i32 0, i32 13
	%86 = load i16* %i
	%87 = zext i16 %86 to i32
	%88 = getelementptr [0 x %ast.AstNode*]* %85, i32 0, i32 %87
	store %ast.AstNode* %83, %ast.AstNode** %88
	%89 = load i16* %i
	%90 = add i16 %89, 1
	store i16 %90, i16* %i
	br label %L.7
L.8:
	%91 = load i16* %size
	%92 = load %ast.AstNode** %pn
	%93 = getelementptr %ast.AstNode* %92, i32 0, i32 3
	store i16 %91, i16* %93
	%94 = load %ast.AstNode** %pn
	%95 = bitcast %ast.AstNode* %94 to %ast.AstNode*
	store %ast.AstNode* %95, %ast.AstNode** %rv.0
	br label %return
return:
	%96 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %96
}
define internal %ast.AstNode* @ast_New(i8 zeroext %op.arg, %type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%op = alloca i8
	%t = alloca %type.TypeNode*
	store i8 %op.arg, i8* %op
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%pa = alloca %ast.AstNode*
	%0 = load i8* %op
	%1 = load i8* %op
	%2 = zext i8 %1 to i32
	%3 = getelementptr [72 x i8]* @ast_NumChildDefault, i32 0, i32 %2
	%4 = load i8* %3
	%5 = zext i8 %4 to i16
	%6 = call %ast.AstNode* @ast_Alloc(i8 %0, i16 %5)
	%7 = bitcast %ast.AstNode* %6 to %ast.AstNode*
	store %ast.AstNode* %7, %ast.AstNode** %pa
	%8 = load %type.TypeNode** %t
	%9 = bitcast %type.TypeNode* %8 to %type.TypeNode*
	%10 = load %ast.AstNode** %pa
	%11 = getelementptr %ast.AstNode* %10, i32 0, i32 11
	store %type.TypeNode* %9, %type.TypeNode** %11
	%12 = load %type.TypeNode** %t
	%13 = icmp ne %type.TypeNode* %12, null
	br i1 %13, label %L.2, label %L.1
L.2:
	%14 = load %type.TypeNode** %t
	%15 = getelementptr %type.TypeNode* %14, i32 0, i32 13
	%16 = load i8* %15
	%17 = load %ast.AstNode** %pa
	%18 = getelementptr %ast.AstNode* %17, i32 0, i32 1
	store i8 %16, i8* %18
	%19 = load %type.TypeNode** %t
	%20 = getelementptr %type.TypeNode* %19, i32 0, i32 9
	%21 = load i32* %20
	%22 = load %ast.AstNode** %pa
	%23 = getelementptr %ast.AstNode* %22, i32 0, i32 6
	store i32 %21, i32* %23
	br label %L.1
L.1:
	%24 = load %ast.AstNode** %pa
	%25 = bitcast %ast.AstNode* %24 to %ast.AstNode*
	store %ast.AstNode* %25, %ast.AstNode** %rv.0
	br label %return
return:
	%26 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %26
}
define internal %ast.AstNode* @ast_New1(i8 zeroext %op.arg, %type.TypeNode* %t.arg, %ast.AstNode* %pc0.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%op = alloca i8
	%t = alloca %type.TypeNode*
	%pc0 = alloca %ast.AstNode*
	store i8 %op.arg, i8* %op
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store %ast.AstNode* %pc0.arg, %ast.AstNode** %pc0
	%pa = alloca %ast.AstNode*
	%n = alloca i16
	%0 = load i8* %op
	%1 = zext i8 %0 to i32
	%2 = getelementptr [72 x i8]* @ast_NumChildDefault, i32 0, i32 %1
	%3 = load i8* %2
	%4 = zext i8 %3 to i16
	store i16 %4, i16* %n
	%5 = load i16* %n
	%6 = icmp ult i16 %5, 1
	br i1 %6, label %L.2, label %L.1
L.2:
	store i16 1, i16* %n
	br label %L.1
L.1:
	%7 = load i8* %op
	%8 = load i16* %n
	%9 = call %ast.AstNode* @ast_Alloc(i8 %7, i16 %8)
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	store %ast.AstNode* %10, %ast.AstNode** %pa
	%11 = load %ast.AstNode** %pc0
	%12 = bitcast %ast.AstNode* %11 to %ast.AstNode*
	%13 = load %ast.AstNode** %pa
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 13
	%15 = getelementptr [0 x %ast.AstNode*]* %14, i32 0, i32 0
	store %ast.AstNode* %12, %ast.AstNode** %15
	%16 = load %ast.AstNode** %pa
	%17 = getelementptr %ast.AstNode* %16, i32 0, i32 2
	store i16 1, i16* %17
	%18 = load %type.TypeNode** %t
	%19 = bitcast %type.TypeNode* %18 to %type.TypeNode*
	%20 = load %ast.AstNode** %pa
	%21 = getelementptr %ast.AstNode* %20, i32 0, i32 11
	store %type.TypeNode* %19, %type.TypeNode** %21
	%22 = load %ast.AstNode** %pc0
	%23 = getelementptr %ast.AstNode* %22, i32 0, i32 1
	%24 = load i8* %23
	%25 = load %ast.AstNode** %pa
	%26 = getelementptr %ast.AstNode* %25, i32 0, i32 1
	store i8 %24, i8* %26
	%27 = load %ast.AstNode** %pc0
	%28 = getelementptr %ast.AstNode* %27, i32 0, i32 6
	%29 = load i32* %28
	%30 = load %ast.AstNode** %pa
	%31 = getelementptr %ast.AstNode* %30, i32 0, i32 6
	store i32 %29, i32* %31
	%32 = load %ast.AstNode** %pa
	%33 = bitcast %ast.AstNode* %32 to %ast.AstNode*
	store %ast.AstNode* %33, %ast.AstNode** %rv.0
	br label %return
return:
	%34 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %34
}
define internal %ast.AstNode* @ast_New2(i8 zeroext %op.arg, %type.TypeNode* %t.arg, %ast.AstNode* %pc0.arg, %ast.AstNode* %pc1.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%op = alloca i8
	%t = alloca %type.TypeNode*
	%pc0 = alloca %ast.AstNode*
	%pc1 = alloca %ast.AstNode*
	store i8 %op.arg, i8* %op
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store %ast.AstNode* %pc0.arg, %ast.AstNode** %pc0
	store %ast.AstNode* %pc1.arg, %ast.AstNode** %pc1
	%pa = alloca %ast.AstNode*
	%n = alloca i16
	%0 = load i8* %op
	%1 = zext i8 %0 to i32
	%2 = getelementptr [72 x i8]* @ast_NumChildDefault, i32 0, i32 %1
	%3 = load i8* %2
	%4 = zext i8 %3 to i16
	store i16 %4, i16* %n
	%5 = load i16* %n
	%6 = icmp ult i16 %5, 2
	br i1 %6, label %L.2, label %L.1
L.2:
	store i16 2, i16* %n
	br label %L.1
L.1:
	%7 = load i8* %op
	%8 = load i16* %n
	%9 = call %ast.AstNode* @ast_Alloc(i8 %7, i16 %8)
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	store %ast.AstNode* %10, %ast.AstNode** %pa
	%11 = load %ast.AstNode** %pc0
	%12 = bitcast %ast.AstNode* %11 to %ast.AstNode*
	%13 = load %ast.AstNode** %pa
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 13
	%15 = getelementptr [0 x %ast.AstNode*]* %14, i32 0, i32 0
	store %ast.AstNode* %12, %ast.AstNode** %15
	%16 = load %ast.AstNode** %pc1
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	%18 = load %ast.AstNode** %pa
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 13
	%20 = getelementptr [0 x %ast.AstNode*]* %19, i32 0, i32 1
	store %ast.AstNode* %17, %ast.AstNode** %20
	%21 = load %ast.AstNode** %pa
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 2
	store i16 2, i16* %22
	%23 = load %type.TypeNode** %t
	%24 = bitcast %type.TypeNode* %23 to %type.TypeNode*
	%25 = load %ast.AstNode** %pa
	%26 = getelementptr %ast.AstNode* %25, i32 0, i32 11
	store %type.TypeNode* %24, %type.TypeNode** %26
	%27 = load %ast.AstNode** %pc0
	%28 = getelementptr %ast.AstNode* %27, i32 0, i32 1
	%29 = load i8* %28
	%30 = load %ast.AstNode** %pa
	%31 = getelementptr %ast.AstNode* %30, i32 0, i32 1
	store i8 %29, i8* %31
	%32 = load %ast.AstNode** %pc0
	%33 = getelementptr %ast.AstNode* %32, i32 0, i32 6
	%34 = load i32* %33
	%35 = load %ast.AstNode** %pa
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 6
	store i32 %34, i32* %36
	%37 = load %ast.AstNode** %pa
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	store %ast.AstNode* %38, %ast.AstNode** %rv.0
	br label %return
return:
	%39 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %39
}
define internal %ast.AstNode* @ast_New3(i8 zeroext %op.arg, %type.TypeNode* %t.arg, %ast.AstNode* %pc0.arg, %ast.AstNode* %pc1.arg, %ast.AstNode* %pc2.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%op = alloca i8
	%t = alloca %type.TypeNode*
	%pc0 = alloca %ast.AstNode*
	%pc1 = alloca %ast.AstNode*
	%pc2 = alloca %ast.AstNode*
	store i8 %op.arg, i8* %op
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store %ast.AstNode* %pc0.arg, %ast.AstNode** %pc0
	store %ast.AstNode* %pc1.arg, %ast.AstNode** %pc1
	store %ast.AstNode* %pc2.arg, %ast.AstNode** %pc2
	%pa = alloca %ast.AstNode*
	%n = alloca i16
	%0 = load i8* %op
	%1 = zext i8 %0 to i32
	%2 = getelementptr [72 x i8]* @ast_NumChildDefault, i32 0, i32 %1
	%3 = load i8* %2
	%4 = zext i8 %3 to i16
	store i16 %4, i16* %n
	%5 = load i16* %n
	%6 = icmp ult i16 %5, 3
	br i1 %6, label %L.2, label %L.1
L.2:
	store i16 3, i16* %n
	br label %L.1
L.1:
	%7 = load i8* %op
	%8 = load i16* %n
	%9 = call %ast.AstNode* @ast_Alloc(i8 %7, i16 %8)
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	store %ast.AstNode* %10, %ast.AstNode** %pa
	%11 = load %ast.AstNode** %pc0
	%12 = bitcast %ast.AstNode* %11 to %ast.AstNode*
	%13 = load %ast.AstNode** %pa
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 13
	%15 = getelementptr [0 x %ast.AstNode*]* %14, i32 0, i32 0
	store %ast.AstNode* %12, %ast.AstNode** %15
	%16 = load %ast.AstNode** %pc1
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	%18 = load %ast.AstNode** %pa
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 13
	%20 = getelementptr [0 x %ast.AstNode*]* %19, i32 0, i32 1
	store %ast.AstNode* %17, %ast.AstNode** %20
	%21 = load %ast.AstNode** %pc2
	%22 = bitcast %ast.AstNode* %21 to %ast.AstNode*
	%23 = load %ast.AstNode** %pa
	%24 = getelementptr %ast.AstNode* %23, i32 0, i32 13
	%25 = getelementptr [0 x %ast.AstNode*]* %24, i32 0, i32 2
	store %ast.AstNode* %22, %ast.AstNode** %25
	%26 = load %ast.AstNode** %pa
	%27 = getelementptr %ast.AstNode* %26, i32 0, i32 2
	store i16 3, i16* %27
	%28 = load %type.TypeNode** %t
	%29 = bitcast %type.TypeNode* %28 to %type.TypeNode*
	%30 = load %ast.AstNode** %pa
	%31 = getelementptr %ast.AstNode* %30, i32 0, i32 11
	store %type.TypeNode* %29, %type.TypeNode** %31
	%32 = load %ast.AstNode** %pc0
	%33 = getelementptr %ast.AstNode* %32, i32 0, i32 1
	%34 = load i8* %33
	%35 = load %ast.AstNode** %pa
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 1
	store i8 %34, i8* %36
	%37 = load %ast.AstNode** %pc0
	%38 = getelementptr %ast.AstNode* %37, i32 0, i32 6
	%39 = load i32* %38
	%40 = load %ast.AstNode** %pa
	%41 = getelementptr %ast.AstNode* %40, i32 0, i32 6
	store i32 %39, i32* %41
	%42 = load %ast.AstNode** %pa
	%43 = bitcast %ast.AstNode* %42 to %ast.AstNode*
	store %ast.AstNode* %43, %ast.AstNode** %rv.0
	br label %return
return:
	%44 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %44
}
define internal %ast.AstNode* @ast_Child(%ast.AstNode* %pp.arg, %ast.AstNode* %pc.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%pp = alloca %ast.AstNode*
	%pc = alloca %ast.AstNode*
	store %ast.AstNode* %pp.arg, %ast.AstNode** %pp
	store %ast.AstNode* %pc.arg, %ast.AstNode** %pc
	%n = alloca i16
	%0 = load %ast.AstNode** %pp
	%1 = icmp ne %ast.AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %ast.AstNode** %pp
	%3 = getelementptr %ast.AstNode* %2, i32 0, i32 2
	%4 = load i16* %3
	%5 = add i16 %4, 1
	store i16 %5, i16* %n
	%6 = load i16* %n
	%7 = load %ast.AstNode** %pp
	%8 = getelementptr %ast.AstNode* %7, i32 0, i32 3
	%9 = load i16* %8
	%10 = icmp ugt i16 %6, %9
	br i1 %10, label %L.4, label %L.3
L.4:
	%11 = load %ast.AstNode** %pp
	%12 = bitcast %ast.AstNode* %11 to %ast.AstNode*
	%13 = load i16* %n
	%14 = call %ast.AstNode* @ast_Expand(%ast.AstNode* %12, i16 %13)
	%15 = bitcast %ast.AstNode* %14 to %ast.AstNode*
	store %ast.AstNode* %15, %ast.AstNode** %pp
	br label %L.3
L.3:
	%16 = load %ast.AstNode** %pc
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	%18 = load %ast.AstNode** %pp
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 13
	%20 = load %ast.AstNode** %pp
	%21 = getelementptr %ast.AstNode* %20, i32 0, i32 2
	%22 = load i16* %21
	%23 = zext i16 %22 to i32
	%24 = getelementptr [0 x %ast.AstNode*]* %19, i32 0, i32 %23
	store %ast.AstNode* %17, %ast.AstNode** %24
	%25 = load i16* %n
	%26 = load %ast.AstNode** %pp
	%27 = getelementptr %ast.AstNode* %26, i32 0, i32 2
	store i16 %25, i16* %27
	br label %L.1
L.1:
	%28 = load %ast.AstNode** %pp
	%29 = bitcast %ast.AstNode* %28 to %ast.AstNode*
	store %ast.AstNode* %29, %ast.AstNode** %rv.0
	br label %return
return:
	%30 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %30
}
define internal %ast.AstNode* @ast_ChildIndexed(%ast.AstNode* %pp.arg, i16 zeroext %n.arg, %ast.AstNode* %pc.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%pp = alloca %ast.AstNode*
	%n = alloca i16
	%pc = alloca %ast.AstNode*
	store %ast.AstNode* %pp.arg, %ast.AstNode** %pp
	store i16 %n.arg, i16* %n
	store %ast.AstNode* %pc.arg, %ast.AstNode** %pc
	%0 = load i16* %n
	%1 = add i16 %0, 1
	store i16 %1, i16* %n
	%2 = load i16* %n
	%3 = load %ast.AstNode** %pp
	%4 = getelementptr %ast.AstNode* %3, i32 0, i32 3
	%5 = load i16* %4
	%6 = icmp ugt i16 %2, %5
	br i1 %6, label %L.2, label %L.1
L.2:
	%7 = load %ast.AstNode** %pp
	%8 = bitcast %ast.AstNode* %7 to %ast.AstNode*
	%9 = load i16* %n
	%10 = call %ast.AstNode* @ast_Expand(%ast.AstNode* %8, i16 %9)
	%11 = bitcast %ast.AstNode* %10 to %ast.AstNode*
	store %ast.AstNode* %11, %ast.AstNode** %pp
	br label %L.1
L.1:
	%12 = load %ast.AstNode** %pc
	%13 = bitcast %ast.AstNode* %12 to %ast.AstNode*
	%14 = load %ast.AstNode** %pp
	%15 = getelementptr %ast.AstNode* %14, i32 0, i32 13
	%16 = load i16* %n
	%17 = sub i16 %16, 1
	%18 = zext i16 %17 to i32
	%19 = getelementptr [0 x %ast.AstNode*]* %15, i32 0, i32 %18
	store %ast.AstNode* %13, %ast.AstNode** %19
	%20 = load i16* %n
	%21 = load %ast.AstNode** %pp
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 2
	store i16 %20, i16* %22
	%23 = load %ast.AstNode** %pp
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	store %ast.AstNode* %24, %ast.AstNode** %rv.0
	br label %return
return:
	%25 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %25
}
define internal %ast.AstNode* @ast_Const(%type.TypeNode* %t.arg, i64 %value.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	%value = alloca i64
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store i64 %value.arg, i64* %value
	%pa = alloca %ast.AstNode*
	%0 = load %type.TypeNode** %t
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	%2 = call %ast.AstNode* @ast_New(i8 7, %type.TypeNode* %1)
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %pa
	%4 = load i64* %value
	%5 = load %ast.AstNode** %pa
	%6 = getelementptr %ast.AstNode* %5, i32 0, i32 10
	store i64 %4, i64* %6
	%7 = load %type.TypeNode** %t
	%8 = icmp ne %type.TypeNode* %7, null
	br i1 %8, label %L.2, label %L.1
L.2:
	%9 = load %type.TypeNode** %t
	%10 = getelementptr %type.TypeNode* %9, i32 0, i32 13
	%11 = load i8* %10
	%12 = load %ast.AstNode** %pa
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 1
	store i8 %11, i8* %13
	%14 = load %type.TypeNode** %t
	%15 = getelementptr %type.TypeNode* %14, i32 0, i32 9
	%16 = load i32* %15
	%17 = load %ast.AstNode** %pa
	%18 = getelementptr %ast.AstNode* %17, i32 0, i32 6
	store i32 %16, i32* %18
	br label %L.1
L.1:
	%19 = load %ast.AstNode** %pa
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	store %ast.AstNode* %20, %ast.AstNode** %rv.0
	br label %return
return:
	%21 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %21
}
@S.412 = internal constant [5 x i8] c"NULL\00";
@S.413 = internal constant [4 x i8] c"NOP\00";
@S.414 = internal constant [5 x i8] c"TYPE\00";
@S.415 = internal constant [5 x i8] c"FILE\00";
@S.416 = internal constant [8 x i8] c"PACKAGE\00";
@S.417 = internal constant [7 x i8] c"DCLVAR\00";
@S.418 = internal constant [7 x i8] c"DCLCON\00";
@S.419 = internal constant [6 x i8] c"CONST\00";
@S.420 = internal constant [7 x i8] c"STRCON\00";
@S.421 = internal constant [4 x i8] c"VAR\00";
@S.422 = internal constant [5 x i8] c"CALL\00";
@S.423 = internal constant [6 x i8] c"CALLI\00";
@S.424 = internal constant [4 x i8] c"ASM\00";
@S.425 = internal constant [7 x i8] c"CRANGE\00";
@S.426 = internal constant [6 x i8] c"CLIST\00";
@S.427 = internal constant [5 x i8] c"CAST\00";
@S.428 = internal constant [7 x i8] c"OFFSET\00";
@S.429 = internal constant [6 x i8] c"INDEX\00";
@S.430 = internal constant [6 x i8] c"SLICE\00";
@S.431 = internal constant [6 x i8] c"BYREF\00";
@S.432 = internal constant [5 x i8] c"COPY\00";
@S.433 = internal constant [6 x i8] c"ACOPY\00";
@S.434 = internal constant [4 x i8] c"AEQ\00";
@S.435 = internal constant [4 x i8] c"ANE\00";
@S.436 = internal constant [6 x i8] c"GETRV\00";
@S.437 = internal constant [5 x i8] c"LOAD\00";
@S.438 = internal constant [6 x i8] c"STORE\00";
@S.439 = internal constant [5 x i8] c"ZEXT\00";
@S.440 = internal constant [5 x i8] c"SEXT\00";
@S.441 = internal constant [6 x i8] c"TRUNC\00";
@S.442 = internal constant [5 x i8] c"REVB\00";
@S.443 = internal constant [4 x i8] c"NEG\00";
@S.444 = internal constant [4 x i8] c"NOT\00";
@S.445 = internal constant [4 x i8] c"ABS\00";
@S.446 = internal constant [4 x i8] c"ADD\00";
@S.447 = internal constant [4 x i8] c"SUB\00";
@S.448 = internal constant [4 x i8] c"MUL\00";
@S.449 = internal constant [4 x i8] c"DIV\00";
@S.450 = internal constant [4 x i8] c"MOD\00";
@S.451 = internal constant [3 x i8] c"EQ\00";
@S.452 = internal constant [3 x i8] c"NE\00";
@S.453 = internal constant [4 x i8] c"ULT\00";
@S.454 = internal constant [4 x i8] c"UGT\00";
@S.455 = internal constant [4 x i8] c"ULE\00";
@S.456 = internal constant [4 x i8] c"UGE\00";
@S.457 = internal constant [4 x i8] c"SLT\00";
@S.458 = internal constant [4 x i8] c"SGT\00";
@S.459 = internal constant [4 x i8] c"SLE\00";
@S.460 = internal constant [4 x i8] c"SGE\00";
@S.461 = internal constant [5 x i8] c"UMIN\00";
@S.462 = internal constant [5 x i8] c"UMAX\00";
@S.463 = internal constant [5 x i8] c"SMIN\00";
@S.464 = internal constant [5 x i8] c"SMAX\00";
@S.465 = internal constant [4 x i8] c"LSL\00";
@S.466 = internal constant [4 x i8] c"LSR\00";
@S.467 = internal constant [4 x i8] c"ASL\00";
@S.468 = internal constant [4 x i8] c"ASR\00";
@S.469 = internal constant [4 x i8] c"AND\00";
@S.470 = internal constant [3 x i8] c"OR\00";
@S.471 = internal constant [4 x i8] c"XOR\00";
@S.472 = internal constant [5 x i8] c"BAND\00";
@S.473 = internal constant [4 x i8] c"BOR\00";
@S.474 = internal constant [5 x i8] c"BNOT\00";
@S.475 = internal constant [7 x i8] c"IFEXPR\00";
@S.476 = internal constant [4 x i8] c"SEQ\00";
@S.477 = internal constant [5 x i8] c"LOOP\00";
@S.478 = internal constant [5 x i8] c"EXIT\00";
@S.479 = internal constant [3 x i8] c"IF\00";
@S.480 = internal constant [4 x i8] c"SEL\00";
@S.481 = internal constant [3 x i8] c"IS\00";
@S.482 = internal constant [4 x i8] c"RET\00";
@S.483 = internal constant [5 x i8] c"PROC\00";
@ast_OpName = internal constant [72 x [0 x i8]*] [ [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.412 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.413 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.414 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.415 )  to [0 x i8]* ), [0 x i8] * bitcast( [8 x i8]* getelementptr( [8 x i8]* @S.416 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.417 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.418 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.419 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.420 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.421 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.422 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.423 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.424 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.425 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.426 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.427 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.428 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.429 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.430 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.431 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.432 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.433 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.434 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.435 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.436 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.437 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.438 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.439 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.440 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.441 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.442 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.443 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.444 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.445 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.446 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.447 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.448 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.449 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.450 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.451 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.452 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.453 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.454 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.455 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.456 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.457 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.458 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.459 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.460 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.461 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.462 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.463 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.464 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.465 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.466 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.467 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.468 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.469 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.470 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.471 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.472 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.473 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.474 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.475 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.476 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.477 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.478 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.479 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.480 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.481 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.482 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.483 )  to [0 x i8]* ) ], align 4
@S.485 = internal constant [5 x i8] c"UNKN\00";
@S.486 = internal constant [5 x i8] c"ENUM\00";
@S.487 = internal constant [5 x i8] c"UINT\00";
@S.488 = internal constant [5 x i8] c"SINT\00";
@S.489 = internal constant [4 x i8] c"REF\00";
@S.490 = internal constant [6 x i8] c"ARRAY\00";
@S.491 = internal constant [7 x i8] c"RECORD\00";
@S.492 = internal constant [8 x i8] c"REFPROC\00";
@ast_KindName = internal constant [8 x [0 x i8]*] [ [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.485 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.486 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.487 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.488 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.489 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.490 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.491 )  to [0 x i8]* ), [0 x i8] * bitcast( [8 x i8]* getelementptr( [8 x i8]* @S.492 )  to [0 x i8]* ) ], align 4
@S.493 = internal constant [5 x i8] c" sz=\00"@S.494 = internal constant [5 x i8] c" ln=\00"@S.495 = internal constant [5 x i8] c" nc=\00"@S.496 = internal constant [8 x i8] c" value \00"@S.497 = internal constant [5 x i8] c" id \00"@S.498 = internal constant [9 x i8] c" value \22\00"@S.499 = internal constant [7 x i8] c" name \00"@S.500 = internal constant [7 x i8] c"*NULL*\00"define internal void @ast_Print(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%s = alloca %symb.SymbNode*
	%t = alloca %type.TypeNode*
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 0
	%2 = load i8* %1
	%3 = zext i8 %2 to i32
	%4 = getelementptr [72 x [0 x i8]*]* @ast_OpName, i32 0, i32 %3
	%5 = load [0 x i8]** %4
	%6 = bitcast [0 x i8]* %5 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %6)
	call void @out_chr(i32 2, i8 40)
	%7 = load %ast.AstNode** %node
	%8 = getelementptr %ast.AstNode* %7, i32 0, i32 1
	%9 = load i8* %8
	%10 = zext i8 %9 to i32
	%11 = getelementptr [8 x [0 x i8]*]* @ast_KindName, i32 0, i32 %10
	%12 = load [0 x i8]** %11
	%13 = bitcast [0 x i8]* %12 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %13)
	%14 = getelementptr [5 x i8]* @S.493
	%15 = bitcast [5 x i8]* %14 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %15)
	%16 = load %ast.AstNode** %node
	%17 = getelementptr %ast.AstNode* %16, i32 0, i32 6
	%18 = load i32* %17
	call void @out_uint(i32 2, i32 %18)
	%19 = getelementptr [5 x i8]* @S.494
	%20 = bitcast [5 x i8]* %19 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %20)
	%21 = load %ast.AstNode** %node
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 8
	%23 = load i16* %22
	%24 = zext i16 %23 to i32
	call void @out_uint(i32 2, i32 %24)
	%25 = getelementptr [5 x i8]* @S.495
	%26 = bitcast [5 x i8]* %25 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %26)
	%27 = load %ast.AstNode** %node
	%28 = getelementptr %ast.AstNode* %27, i32 0, i32 2
	%29 = load i16* %28
	%30 = zext i16 %29 to i32
	call void @out_uint(i32 2, i32 %30)
	%31 = load %ast.AstNode** %node
	%32 = getelementptr %ast.AstNode* %31, i32 0, i32 11
	%33 = load %type.TypeNode** %32
	%34 = bitcast %type.TypeNode* %33 to %type.TypeNode*
	store %type.TypeNode* %34, %type.TypeNode** %t
	%35 = load %ast.AstNode** %node
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 0
	%37 = load i8* %36
	%38 = zext i8 %37 to i32
	switch i32 %38, label %L.1 [
		i32 7, label %L.3
		i32 16, label %L.3
		i32 20, label %L.3
		i32 24, label %L.3
		i32 8, label %L.4
		i32 5, label %L.5
		i32 9, label %L.5
		i32 71, label %L.5
		i32 10, label %L.5
		i32 3, label %L.5
		i32 4, label %L.5
		i32 12, label %L.6
	]
L.3:
	%39 = getelementptr [8 x i8]* @S.496
	%40 = bitcast [8 x i8]* %39 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %40)
	%41 = load %ast.AstNode** %node
	%42 = getelementptr %ast.AstNode* %41, i32 0, i32 0
	%43 = load i8* %42
	%44 = icmp eq i8 %43, 7
	br i1 %44, label %L.7, label %L.8
L.7:
	%45 = load %ast.AstNode** %node
	%46 = getelementptr %ast.AstNode* %45, i32 0, i32 1
	%47 = load i8* %46
	%48 = icmp eq i8 %47, 3
	br label %L.8
L.8:
	%49 = phi i1 [ false, %L.3 ], [ %48, %L.7 ]
	br i1 %49, label %L.10, label %L.11
L.10:
	%50 = load %ast.AstNode** %node
	%51 = getelementptr %ast.AstNode* %50, i32 0, i32 10
	%52 = load i64* %51
	call void @out_int64(i32 2, i64 %52)
	br label %L.9
L.11:
	%53 = load %ast.AstNode** %node
	%54 = getelementptr %ast.AstNode* %53, i32 0, i32 10
	%55 = load i64* %54
	call void @out_uint64(i32 2, i64 %55)
	br label %L.9
L.9:
	br label %L.2
L.4:
	%56 = getelementptr [5 x i8]* @S.497
	%57 = bitcast [5 x i8]* %56 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %57)
	%58 = load %ast.AstNode** %node
	%59 = getelementptr %ast.AstNode* %58, i32 0, i32 10
	%60 = load i64* %59
	%61 = trunc i64 %60 to i32
	call void @out_uint32(i32 2, i32 %61)
	%62 = getelementptr [9 x i8]* @S.498
	%63 = bitcast [9 x i8]* %62 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %63)
	%64 = load %ast.AstNode** %node
	%65 = getelementptr %ast.AstNode* %64, i32 0, i32 12
	%66 = load %symb.SymbNode** %65
	%67 = bitcast %symb.SymbNode* %66 to [0 x i8]*
	%68 = bitcast [0 x i8]* %67 to [0 x i8]*
	%69 = load %ast.AstNode** %node
	%70 = getelementptr %ast.AstNode* %69, i32 0, i32 11
	%71 = load %type.TypeNode** %70
	%72 = getelementptr %type.TypeNode* %71, i32 0, i32 7
	%73 = load i64* %72
	%74 = sub i64 %73, 1
	%75 = trunc i64 %74 to i32
	call void @out_strn(i32 2, [0 x i8]* %68, i32 %75)
	call void @out_chr(i32 2, i8 34)
	br label %L.2
L.5:
	%76 = getelementptr [7 x i8]* @S.499
	%77 = bitcast [7 x i8]* %76 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %77)
	%78 = load %ast.AstNode** %node
	%79 = getelementptr %ast.AstNode* %78, i32 0, i32 12
	%80 = load %symb.SymbNode** %79
	%81 = bitcast %symb.SymbNode* %80 to %symb.SymbNode*
	store %symb.SymbNode* %81, %symb.SymbNode** %s
	%82 = load %symb.SymbNode** %s
	%83 = icmp ne %symb.SymbNode* %82, null
	br i1 %83, label %L.13, label %L.14
L.13:
	%84 = load %symb.SymbNode** %s
	%85 = getelementptr %symb.SymbNode* %84, i32 0, i32 19
	%86 = getelementptr [0 x i8]* %85
	%87 = bitcast [0 x i8]* %86 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %87)
	br label %L.12
L.14:
	%88 = getelementptr [7 x i8]* @S.500
	%89 = bitcast [7 x i8]* %88 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %89)
	br label %L.12
L.12:
	br label %L.2
L.6:
	%90 = bitcast %type.TypeNode* null to %type.TypeNode*
	store %type.TypeNode* %90, %type.TypeNode** %t
	br label %L.2
L.1:
	br label %L.2
L.2:
	call void @out_chr(i32 2, i8 41)
	%91 = load %type.TypeNode** %t
	%92 = icmp ne %type.TypeNode* %91, null
	br i1 %92, label %L.16, label %L.15
L.16:
	call void @out_chr(i32 2, i8 58)
	%93 = load %type.TypeNode** %t
	%94 = bitcast %type.TypeNode* %93 to %type.TypeNode*
	call void @type_DumpT(%type.TypeNode* %94, i8 0)
	br label %L.15
L.15:
	call void @out_nl(i32 2)
	br label %return
return:
	ret void
}
@ast_blanks = internal constant [65 x i8] c"                                                                \00", align 1
@S.502 = internal constant [8 x i8] c"*NULL*\0A\00"define internal void @ast_DumpSub(%ast.AstNode* %tree.arg, i32 %level.arg) nounwind {
L.0:
	%tree = alloca %ast.AstNode*
	%level = alloca i32
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	store i32 %level.arg, i32* %level
	%i = alloca i16
	%0 = getelementptr [65 x i8]* @ast_blanks
	%1 = bitcast [65 x i8]* %0 to [0 x i8]*
	%2 = load i32* %level
	%3 = call i32 @write(i32 2, [0 x i8]* %1, i32 %2)
	%4 = load %ast.AstNode** %tree
	%5 = icmp eq %ast.AstNode* %4, null
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = getelementptr [8 x i8]* @S.502
	%7 = bitcast [8 x i8]* %6 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %7)
	br label %L.1
L.3:
	%8 = load %ast.AstNode** %tree
	%9 = bitcast %ast.AstNode* %8 to %ast.AstNode*
	call void @ast_Print(%ast.AstNode* %9)
	store i16 0, i16* %i
	br label %L.4
L.4:
	%10 = load i16* %i
	%11 = load %ast.AstNode** %tree
	%12 = getelementptr %ast.AstNode* %11, i32 0, i32 2
	%13 = load i16* %12
	%14 = icmp ult i16 %10, %13
	%15 = xor i1 %14, true
	br i1 %15, label %L.5, label %L.6
L.6:
	%16 = load %ast.AstNode** %tree
	%17 = getelementptr %ast.AstNode* %16, i32 0, i32 13
	%18 = load i16* %i
	%19 = zext i16 %18 to i32
	%20 = getelementptr [0 x %ast.AstNode*]* %17, i32 0, i32 %19
	%21 = load %ast.AstNode** %20
	%22 = bitcast %ast.AstNode* %21 to %ast.AstNode*
	%23 = load i32* %level
	%24 = add i32 %23, 1
	call void @ast_DumpSub(%ast.AstNode* %22, i32 %24)
	%25 = load i16* %i
	%26 = add i16 %25, 1
	store i16 %26, i16* %i
	br label %L.4
L.5:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @ast_Dump(%ast.AstNode* %tree.arg) nounwind {
L.0:
	%tree = alloca %ast.AstNode*
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	%0 = load %ast.AstNode** %tree
	%1 = bitcast %ast.AstNode* %0 to %ast.AstNode*
	call void @ast_DumpSub(%ast.AstNode* %1, i32 0)
	br label %return
return:
	ret void
}
%type.fwd = type {%type.fwd*, %symb.SymbNode*, %type.TypeNode*}
@type_fwdlist = internal global %type.fwd* zeroinitializer, align 4
define internal void @type_FwdAdd(%symb.SymbNode* %s.arg, %type.TypeNode* %t.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	%t = alloca %type.TypeNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%f = alloca %type.fwd*
	%0 = call [0 x i8]* @sys_zalloc(i32 12)
	%1 = bitcast [0 x i8]* %0 to %type.fwd*
	%2 = bitcast %type.fwd* %1 to %type.fwd*
	store %type.fwd* %2, %type.fwd** %f
	%3 = load %symb.SymbNode** %s
	%4 = bitcast %symb.SymbNode* %3 to %symb.SymbNode*
	%5 = load %type.fwd** %f
	%6 = getelementptr %type.fwd* %5, i32 0, i32 1
	store %symb.SymbNode* %4, %symb.SymbNode** %6
	%7 = load %type.TypeNode** %t
	%8 = bitcast %type.TypeNode* %7 to %type.TypeNode*
	%9 = load %type.fwd** %f
	%10 = getelementptr %type.fwd* %9, i32 0, i32 2
	store %type.TypeNode* %8, %type.TypeNode** %10
	%11 = load %type.fwd** @type_fwdlist
	%12 = bitcast %type.fwd* %11 to %type.fwd*
	%13 = load %type.fwd** %f
	%14 = getelementptr %type.fwd* %13, i32 0, i32 0
	store %type.fwd* %12, %type.fwd** %14
	%15 = load %type.fwd** %f
	%16 = bitcast %type.fwd* %15 to %type.fwd*
	store %type.fwd* %16, %type.fwd** @type_fwdlist
	%17 = load %symb.SymbNode** %s
	%18 = getelementptr %symb.SymbNode* %17, i32 0, i32 14
	store i8 1, i8* %18
	br label %return
return:
	ret void
}
define internal void @type_FwdFix(%symb.SymbNode* %s.arg, %type.TypeNode* %bt.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	%bt = alloca %type.TypeNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	store %type.TypeNode* %bt.arg, %type.TypeNode** %bt
	%f = alloca %type.fwd*
	%fn = alloca %type.fwd*
	%fp = alloca %type.fwd*
	%0 = bitcast %type.fwd* null to %type.fwd*
	store %type.fwd* %0, %type.fwd** %fp
	%1 = load %type.fwd** @type_fwdlist
	%2 = bitcast %type.fwd* %1 to %type.fwd*
	store %type.fwd* %2, %type.fwd** %f
	br label %L.1
L.1:
	%3 = load %type.fwd** %f
	%4 = icmp ne %type.fwd* %3, null
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %type.fwd** %f
	%7 = getelementptr %type.fwd* %6, i32 0, i32 0
	%8 = load %type.fwd** %7
	%9 = bitcast %type.fwd* %8 to %type.fwd*
	store %type.fwd* %9, %type.fwd** %fn
	%10 = load %symb.SymbNode** %s
	%11 = load %type.fwd** %f
	%12 = getelementptr %type.fwd* %11, i32 0, i32 1
	%13 = load %symb.SymbNode** %12
	%14 = icmp eq %symb.SymbNode* %10, %13
	br i1 %14, label %L.5, label %L.4
L.5:
	%15 = load %type.TypeNode** %bt
	%16 = bitcast %type.TypeNode* %15 to %type.TypeNode*
	%17 = load %type.fwd** %f
	%18 = getelementptr %type.fwd* %17, i32 0, i32 2
	%19 = load %type.TypeNode** %18
	%20 = getelementptr %type.TypeNode* %19, i32 0, i32 0
	store %type.TypeNode* %16, %type.TypeNode** %20
	%21 = load %type.fwd** %fp
	%22 = icmp ne %type.fwd* %21, null
	br i1 %22, label %L.7, label %L.8
L.7:
	%23 = load %type.fwd** %fn
	%24 = bitcast %type.fwd* %23 to %type.fwd*
	%25 = load %type.fwd** %fp
	%26 = getelementptr %type.fwd* %25, i32 0, i32 0
	store %type.fwd* %24, %type.fwd** %26
	br label %L.6
L.8:
	%27 = load %type.fwd** %fn
	%28 = bitcast %type.fwd* %27 to %type.fwd*
	store %type.fwd* %28, %type.fwd** @type_fwdlist
	br label %L.6
L.6:
	br label %L.4
L.4:
	%29 = load %type.fwd** %f
	%30 = bitcast %type.fwd* %29 to %type.fwd*
	store %type.fwd* %30, %type.fwd** %fp
	%31 = load %type.fwd** %fn
	%32 = bitcast %type.fwd* %31 to %type.fwd*
	store %type.fwd* %32, %type.fwd** %f
	br label %L.1
L.2:
	%33 = load %symb.SymbNode** %s
	%34 = getelementptr %symb.SymbNode* %33, i32 0, i32 14
	store i8 0, i8* %34
	br label %return
return:
	ret void
}
define internal zeroext i8 @type_SameTypeList(%type.TypeListEntry* %al.arg, %type.TypeListEntry* %bl.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%al = alloca %type.TypeListEntry*
	%bl = alloca %type.TypeListEntry*
	store %type.TypeListEntry* %al.arg, %type.TypeListEntry** %al
	store %type.TypeListEntry* %bl.arg, %type.TypeListEntry** %bl
	br label %L.1
L.1:
	%0 = load %type.TypeListEntry** %al
	%1 = icmp ne %type.TypeListEntry* %0, null
	br i1 %1, label %L.4, label %L.5
L.4:
	%2 = load %type.TypeListEntry** %bl
	%3 = icmp ne %type.TypeListEntry* %2, null
	br label %L.5
L.5:
	%4 = phi i1 [ false, %L.1 ], [ %3, %L.4 ]
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %type.TypeListEntry** %al
	%7 = getelementptr %type.TypeListEntry* %6, i32 0, i32 1
	%8 = load %type.TypeNode** %7
	%9 = bitcast %type.TypeNode* %8 to %type.TypeNode*
	%10 = load %type.TypeListEntry** %bl
	%11 = getelementptr %type.TypeListEntry* %10, i32 0, i32 1
	%12 = load %type.TypeNode** %11
	%13 = bitcast %type.TypeNode* %12 to %type.TypeNode*
	%14 = call i8 @type_Compat(%type.TypeNode* %9, %type.TypeNode* %13)
	%15 = icmp ne i8 %14, 0
	%16 = xor i1 %15, true
	br i1 %16, label %L.7, label %L.6
L.7:
	store i8 0, i8* %rv.0
	br label %return
L.6:
	%17 = load %type.TypeListEntry** %al
	%18 = getelementptr %type.TypeListEntry* %17, i32 0, i32 0
	%19 = load %type.TypeListEntry** %18
	%20 = bitcast %type.TypeListEntry* %19 to %type.TypeListEntry*
	store %type.TypeListEntry* %20, %type.TypeListEntry** %al
	%21 = load %type.TypeListEntry** %bl
	%22 = getelementptr %type.TypeListEntry* %21, i32 0, i32 0
	%23 = load %type.TypeListEntry** %22
	%24 = bitcast %type.TypeListEntry* %23 to %type.TypeListEntry*
	store %type.TypeListEntry* %24, %type.TypeListEntry** %bl
	br label %L.1
L.2:
	%25 = load %type.TypeListEntry** %al
	%26 = icmp eq %type.TypeListEntry* %25, null
	br i1 %26, label %L.8, label %L.9
L.8:
	%27 = load %type.TypeListEntry** %bl
	%28 = icmp eq %type.TypeListEntry* %27, null
	br label %L.9
L.9:
	%29 = phi i1 [ false, %L.2 ], [ %28, %L.8 ]
	%30 = zext i1 %29 to i8
	store i8 %30, i8* %rv.0
	br label %return
return:
	%31 = load i8* %rv.0
	ret i8 %31
}
define internal zeroext i8 @type_SameSymbList(%symb.SymbNode* %as.arg, %symb.SymbNode* %bs.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%as = alloca %symb.SymbNode*
	%bs = alloca %symb.SymbNode*
	store %symb.SymbNode* %as.arg, %symb.SymbNode** %as
	store %symb.SymbNode* %bs.arg, %symb.SymbNode** %bs
	br label %L.1
L.1:
	%0 = load %symb.SymbNode** %as
	%1 = icmp ne %symb.SymbNode* %0, null
	br i1 %1, label %L.4, label %L.5
L.4:
	%2 = load %symb.SymbNode** %bs
	%3 = icmp ne %symb.SymbNode* %2, null
	br label %L.5
L.5:
	%4 = phi i1 [ false, %L.1 ], [ %3, %L.4 ]
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %symb.SymbNode** %as
	%7 = getelementptr %symb.SymbNode* %6, i32 0, i32 1
	%8 = load %type.TypeNode** %7
	%9 = bitcast %type.TypeNode* %8 to %type.TypeNode*
	%10 = load %symb.SymbNode** %bs
	%11 = getelementptr %symb.SymbNode* %10, i32 0, i32 1
	%12 = load %type.TypeNode** %11
	%13 = bitcast %type.TypeNode* %12 to %type.TypeNode*
	%14 = call i8 @type_Compat(%type.TypeNode* %9, %type.TypeNode* %13)
	%15 = icmp ne i8 %14, 0
	%16 = xor i1 %15, true
	br i1 %16, label %L.7, label %L.6
L.7:
	store i8 0, i8* %rv.0
	br label %return
L.6:
	%17 = load %symb.SymbNode** %as
	%18 = getelementptr %symb.SymbNode* %17, i32 0, i32 0
	%19 = load %symb.SymbNode** %18
	%20 = bitcast %symb.SymbNode* %19 to %symb.SymbNode*
	store %symb.SymbNode* %20, %symb.SymbNode** %as
	%21 = load %symb.SymbNode** %bs
	%22 = getelementptr %symb.SymbNode* %21, i32 0, i32 0
	%23 = load %symb.SymbNode** %22
	%24 = bitcast %symb.SymbNode* %23 to %symb.SymbNode*
	store %symb.SymbNode* %24, %symb.SymbNode** %bs
	br label %L.1
L.2:
	%25 = load %symb.SymbNode** %as
	%26 = icmp eq %symb.SymbNode* %25, null
	br i1 %26, label %L.8, label %L.9
L.8:
	%27 = load %symb.SymbNode** %bs
	%28 = icmp eq %symb.SymbNode* %27, null
	br label %L.9
L.9:
	%29 = phi i1 [ false, %L.2 ], [ %28, %L.8 ]
	%30 = zext i1 %29 to i8
	store i8 %30, i8* %rv.0
	br label %return
return:
	%31 = load i8* %rv.0
	ret i8 %31
}
@S.504 = internal constant [7 x i8] c"UKNOWN\00";
@S.505 = internal constant [5 x i8] c"ENUM\00";
@S.506 = internal constant [5 x i8] c"UINT\00";
@S.507 = internal constant [5 x i8] c"SINT\00";
@S.508 = internal constant [4 x i8] c"REF\00";
@S.509 = internal constant [6 x i8] c"ARRAY\00";
@S.510 = internal constant [7 x i8] c"RECORD\00";
@S.511 = internal constant [8 x i8] c"REFPROC\00";
@type_KindName = internal constant [8 x [0 x i8]*] [ [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.504 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.505 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.506 )  to [0 x i8]* ), [0 x i8] * bitcast( [5 x i8]* getelementptr( [5 x i8]* @S.507 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.508 )  to [0 x i8]* ), [0 x i8] * bitcast( [6 x i8]* getelementptr( [6 x i8]* @S.509 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.510 )  to [0 x i8]* ), [0 x i8] * bitcast( [8 x i8]* getelementptr( [8 x i8]* @S.511 )  to [0 x i8]* ) ], align 4
define internal zeroext i8 @type_Compat(%type.TypeNode* %t1.arg, %type.TypeNode* %t2.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%t1 = alloca %type.TypeNode*
	%t2 = alloca %type.TypeNode*
	store %type.TypeNode* %t1.arg, %type.TypeNode** %t1
	store %type.TypeNode* %t2.arg, %type.TypeNode** %t2
	%0 = load %type.TypeNode** %t1
	%1 = icmp eq %type.TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.1:
	%2 = load %type.TypeNode** %t2
	%3 = icmp eq %type.TypeNode* %2, null
	br label %L.2
L.2:
	%4 = phi i1 [ true, %L.0 ], [ %3, %L.1 ]
	br i1 %4, label %L.4, label %L.3
L.4:
	store i8 1, i8* %rv.0
	br label %return
L.3:
	%5 = load %type.TypeNode** %t1
	%6 = load %type.TypeNode** %t2
	%7 = icmp eq %type.TypeNode* %5, %6
	br i1 %7, label %L.6, label %L.5
L.6:
	store i8 1, i8* %rv.0
	br label %return
L.5:
	%8 = load %type.TypeNode** %t1
	%9 = getelementptr %type.TypeNode* %8, i32 0, i32 13
	%10 = load i8* %9
	%11 = load %type.TypeNode** %t2
	%12 = getelementptr %type.TypeNode* %11, i32 0, i32 13
	%13 = load i8* %12
	%14 = icmp ne i8 %10, %13
	br i1 %14, label %L.8, label %L.7
L.8:
	store i8 0, i8* %rv.0
	br label %return
L.7:
	%15 = load %type.TypeNode** %t1
	%16 = getelementptr %type.TypeNode* %15, i32 0, i32 1
	%17 = load %type.TypeNode** %16
	%18 = icmp ne %type.TypeNode* %17, null
	br i1 %18, label %L.10, label %L.9
L.10:
	%19 = load %type.TypeNode** %t1
	%20 = getelementptr %type.TypeNode* %19, i32 0, i32 1
	%21 = load %type.TypeNode** %20
	%22 = bitcast %type.TypeNode* %21 to %type.TypeNode*
	%23 = load %type.TypeNode** %t2
	%24 = bitcast %type.TypeNode* %23 to %type.TypeNode*
	%25 = call i8 @type_Compat(%type.TypeNode* %22, %type.TypeNode* %24)
	store i8 %25, i8* %rv.0
	br label %return
L.9:
	%26 = load %type.TypeNode** %t2
	%27 = getelementptr %type.TypeNode* %26, i32 0, i32 1
	%28 = load %type.TypeNode** %27
	%29 = icmp ne %type.TypeNode* %28, null
	br i1 %29, label %L.12, label %L.11
L.12:
	%30 = load %type.TypeNode** %t1
	%31 = bitcast %type.TypeNode* %30 to %type.TypeNode*
	%32 = load %type.TypeNode** %t2
	%33 = getelementptr %type.TypeNode* %32, i32 0, i32 1
	%34 = load %type.TypeNode** %33
	%35 = bitcast %type.TypeNode* %34 to %type.TypeNode*
	%36 = call i8 @type_Compat(%type.TypeNode* %31, %type.TypeNode* %35)
	store i8 %36, i8* %rv.0
	br label %return
L.11:
	%37 = load %type.TypeNode** %t2
	%38 = getelementptr %type.TypeNode* %37, i32 0, i32 13
	%39 = load i8* %38
	%40 = zext i8 %39 to i32
	switch i32 %40, label %L.13 [
		i32 2, label %L.15
		i32 3, label %L.15
		i32 1, label %L.16
		i32 6, label %L.16
		i32 4, label %L.17
		i32 5, label %L.18
		i32 7, label %L.19
	]
L.15:
	store i8 1, i8* %rv.0
	br label %return
L.16:
	%41 = load %type.TypeNode** %t2
	%42 = getelementptr %type.TypeNode* %41, i32 0, i32 0
	%43 = load %type.TypeNode** %42
	%44 = icmp ne %type.TypeNode* %43, null
	br i1 %44, label %L.21, label %L.20
L.21:
	%45 = load %type.TypeNode** %t1
	%46 = bitcast %type.TypeNode* %45 to %type.TypeNode*
	%47 = load %type.TypeNode** %t2
	%48 = getelementptr %type.TypeNode* %47, i32 0, i32 0
	%49 = load %type.TypeNode** %48
	%50 = bitcast %type.TypeNode* %49 to %type.TypeNode*
	%51 = call i8 @type_Compat(%type.TypeNode* %46, %type.TypeNode* %50)
	store i8 %51, i8* %rv.0
	br label %return
L.20:
	store i8 0, i8* %rv.0
	br label %return
L.17:
	%52 = load %type.TypeNode** %t1
	%53 = getelementptr %type.TypeNode* %52, i32 0, i32 0
	%54 = load %type.TypeNode** %53
	%55 = bitcast %type.TypeNode* %54 to %type.TypeNode*
	%56 = load %type.TypeNode** %t2
	%57 = getelementptr %type.TypeNode* %56, i32 0, i32 0
	%58 = load %type.TypeNode** %57
	%59 = bitcast %type.TypeNode* %58 to %type.TypeNode*
	%60 = call i8 @type_Compat(%type.TypeNode* %55, %type.TypeNode* %59)
	store i8 %60, i8* %rv.0
	br label %return
L.18:
	%61 = load %type.TypeNode** %t1
	%62 = getelementptr %type.TypeNode* %61, i32 0, i32 0
	%63 = load %type.TypeNode** %62
	%64 = bitcast %type.TypeNode* %63 to %type.TypeNode*
	%65 = load %type.TypeNode** %t2
	%66 = getelementptr %type.TypeNode* %65, i32 0, i32 0
	%67 = load %type.TypeNode** %66
	%68 = bitcast %type.TypeNode* %67 to %type.TypeNode*
	%69 = call i8 @type_Compat(%type.TypeNode* %64, %type.TypeNode* %68)
	store i8 %69, i8* %rv.0
	br label %return
L.19:
	%70 = load %type.TypeNode** %t1
	%71 = getelementptr %type.TypeNode* %70, i32 0, i32 4
	%72 = load %symb.SymbNode** %71
	%73 = getelementptr %symb.SymbNode* %72, i32 0, i32 3
	%74 = load %symb.SymbNode** %73
	%75 = bitcast %symb.SymbNode* %74 to %symb.SymbNode*
	%76 = load %type.TypeNode** %t2
	%77 = getelementptr %type.TypeNode* %76, i32 0, i32 4
	%78 = load %symb.SymbNode** %77
	%79 = getelementptr %symb.SymbNode* %78, i32 0, i32 3
	%80 = load %symb.SymbNode** %79
	%81 = bitcast %symb.SymbNode* %80 to %symb.SymbNode*
	%82 = call i8 @type_SameSymbList(%symb.SymbNode* %75, %symb.SymbNode* %81)
	%83 = icmp ne i8 %82, 0
	br i1 %83, label %L.22, label %L.23
L.22:
	%84 = load %type.TypeNode** %t1
	%85 = getelementptr %type.TypeNode* %84, i32 0, i32 4
	%86 = load %symb.SymbNode** %85
	%87 = getelementptr %symb.SymbNode* %86, i32 0, i32 4
	%88 = load %type.TypeListEntry** %87
	%89 = bitcast %type.TypeListEntry* %88 to %type.TypeListEntry*
	%90 = load %type.TypeNode** %t2
	%91 = getelementptr %type.TypeNode* %90, i32 0, i32 4
	%92 = load %symb.SymbNode** %91
	%93 = getelementptr %symb.SymbNode* %92, i32 0, i32 4
	%94 = load %type.TypeListEntry** %93
	%95 = bitcast %type.TypeListEntry* %94 to %type.TypeListEntry*
	%96 = call i8 @type_SameTypeList(%type.TypeListEntry* %89, %type.TypeListEntry* %95)
	%97 = icmp ne i8 %96, 0
	br label %L.23
L.23:
	%98 = phi i1 [ false, %L.19 ], [ %97, %L.22 ]
	%99 = zext i1 %98 to i8
	store i8 %99, i8* %rv.0
	br label %return
L.13:
	br label %L.14
L.14:
	store i8 0, i8* %rv.0
	br label %return
return:
	%100 = load i8* %rv.0
	ret i8 %100
}
define internal zeroext i8 @type_NeedSwap(%type.TypeNode* %t.arg, i8 zeroext %to.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%t = alloca %type.TypeNode*
	%to = alloca i8
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store i8 %to.arg, i8* %to
	%fm = alloca i8
	%0 = load %type.TypeNode** %t
	%1 = getelementptr %type.TypeNode* %0, i32 0, i32 8
	%2 = load i32* %1
	%3 = load %target.TargetT** @target_Target
	%4 = getelementptr %target.TargetT* %3, i32 0, i32 3
	%5 = load i8* %4
	%6 = zext i8 %5 to i32
	%7 = icmp ule i32 %2, %6
	br i1 %7, label %L.2, label %L.1
L.2:
	store i8 0, i8* %rv.0
	br label %return
L.1:
	%8 = load %type.TypeNode** %t
	%9 = getelementptr %type.TypeNode* %8, i32 0, i32 16
	%10 = load i8* %9
	store i8 %10, i8* %fm
	%11 = load i8* %fm
	%12 = icmp eq i8 %11, 0
	br i1 %12, label %L.4, label %L.3
L.4:
	%13 = load %target.TargetT** @target_Target
	%14 = getelementptr %target.TargetT* %13, i32 0, i32 2
	%15 = load i8* %14
	store i8 %15, i8* %fm
	br label %L.3
L.3:
	%16 = load i8* %to
	%17 = icmp eq i8 %16, 0
	br i1 %17, label %L.6, label %L.5
L.6:
	%18 = load %target.TargetT** @target_Target
	%19 = getelementptr %target.TargetT* %18, i32 0, i32 2
	%20 = load i8* %19
	store i8 %20, i8* %to
	br label %L.5
L.5:
	%21 = load i8* %fm
	%22 = load i8* %to
	%23 = icmp ne i8 %21, %22
	%24 = zext i1 %23 to i8
	store i8 %24, i8* %rv.0
	br label %return
return:
	%25 = load i8* %rv.0
	ret i8 %25
}
define internal %type.TypeNode* @type_New(i8 zeroext %kind.arg) nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%kind = alloca i8
	store i8 %kind.arg, i8* %kind
	%t = alloca %type.TypeNode*
	%0 = call [0 x i8]* @sys_zalloc(i32 68)
	%1 = bitcast [0 x i8]* %0 to %type.TypeNode*
	%2 = bitcast %type.TypeNode* %1 to %type.TypeNode*
	store %type.TypeNode* %2, %type.TypeNode** %t
	%3 = load i8* %kind
	%4 = load %type.TypeNode** %t
	%5 = getelementptr %type.TypeNode* %4, i32 0, i32 13
	store i8 %3, i8* %5
	%6 = load %type.TypeNode** %t
	%7 = bitcast %type.TypeNode* %6 to %type.TypeNode*
	store %type.TypeNode* %7, %type.TypeNode** %rv.0
	br label %return
return:
	%8 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %8
}
define internal %type.TypeNode* @type_Clone(%type.TypeNode* %ot.arg) nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%ot = alloca %type.TypeNode*
	store %type.TypeNode* %ot.arg, %type.TypeNode** %ot
	%nt = alloca %type.TypeNode*
	%0 = load %type.TypeNode** %ot
	%1 = getelementptr %type.TypeNode* %0, i32 0, i32 13
	%2 = load i8* %1
	%3 = call %type.TypeNode* @type_New(i8 %2)
	%4 = bitcast %type.TypeNode* %3 to %type.TypeNode*
	store %type.TypeNode* %4, %type.TypeNode** %nt
	%5 = load %type.TypeNode** %ot
	%6 = load %type.TypeNode* %5
	%7 = load %type.TypeNode** %nt
	store %type.TypeNode %6, %type.TypeNode* %7
	%8 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%9 = load %type.TypeNode** %nt
	%10 = getelementptr %type.TypeNode* %9, i32 0, i32 3
	store %symb.SymbNode* %8, %symb.SymbNode** %10
	%11 = load %type.TypeNode** %nt
	%12 = getelementptr %type.TypeNode* %11, i32 0, i32 23
	store i8 0, i8* %12
	br label %return
return:
	%13 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %13
}
define internal %type.TypeNode* @type_ChangeOrder(%type.TypeNode* %told.arg, i8 zeroext %neworder.arg) nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%told = alloca %type.TypeNode*
	%neworder = alloca i8
	store %type.TypeNode* %told.arg, %type.TypeNode** %told
	store i8 %neworder.arg, i8* %neworder
	%t = alloca %type.TypeNode*
	%0 = load %type.TypeNode** %told
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	%2 = call %type.TypeNode* @type_Clone(%type.TypeNode* %1)
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	store %type.TypeNode* %3, %type.TypeNode** %t
	%4 = load i8* %neworder
	%5 = load %type.TypeNode** %t
	%6 = getelementptr %type.TypeNode* %5, i32 0, i32 16
	store i8 %4, i8* %6
	%7 = load %type.TypeNode** %t
	%8 = getelementptr %type.TypeNode* %7, i32 0, i32 23
	store i8 1, i8* %8
	%9 = load %type.TypeNode** %t
	%10 = bitcast %type.TypeNode* %9 to %type.TypeNode*
	store %type.TypeNode* %10, %type.TypeNode** %rv.0
	br label %return
return:
	%11 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %11
}
@type_askip1 = internal constant [4 x i8] [ i8 33, i8 4, i8 0, i8 0 ], align 1
@type_askip2 = internal constant [5 x i8] [ i8 5, i8 33, i8 4, i8 0, i8 0 ], align 1
@type_tattrlist = internal constant [14 x i8] [ i8 62, i8 63, i8 64, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 81, i8 80, i8 75, i8 0 ], align 1
define internal %type.TypeNode* @type_Attributes(%symb.SymbNode* %s.arg, %type.TypeNode* %t.arg, [0 x i8]* %sattrlist.arg) nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%s = alloca %symb.SymbNode*
	%t = alloca %type.TypeNode*
	%sattrlist = alloca [0 x i8]*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store [0 x i8]* %sattrlist.arg, [0 x i8]** %sattrlist
	%tok = alloca i8
	%atok = alloca i8
	%at = alloca %type.TypeNode*
	br label %L.1
L.1:
	%0 = call i8 @lex_Next()
	store i8 %0, i8* %tok
	%1 = load i8* %tok
	%2 = icmp eq i8 %1, 40
	br i1 %2, label %L.4, label %L.5
L.4:
	%3 = getelementptr [14 x i8]* @type_tattrlist
	%4 = bitcast [14 x i8]* %3 to [0 x i8]*
	%5 = call i8 @lex_Keyword([0 x i8]* %4)
	store i8 %5, i8* %atok
	%6 = load i8* %atok
	%7 = load i8* %tok
	%8 = icmp ne i8 %6, %7
	br i1 %8, label %L.7, label %L.8
L.7:
	%9 = call i8 @lex_Next()
	store i8 %9, i8* %tok
	%10 = load %type.TypeNode** %t
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 23
	%12 = load i8* %11
	%13 = icmp ne i8 %12, 0
	br i1 %13, label %L.10, label %L.9
L.10:
	%14 = load %type.TypeNode** %t
	%15 = bitcast %type.TypeNode* %14 to %type.TypeNode*
	store %type.TypeNode* %15, %type.TypeNode** %at
	%16 = load %type.TypeNode** %at
	%17 = bitcast %type.TypeNode* %16 to %type.TypeNode*
	%18 = call %type.TypeNode* @type_Clone(%type.TypeNode* %17)
	%19 = bitcast %type.TypeNode* %18 to %type.TypeNode*
	store %type.TypeNode* %19, %type.TypeNode** %t
	%20 = load %type.TypeNode** %at
	%21 = bitcast %type.TypeNode* %20 to %type.TypeNode*
	%22 = load %type.TypeNode** %t
	%23 = getelementptr %type.TypeNode* %22, i32 0, i32 1
	store %type.TypeNode* %21, %type.TypeNode** %23
	br label %L.9
L.9:
	%24 = load i8* %atok
	%25 = zext i8 %24 to i32
	switch i32 %25, label %L.11 [
		i32 62, label %L.13
		i32 63, label %L.14
		i32 64, label %L.15
		i32 65, label %L.16
		i32 66, label %L.17
		i32 67, label %L.18
		i32 68, label %L.19
		i32 69, label %L.20
		i32 70, label %L.21
		i32 71, label %L.22
		i32 81, label %L.23
		i32 80, label %L.24
		i32 75, label %L.25
	]
L.13:
	%26 = load %type.TypeNode** %t
	%27 = getelementptr %type.TypeNode* %26, i32 0, i32 14
	store i8 2, i8* %27
	br label %L.12
L.14:
	%28 = load %type.TypeNode** %t
	%29 = getelementptr %type.TypeNode* %28, i32 0, i32 14
	store i8 1, i8* %29
	br label %L.12
L.15:
	%30 = load %type.TypeNode** %t
	%31 = getelementptr %type.TypeNode* %30, i32 0, i32 15
	store i8 2, i8* %31
	br label %L.12
L.16:
	%32 = load %type.TypeNode** %t
	%33 = getelementptr %type.TypeNode* %32, i32 0, i32 15
	store i8 1, i8* %33
	br label %L.12
L.17:
	%34 = load %type.TypeNode** %t
	%35 = getelementptr %type.TypeNode* %34, i32 0, i32 16
	store i8 2, i8* %35
	br label %L.12
L.18:
	%36 = load %type.TypeNode** %t
	%37 = getelementptr %type.TypeNode* %36, i32 0, i32 16
	store i8 1, i8* %37
	br label %L.12
L.19:
	%38 = load %type.TypeNode** %t
	%39 = getelementptr %type.TypeNode* %38, i32 0, i32 17
	store i8 1, i8* %39
	br label %L.12
L.20:
	%40 = load %type.TypeNode** %t
	%41 = getelementptr %type.TypeNode* %40, i32 0, i32 17
	store i8 2, i8* %41
	br label %L.12
L.21:
	%42 = load %type.TypeNode** %t
	%43 = getelementptr %type.TypeNode* %42, i32 0, i32 19
	store i8 1, i8* %43
	br label %L.12
L.22:
	%44 = load %type.TypeNode** %t
	%45 = getelementptr %type.TypeNode* %44, i32 0, i32 20
	store i8 1, i8* %45
	br label %L.12
L.23:
	%46 = load i8* %tok
	%47 = icmp eq i8 %46, 32
	br i1 %47, label %L.27, label %L.26
L.27:
	%48 = call i8 @lex_Next()
	store i8 %48, i8* %tok
	%49 = load %type.TypeNode** @type_wordtype
	%50 = bitcast %type.TypeNode* %49 to %type.TypeNode*
	%51 = call i64 @expr_ConstScalar(%type.TypeNode* %50)
	%52 = load %target.TargetT** @target_Target
	%53 = getelementptr %target.TargetT* %52, i32 0, i32 3
	%54 = load i8* %53
	%55 = zext i8 %54 to i64
	%56 = mul i64 %51, %55
	%57 = trunc i64 %56 to i32
	%58 = load %type.TypeNode** %t
	%59 = getelementptr %type.TypeNode* %58, i32 0, i32 9
	store i32 %57, i32* %59
	%60 = call i8 @lex_Expect(i8 33)
	br label %L.26
L.26:
	br label %L.12
L.24:
	%61 = load i8* %tok
	%62 = icmp eq i8 %61, 32
	br i1 %62, label %L.29, label %L.28
L.29:
	%63 = call i8 @lex_Next()
	store i8 %63, i8* %tok
	%64 = load %type.TypeNode** @type_wordtype
	%65 = bitcast %type.TypeNode* %64 to %type.TypeNode*
	%66 = call i64 @expr_ConstScalar(%type.TypeNode* %65)
	%67 = trunc i64 %66 to i32
	%68 = load %type.TypeNode** %t
	%69 = getelementptr %type.TypeNode* %68, i32 0, i32 8
	store i32 %67, i32* %69
	%70 = call i8 @lex_Expect(i8 33)
	br label %L.28
L.28:
	br label %L.12
L.25:
	%71 = load i8* %tok
	%72 = icmp eq i8 %71, 32
	br i1 %72, label %L.31, label %L.30
L.31:
	%73 = call i8 @lex_Next()
	store i8 %73, i8* %tok
	%74 = load %type.TypeNode** @type_wordtype
	%75 = bitcast %type.TypeNode* %74 to %type.TypeNode*
	%76 = call i64 @expr_ConstScalar(%type.TypeNode* %75)
	%77 = load %target.TargetT** @target_Target
	%78 = getelementptr %target.TargetT* %77, i32 0, i32 3
	%79 = load i8* %78
	%80 = zext i8 %79 to i64
	%81 = mul i64 %76, %80
	%82 = trunc i64 %81 to i32
	%83 = load %type.TypeNode** %t
	%84 = getelementptr %type.TypeNode* %83, i32 0, i32 10
	store i32 %82, i32* %84
	%85 = call i8 @lex_Expect(i8 33)
	br label %L.30
L.30:
	br label %L.12
L.11:
	br label %L.12
L.12:
	br label %L.6
L.8:
	%86 = load %symb.SymbNode** %s
	%87 = icmp ne %symb.SymbNode* %86, null
	br i1 %87, label %L.33, label %L.34
L.33:
	%88 = load [0 x i8]** %sattrlist
	%89 = bitcast [0 x i8]* %88 to [0 x i8]*
	%90 = call i8 @lex_Keyword([0 x i8]* %89)
	store i8 %90, i8* %atok
	%91 = load i8* %atok
	%92 = load i8* %tok
	%93 = icmp ne i8 %91, %92
	br i1 %93, label %L.36, label %L.37
L.36:
	%94 = call i8 @lex_Next()
	store i8 %94, i8* %tok
	%95 = load i8* %atok
	%96 = zext i8 %95 to i32
	switch i32 %96, label %L.38 [
		i32 76, label %L.40
		i32 73, label %L.41
		i32 72, label %L.42
		i32 74, label %L.43
	]
L.40:
	%97 = load %symb.SymbNode** %s
	%98 = getelementptr %symb.SymbNode* %97, i32 0, i32 13
	store i8 5, i8* %98
	br label %L.39
L.41:
	%99 = load %symb.SymbNode** %s
	%100 = getelementptr %symb.SymbNode* %99, i32 0, i32 13
	store i8 2, i8* %100
	br label %L.39
L.42:
	%101 = load i8* %tok
	%102 = icmp eq i8 %101, 32
	br i1 %102, label %L.45, label %L.46
L.45:
	%103 = call i8 @lex_Next()
	store i8 %103, i8* %tok
	%104 = load %type.TypeNode** @type_wordtype
	%105 = bitcast %type.TypeNode* %104 to %type.TypeNode*
	%106 = call i64 @expr_ConstScalar(%type.TypeNode* %105)
	%107 = load %symb.SymbNode** %s
	%108 = getelementptr %symb.SymbNode* %107, i32 0, i32 8
	store i64 %106, i64* %108
	%109 = call i8 @lex_Expect(i8 33)
	%110 = load %symb.SymbNode** %s
	%111 = getelementptr %symb.SymbNode* %110, i32 0, i32 13
	store i8 4, i8* %111
	br label %L.44
L.46:
	%112 = load %symb.SymbNode** %s
	%113 = getelementptr %symb.SymbNode* %112, i32 0, i32 13
	store i8 3, i8* %113
	br label %L.44
L.44:
	br label %L.39
L.43:
	%114 = getelementptr [64 x i8]* @lex_Ident
	%115 = bitcast [64 x i8]* %114 to [0 x i8]*
	call void @lex_ErrorI(i8 29, [0 x i8]* %115)
	%116 = load i8* %tok
	%117 = icmp eq i8 %116, 32
	br i1 %117, label %L.48, label %L.47
L.48:
	%118 = call i8 @lex_Next()
	store i8 %118, i8* %tok
	%119 = getelementptr [4 x i8]* @type_askip1
	%120 = bitcast [4 x i8]* %119 to [0 x i8]*
	%121 = call i8 @lex_Skip([0 x i8]* %120)
	store i8 %121, i8* %tok
	br label %L.47
L.47:
	br label %L.39
L.38:
	br label %L.39
L.39:
	br label %L.35
L.37:
	%122 = getelementptr [64 x i8]* @lex_Ident
	%123 = bitcast [64 x i8]* %122 to [0 x i8]*
	call void @lex_ErrorI(i8 29, [0 x i8]* %123)
	br label %L.35
L.35:
	br label %L.32
L.34:
	%124 = getelementptr [64 x i8]* @lex_Ident
	%125 = bitcast [64 x i8]* %124 to [0 x i8]*
	call void @lex_ErrorI(i8 29, [0 x i8]* %125)
	%126 = call i8 @lex_Next()
	store i8 %126, i8* %tok
	br label %L.32
L.32:
	br label %L.6
L.6:
	br label %L.3
L.5:
	%127 = load i8* %tok
	%128 = icmp ne i8 %127, 4
	br i1 %128, label %L.50, label %L.49
L.50:
	call void @lex_Error(i8 15)
	%129 = getelementptr [5 x i8]* @type_askip2
	%130 = bitcast [5 x i8]* %129 to [0 x i8]*
	%131 = call i8 @lex_Skip([0 x i8]* %130)
	store i8 %131, i8* %tok
	br label %L.49
L.49:
	br label %L.3
L.3:
	%132 = load i8* @lex_Token
	store i8 %132, i8* %tok
	%133 = load i8* %tok
	%134 = icmp ne i8 %133, 5
	br i1 %134, label %L.2, label %L.51
L.51:
	br label %L.1
L.2:
	%135 = load %type.TypeNode** %t
	%136 = bitcast %type.TypeNode* %135 to %type.TypeNode*
	store %type.TypeNode* %136, %type.TypeNode** %rv.0
	br label %return
return:
	%137 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %137
}
@type_nattrlist = internal constant [1 x i8] [ i8 0 ], align 1
define internal %type.TypeNode* @type_TypeAttributes(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%0 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%1 = load %type.TypeNode** %t
	%2 = bitcast %type.TypeNode* %1 to %type.TypeNode*
	%3 = getelementptr [1 x i8]* @type_nattrlist
	%4 = bitcast [1 x i8]* %3 to [0 x i8]*
	%5 = call %type.TypeNode* @type_Attributes(%symb.SymbNode* %0, %type.TypeNode* %2, [0 x i8]* %4)
	%6 = bitcast %type.TypeNode* %5 to %type.TypeNode*
	store %type.TypeNode* %6, %type.TypeNode** %rv.0
	br label %return
return:
	%7 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %7
}
@type_vattrlist = internal constant [4 x i8] [ i8 72, i8 73, i8 0, i8 0 ], align 1
define internal %type.TypeNode* @type_VarAttributes(%symb.SymbNode* %s.arg, %type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%s = alloca %symb.SymbNode*
	%t = alloca %type.TypeNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%0 = load %symb.SymbNode** %s
	%1 = bitcast %symb.SymbNode* %0 to %symb.SymbNode*
	%2 = load %type.TypeNode** %t
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	%4 = getelementptr [4 x i8]* @type_vattrlist
	%5 = bitcast [4 x i8]* %4 to [0 x i8]*
	%6 = call %type.TypeNode* @type_Attributes(%symb.SymbNode* %1, %type.TypeNode* %3, [0 x i8]* %5)
	%7 = bitcast %type.TypeNode* %6 to %type.TypeNode*
	store %type.TypeNode* %7, %type.TypeNode** %rv.0
	br label %return
return:
	%8 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %8
}
@type_pattrlist = internal constant [3 x i8] [ i8 72, i8 76, i8 0 ], align 1
define internal void @type_ProcAttributes(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%t = alloca %type.TypeNode*
	%0 = load %symb.SymbNode** %s
	%1 = bitcast %symb.SymbNode* %0 to %symb.SymbNode*
	%2 = load %symb.SymbNode** %s
	%3 = getelementptr %symb.SymbNode* %2, i32 0, i32 1
	%4 = load %type.TypeNode** %3
	%5 = bitcast %type.TypeNode* %4 to %type.TypeNode*
	%6 = getelementptr [3 x i8]* @type_pattrlist
	%7 = bitcast [3 x i8]* %6 to [0 x i8]*
	%8 = call %type.TypeNode* @type_Attributes(%symb.SymbNode* %1, %type.TypeNode* %5, [0 x i8]* %7)
	%9 = bitcast %type.TypeNode* %8 to %type.TypeNode*
	store %type.TypeNode* %9, %type.TypeNode** %t
	%10 = load %type.TypeNode** %t
	%11 = bitcast %type.TypeNode* %10 to %type.TypeNode*
	%12 = load %symb.SymbNode** %s
	%13 = getelementptr %symb.SymbNode* %12, i32 0, i32 1
	store %type.TypeNode* %11, %type.TypeNode** %13
	br label %return
return:
	ret void
}
define internal zeroext i8 @type_bitsize(i64 %x.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%x = alloca i64
	store i64 %x.arg, i64* %x
	%t = alloca i64
	%n = alloca i8
	store i8 1, i8* %n
	store i64 1, i64* %t
	br label %L.1
L.1:
	%0 = load i64* %t
	%1 = load i64* %x
	%2 = icmp ult i64 %0, %1
	%3 = xor i1 %2, true
	br i1 %3, label %L.2, label %L.3
L.3:
	%4 = load i64* %t
	%5 = shl i64 %4, 1
	store i64 %5, i64* %t
	%6 = load i64* %t
	%7 = add i64 %6, 1
	store i64 %7, i64* %t
	%8 = load i8* %n
	%9 = add i8 %8, 1
	store i8 %9, i8* %n
	br label %L.1
L.2:
	%10 = load i8* %n
	store i8 %10, i8* %rv.0
	br label %return
return:
	%11 = load i8* %rv.0
	ret i8 %11
}
@S.518 = internal constant [2 x i8] c"_\00"define internal zeroext i16 @type_FieldPad(%symb.SymbNode* %prev.arg, i32 %pad.arg, i16 zeroext %index.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%prev = alloca %symb.SymbNode*
	%pad = alloca i32
	%index = alloca i16
	store %symb.SymbNode* %prev.arg, %symb.SymbNode** %prev
	store i32 %pad.arg, i32* %pad
	store i16 %index.arg, i16* %index
	%last = alloca %symb.SymbNode*
	%s = alloca %symb.SymbNode*
	%0 = load %symb.SymbNode** %prev
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 0
	%2 = load %symb.SymbNode** %1
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %last
	br label %L.1
L.1:
	%4 = load i32* %pad
	%5 = icmp ugt i32 %4, 0
	%6 = xor i1 %5, true
	br i1 %6, label %L.2, label %L.3
L.3:
	%7 = getelementptr [2 x i8]* @S.518
	%8 = bitcast [2 x i8]* %7 to [0 x i8]*
	%9 = call %symb.SymbNode* @symb_New(i8 4, [0 x i8]* %8, i8 2)
	%10 = bitcast %symb.SymbNode* %9 to %symb.SymbNode*
	store %symb.SymbNode* %10, %symb.SymbNode** %s
	%11 = load %type.TypeNode** @type_bytetype
	%12 = bitcast %type.TypeNode* %11 to %type.TypeNode*
	%13 = load %symb.SymbNode** %s
	%14 = getelementptr %symb.SymbNode* %13, i32 0, i32 1
	store %type.TypeNode* %12, %type.TypeNode** %14
	%15 = load i16* %index
	%16 = load %symb.SymbNode** %s
	%17 = getelementptr %symb.SymbNode* %16, i32 0, i32 9
	store i16 %15, i16* %17
	%18 = load %symb.SymbNode** %s
	%19 = bitcast %symb.SymbNode* %18 to %symb.SymbNode*
	%20 = load %symb.SymbNode** %prev
	%21 = getelementptr %symb.SymbNode* %20, i32 0, i32 0
	store %symb.SymbNode* %19, %symb.SymbNode** %21
	%22 = load %symb.SymbNode** %s
	%23 = bitcast %symb.SymbNode* %22 to %symb.SymbNode*
	store %symb.SymbNode* %23, %symb.SymbNode** %prev
	%24 = load i16* %index
	%25 = add i16 %24, 1
	store i16 %25, i16* %index
	%26 = load i32* %pad
	%27 = sub i32 %26, 1
	store i32 %27, i32* %pad
	br label %L.1
L.2:
	%28 = load %symb.SymbNode** %last
	%29 = bitcast %symb.SymbNode* %28 to %symb.SymbNode*
	%30 = load %symb.SymbNode** %prev
	%31 = getelementptr %symb.SymbNode* %30, i32 0, i32 0
	store %symb.SymbNode* %29, %symb.SymbNode** %31
	%32 = load i16* %index
	store i16 %32, i16* %rv.0
	br label %return
return:
	%33 = load i16* %rv.0
	ret i16 %33
}
define internal void @type_Final(%type.TypeNode* %t.arg) nounwind {
L.0:
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%align = alloca i32
	%tlo = alloca i32
	%thi = alloca i32
	%f = alloca %symb.SymbNode*
	%prev = alloca %symb.SymbNode*
	%index = alloca i16
	%offs = alloca i32
	%mod = alloca i32
	%0 = load %type.TypeNode** %t
	%1 = icmp ne %type.TypeNode* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %type.TypeNode** %t
	%3 = getelementptr %type.TypeNode* %2, i32 0, i32 23
	%4 = load i8* %3
	%5 = icmp ne i8 %4, 0
	%6 = xor i1 %5, true
	br label %L.2
L.2:
	%7 = phi i1 [ false, %L.0 ], [ %6, %L.1 ]
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = load %type.TypeNode** %t
	%9 = getelementptr %type.TypeNode* %8, i32 0, i32 15
	%10 = load i8* %9
	%11 = icmp eq i8 %10, 0
	br i1 %11, label %L.6, label %L.5
L.6:
	%12 = load %type.TypeNode** %t
	%13 = getelementptr %type.TypeNode* %12, i32 0, i32 15
	store i8 2, i8* %13
	br label %L.5
L.5:
	%14 = load %type.TypeNode** %t
	%15 = getelementptr %type.TypeNode* %14, i32 0, i32 16
	%16 = load i8* %15
	%17 = icmp eq i8 %16, 0
	br i1 %17, label %L.8, label %L.7
L.8:
	%18 = load %target.TargetT** @target_Target
	%19 = getelementptr %target.TargetT* %18, i32 0, i32 2
	%20 = load i8* %19
	%21 = load %type.TypeNode** %t
	%22 = getelementptr %type.TypeNode* %21, i32 0, i32 16
	store i8 %20, i8* %22
	br label %L.7
L.7:
	%23 = load %type.TypeNode** %t
	%24 = getelementptr %type.TypeNode* %23, i32 0, i32 13
	%25 = load i8* %24
	%26 = zext i8 %25 to i32
	switch i32 %26, label %L.9 [
		i32 1, label %L.11
		i32 2, label %L.11
		i32 3, label %L.12
		i32 4, label %L.13
		i32 7, label %L.14
		i32 6, label %L.15
		i32 5, label %L.16
	]
L.11:
	%27 = load %type.TypeNode** %t
	%28 = getelementptr %type.TypeNode* %27, i32 0, i32 8
	%29 = load i32* %28
	%30 = icmp eq i32 %29, 0
	br i1 %30, label %L.18, label %L.17
L.18:
	%31 = load %type.TypeNode** %t
	%32 = getelementptr %type.TypeNode* %31, i32 0, i32 7
	%33 = load i64* %32
	%34 = call i8 @type_bitsize(i64 %33)
	%35 = zext i8 %34 to i32
	%36 = load %type.TypeNode** %t
	%37 = getelementptr %type.TypeNode* %36, i32 0, i32 8
	store i32 %35, i32* %37
	br label %L.17
L.17:
	%38 = load %type.TypeNode** %t
	%39 = getelementptr %type.TypeNode* %38, i32 0, i32 9
	%40 = load i32* %39
	%41 = icmp eq i32 %40, 0
	br i1 %41, label %L.20, label %L.19
L.20:
	%42 = load %type.TypeNode** %t
	%43 = getelementptr %type.TypeNode* %42, i32 0, i32 8
	%44 = load i32* %43
	%45 = call i32 @target_isize(i32 %44)
	%46 = load %type.TypeNode** %t
	%47 = getelementptr %type.TypeNode* %46, i32 0, i32 9
	store i32 %45, i32* %47
	br label %L.19
L.19:
	%48 = load %type.TypeNode** %t
	%49 = getelementptr %type.TypeNode* %48, i32 0, i32 10
	%50 = load i32* %49
	%51 = icmp eq i32 %50, 0
	br i1 %51, label %L.22, label %L.21
L.22:
	%52 = load %type.TypeNode** %t
	%53 = getelementptr %type.TypeNode* %52, i32 0, i32 8
	%54 = load i32* %53
	%55 = call i32 @target_ialign(i32 %54)
	%56 = load %type.TypeNode** %t
	%57 = getelementptr %type.TypeNode* %56, i32 0, i32 10
	store i32 %55, i32* %57
	br label %L.21
L.21:
	br label %L.10
L.12:
	%58 = load %type.TypeNode** %t
	%59 = getelementptr %type.TypeNode* %58, i32 0, i32 8
	%60 = load i32* %59
	%61 = icmp eq i32 %60, 0
	br i1 %61, label %L.24, label %L.23
L.24:
	%62 = load %type.TypeNode** %t
	%63 = getelementptr %type.TypeNode* %62, i32 0, i32 6
	%64 = load i64* %63
	%65 = xor i64 %64, -1
	%66 = call i8 @type_bitsize(i64 %65)
	%67 = zext i8 %66 to i32
	store i32 %67, i32* %tlo
	%68 = load %type.TypeNode** %t
	%69 = getelementptr %type.TypeNode* %68, i32 0, i32 7
	%70 = load i64* %69
	%71 = call i8 @type_bitsize(i64 %70)
	%72 = zext i8 %71 to i32
	store i32 %72, i32* %thi
	%73 = load i32* %tlo
	%74 = load i32* %thi
	%75 = icmp ugt i32 %73, %74
	br i1 %75, label %L.26, label %L.27
L.26:
	%76 = load i32* %tlo
	%77 = add i32 %76, 1
	%78 = load %type.TypeNode** %t
	%79 = getelementptr %type.TypeNode* %78, i32 0, i32 8
	store i32 %77, i32* %79
	br label %L.25
L.27:
	%80 = load i32* %thi
	%81 = add i32 %80, 1
	%82 = load %type.TypeNode** %t
	%83 = getelementptr %type.TypeNode* %82, i32 0, i32 8
	store i32 %81, i32* %83
	br label %L.25
L.25:
	br label %L.23
L.23:
	%84 = load %type.TypeNode** %t
	%85 = getelementptr %type.TypeNode* %84, i32 0, i32 9
	%86 = load i32* %85
	%87 = icmp eq i32 %86, 0
	br i1 %87, label %L.29, label %L.28
L.29:
	%88 = load %type.TypeNode** %t
	%89 = getelementptr %type.TypeNode* %88, i32 0, i32 8
	%90 = load i32* %89
	%91 = call i32 @target_isize(i32 %90)
	%92 = load %type.TypeNode** %t
	%93 = getelementptr %type.TypeNode* %92, i32 0, i32 9
	store i32 %91, i32* %93
	br label %L.28
L.28:
	%94 = load %type.TypeNode** %t
	%95 = getelementptr %type.TypeNode* %94, i32 0, i32 10
	%96 = load i32* %95
	%97 = icmp eq i32 %96, 0
	br i1 %97, label %L.31, label %L.30
L.31:
	%98 = load %type.TypeNode** %t
	%99 = getelementptr %type.TypeNode* %98, i32 0, i32 8
	%100 = load i32* %99
	%101 = call i32 @target_ialign(i32 %100)
	%102 = load %type.TypeNode** %t
	%103 = getelementptr %type.TypeNode* %102, i32 0, i32 10
	store i32 %101, i32* %103
	br label %L.30
L.30:
	br label %L.10
L.13:
	%104 = load %type.TypeNode** %t
	%105 = getelementptr %type.TypeNode* %104, i32 0, i32 0
	%106 = load %type.TypeNode** %105
	%107 = icmp ne %type.TypeNode* %106, null
	br i1 %107, label %L.32, label %L.33
L.32:
	%108 = load %type.TypeNode** %t
	%109 = getelementptr %type.TypeNode* %108, i32 0, i32 0
	%110 = load %type.TypeNode** %109
	%111 = getelementptr %type.TypeNode* %110, i32 0, i32 3
	%112 = load %symb.SymbNode** %111
	%113 = icmp eq %symb.SymbNode* %112, null
	br label %L.33
L.33:
	%114 = phi i1 [ false, %L.13 ], [ %113, %L.32 ]
	br i1 %114, label %L.35, label %L.34
L.35:
	%115 = load %type.TypeNode** %t
	%116 = getelementptr %type.TypeNode* %115, i32 0, i32 0
	%117 = load %type.TypeNode** %116
	%118 = bitcast %type.TypeNode* %117 to %type.TypeNode*
	call void @type_Final(%type.TypeNode* %118)
	br label %L.34
L.34:
	%119 = load %target.TargetT** @target_Target
	%120 = getelementptr %target.TargetT* %119, i32 0, i32 8
	%121 = getelementptr %target.SizeAlign* %120, i32 0, i32 0
	%122 = load i8* %121
	%123 = zext i8 %122 to i32
	%124 = load %type.TypeNode** %t
	%125 = getelementptr %type.TypeNode* %124, i32 0, i32 8
	store i32 %123, i32* %125
	%126 = load %target.TargetT** @target_Target
	%127 = getelementptr %target.TargetT* %126, i32 0, i32 8
	%128 = getelementptr %target.SizeAlign* %127, i32 0, i32 0
	%129 = load i8* %128
	%130 = zext i8 %129 to i32
	%131 = load %type.TypeNode** %t
	%132 = getelementptr %type.TypeNode* %131, i32 0, i32 9
	store i32 %130, i32* %132
	%133 = load %target.TargetT** @target_Target
	%134 = getelementptr %target.TargetT* %133, i32 0, i32 8
	%135 = getelementptr %target.SizeAlign* %134, i32 0, i32 1
	%136 = load i8* %135
	%137 = zext i8 %136 to i32
	%138 = load %type.TypeNode** %t
	%139 = getelementptr %type.TypeNode* %138, i32 0, i32 10
	store i32 %137, i32* %139
	br label %L.10
L.14:
	%140 = load %target.TargetT** @target_Target
	%141 = getelementptr %target.TargetT* %140, i32 0, i32 8
	%142 = getelementptr %target.SizeAlign* %141, i32 0, i32 0
	%143 = load i8* %142
	%144 = zext i8 %143 to i32
	%145 = load %type.TypeNode** %t
	%146 = getelementptr %type.TypeNode* %145, i32 0, i32 8
	store i32 %144, i32* %146
	%147 = load %target.TargetT** @target_Target
	%148 = getelementptr %target.TargetT* %147, i32 0, i32 8
	%149 = getelementptr %target.SizeAlign* %148, i32 0, i32 0
	%150 = load i8* %149
	%151 = zext i8 %150 to i32
	%152 = load %type.TypeNode** %t
	%153 = getelementptr %type.TypeNode* %152, i32 0, i32 9
	store i32 %151, i32* %153
	%154 = load %target.TargetT** @target_Target
	%155 = getelementptr %target.TargetT* %154, i32 0, i32 8
	%156 = getelementptr %target.SizeAlign* %155, i32 0, i32 1
	%157 = load i8* %156
	%158 = zext i8 %157 to i32
	%159 = load %type.TypeNode** %t
	%160 = getelementptr %type.TypeNode* %159, i32 0, i32 10
	store i32 %158, i32* %160
	br label %L.10
L.15:
	store i16 0, i16* %index
	store i32 0, i32* %offs
	store i32 0, i32* %align
	%161 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %161, %symb.SymbNode** %prev
	%162 = load %type.TypeNode** %t
	%163 = getelementptr %type.TypeNode* %162, i32 0, i32 4
	%164 = load %symb.SymbNode** %163
	%165 = bitcast %symb.SymbNode* %164 to %symb.SymbNode*
	store %symb.SymbNode* %165, %symb.SymbNode** %f
	br label %L.36
L.36:
	%166 = load %symb.SymbNode** %f
	%167 = icmp ne %symb.SymbNode* %166, null
	%168 = xor i1 %167, true
	br i1 %168, label %L.37, label %L.38
L.38:
	%169 = load %symb.SymbNode** %f
	%170 = getelementptr %symb.SymbNode* %169, i32 0, i32 1
	%171 = load %type.TypeNode** %170
	%172 = icmp ne %type.TypeNode* %171, null
	br i1 %172, label %L.40, label %L.39
L.40:
	%173 = load %symb.SymbNode** %f
	%174 = getelementptr %symb.SymbNode* %173, i32 0, i32 1
	%175 = load %type.TypeNode** %174
	%176 = bitcast %type.TypeNode* %175 to %type.TypeNode*
	call void @type_Final(%type.TypeNode* %176)
	%177 = load %type.TypeNode** %t
	%178 = getelementptr %type.TypeNode* %177, i32 0, i32 14
	%179 = load i8* %178
	%180 = icmp eq i8 %179, 2
	br i1 %180, label %L.42, label %L.43
L.42:
	%181 = load i32* %offs
	%182 = load %symb.SymbNode** %f
	%183 = getelementptr %symb.SymbNode* %182, i32 0, i32 1
	%184 = load %type.TypeNode** %183
	%185 = getelementptr %type.TypeNode* %184, i32 0, i32 8
	%186 = load i32* %185
	%187 = add i32 %181, %186
	store i32 %187, i32* %offs
	br label %L.41
L.43:
	%falign = alloca i32
	%188 = load %symb.SymbNode** %f
	%189 = getelementptr %symb.SymbNode* %188, i32 0, i32 1
	%190 = load %type.TypeNode** %189
	%191 = getelementptr %type.TypeNode* %190, i32 0, i32 10
	%192 = load i32* %191
	store i32 %192, i32* %falign
	%193 = load i32* %offs
	%194 = load i32* %falign
	%195 = urem i32 %193, %194
	store i32 %195, i32* %mod
	%196 = load i32* %mod
	%197 = icmp ne i32 %196, 0
	br i1 %197, label %L.44, label %L.45
L.44:
	%198 = load %type.TypeNode** %t
	%199 = getelementptr %type.TypeNode* %198, i32 0, i32 14
	%200 = load i8* %199
	%201 = icmp eq i8 %200, 0
	br label %L.45
L.45:
	%202 = phi i1 [ false, %L.43 ], [ %201, %L.44 ]
	br i1 %202, label %L.47, label %L.46
L.47:
	%203 = load %symb.SymbNode** %prev
	%204 = bitcast %symb.SymbNode* %203 to %symb.SymbNode*
	%205 = load i32* %falign
	%206 = load i32* %mod
	%207 = sub i32 %205, %206
	%208 = load %target.TargetT** @target_Target
	%209 = getelementptr %target.TargetT* %208, i32 0, i32 3
	%210 = load i8* %209
	%211 = zext i8 %210 to i32
	%212 = udiv i32 %207, %211
	%213 = load i16* %index
	%214 = call i16 @type_FieldPad(%symb.SymbNode* %204, i32 %212, i16 %213)
	store i16 %214, i16* %index
	%215 = load i32* %offs
	%216 = load i32* %falign
	%217 = load i32* %mod
	%218 = sub i32 %216, %217
	%219 = add i32 %215, %218
	store i32 %219, i32* %offs
	br label %L.46
L.46:
	%220 = load i32* %offs
	%221 = load %symb.SymbNode** %f
	%222 = getelementptr %symb.SymbNode* %221, i32 0, i32 1
	%223 = load %type.TypeNode** %222
	%224 = getelementptr %type.TypeNode* %223, i32 0, i32 9
	%225 = load i32* %224
	%226 = add i32 %220, %225
	store i32 %226, i32* %offs
	%227 = load i32* %falign
	%228 = load i32* %align
	%229 = icmp ugt i32 %227, %228
	br i1 %229, label %L.49, label %L.48
L.49:
	%230 = load i32* %falign
	store i32 %230, i32* %align
	br label %L.48
L.48:
	br label %L.41
L.41:
	br label %L.39
L.39:
	%231 = load i16* %index
	%232 = load %symb.SymbNode** %f
	%233 = getelementptr %symb.SymbNode* %232, i32 0, i32 9
	store i16 %231, i16* %233
	%234 = load i16* %index
	%235 = add i16 %234, 1
	store i16 %235, i16* %index
	%236 = load %symb.SymbNode** %f
	%237 = bitcast %symb.SymbNode* %236 to %symb.SymbNode*
	store %symb.SymbNode* %237, %symb.SymbNode** %prev
	%238 = load %symb.SymbNode** %f
	%239 = getelementptr %symb.SymbNode* %238, i32 0, i32 0
	%240 = load %symb.SymbNode** %239
	%241 = bitcast %symb.SymbNode* %240 to %symb.SymbNode*
	store %symb.SymbNode* %241, %symb.SymbNode** %f
	br label %L.36
L.37:
	%242 = load i32* %offs
	%243 = load %type.TypeNode** %t
	%244 = getelementptr %type.TypeNode* %243, i32 0, i32 8
	store i32 %242, i32* %244
	%245 = load i32* %offs
	%246 = load %target.TargetT** @target_Target
	%247 = getelementptr %target.TargetT* %246, i32 0, i32 4
	%248 = load i8* %247
	%249 = zext i8 %248 to i32
	%250 = icmp ule i32 %245, %249
	br i1 %250, label %L.51, label %L.52
L.51:
	%251 = load i32* %offs
	%252 = call i32 @target_isize(i32 %251)
	%253 = load %type.TypeNode** %t
	%254 = getelementptr %type.TypeNode* %253, i32 0, i32 9
	store i32 %252, i32* %254
	br label %L.50
L.52:
	%255 = load i32* %offs
	%256 = load %type.TypeNode** %t
	%257 = getelementptr %type.TypeNode* %256, i32 0, i32 9
	store i32 %255, i32* %257
	br label %L.50
L.50:
	%258 = load i32* %align
	%259 = icmp ugt i32 %258, 0
	br i1 %259, label %L.54, label %L.55
L.54:
	%260 = load %type.TypeNode** %t
	%261 = getelementptr %type.TypeNode* %260, i32 0, i32 9
	%262 = load i32* %261
	%263 = load i32* %align
	%264 = urem i32 %262, %263
	store i32 %264, i32* %mod
	%265 = load i32* %mod
	%266 = icmp ne i32 %265, 0
	br i1 %266, label %L.57, label %L.56
L.57:
	%267 = load %type.TypeNode** %t
	%268 = getelementptr %type.TypeNode* %267, i32 0, i32 9
	%269 = load i32* %268
	%270 = load i32* %align
	%271 = load i32* %mod
	%272 = sub i32 %270, %271
	%273 = add i32 %269, %272
	store i32 %273, i32* %268
	br label %L.56
L.56:
	br label %L.53
L.55:
	%274 = load %type.TypeNode** %t
	%275 = getelementptr %type.TypeNode* %274, i32 0, i32 8
	%276 = load i32* %275
	%277 = call i32 @target_ialign(i32 %276)
	store i32 %277, i32* %align
	br label %L.53
L.53:
	%278 = load %type.TypeNode** %t
	%279 = getelementptr %type.TypeNode* %278, i32 0, i32 10
	%280 = load i32* %279
	%281 = icmp eq i32 %280, 0
	br i1 %281, label %L.59, label %L.58
L.59:
	%282 = load i32* %align
	%283 = load %type.TypeNode** %t
	%284 = getelementptr %type.TypeNode* %283, i32 0, i32 10
	store i32 %282, i32* %284
	br label %L.58
L.58:
	br label %L.10
L.16:
	%285 = load %type.TypeNode** %t
	%286 = getelementptr %type.TypeNode* %285, i32 0, i32 0
	%287 = load %type.TypeNode** %286
	%288 = icmp ne %type.TypeNode* %287, null
	br i1 %288, label %L.61, label %L.60
L.61:
	%289 = load %type.TypeNode** %t
	%290 = getelementptr %type.TypeNode* %289, i32 0, i32 0
	%291 = load %type.TypeNode** %290
	%292 = bitcast %type.TypeNode* %291 to %type.TypeNode*
	call void @type_Final(%type.TypeNode* %292)
	%293 = load %type.TypeNode** %t
	%294 = getelementptr %type.TypeNode* %293, i32 0, i32 8
	%295 = load i32* %294
	%296 = icmp eq i32 %295, 0
	br i1 %296, label %L.63, label %L.62
L.63:
	%297 = load %type.TypeNode** %t
	%298 = getelementptr %type.TypeNode* %297, i32 0, i32 0
	%299 = load %type.TypeNode** %298
	%300 = getelementptr %type.TypeNode* %299, i32 0, i32 8
	%301 = load i32* %300
	%302 = zext i32 %301 to i64
	%303 = load %type.TypeNode** %t
	%304 = getelementptr %type.TypeNode* %303, i32 0, i32 7
	%305 = load i64* %304
	%306 = mul i64 %302, %305
	%307 = trunc i64 %306 to i32
	%308 = load %type.TypeNode** %t
	%309 = getelementptr %type.TypeNode* %308, i32 0, i32 8
	store i32 %307, i32* %309
	br label %L.62
L.62:
	%310 = load %type.TypeNode** %t
	%311 = getelementptr %type.TypeNode* %310, i32 0, i32 9
	%312 = load i32* %311
	%313 = icmp eq i32 %312, 0
	br i1 %313, label %L.65, label %L.64
L.65:
	%314 = load %type.TypeNode** %t
	%315 = getelementptr %type.TypeNode* %314, i32 0, i32 8
	%316 = load i32* %315
	%317 = load %type.TypeNode** %t
	%318 = getelementptr %type.TypeNode* %317, i32 0, i32 9
	store i32 %316, i32* %318
	br label %L.64
L.64:
	%319 = load %type.TypeNode** %t
	%320 = getelementptr %type.TypeNode* %319, i32 0, i32 10
	%321 = load i32* %320
	%322 = icmp eq i32 %321, 0
	br i1 %322, label %L.67, label %L.66
L.67:
	%323 = load %type.TypeNode** %t
	%324 = getelementptr %type.TypeNode* %323, i32 0, i32 14
	%325 = load i8* %324
	%326 = icmp ne i8 %325, 2
	br i1 %326, label %L.69, label %L.70
L.69:
	%327 = load %type.TypeNode** %t
	%328 = getelementptr %type.TypeNode* %327, i32 0, i32 0
	%329 = load %type.TypeNode** %328
	%330 = getelementptr %type.TypeNode* %329, i32 0, i32 10
	%331 = load i32* %330
	%332 = load %type.TypeNode** %t
	%333 = getelementptr %type.TypeNode* %332, i32 0, i32 10
	store i32 %331, i32* %333
	br label %L.68
L.70:
	%334 = load %type.TypeNode** %t
	%335 = getelementptr %type.TypeNode* %334, i32 0, i32 10
	store i32 1, i32* %335
	br label %L.68
L.68:
	br label %L.66
L.66:
	br label %L.60
L.60:
	br label %L.10
L.9:
	br label %L.10
L.10:
	%336 = load %type.TypeNode** %t
	%337 = getelementptr %type.TypeNode* %336, i32 0, i32 23
	store i8 1, i8* %337
	br label %L.3
L.3:
	br label %return
return:
	ret void
}
define internal %type.TypeNode* @type_Enum(%type.TypeNode* %bt.arg) nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%bt = alloca %type.TypeNode*
	store %type.TypeNode* %bt.arg, %type.TypeNode** %bt
	%tok = alloca i8
	%t = alloca %type.TypeNode*
	%vn = alloca %symb.SymbNode*
	%pvn = alloca %symb.SymbNode*
	%v = alloca i32
	%vmax = alloca i32
	%0 = call i8 @lex_Next()
	store i8 %0, i8* %tok
	%1 = call %type.TypeNode* @type_New(i8 1)
	%2 = bitcast %type.TypeNode* %1 to %type.TypeNode*
	store %type.TypeNode* %2, %type.TypeNode** %t
	store i32 0, i32* %v
	store i32 0, i32* %vmax
	%3 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %pvn
	%4 = load %type.TypeNode** %bt
	%5 = icmp ne %type.TypeNode* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	%vb = alloca %symb.SymbNode*
	%6 = load %type.TypeNode** %bt
	%7 = getelementptr %type.TypeNode* %6, i32 0, i32 13
	%8 = load i8* %7
	%9 = icmp eq i8 %8, 1
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load %type.TypeNode** %bt
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 4
	%12 = load %symb.SymbNode** %11
	%13 = bitcast %symb.SymbNode* %12 to %symb.SymbNode*
	store %symb.SymbNode* %13, %symb.SymbNode** %vb
	br label %L.6
L.6:
	%14 = load %symb.SymbNode** %vb
	%15 = icmp ne %symb.SymbNode* %14, null
	%16 = xor i1 %15, true
	br i1 %16, label %L.7, label %L.8
L.8:
	%17 = load %symb.SymbNode** %vb
	%18 = getelementptr %symb.SymbNode* %17, i32 0, i32 19
	%19 = getelementptr [0 x i8]* %18
	%20 = bitcast [0 x i8]* %19 to [0 x i8]*
	%21 = call %symb.SymbNode* @symb_New(i8 1, [0 x i8]* %20, i8 2)
	%22 = bitcast %symb.SymbNode* %21 to %symb.SymbNode*
	store %symb.SymbNode* %22, %symb.SymbNode** %vn
	%23 = load %symb.SymbNode** %pvn
	%24 = icmp ne %symb.SymbNode* %23, null
	br i1 %24, label %L.10, label %L.11
L.10:
	%25 = load %symb.SymbNode** %vn
	%26 = bitcast %symb.SymbNode* %25 to %symb.SymbNode*
	%27 = load %symb.SymbNode** %pvn
	%28 = getelementptr %symb.SymbNode* %27, i32 0, i32 0
	store %symb.SymbNode* %26, %symb.SymbNode** %28
	br label %L.9
L.11:
	%29 = load %symb.SymbNode** %vn
	%30 = bitcast %symb.SymbNode* %29 to %symb.SymbNode*
	%31 = load %type.TypeNode** %t
	%32 = getelementptr %type.TypeNode* %31, i32 0, i32 4
	store %symb.SymbNode* %30, %symb.SymbNode** %32
	br label %L.9
L.9:
	%33 = load %symb.SymbNode** %vn
	%34 = bitcast %symb.SymbNode* %33 to %symb.SymbNode*
	store %symb.SymbNode* %34, %symb.SymbNode** %pvn
	%35 = load %symb.SymbNode** %vb
	%36 = getelementptr %symb.SymbNode* %35, i32 0, i32 7
	%37 = load i64* %36
	%38 = trunc i64 %37 to i32
	store i32 %38, i32* %v
	%39 = load i32* %v
	%40 = zext i32 %39 to i64
	%41 = load %symb.SymbNode** %vn
	%42 = getelementptr %symb.SymbNode* %41, i32 0, i32 7
	store i64 %40, i64* %42
	%43 = load i32* %v
	%44 = load i32* %vmax
	%45 = icmp ugt i32 %43, %44
	br i1 %45, label %L.13, label %L.12
L.13:
	%46 = load i32* %v
	store i32 %46, i32* %vmax
	br label %L.12
L.12:
	%47 = load %symb.SymbNode** %vb
	%48 = getelementptr %symb.SymbNode* %47, i32 0, i32 0
	%49 = load %symb.SymbNode** %48
	%50 = bitcast %symb.SymbNode* %49 to %symb.SymbNode*
	store %symb.SymbNode* %50, %symb.SymbNode** %vb
	br label %L.6
L.7:
	%51 = load i32* %v
	%52 = add i32 %51, 1
	store i32 %52, i32* %v
	br label %L.3
L.5:
	call void @lex_Error(i8 62)
	br label %L.3
L.3:
	br label %L.1
L.1:
	br label %L.14
L.14:
	%53 = load i8* %tok
	%54 = icmp eq i8 %53, 40
	br i1 %54, label %L.17, label %L.18
L.17:
	%55 = load %type.TypeNode** %t
	%56 = getelementptr %type.TypeNode* %55, i32 0, i32 4
	%57 = load %symb.SymbNode** %56
	%58 = bitcast %symb.SymbNode* %57 to %symb.SymbNode*
	%59 = getelementptr [64 x i8]* @lex_Ident
	%60 = bitcast [64 x i8]* %59 to [0 x i8]*
	%61 = call i8 @symb_IsUniqueLocal(%symb.SymbNode* %58, [0 x i8]* %60)
	%62 = icmp ne i8 %61, 0
	%63 = xor i1 %62, true
	br i1 %63, label %L.20, label %L.19
L.20:
	%64 = getelementptr [64 x i8]* @lex_Ident
	%65 = bitcast [64 x i8]* %64 to [0 x i8]*
	call void @lex_ErrorI(i8 17, [0 x i8]* %65)
	br label %L.19
L.19:
	%66 = getelementptr [64 x i8]* @lex_Ident
	%67 = bitcast [64 x i8]* %66 to [0 x i8]*
	%68 = call %symb.SymbNode* @symb_New(i8 1, [0 x i8]* %67, i8 2)
	%69 = bitcast %symb.SymbNode* %68 to %symb.SymbNode*
	store %symb.SymbNode* %69, %symb.SymbNode** %vn
	%70 = load %symb.SymbNode** %pvn
	%71 = icmp ne %symb.SymbNode* %70, null
	br i1 %71, label %L.22, label %L.23
L.22:
	%72 = load %symb.SymbNode** %vn
	%73 = bitcast %symb.SymbNode* %72 to %symb.SymbNode*
	%74 = load %symb.SymbNode** %pvn
	%75 = getelementptr %symb.SymbNode* %74, i32 0, i32 0
	store %symb.SymbNode* %73, %symb.SymbNode** %75
	br label %L.21
L.23:
	%76 = load %symb.SymbNode** %vn
	%77 = bitcast %symb.SymbNode* %76 to %symb.SymbNode*
	%78 = load %type.TypeNode** %t
	%79 = getelementptr %type.TypeNode* %78, i32 0, i32 4
	store %symb.SymbNode* %77, %symb.SymbNode** %79
	br label %L.21
L.21:
	%80 = load %symb.SymbNode** %vn
	%81 = bitcast %symb.SymbNode* %80 to %symb.SymbNode*
	store %symb.SymbNode* %81, %symb.SymbNode** %pvn
	%82 = call i8 @lex_Next()
	store i8 %82, i8* %tok
	%83 = load i8* %tok
	%84 = icmp eq i8 %83, 9
	br i1 %84, label %L.25, label %L.24
L.25:
	%85 = call i8 @lex_Next()
	store i8 %85, i8* %tok
	%86 = load %type.TypeNode** @type_wordtype
	%87 = bitcast %type.TypeNode* %86 to %type.TypeNode*
	%88 = call i64 @expr_ConstScalar(%type.TypeNode* %87)
	%89 = trunc i64 %88 to i32
	store i32 %89, i32* %v
	%90 = load i8* @lex_Token
	store i8 %90, i8* %tok
	br label %L.24
L.24:
	%91 = load i32* %v
	%92 = zext i32 %91 to i64
	%93 = load %symb.SymbNode** %vn
	%94 = getelementptr %symb.SymbNode* %93, i32 0, i32 7
	store i64 %92, i64* %94
	br label %L.16
L.18:
	call void @lex_Error(i8 15)
	br label %L.16
L.16:
	%95 = load i32* %v
	%96 = load i32* %vmax
	%97 = icmp ugt i32 %95, %96
	br i1 %97, label %L.27, label %L.26
L.27:
	%98 = load i32* %v
	store i32 %98, i32* %vmax
	br label %L.26
L.26:
	%99 = load i8* %tok
	%100 = icmp ne i8 %99, 5
	br i1 %100, label %L.15, label %L.28
L.28:
	%101 = call i8 @lex_Next()
	store i8 %101, i8* %tok
	%102 = load i32* %v
	%103 = add i32 %102, 1
	store i32 %103, i32* %v
	br label %L.14
L.15:
	%104 = load %type.TypeNode** %t
	%105 = getelementptr %type.TypeNode* %104, i32 0, i32 6
	store i64 0, i64* %105
	%106 = load i32* %vmax
	%107 = zext i32 %106 to i64
	%108 = load %type.TypeNode** %t
	%109 = getelementptr %type.TypeNode* %108, i32 0, i32 7
	store i64 %107, i64* %109
	%110 = call i8 @lex_Expect(i8 33)
	%111 = load %type.TypeNode** %t
	%112 = bitcast %type.TypeNode* %111 to %type.TypeNode*
	store %type.TypeNode* %112, %type.TypeNode** %rv.0
	br label %return
return:
	%113 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %113
}
@S.519 = internal constant [20 x i8] c"field inital values\00"define internal %type.TypeNode* @type_Record(%type.TypeNode* %bt.arg) nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%bt = alloca %type.TypeNode*
	store %type.TypeNode* %bt.arg, %type.TypeNode** %bt
	%tok = alloca i8
	%t = alloca %type.TypeNode*
	%ft = alloca %type.TypeNode*
	%s = alloca %symb.SymbNode*
	%ps = alloca %symb.SymbNode*
	%bs = alloca %symb.SymbNode*
	%0 = call i8 @lex_Next()
	store i8 %0, i8* %tok
	%1 = call %type.TypeNode* @type_New(i8 6)
	%2 = bitcast %type.TypeNode* %1 to %type.TypeNode*
	store %type.TypeNode* %2, %type.TypeNode** %t
	%3 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %ps
	%4 = load %type.TypeNode** %bt
	%5 = bitcast %type.TypeNode* %4 to %type.TypeNode*
	%6 = load %type.TypeNode** %t
	%7 = getelementptr %type.TypeNode* %6, i32 0, i32 0
	store %type.TypeNode* %5, %type.TypeNode** %7
	%8 = load %type.TypeNode** %bt
	%9 = icmp ne %type.TypeNode* %8, null
	br i1 %9, label %L.2, label %L.1
L.2:
	%10 = load %type.TypeNode** %bt
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 13
	%12 = load i8* %11
	%13 = icmp eq i8 %12, 6
	br i1 %13, label %L.4, label %L.5
L.4:
	%14 = load %type.TypeNode** %bt
	%15 = getelementptr %type.TypeNode* %14, i32 0, i32 4
	%16 = load %symb.SymbNode** %15
	%17 = bitcast %symb.SymbNode* %16 to %symb.SymbNode*
	store %symb.SymbNode* %17, %symb.SymbNode** %bs
	br label %L.6
L.6:
	%18 = load %symb.SymbNode** %bs
	%19 = icmp ne %symb.SymbNode* %18, null
	%20 = xor i1 %19, true
	br i1 %20, label %L.7, label %L.8
L.8:
	%21 = load %symb.SymbNode** %bs
	%22 = getelementptr %symb.SymbNode* %21, i32 0, i32 19
	%23 = getelementptr [0 x i8]* %22
	%24 = bitcast [0 x i8]* %23 to [0 x i8]*
	%25 = call %symb.SymbNode* @symb_New(i8 4, [0 x i8]* %24, i8 2)
	%26 = bitcast %symb.SymbNode* %25 to %symb.SymbNode*
	store %symb.SymbNode* %26, %symb.SymbNode** %s
	%27 = load %symb.SymbNode** %ps
	%28 = icmp ne %symb.SymbNode* %27, null
	br i1 %28, label %L.10, label %L.11
L.10:
	%29 = load %symb.SymbNode** %s
	%30 = bitcast %symb.SymbNode* %29 to %symb.SymbNode*
	%31 = load %symb.SymbNode** %ps
	%32 = getelementptr %symb.SymbNode* %31, i32 0, i32 0
	store %symb.SymbNode* %30, %symb.SymbNode** %32
	br label %L.9
L.11:
	%33 = load %symb.SymbNode** %s
	%34 = bitcast %symb.SymbNode* %33 to %symb.SymbNode*
	%35 = load %type.TypeNode** %t
	%36 = getelementptr %type.TypeNode* %35, i32 0, i32 4
	store %symb.SymbNode* %34, %symb.SymbNode** %36
	br label %L.9
L.9:
	%37 = load %symb.SymbNode** %s
	%38 = bitcast %symb.SymbNode* %37 to %symb.SymbNode*
	store %symb.SymbNode* %38, %symb.SymbNode** %ps
	%39 = load %symb.SymbNode** %bs
	%40 = getelementptr %symb.SymbNode* %39, i32 0, i32 1
	%41 = load %type.TypeNode** %40
	%42 = bitcast %type.TypeNode* %41 to %type.TypeNode*
	%43 = load %symb.SymbNode** %s
	%44 = getelementptr %symb.SymbNode* %43, i32 0, i32 1
	store %type.TypeNode* %42, %type.TypeNode** %44
	%45 = load %symb.SymbNode** %bs
	%46 = getelementptr %symb.SymbNode* %45, i32 0, i32 0
	%47 = load %symb.SymbNode** %46
	%48 = bitcast %symb.SymbNode* %47 to %symb.SymbNode*
	store %symb.SymbNode* %48, %symb.SymbNode** %bs
	br label %L.6
L.7:
	br label %L.3
L.5:
	%49 = bitcast %type.TypeNode* null to %type.TypeNode*
	store %type.TypeNode* %49, %type.TypeNode** %bt
	call void @lex_Error(i8 61)
	br label %L.3
L.3:
	br label %L.1
L.1:
	br label %L.12
L.12:
	%50 = load i8* %tok
	%51 = icmp eq i8 %50, 40
	%52 = xor i1 %51, true
	br i1 %52, label %L.13, label %L.14
L.14:
	%53 = call i8 @lex_Next()
	store i8 %53, i8* %tok
	%54 = load i8* %tok
	%55 = zext i8 %54 to i32
	switch i32 %55, label %L.15 [
		i32 3, label %L.17
	]
L.17:
	%56 = load %type.TypeNode** %t
	%57 = getelementptr %type.TypeNode* %56, i32 0, i32 4
	%58 = load %symb.SymbNode** %57
	%59 = bitcast %symb.SymbNode* %58 to %symb.SymbNode*
	%60 = getelementptr [64 x i8]* @lex_Ident
	%61 = bitcast [64 x i8]* %60 to [0 x i8]*
	%62 = call i8 @symb_IsUniqueLocal(%symb.SymbNode* %59, [0 x i8]* %61)
	%63 = icmp ne i8 %62, 0
	%64 = xor i1 %63, true
	br i1 %64, label %L.19, label %L.18
L.19:
	%65 = getelementptr [64 x i8]* @lex_Ident
	%66 = bitcast [64 x i8]* %65 to [0 x i8]*
	call void @lex_ErrorI(i8 17, [0 x i8]* %66)
	br label %L.18
L.18:
	%67 = getelementptr [64 x i8]* @lex_Ident
	%68 = bitcast [64 x i8]* %67 to [0 x i8]*
	%69 = call %symb.SymbNode* @symb_New(i8 4, [0 x i8]* %68, i8 2)
	%70 = bitcast %symb.SymbNode* %69 to %symb.SymbNode*
	store %symb.SymbNode* %70, %symb.SymbNode** %s
	%71 = load %symb.SymbNode** %ps
	%72 = icmp ne %symb.SymbNode* %71, null
	br i1 %72, label %L.21, label %L.22
L.21:
	%73 = load %symb.SymbNode** %s
	%74 = bitcast %symb.SymbNode* %73 to %symb.SymbNode*
	%75 = load %symb.SymbNode** %ps
	%76 = getelementptr %symb.SymbNode* %75, i32 0, i32 0
	store %symb.SymbNode* %74, %symb.SymbNode** %76
	br label %L.20
L.22:
	%77 = load %symb.SymbNode** %s
	%78 = bitcast %symb.SymbNode* %77 to %symb.SymbNode*
	%79 = load %type.TypeNode** %t
	%80 = getelementptr %type.TypeNode* %79, i32 0, i32 4
	store %symb.SymbNode* %78, %symb.SymbNode** %80
	br label %L.20
L.20:
	%81 = load %symb.SymbNode** %s
	%82 = bitcast %symb.SymbNode* %81 to %symb.SymbNode*
	store %symb.SymbNode* %82, %symb.SymbNode** %ps
	%83 = call i8 @lex_Next()
	store i8 %83, i8* %tok
	%84 = load i8* %tok
	%85 = bitcast %type.TypeNode* null to %type.TypeNode*
	%86 = call %type.TypeNode* @type_Def(i8 %84, %type.TypeNode* %85)
	%87 = bitcast %type.TypeNode* %86 to %type.TypeNode*
	store %type.TypeNode* %87, %type.TypeNode** %ft
	%88 = load %type.TypeNode** %ft
	%89 = bitcast %type.TypeNode* %88 to %type.TypeNode*
	%90 = load %symb.SymbNode** %s
	%91 = getelementptr %symb.SymbNode* %90, i32 0, i32 1
	store %type.TypeNode* %89, %type.TypeNode** %91
	%92 = load i8* @lex_Token
	store i8 %92, i8* %tok
	%93 = load i8* %tok
	%94 = icmp eq i8 %93, 3
	br i1 %94, label %L.24, label %L.23
L.24:
	%95 = load %type.TypeNode** %ft
	%96 = bitcast %type.TypeNode* %95 to %type.TypeNode*
	%97 = call %type.TypeNode* @type_TypeAttributes(%type.TypeNode* %96)
	%98 = bitcast %type.TypeNode* %97 to %type.TypeNode*
	%99 = load %symb.SymbNode** %s
	%100 = getelementptr %symb.SymbNode* %99, i32 0, i32 1
	store %type.TypeNode* %98, %type.TypeNode** %100
	%101 = load i8* @lex_Token
	store i8 %101, i8* %tok
	br label %L.23
L.23:
	%102 = load i8* %tok
	%103 = icmp eq i8 %102, 9
	br i1 %103, label %L.26, label %L.25
L.26:
	%104 = call i8 @lex_Next()
	store i8 %104, i8* %tok
	%105 = getelementptr [20 x i8]* @S.519
	%106 = bitcast [20 x i8]* %105 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %106)
	br label %L.25
L.25:
	br label %L.16
L.15:
	call void @lex_Error(i8 60)
	br label %L.16
L.16:
	%107 = call i8 @lex_Expect(i8 4)
	store i8 %107, i8* %tok
	br label %L.12
L.13:
	%108 = call i8 @lex_Expect(i8 37)
	store i8 %108, i8* %tok
	%109 = load %type.TypeNode** %t
	%110 = bitcast %type.TypeNode* %109 to %type.TypeNode*
	store %type.TypeNode* %110, %type.TypeNode** %rv.0
	br label %return
return:
	%111 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %111
}
define internal %type.TypeNode* @type_Array() nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%tok = alloca i8
	%t = alloca %type.TypeNode*
	%bt = alloca %type.TypeNode*
	%0 = call i8 @lex_Next()
	store i8 %0, i8* %tok
	%1 = call %type.TypeNode* @type_New(i8 5)
	%2 = bitcast %type.TypeNode* %1 to %type.TypeNode*
	store %type.TypeNode* %2, %type.TypeNode** %t
	%3 = load i8* %tok
	%4 = icmp ne i8 %3, 35
	br i1 %4, label %L.2, label %L.3
L.2:
	%tree = alloca %ast.AstNode*
	%5 = bitcast %type.TypeNode* null to %type.TypeNode*
	%6 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %5)
	%7 = bitcast %ast.AstNode* %6 to %ast.AstNode*
	store %ast.AstNode* %7, %ast.AstNode** %tree
	%8 = load %ast.AstNode** %tree
	%9 = icmp ne %ast.AstNode* %8, null
	br i1 %9, label %L.5, label %L.4
L.5:
	%10 = load %ast.AstNode** %tree
	%11 = getelementptr %ast.AstNode* %10, i32 0, i32 0
	%12 = load i8* %11
	%13 = zext i8 %12 to i32
	switch i32 %13, label %L.6 [
		i32 7, label %L.8
		i32 2, label %L.9
	]
L.8:
	%14 = load %ast.AstNode** %tree
	%15 = getelementptr %ast.AstNode* %14, i32 0, i32 10
	%16 = load i64* %15
	%17 = load %type.TypeNode** %t
	%18 = getelementptr %type.TypeNode* %17, i32 0, i32 7
	store i64 %16, i64* %18
	%19 = load %type.TypeNode** @type_wordtype
	%20 = bitcast %type.TypeNode* %19 to %type.TypeNode*
	%21 = load %type.TypeNode** %t
	%22 = getelementptr %type.TypeNode* %21, i32 0, i32 2
	store %type.TypeNode* %20, %type.TypeNode** %22
	br label %L.7
L.9:
	%23 = load %ast.AstNode** %tree
	%24 = getelementptr %ast.AstNode* %23, i32 0, i32 11
	%25 = load %type.TypeNode** %24
	%26 = getelementptr %type.TypeNode* %25, i32 0, i32 13
	%27 = load i8* %26
	%28 = zext i8 %27 to i32
	switch i32 %28, label %L.10 [
		i32 1, label %L.12
		i32 2, label %L.12
	]
L.12:
	%29 = load %ast.AstNode** %tree
	%30 = getelementptr %ast.AstNode* %29, i32 0, i32 11
	%31 = load %type.TypeNode** %30
	%32 = getelementptr %type.TypeNode* %31, i32 0, i32 7
	%33 = load i64* %32
	%34 = add i64 %33, 1
	%35 = load %type.TypeNode** %t
	%36 = getelementptr %type.TypeNode* %35, i32 0, i32 7
	store i64 %34, i64* %36
	%37 = load %ast.AstNode** %tree
	%38 = getelementptr %ast.AstNode* %37, i32 0, i32 11
	%39 = load %type.TypeNode** %38
	%40 = bitcast %type.TypeNode* %39 to %type.TypeNode*
	%41 = load %type.TypeNode** %t
	%42 = getelementptr %type.TypeNode* %41, i32 0, i32 2
	store %type.TypeNode* %40, %type.TypeNode** %42
	br label %L.11
L.10:
	call void @lex_Error(i8 21)
	br label %L.11
L.11:
	br label %L.7
L.6:
	call void @lex_Error(i8 21)
	br label %L.7
L.7:
	br label %L.4
L.4:
	br label %L.1
L.3:
	%43 = load %type.TypeNode** %t
	%44 = getelementptr %type.TypeNode* %43, i32 0, i32 18
	store i8 1, i8* %44
	br label %L.1
L.1:
	%45 = call i8 @lex_Expect(i8 35)
	store i8 %45, i8* %tok
	%46 = load i8* %tok
	%47 = bitcast %type.TypeNode* null to %type.TypeNode*
	%48 = call %type.TypeNode* @type_Def(i8 %46, %type.TypeNode* %47)
	%49 = bitcast %type.TypeNode* %48 to %type.TypeNode*
	store %type.TypeNode* %49, %type.TypeNode** %bt
	%50 = load %type.TypeNode** %bt
	%51 = bitcast %type.TypeNode* %50 to %type.TypeNode*
	%52 = load %type.TypeNode** %t
	%53 = getelementptr %type.TypeNode* %52, i32 0, i32 0
	store %type.TypeNode* %51, %type.TypeNode** %53
	%54 = load %type.TypeNode** %t
	%55 = bitcast %type.TypeNode* %54 to %type.TypeNode*
	store %type.TypeNode* %55, %type.TypeNode** %rv.0
	br label %return
return:
	%56 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %56
}
define internal %symb.SymbNode* @type_Name() nounwind {
L.0:
	%rv.0 = alloca %symb.SymbNode*
	%s = alloca %symb.SymbNode*
	%0 = getelementptr [64 x i8]* @lex_Ident
	%1 = bitcast [64 x i8]* %0 to [0 x i8]*
	%2 = call %symb.SymbNode* @symb_Find([0 x i8]* %1)
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %s
	%4 = load %symb.SymbNode** %s
	%5 = icmp ne %symb.SymbNode* %4, null
	br i1 %5, label %L.1, label %L.2
L.1:
	%6 = load %symb.SymbNode** %s
	%7 = getelementptr %symb.SymbNode* %6, i32 0, i32 12
	%8 = load i8* %7
	%9 = icmp ne i8 %8, 2
	br label %L.2
L.2:
	%10 = phi i1 [ false, %L.0 ], [ %9, %L.1 ]
	br i1 %10, label %L.4, label %L.3
L.4:
	call void @lex_Error(i8 23)
	br label %L.3
L.3:
	%11 = load %symb.SymbNode** %s
	%12 = bitcast %symb.SymbNode* %11 to %symb.SymbNode*
	store %symb.SymbNode* %12, %symb.SymbNode** %rv.0
	br label %return
return:
	%13 = load %symb.SymbNode** %rv.0
	ret %symb.SymbNode* %13
}
define internal void @type_DefProc(%symb.SymbNode* %procs.arg, %symb.SymbNode* %meths.arg) nounwind {
L.0:
	%procs = alloca %symb.SymbNode*
	%meths = alloca %symb.SymbNode*
	store %symb.SymbNode* %procs.arg, %symb.SymbNode** %procs
	store %symb.SymbNode* %meths.arg, %symb.SymbNode** %meths
	%s = alloca %symb.SymbNode*
	%prevs = alloca %symb.SymbNode*
	%t = alloca %type.TypeNode*
	%tl = alloca %type.TypeListEntry*
	%tlprev = alloca %type.TypeListEntry*
	%tok = alloca i8
	%0 = load i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8* %tok
	%2 = icmp eq i8 %1, 32
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	%4 = load %symb.SymbNode** %meths
	%5 = icmp ne %symb.SymbNode* %4, null
	br i1 %5, label %L.5, label %L.4
L.5:
	%6 = load %symb.SymbNode** %meths
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	%8 = load %symb.SymbNode** %procs
	%9 = getelementptr %symb.SymbNode* %8, i32 0, i32 3
	store %symb.SymbNode* %7, %symb.SymbNode** %9
	br label %L.4
L.4:
	%10 = load i8* %tok
	%11 = icmp ne i8 %10, 33
	br i1 %11, label %L.7, label %L.6
L.7:
	%12 = load %symb.SymbNode** %meths
	%13 = bitcast %symb.SymbNode* %12 to %symb.SymbNode*
	store %symb.SymbNode* %13, %symb.SymbNode** %prevs
	br label %L.8
L.8:
	%14 = load i8* %tok
	%15 = icmp eq i8 %14, 40
	br i1 %15, label %L.11, label %L.12
L.11:
	%16 = load %symb.SymbNode** %procs
	%17 = getelementptr %symb.SymbNode* %16, i32 0, i32 3
	%18 = load %symb.SymbNode** %17
	%19 = bitcast %symb.SymbNode* %18 to %symb.SymbNode*
	%20 = getelementptr [64 x i8]* @lex_Ident
	%21 = bitcast [64 x i8]* %20 to [0 x i8]*
	%22 = call i8 @symb_IsUniqueLocal(%symb.SymbNode* %19, [0 x i8]* %21)
	%23 = icmp ne i8 %22, 0
	%24 = xor i1 %23, true
	br i1 %24, label %L.14, label %L.13
L.14:
	%25 = getelementptr [64 x i8]* @lex_Ident
	%26 = bitcast [64 x i8]* %25 to [0 x i8]*
	call void @lex_ErrorI(i8 17, [0 x i8]* %26)
	br label %L.13
L.13:
	%27 = getelementptr [64 x i8]* @lex_Ident
	%28 = bitcast [64 x i8]* %27 to [0 x i8]*
	%29 = call %symb.SymbNode* @symb_New(i8 3, [0 x i8]* %28, i8 2)
	%30 = bitcast %symb.SymbNode* %29 to %symb.SymbNode*
	store %symb.SymbNode* %30, %symb.SymbNode** %s
	%31 = call i8 @lex_Next()
	store i8 %31, i8* %tok
	%32 = load %symb.SymbNode** %s
	%33 = getelementptr %symb.SymbNode* %32, i32 0, i32 16
	store i8 1, i8* %33
	%34 = load %symb.SymbNode** %s
	%35 = getelementptr %symb.SymbNode* %34, i32 0, i32 13
	store i8 0, i8* %35
	%36 = load i8* %tok
	%37 = icmp eq i8 %36, 3
	br i1 %37, label %L.16, label %L.17
L.16:
	%38 = call i8 @lex_Next()
	store i8 %38, i8* %tok
	%39 = load i8* %tok
	%40 = bitcast %type.TypeNode* null to %type.TypeNode*
	%41 = call %type.TypeNode* @type_Def(i8 %39, %type.TypeNode* %40)
	%42 = bitcast %type.TypeNode* %41 to %type.TypeNode*
	store %type.TypeNode* %42, %type.TypeNode** %t
	%43 = load %type.TypeNode** %t
	%44 = bitcast %type.TypeNode* %43 to %type.TypeNode*
	call void @type_Final(%type.TypeNode* %44)
	%45 = load %type.TypeNode** %t
	%46 = bitcast %type.TypeNode* %45 to %type.TypeNode*
	%47 = load %symb.SymbNode** %s
	%48 = getelementptr %symb.SymbNode* %47, i32 0, i32 1
	store %type.TypeNode* %46, %type.TypeNode** %48
	%49 = load i8* @lex_Token
	store i8 %49, i8* %tok
	br label %L.15
L.17:
	call void @lex_ErrorT(i8 14, i8 3)
	br label %L.15
L.15:
	%50 = load %symb.SymbNode** %procs
	%51 = getelementptr %symb.SymbNode* %50, i32 0, i32 3
	%52 = load %symb.SymbNode** %51
	%53 = icmp eq %symb.SymbNode* %52, null
	br i1 %53, label %L.19, label %L.18
L.19:
	%54 = load %symb.SymbNode** %s
	%55 = bitcast %symb.SymbNode* %54 to %symb.SymbNode*
	%56 = load %symb.SymbNode** %procs
	%57 = getelementptr %symb.SymbNode* %56, i32 0, i32 3
	store %symb.SymbNode* %55, %symb.SymbNode** %57
	br label %L.18
L.18:
	%58 = load %symb.SymbNode** %prevs
	%59 = icmp ne %symb.SymbNode* %58, null
	br i1 %59, label %L.21, label %L.20
L.21:
	%60 = load %symb.SymbNode** %s
	%61 = bitcast %symb.SymbNode* %60 to %symb.SymbNode*
	%62 = load %symb.SymbNode** %prevs
	%63 = getelementptr %symb.SymbNode* %62, i32 0, i32 0
	store %symb.SymbNode* %61, %symb.SymbNode** %63
	br label %L.20
L.20:
	%64 = load %symb.SymbNode** %s
	%65 = bitcast %symb.SymbNode* %64 to %symb.SymbNode*
	store %symb.SymbNode* %65, %symb.SymbNode** %prevs
	br label %L.10
L.12:
	call void @lex_Error(i8 15)
	br label %L.10
L.10:
	%66 = load i8* %tok
	%67 = icmp ne i8 %66, 5
	br i1 %67, label %L.9, label %L.22
L.22:
	%68 = call i8 @lex_Next()
	store i8 %68, i8* %tok
	br label %L.8
L.9:
	br label %L.6
L.6:
	%69 = call i8 @lex_Expect(i8 33)
	store i8 %69, i8* %tok
	br label %L.1
L.3:
	call void @lex_ErrorT(i8 14, i8 32)
	br label %L.1
L.1:
	%70 = load i8* %tok
	%71 = icmp eq i8 %70, 3
	br i1 %71, label %L.24, label %L.23
L.24:
	%72 = call i8 @lex_Next()
	store i8 %72, i8* %tok
	%73 = load i8* %tok
	%74 = icmp ne i8 %73, 3
	br i1 %74, label %L.26, label %L.25
L.26:
	%75 = bitcast %type.TypeListEntry* null to %type.TypeListEntry*
	store %type.TypeListEntry* %75, %type.TypeListEntry** %tlprev
	br label %L.27
L.27:
	%76 = load i8* %tok
	%77 = bitcast %type.TypeNode* null to %type.TypeNode*
	%78 = call %type.TypeNode* @type_Def(i8 %76, %type.TypeNode* %77)
	%79 = bitcast %type.TypeNode* %78 to %type.TypeNode*
	store %type.TypeNode* %79, %type.TypeNode** %t
	%80 = load %type.TypeNode** %t
	%81 = bitcast %type.TypeNode* %80 to %type.TypeNode*
	call void @type_Final(%type.TypeNode* %81)
	%82 = call [0 x i8]* @sys_zalloc(i32 8)
	%83 = bitcast [0 x i8]* %82 to %type.TypeListEntry*
	%84 = bitcast %type.TypeListEntry* %83 to %type.TypeListEntry*
	store %type.TypeListEntry* %84, %type.TypeListEntry** %tl
	%85 = load %type.TypeNode** %t
	%86 = bitcast %type.TypeNode* %85 to %type.TypeNode*
	%87 = load %type.TypeListEntry** %tl
	%88 = getelementptr %type.TypeListEntry* %87, i32 0, i32 1
	store %type.TypeNode* %86, %type.TypeNode** %88
	%89 = load %type.TypeListEntry** %tlprev
	%90 = icmp eq %type.TypeListEntry* %89, null
	br i1 %90, label %L.30, label %L.31
L.30:
	%91 = load %type.TypeListEntry** %tl
	%92 = bitcast %type.TypeListEntry* %91 to %type.TypeListEntry*
	%93 = load %symb.SymbNode** %procs
	%94 = getelementptr %symb.SymbNode* %93, i32 0, i32 4
	store %type.TypeListEntry* %92, %type.TypeListEntry** %94
	br label %L.29
L.31:
	%95 = load %type.TypeListEntry** %tl
	%96 = bitcast %type.TypeListEntry* %95 to %type.TypeListEntry*
	%97 = load %type.TypeListEntry** %tlprev
	%98 = getelementptr %type.TypeListEntry* %97, i32 0, i32 0
	store %type.TypeListEntry* %96, %type.TypeListEntry** %98
	br label %L.29
L.29:
	%99 = load %type.TypeListEntry** %tl
	%100 = bitcast %type.TypeListEntry* %99 to %type.TypeListEntry*
	store %type.TypeListEntry* %100, %type.TypeListEntry** %tlprev
	%101 = load i8* @lex_Token
	store i8 %101, i8* %tok
	%102 = load i8* %tok
	%103 = icmp ne i8 %102, 5
	br i1 %103, label %L.28, label %L.32
L.32:
	%104 = call i8 @lex_Next()
	store i8 %104, i8* %tok
	br label %L.27
L.28:
	%105 = load %symb.SymbNode** %procs
	%106 = getelementptr %symb.SymbNode* %105, i32 0, i32 4
	%107 = load %type.TypeListEntry** %106
	%108 = getelementptr %type.TypeListEntry* %107, i32 0, i32 1
	%109 = load %type.TypeNode** %108
	%110 = bitcast %type.TypeNode* %109 to %type.TypeNode*
	%111 = load %symb.SymbNode** %procs
	%112 = getelementptr %symb.SymbNode* %111, i32 0, i32 1
	store %type.TypeNode* %110, %type.TypeNode** %112
	br label %L.25
L.25:
	br label %L.23
L.23:
	br label %return
return:
	ret void
}
define internal %type.TypeNode* @type_Ref() nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%tok = alloca i8
	%t = alloca %type.TypeNode*
	%bs = alloca %symb.SymbNode*
	%0 = call i8 @lex_Next()
	store i8 %0, i8* %tok
	%1 = load i8* %tok
	%2 = icmp eq i8 %1, 40
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = getelementptr [64 x i8]* @lex_Ident
	%4 = bitcast [64 x i8]* %3 to [0 x i8]*
	%5 = call i8 @symb_IsAnon([0 x i8]* %4)
	%6 = icmp ne i8 %5, 0
	br i1 %6, label %L.5, label %L.6
L.5:
	%7 = call %type.TypeNode* @type_New(i8 7)
	%8 = bitcast %type.TypeNode* %7 to %type.TypeNode*
	store %type.TypeNode* %8, %type.TypeNode** %t
	%9 = getelementptr [64 x i8]* @lex_Ident
	%10 = bitcast [64 x i8]* %9 to [0 x i8]*
	%11 = call %symb.SymbNode* @symb_New(i8 5, [0 x i8]* %10, i8 2)
	%12 = bitcast %symb.SymbNode* %11 to %symb.SymbNode*
	store %symb.SymbNode* %12, %symb.SymbNode** %bs
	%13 = call i8 @lex_Next()
	store i8 %13, i8* %tok
	%14 = load %symb.SymbNode** %bs
	%15 = bitcast %symb.SymbNode* %14 to %symb.SymbNode*
	%16 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	call void @type_DefProc(%symb.SymbNode* %15, %symb.SymbNode* %16)
	%17 = load %symb.SymbNode** %bs
	%18 = bitcast %symb.SymbNode* %17 to %symb.SymbNode*
	%19 = load %type.TypeNode** %t
	%20 = getelementptr %type.TypeNode* %19, i32 0, i32 4
	store %symb.SymbNode* %18, %symb.SymbNode** %20
	br label %L.4
L.6:
	%21 = call %type.TypeNode* @type_New(i8 4)
	%22 = bitcast %type.TypeNode* %21 to %type.TypeNode*
	store %type.TypeNode* %22, %type.TypeNode** %t
	%23 = call %symb.SymbNode* @type_Name()
	%24 = bitcast %symb.SymbNode* %23 to %symb.SymbNode*
	store %symb.SymbNode* %24, %symb.SymbNode** %bs
	%25 = load %symb.SymbNode** %bs
	%26 = icmp ne %symb.SymbNode* %25, null
	br i1 %26, label %L.8, label %L.9
L.8:
	%27 = load %symb.SymbNode** %bs
	%28 = getelementptr %symb.SymbNode* %27, i32 0, i32 1
	%29 = load %type.TypeNode** %28
	%30 = icmp ne %type.TypeNode* %29, null
	br i1 %30, label %L.11, label %L.12
L.11:
	%31 = load %symb.SymbNode** %bs
	%32 = getelementptr %symb.SymbNode* %31, i32 0, i32 1
	%33 = load %type.TypeNode** %32
	%34 = bitcast %type.TypeNode* %33 to %type.TypeNode*
	%35 = load %type.TypeNode** %t
	%36 = getelementptr %type.TypeNode* %35, i32 0, i32 0
	store %type.TypeNode* %34, %type.TypeNode** %36
	br label %L.10
L.12:
	%37 = load %symb.SymbNode** %bs
	%38 = bitcast %symb.SymbNode* %37 to %symb.SymbNode*
	%39 = load %type.TypeNode** %t
	%40 = bitcast %type.TypeNode* %39 to %type.TypeNode*
	call void @type_FwdAdd(%symb.SymbNode* %38, %type.TypeNode* %40)
	br label %L.10
L.10:
	br label %L.7
L.9:
	%41 = getelementptr [64 x i8]* @lex_Ident
	%42 = bitcast [64 x i8]* %41 to [0 x i8]*
	%43 = call %symb.SymbNode* @symb_New(i8 2, [0 x i8]* %42, i8 0)
	%44 = bitcast %symb.SymbNode* %43 to %symb.SymbNode*
	store %symb.SymbNode* %44, %symb.SymbNode** %bs
	%45 = load %symb.SymbNode** %bs
	%46 = bitcast %symb.SymbNode* %45 to %symb.SymbNode*
	%47 = load %type.TypeNode** %t
	%48 = bitcast %type.TypeNode* %47 to %type.TypeNode*
	call void @type_FwdAdd(%symb.SymbNode* %46, %type.TypeNode* %48)
	br label %L.7
L.7:
	%49 = call i8 @lex_Next()
	store i8 %49, i8* %tok
	br label %L.4
L.4:
	br label %L.1
L.3:
	%50 = call %type.TypeNode* @type_New(i8 4)
	%51 = bitcast %type.TypeNode* %50 to %type.TypeNode*
	store %type.TypeNode* %51, %type.TypeNode** %t
	%52 = load i8* %tok
	%53 = bitcast %type.TypeNode* null to %type.TypeNode*
	%54 = call %type.TypeNode* @type_Def(i8 %52, %type.TypeNode* %53)
	%55 = bitcast %type.TypeNode* %54 to %type.TypeNode*
	%56 = load %type.TypeNode** %t
	%57 = getelementptr %type.TypeNode* %56, i32 0, i32 0
	store %type.TypeNode* %55, %type.TypeNode** %57
	br label %L.1
L.1:
	%58 = load %type.TypeNode** %t
	%59 = bitcast %type.TypeNode* %58 to %type.TypeNode*
	store %type.TypeNode* %59, %type.TypeNode** %rv.0
	br label %return
return:
	%60 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %60
}
define internal %type.TypeNode* @type_Def(i8 zeroext %tok.arg, %type.TypeNode* %bt.arg) nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%tok = alloca i8
	%bt = alloca %type.TypeNode*
	store i8 %tok.arg, i8* %tok
	store %type.TypeNode* %bt.arg, %type.TypeNode** %bt
	%t = alloca %type.TypeNode*
	%s = alloca %symb.SymbNode*
	%vlo = alloca %ast.AstNode*
	%vhi = alloca %ast.AstNode*
	%0 = load %type.TypeNode** @type_unkntype
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	store %type.TypeNode* %1, %type.TypeNode** %t
	%2 = load i8* %tok
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 38, label %L.3
		i32 14, label %L.3
		i32 15, label %L.3
		i32 40, label %L.4
		i32 7, label %L.5
		i32 32, label %L.6
		i32 36, label %L.7
		i32 34, label %L.8
	]
L.3:
	%4 = bitcast %type.TypeNode* null to %type.TypeNode*
	%5 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %4)
	%6 = bitcast %ast.AstNode* %5 to %ast.AstNode*
	store %ast.AstNode* %6, %ast.AstNode** %vlo
	%7 = load i8* @lex_Token
	%8 = icmp eq i8 %7, 6
	br i1 %8, label %L.10, label %L.11
L.10:
	%9 = call i8 @lex_Next()
	store i8 %9, i8* %tok
	%10 = bitcast %type.TypeNode* null to %type.TypeNode*
	%11 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %10)
	%12 = bitcast %ast.AstNode* %11 to %ast.AstNode*
	store %ast.AstNode* %12, %ast.AstNode** %vhi
	%13 = load %ast.AstNode** %vlo
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 0
	%15 = load i8* %14
	%16 = icmp eq i8 %15, 7
	br i1 %16, label %L.12, label %L.13
L.12:
	%17 = load %ast.AstNode** %vhi
	%18 = getelementptr %ast.AstNode* %17, i32 0, i32 0
	%19 = load i8* %18
	%20 = icmp eq i8 %19, 7
	br label %L.13
L.13:
	%21 = phi i1 [ false, %L.10 ], [ %20, %L.12 ]
	br i1 %21, label %L.15, label %L.16
L.15:
	%22 = load %ast.AstNode** %vlo
	%23 = getelementptr %ast.AstNode* %22, i32 0, i32 1
	%24 = load i8* %23
	%25 = zext i8 %24 to i32
	switch i32 %25, label %L.17 [
		i32 2, label %L.19
		i32 3, label %L.19
	]
L.19:
	%26 = load %ast.AstNode** %vlo
	%27 = getelementptr %ast.AstNode* %26, i32 0, i32 1
	%28 = load i8* %27
	%29 = call %type.TypeNode* @type_New(i8 %28)
	%30 = bitcast %type.TypeNode* %29 to %type.TypeNode*
	store %type.TypeNode* %30, %type.TypeNode** %t
	%31 = load %ast.AstNode** %vlo
	%32 = getelementptr %ast.AstNode* %31, i32 0, i32 10
	%33 = load i64* %32
	%34 = load %type.TypeNode** %t
	%35 = getelementptr %type.TypeNode* %34, i32 0, i32 6
	store i64 %33, i64* %35
	%36 = load %ast.AstNode** %vhi
	%37 = getelementptr %ast.AstNode* %36, i32 0, i32 10
	%38 = load i64* %37
	%39 = load %type.TypeNode** %t
	%40 = getelementptr %type.TypeNode* %39, i32 0, i32 7
	store i64 %38, i64* %40
	br label %L.18
L.17:
	call void @lex_Error(i8 28)
	br label %L.18
L.18:
	br label %L.14
L.16:
	call void @lex_Error(i8 68)
	br label %L.14
L.14:
	br label %L.9
L.11:
	call void @lex_ErrorT(i8 14, i8 6)
	br label %L.9
L.9:
	br label %L.2
L.4:
	%41 = call %symb.SymbNode* @type_Name()
	%42 = bitcast %symb.SymbNode* %41 to %symb.SymbNode*
	store %symb.SymbNode* %42, %symb.SymbNode** %s
	%43 = load %symb.SymbNode** %s
	%44 = icmp ne %symb.SymbNode* %43, null
	br i1 %44, label %L.21, label %L.22
L.21:
	%45 = load %symb.SymbNode** %s
	%46 = getelementptr %symb.SymbNode* %45, i32 0, i32 1
	%47 = load %type.TypeNode** %46
	%48 = bitcast %type.TypeNode* %47 to %type.TypeNode*
	store %type.TypeNode* %48, %type.TypeNode** %t
	br label %L.20
L.22:
	%49 = getelementptr [64 x i8]* @lex_Ident
	%50 = bitcast [64 x i8]* %49 to [0 x i8]*
	call void @lex_ErrorI(i8 16, [0 x i8]* %50)
	br label %L.20
L.20:
	%51 = call i8 @lex_Next()
	store i8 %51, i8* %tok
	br label %L.2
L.5:
	%52 = call %type.TypeNode* @type_Ref()
	%53 = bitcast %type.TypeNode* %52 to %type.TypeNode*
	store %type.TypeNode* %53, %type.TypeNode** %t
	br label %L.2
L.6:
	%54 = load %type.TypeNode** %bt
	%55 = bitcast %type.TypeNode* %54 to %type.TypeNode*
	%56 = call %type.TypeNode* @type_Enum(%type.TypeNode* %55)
	%57 = bitcast %type.TypeNode* %56 to %type.TypeNode*
	store %type.TypeNode* %57, %type.TypeNode** %t
	br label %L.2
L.7:
	%58 = load %type.TypeNode** %bt
	%59 = bitcast %type.TypeNode* %58 to %type.TypeNode*
	%60 = call %type.TypeNode* @type_Record(%type.TypeNode* %59)
	%61 = bitcast %type.TypeNode* %60 to %type.TypeNode*
	store %type.TypeNode* %61, %type.TypeNode** %t
	br label %L.2
L.8:
	%62 = call %type.TypeNode* @type_Array()
	%63 = bitcast %type.TypeNode* %62 to %type.TypeNode*
	store %type.TypeNode* %63, %type.TypeNode** %t
	br label %L.2
L.1:
	call void @lex_Error(i8 24)
	br label %L.2
L.2:
	%64 = load %type.TypeNode** %t
	%65 = bitcast %type.TypeNode* %64 to %type.TypeNode*
	store %type.TypeNode* %65, %type.TypeNode** %rv.0
	br label %return
return:
	%66 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %66
}
define internal %type.TypeNode* @type_NewBuiltin(i8 zeroext %kind.arg, [0 x i8]* %name.arg, i32 %size.arg) nounwind {
L.0:
	%rv.0 = alloca %type.TypeNode*
	%kind = alloca i8
	%name = alloca [0 x i8]*
	%size = alloca i32
	store i8 %kind.arg, i8* %kind
	store [0 x i8]* %name.arg, [0 x i8]** %name
	store i32 %size.arg, i32* %size
	%t = alloca %type.TypeNode*
	%s = alloca %symb.SymbNode*
	%levelsave = alloca i8
	%0 = load i8* %kind
	%1 = call %type.TypeNode* @type_New(i8 %0)
	%2 = bitcast %type.TypeNode* %1 to %type.TypeNode*
	store %type.TypeNode* %2, %type.TypeNode** %t
	%3 = load i32* %size
	%4 = load %type.TypeNode** %t
	%5 = getelementptr %type.TypeNode* %4, i32 0, i32 8
	store i32 %3, i32* %5
	%6 = load i8* %kind
	%7 = zext i8 %6 to i32
	switch i32 %7, label %L.1 [
		i32 1, label %L.3
		i32 2, label %L.3
		i32 3, label %L.4
	]
L.3:
	%8 = load %type.TypeNode** %t
	%9 = getelementptr %type.TypeNode* %8, i32 0, i32 6
	store i64 0, i64* %9
	%10 = load i32* %size
	%11 = sub i32 %10, 1
	%12 = zext i32 %11 to i64
	%13 = shl i64 1, %12
	%14 = sub i64 %13, 1
	%15 = shl i64 %14, 1
	%16 = or i64 %15, 1
	%17 = load %type.TypeNode** %t
	%18 = getelementptr %type.TypeNode* %17, i32 0, i32 7
	store i64 %16, i64* %18
	br label %L.2
L.4:
	%19 = load i32* %size
	%20 = sub i32 %19, 1
	%21 = zext i32 %20 to i64
	%22 = shl i64 1, %21
	%23 = sub i64 %22, 1
	%24 = load %type.TypeNode** %t
	%25 = getelementptr %type.TypeNode* %24, i32 0, i32 7
	store i64 %23, i64* %25
	%26 = load %type.TypeNode** %t
	%27 = getelementptr %type.TypeNode* %26, i32 0, i32 7
	%28 = load i64* %27
	%29 = xor i64 %28, -1
	%30 = load %type.TypeNode** %t
	%31 = getelementptr %type.TypeNode* %30, i32 0, i32 6
	store i64 %29, i64* %31
	br label %L.2
L.1:
	br label %L.2
L.2:
	%32 = load %type.TypeNode** %t
	%33 = bitcast %type.TypeNode* %32 to %type.TypeNode*
	call void @type_Final(%type.TypeNode* %33)
	%34 = load i8* @symb_level
	store i8 %34, i8* %levelsave
	store i8 0, i8* @symb_level
	%35 = load [0 x i8]** %name
	%36 = bitcast [0 x i8]* %35 to [0 x i8]*
	%37 = call %symb.SymbNode* @symb_New(i8 2, [0 x i8]* %36, i8 0)
	%38 = bitcast %symb.SymbNode* %37 to %symb.SymbNode*
	store %symb.SymbNode* %38, %symb.SymbNode** %s
	%39 = load i8* %levelsave
	store i8 %39, i8* @symb_level
	%40 = load %type.TypeNode** %t
	%41 = bitcast %type.TypeNode* %40 to %type.TypeNode*
	%42 = load %symb.SymbNode** %s
	%43 = getelementptr %symb.SymbNode* %42, i32 0, i32 1
	store %type.TypeNode* %41, %type.TypeNode** %43
	%44 = load %symb.SymbNode** %s
	%45 = bitcast %symb.SymbNode* %44 to %symb.SymbNode*
	%46 = load %type.TypeNode** %t
	%47 = getelementptr %type.TypeNode* %46, i32 0, i32 3
	store %symb.SymbNode* %45, %symb.SymbNode** %47
	%48 = load %type.TypeNode** %t
	%49 = bitcast %type.TypeNode* %48 to %type.TypeNode*
	store %type.TypeNode* %49, %type.TypeNode** %rv.0
	br label %return
return:
	%50 = load %type.TypeNode** %rv.0
	ret %type.TypeNode* %50
}
@S.521 = internal constant [1 x i8] c"\00";
@S.522 = internal constant [7 x i8] c"memory\00";
@S.523 = internal constant [7 x i8] c"packed\00";
@type_packedstr = internal constant [3 x [0 x i8]*] [ [0 x i8] * bitcast( [1 x i8]* getelementptr( [1 x i8]* @S.521 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.522 )  to [0 x i8]* ), [0 x i8] * bitcast( [7 x i8]* getelementptr( [7 x i8]* @S.523 )  to [0 x i8]* ) ], align 4
@S.525 = internal constant [1 x i8] c"\00";
@S.526 = internal constant [4 x i8] c"msb\00";
@S.527 = internal constant [4 x i8] c"lsb\00";
@type_bitorderstr = internal constant [3 x [0 x i8]*] [ [0 x i8] * bitcast( [1 x i8]* getelementptr( [1 x i8]* @S.525 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.526 )  to [0 x i8]* ), [0 x i8] * bitcast( [4 x i8]* getelementptr( [4 x i8]* @S.527 )  to [0 x i8]* ) ], align 4
@S.529 = internal constant [1 x i8] c"\00";
@S.530 = internal constant [3 x i8] c"be\00";
@S.531 = internal constant [3 x i8] c"le\00";
@type_memorderstr = internal constant [3 x [0 x i8]*] [ [0 x i8] * bitcast( [1 x i8]* getelementptr( [1 x i8]* @S.529 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.530 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.531 )  to [0 x i8]* ) ], align 4
@S.533 = internal constant [3 x i8] c"RW\00";
@S.534 = internal constant [3 x i8] c"RO\00";
@S.535 = internal constant [3 x i8] c"WO\00";
@type_accessstr = internal constant [3 x [0 x i8]*] [ [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.533 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.534 )  to [0 x i8]* ), [0 x i8] * bitcast( [3 x i8]* getelementptr( [3 x i8]* @S.535 )  to [0 x i8]* ) ], align 4
@type_blanks = internal constant [65 x i8] c"                                                                \00", align 1
@S.537 = internal constant [3 x i8] c"..\00"@S.538 = internal constant [3 x i8] c"..\00"@S.539 = internal constant [3 x i8] c", \00"@S.540 = internal constant [3 x i8] c"{\0A\00"@S.541 = internal constant [3 x i8] c" (\00"@S.542 = internal constant [4 x i8] c"): \00"@S.543 = internal constant [3 x i8] c"@_\00"@S.544 = internal constant [10 x i8] c"*UNKNOWN*\00"@S.545 = internal constant [7 x i8] c" size=\00"@S.546 = internal constant [7 x i8] c" attr=\00"@S.547 = internal constant [13 x i8] c"\0A\09methods:\0A\09\00"define internal void @type_Dump2(%type.TypeNode* %t.arg, i32 %indent.arg, i8 zeroext %full.arg) nounwind {
L.0:
	%t = alloca %type.TypeNode*
	%indent = alloca i32
	%full = alloca i8
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store i32 %indent.arg, i32* %indent
	store i8 %full.arg, i8* %full
	%s = alloca %symb.SymbNode*
	%offs = alloca i16
	%0 = load %type.TypeNode** %t
	%1 = icmp ne %type.TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %type.TypeNode** %t
	%3 = getelementptr %type.TypeNode* %2, i32 0, i32 3
	%4 = load %symb.SymbNode** %3
	%5 = icmp ne %symb.SymbNode* %4, null
	br i1 %5, label %L.3, label %L.4
L.3:
	%6 = load i8* %full
	%7 = icmp ne i8 %6, 0
	%8 = xor i1 %7, true
	br label %L.4
L.4:
	%9 = phi i1 [ false, %L.2 ], [ %8, %L.3 ]
	br i1 %9, label %L.6, label %L.7
L.6:
	%10 = load %type.TypeNode** %t
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 3
	%12 = load %symb.SymbNode** %11
	%13 = getelementptr %symb.SymbNode* %12, i32 0, i32 19
	%14 = getelementptr [0 x i8]* %13
	%15 = bitcast [0 x i8]* %14 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %15)
	br label %L.5
L.7:
	%16 = load %type.TypeNode** %t
	%17 = getelementptr %type.TypeNode* %16, i32 0, i32 13
	%18 = load i8* %17
	%19 = zext i8 %18 to i32
	switch i32 %19, label %L.8 [
		i32 2, label %L.10
		i32 3, label %L.11
		i32 1, label %L.12
		i32 6, label %L.13
		i32 5, label %L.14
		i32 4, label %L.15
		i32 7, label %L.16
	]
L.10:
	%20 = load %type.TypeNode** %t
	%21 = getelementptr %type.TypeNode* %20, i32 0, i32 6
	%22 = load i64* %21
	call void @out_uint64(i32 2, i64 %22)
	%23 = getelementptr [3 x i8]* @S.537
	%24 = bitcast [3 x i8]* %23 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %24)
	%25 = load %type.TypeNode** %t
	%26 = getelementptr %type.TypeNode* %25, i32 0, i32 7
	%27 = load i64* %26
	call void @out_uint64(i32 2, i64 %27)
	br label %L.9
L.11:
	%28 = load %type.TypeNode** %t
	%29 = getelementptr %type.TypeNode* %28, i32 0, i32 6
	%30 = load i64* %29
	call void @out_int64(i32 2, i64 %30)
	%31 = getelementptr [3 x i8]* @S.538
	%32 = bitcast [3 x i8]* %31 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %32)
	%33 = load %type.TypeNode** %t
	%34 = getelementptr %type.TypeNode* %33, i32 0, i32 7
	%35 = load i64* %34
	call void @out_int64(i32 2, i64 %35)
	br label %L.9
L.12:
	call void @out_chr(i32 2, i8 40)
	%36 = load %type.TypeNode** %t
	%37 = getelementptr %type.TypeNode* %36, i32 0, i32 4
	%38 = load %symb.SymbNode** %37
	%39 = bitcast %symb.SymbNode* %38 to %symb.SymbNode*
	store %symb.SymbNode* %39, %symb.SymbNode** %s
	br label %L.17
L.17:
	%40 = load %symb.SymbNode** %s
	%41 = icmp ne %symb.SymbNode* %40, null
	%42 = xor i1 %41, true
	br i1 %42, label %L.18, label %L.19
L.19:
	%43 = load %symb.SymbNode** %s
	%44 = getelementptr %symb.SymbNode* %43, i32 0, i32 19
	%45 = getelementptr [0 x i8]* %44
	%46 = bitcast [0 x i8]* %45 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %46)
	call void @out_chr(i32 2, i8 61)
	%47 = load %symb.SymbNode** %s
	%48 = getelementptr %symb.SymbNode* %47, i32 0, i32 7
	%49 = load i64* %48
	%50 = trunc i64 %49 to i32
	call void @out_uint32(i32 2, i32 %50)
	%51 = load %symb.SymbNode** %s
	%52 = getelementptr %symb.SymbNode* %51, i32 0, i32 0
	%53 = load %symb.SymbNode** %52
	%54 = bitcast %symb.SymbNode* %53 to %symb.SymbNode*
	store %symb.SymbNode* %54, %symb.SymbNode** %s
	%55 = load %symb.SymbNode** %s
	%56 = icmp eq %symb.SymbNode* %55, null
	br i1 %56, label %L.18, label %L.20
L.20:
	%57 = getelementptr [3 x i8]* @S.539
	%58 = bitcast [3 x i8]* %57 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %58)
	br label %L.17
L.18:
	call void @out_chr(i32 2, i8 41)
	br label %L.9
L.13:
	%59 = getelementptr [3 x i8]* @S.540
	%60 = bitcast [3 x i8]* %59 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %60)
	store i16 0, i16* %offs
	%61 = load %type.TypeNode** %t
	%62 = getelementptr %type.TypeNode* %61, i32 0, i32 4
	%63 = load %symb.SymbNode** %62
	%64 = bitcast %symb.SymbNode* %63 to %symb.SymbNode*
	store %symb.SymbNode* %64, %symb.SymbNode** %s
	br label %L.21
L.21:
	%65 = load %symb.SymbNode** %s
	%66 = icmp ne %symb.SymbNode* %65, null
	%67 = xor i1 %66, true
	br i1 %67, label %L.22, label %L.23
L.23:
	%68 = getelementptr [65 x i8]* @type_blanks
	%69 = bitcast [65 x i8]* %68 to [0 x i8]*
	%70 = load i32* %indent
	%71 = add i32 %70, 2
	call void @out_strn(i32 2, [0 x i8]* %69, i32 %71)
	%72 = load %symb.SymbNode** %s
	%73 = getelementptr %symb.SymbNode* %72, i32 0, i32 19
	%74 = getelementptr [0 x i8]* %73
	%75 = bitcast [0 x i8]* %74 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %75)
	%76 = getelementptr [3 x i8]* @S.541
	%77 = bitcast [3 x i8]* %76 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %77)
	%78 = load i16* %offs
	%79 = zext i16 %78 to i32
	call void @out_uint(i32 2, i32 %79)
	%80 = getelementptr [4 x i8]* @S.542
	%81 = bitcast [4 x i8]* %80 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %81)
	%82 = load %symb.SymbNode** %s
	%83 = getelementptr %symb.SymbNode* %82, i32 0, i32 1
	%84 = load %type.TypeNode** %83
	%85 = bitcast %type.TypeNode* %84 to %type.TypeNode*
	%86 = load i32* %indent
	%87 = add i32 %86, 2
	%88 = load i8* %full
	call void @type_Dump2(%type.TypeNode* %85, i32 %87, i8 %88)
	%89 = load %type.TypeNode** %t
	%90 = getelementptr %type.TypeNode* %89, i32 0, i32 14
	%91 = load i8* %90
	%92 = icmp eq i8 %91, 2
	br i1 %92, label %L.25, label %L.26
L.25:
	%93 = load i16* %offs
	%94 = load %symb.SymbNode** %s
	%95 = getelementptr %symb.SymbNode* %94, i32 0, i32 1
	%96 = load %type.TypeNode** %95
	%97 = getelementptr %type.TypeNode* %96, i32 0, i32 8
	%98 = load i32* %97
	%99 = trunc i32 %98 to i16
	%100 = add i16 %93, %99
	store i16 %100, i16* %offs
	br label %L.24
L.26:
	%101 = load i16* %offs
	%102 = load %symb.SymbNode** %s
	%103 = getelementptr %symb.SymbNode* %102, i32 0, i32 1
	%104 = load %type.TypeNode** %103
	%105 = getelementptr %type.TypeNode* %104, i32 0, i32 9
	%106 = load i32* %105
	%107 = load %target.TargetT** @target_Target
	%108 = getelementptr %target.TargetT* %107, i32 0, i32 3
	%109 = load i8* %108
	%110 = zext i8 %109 to i32
	%111 = udiv i32 %106, %110
	%112 = trunc i32 %111 to i16
	%113 = add i16 %101, %112
	store i16 %113, i16* %offs
	br label %L.24
L.24:
	call void @out_nl(i32 2)
	%114 = load %symb.SymbNode** %s
	%115 = getelementptr %symb.SymbNode* %114, i32 0, i32 0
	%116 = load %symb.SymbNode** %115
	%117 = bitcast %symb.SymbNode* %116 to %symb.SymbNode*
	store %symb.SymbNode* %117, %symb.SymbNode** %s
	br label %L.21
L.22:
	call void @out_chr(i32 2, i8 125)
	br label %L.9
L.14:
	call void @out_chr(i32 2, i8 91)
	%118 = load %type.TypeNode** %t
	%119 = getelementptr %type.TypeNode* %118, i32 0, i32 18
	%120 = load i8* %119
	%121 = icmp ne i8 %120, 0
	br i1 %121, label %L.28, label %L.29
L.28:
	call void @out_chr(i32 2, i8 42)
	br label %L.27
L.29:
	%122 = load %type.TypeNode** %t
	%123 = getelementptr %type.TypeNode* %122, i32 0, i32 7
	%124 = load i64* %123
	%125 = trunc i64 %124 to i32
	call void @out_uint32(i32 2, i32 %125)
	br label %L.27
L.27:
	call void @out_chr(i32 2, i8 93)
	%126 = load %type.TypeNode** %t
	%127 = getelementptr %type.TypeNode* %126, i32 0, i32 0
	%128 = load %type.TypeNode** %127
	%129 = bitcast %type.TypeNode* %128 to %type.TypeNode*
	%130 = load i32* %indent
	%131 = load i8* %full
	call void @type_Dump2(%type.TypeNode* %129, i32 %130, i8 %131)
	br label %L.9
L.15:
	call void @out_chr(i32 2, i8 64)
	%132 = load %type.TypeNode** %t
	%133 = getelementptr %type.TypeNode* %132, i32 0, i32 0
	%134 = load %type.TypeNode** %133
	%135 = icmp ne %type.TypeNode* %134, null
	br i1 %135, label %L.30, label %L.31
L.30:
	%136 = load %type.TypeNode** %t
	%137 = getelementptr %type.TypeNode* %136, i32 0, i32 0
	%138 = load %type.TypeNode** %137
	%139 = getelementptr %type.TypeNode* %138, i32 0, i32 3
	%140 = load %symb.SymbNode** %139
	%141 = icmp ne %symb.SymbNode* %140, null
	br label %L.31
L.31:
	%142 = phi i1 [ false, %L.15 ], [ %141, %L.30 ]
	br i1 %142, label %L.33, label %L.34
L.33:
	%143 = load %type.TypeNode** %t
	%144 = getelementptr %type.TypeNode* %143, i32 0, i32 0
	%145 = load %type.TypeNode** %144
	%146 = getelementptr %type.TypeNode* %145, i32 0, i32 3
	%147 = load %symb.SymbNode** %146
	%148 = getelementptr %symb.SymbNode* %147, i32 0, i32 19
	%149 = getelementptr [0 x i8]* %148
	%150 = bitcast [0 x i8]* %149 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %150)
	br label %L.32
L.34:
	%151 = load %type.TypeNode** %t
	%152 = getelementptr %type.TypeNode* %151, i32 0, i32 0
	%153 = load %type.TypeNode** %152
	%154 = bitcast %type.TypeNode* %153 to %type.TypeNode*
	%155 = load i32* %indent
	%156 = load i8* %full
	call void @type_Dump2(%type.TypeNode* %154, i32 %155, i8 %156)
	br label %L.32
L.32:
	br label %L.9
L.16:
	%157 = getelementptr [3 x i8]* @S.543
	%158 = bitcast [3 x i8]* %157 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %158)
	%159 = load %type.TypeNode** %t
	%160 = getelementptr %type.TypeNode* %159, i32 0, i32 4
	%161 = load %symb.SymbNode** %160
	%162 = getelementptr %symb.SymbNode* %161, i32 0, i32 3
	%163 = load %symb.SymbNode** %162
	%164 = bitcast %symb.SymbNode* %163 to %symb.SymbNode*
	call void @symb_DumpFormals(%symb.SymbNode* %164)
	br label %L.9
L.8:
	%165 = getelementptr [10 x i8]* @S.544
	%166 = bitcast [10 x i8]* %165 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %166)
	br label %L.9
L.9:
	%167 = getelementptr [7 x i8]* @S.545
	%168 = bitcast [7 x i8]* %167 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %168)
	%169 = load %type.TypeNode** %t
	%170 = getelementptr %type.TypeNode* %169, i32 0, i32 8
	%171 = load i32* %170
	call void @out_uint(i32 2, i32 %171)
	call void @out_chr(i32 2, i8 58)
	%172 = load %type.TypeNode** %t
	%173 = getelementptr %type.TypeNode* %172, i32 0, i32 9
	%174 = load i32* %173
	call void @out_uint(i32 2, i32 %174)
	call void @out_chr(i32 2, i8 58)
	%175 = load %type.TypeNode** %t
	%176 = getelementptr %type.TypeNode* %175, i32 0, i32 10
	%177 = load i32* %176
	call void @out_uint(i32 2, i32 %177)
	%178 = getelementptr [7 x i8]* @S.546
	%179 = bitcast [7 x i8]* %178 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %179)
	%180 = load %type.TypeNode** %t
	%181 = getelementptr %type.TypeNode* %180, i32 0, i32 14
	%182 = load i8* %181
	%183 = zext i8 %182 to i32
	%184 = getelementptr [3 x [0 x i8]*]* @type_packedstr, i32 0, i32 %183
	%185 = load [0 x i8]** %184
	%186 = bitcast [0 x i8]* %185 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %186)
	call void @out_chr(i32 2, i8 58)
	%187 = load %type.TypeNode** %t
	%188 = getelementptr %type.TypeNode* %187, i32 0, i32 16
	%189 = load i8* %188
	%190 = load %target.TargetT** @target_Target
	%191 = getelementptr %target.TargetT* %190, i32 0, i32 2
	%192 = load i8* %191
	%193 = icmp ne i8 %189, %192
	br i1 %193, label %L.36, label %L.35
L.36:
	%194 = load %type.TypeNode** %t
	%195 = getelementptr %type.TypeNode* %194, i32 0, i32 16
	%196 = load i8* %195
	%197 = zext i8 %196 to i32
	%198 = getelementptr [3 x [0 x i8]*]* @type_memorderstr, i32 0, i32 %197
	%199 = load [0 x i8]** %198
	%200 = bitcast [0 x i8]* %199 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %200)
	br label %L.35
L.35:
	call void @out_chr(i32 2, i8 58)
	%201 = load %type.TypeNode** %t
	%202 = getelementptr %type.TypeNode* %201, i32 0, i32 15
	%203 = load i8* %202
	%204 = load %target.TargetT** @target_Target
	%205 = getelementptr %target.TargetT* %204, i32 0, i32 2
	%206 = load i8* %205
	%207 = icmp ne i8 %203, %206
	br i1 %207, label %L.38, label %L.37
L.38:
	%208 = load %type.TypeNode** %t
	%209 = getelementptr %type.TypeNode* %208, i32 0, i32 15
	%210 = load i8* %209
	%211 = zext i8 %210 to i32
	%212 = getelementptr [3 x [0 x i8]*]* @type_bitorderstr, i32 0, i32 %211
	%213 = load [0 x i8]** %212
	%214 = bitcast [0 x i8]* %213 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %214)
	br label %L.37
L.37:
	call void @out_chr(i32 2, i8 58)
	%215 = load %type.TypeNode** %t
	%216 = getelementptr %type.TypeNode* %215, i32 0, i32 17
	%217 = load i8* %216
	%218 = icmp ne i8 %217, 0
	br i1 %218, label %L.40, label %L.39
L.40:
	%219 = load %type.TypeNode** %t
	%220 = getelementptr %type.TypeNode* %219, i32 0, i32 17
	%221 = load i8* %220
	%222 = zext i8 %221 to i32
	%223 = getelementptr [3 x [0 x i8]*]* @type_accessstr, i32 0, i32 %222
	%224 = load [0 x i8]** %223
	%225 = bitcast [0 x i8]* %224 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %225)
	br label %L.39
L.39:
	call void @out_chr(i32 2, i8 58)
	%226 = load %type.TypeNode** %t
	%227 = getelementptr %type.TypeNode* %226, i32 0, i32 19
	%228 = load i8* %227
	%229 = icmp ne i8 %228, 0
	br i1 %229, label %L.42, label %L.41
L.42:
	call void @out_chr(i32 2, i8 73)
	br label %L.41
L.41:
	%230 = load %type.TypeNode** %t
	%231 = getelementptr %type.TypeNode* %230, i32 0, i32 20
	%232 = load i8* %231
	%233 = icmp ne i8 %232, 0
	br i1 %233, label %L.44, label %L.43
L.44:
	call void @out_chr(i32 2, i8 79)
	br label %L.43
L.43:
	%234 = load %type.TypeNode** %t
	%235 = getelementptr %type.TypeNode* %234, i32 0, i32 22
	store i8 1, i8* %235
	%236 = load %type.TypeNode** %t
	%237 = getelementptr %type.TypeNode* %236, i32 0, i32 5
	%238 = load %symb.SymbNode** %237
	%239 = icmp ne %symb.SymbNode* %238, null
	br i1 %239, label %L.46, label %L.45
L.46:
	%240 = load %type.TypeNode** %t
	%241 = getelementptr %type.TypeNode* %240, i32 0, i32 5
	%242 = load %symb.SymbNode** %241
	%243 = bitcast %symb.SymbNode* %242 to %symb.SymbNode*
	store %symb.SymbNode* %243, %symb.SymbNode** %s
	%244 = getelementptr [13 x i8]* @S.547
	%245 = bitcast [13 x i8]* %244 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %245)
	br label %L.47
L.47:
	%246 = load %symb.SymbNode** %s
	%247 = bitcast %symb.SymbNode* %246 to %symb.SymbNode*
	call void @symb_DumpS(%symb.SymbNode* %247)
	%248 = load %symb.SymbNode** %s
	%249 = getelementptr %symb.SymbNode* %248, i32 0, i32 6
	%250 = load %symb.SymbNode** %249
	%251 = bitcast %symb.SymbNode* %250 to %symb.SymbNode*
	store %symb.SymbNode* %251, %symb.SymbNode** %s
	%252 = load %symb.SymbNode** %s
	%253 = icmp eq %symb.SymbNode* %252, null
	br i1 %253, label %L.48, label %L.49
L.49:
	call void @out_chr(i32 2, i8 9)
	br label %L.47
L.48:
	br label %L.45
L.45:
	br label %L.5
L.5:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @type_DumpT(%type.TypeNode* %t.arg, i8 zeroext %full.arg) nounwind {
L.0:
	%t = alloca %type.TypeNode*
	%full = alloca i8
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store i8 %full.arg, i8* %full
	%0 = load %type.TypeNode** %t
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	%2 = load i8* %full
	call void @type_Dump2(%type.TypeNode* %1, i32 0, i8 %2)
	br label %return
return:
	ret void
}
@expr_skiplist = internal constant [4 x i8] [ i8 33, i8 37, i8 4, i8 0 ], align 1
define internal %ast.AstNode* @expr_ForceBoolean(%ast.AstNode* %tree.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	%zero = alloca %ast.AstNode*
	%0 = load %ast.AstNode** %tree
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 6
	%2 = load i32* %1
	%3 = icmp ugt i32 %2, 1
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %ast.AstNode** %tree
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 11
	%6 = load %type.TypeNode** %5
	%7 = bitcast %type.TypeNode* %6 to %type.TypeNode*
	%8 = call %ast.AstNode* @ast_Const(%type.TypeNode* %7, i64 0)
	%9 = bitcast %ast.AstNode* %8 to %ast.AstNode*
	store %ast.AstNode* %9, %ast.AstNode** %zero
	%10 = load %type.TypeNode** @type_booltype
	%11 = bitcast %type.TypeNode* %10 to %type.TypeNode*
	%12 = load %ast.AstNode** %tree
	%13 = bitcast %ast.AstNode* %12 to %ast.AstNode*
	%14 = load %ast.AstNode** %zero
	%15 = bitcast %ast.AstNode* %14 to %ast.AstNode*
	%16 = call %ast.AstNode* @ast_New2(i8 40, %type.TypeNode* %11, %ast.AstNode* %13, %ast.AstNode* %15)
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	store %ast.AstNode* %17, %ast.AstNode** %tree
	%18 = load %ast.AstNode** %tree
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 1
	store i8 1, i8* %19
	%20 = load %ast.AstNode** %tree
	%21 = getelementptr %ast.AstNode* %20, i32 0, i32 6
	store i32 1, i32* %21
	br label %L.1
L.1:
	%22 = load %ast.AstNode** %tree
	%23 = bitcast %ast.AstNode* %22 to %ast.AstNode*
	store %ast.AstNode* %23, %ast.AstNode** %rv.0
	br label %return
return:
	%24 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %24
}
@expr_proplist = internal constant [6 x i8] [ i8 78, i8 79, i8 80, i8 81, i8 82, i8 0 ], align 1
define internal %ast.AstNode* @expr_Property(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 40
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = getelementptr [6 x i8]* @expr_proplist
	%5 = bitcast [6 x i8]* %4 to [0 x i8]*
	%6 = call i8 @lex_Keyword([0 x i8]* %5)
	store i8 %6, i8* %tok
	%7 = load i8* %tok
	%8 = zext i8 %7 to i32
	switch i32 %8, label %L.4 [
		i32 78, label %L.6
		i32 79, label %L.7
		i32 80, label %L.8
		i32 81, label %L.9
		i32 82, label %L.10
	]
L.6:
	%9 = load %type.TypeNode** %t
	%10 = bitcast %type.TypeNode* %9 to %type.TypeNode*
	%11 = load %type.TypeNode** %t
	%12 = getelementptr %type.TypeNode* %11, i32 0, i32 6
	%13 = load i64* %12
	%14 = call %ast.AstNode* @ast_Const(%type.TypeNode* %10, i64 %13)
	%15 = bitcast %ast.AstNode* %14 to %ast.AstNode*
	store %ast.AstNode* %15, %ast.AstNode** %tree
	br label %L.5
L.7:
	%16 = load %type.TypeNode** %t
	%17 = bitcast %type.TypeNode* %16 to %type.TypeNode*
	%18 = load %type.TypeNode** %t
	%19 = getelementptr %type.TypeNode* %18, i32 0, i32 7
	%20 = load i64* %19
	%21 = call %ast.AstNode* @ast_Const(%type.TypeNode* %17, i64 %20)
	%22 = bitcast %ast.AstNode* %21 to %ast.AstNode*
	store %ast.AstNode* %22, %ast.AstNode** %tree
	br label %L.5
L.8:
	%23 = load %type.TypeNode** @type_wordtype
	%24 = bitcast %type.TypeNode* %23 to %type.TypeNode*
	%25 = load %type.TypeNode** %t
	%26 = getelementptr %type.TypeNode* %25, i32 0, i32 8
	%27 = load i32* %26
	%28 = zext i32 %27 to i64
	%29 = call %ast.AstNode* @ast_Const(%type.TypeNode* %24, i64 %28)
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	store %ast.AstNode* %30, %ast.AstNode** %tree
	br label %L.5
L.9:
	%31 = load %type.TypeNode** @type_wordtype
	%32 = bitcast %type.TypeNode* %31 to %type.TypeNode*
	%33 = load %type.TypeNode** %t
	%34 = getelementptr %type.TypeNode* %33, i32 0, i32 9
	%35 = load i32* %34
	%36 = load %target.TargetT** @target_Target
	%37 = getelementptr %target.TargetT* %36, i32 0, i32 3
	%38 = load i8* %37
	%39 = zext i8 %38 to i32
	%40 = udiv i32 %35, %39
	%41 = zext i32 %40 to i64
	%42 = call %ast.AstNode* @ast_Const(%type.TypeNode* %32, i64 %41)
	%43 = bitcast %ast.AstNode* %42 to %ast.AstNode*
	store %ast.AstNode* %43, %ast.AstNode** %tree
	br label %L.5
L.10:
	%44 = load %type.TypeNode** %t
	%45 = getelementptr %type.TypeNode* %44, i32 0, i32 13
	%46 = load i8* %45
	%47 = icmp eq i8 %46, 5
	br i1 %47, label %L.12, label %L.13
L.12:
	%48 = load %type.TypeNode** @type_wordtype
	%49 = bitcast %type.TypeNode* %48 to %type.TypeNode*
	%50 = load %type.TypeNode** %t
	%51 = getelementptr %type.TypeNode* %50, i32 0, i32 7
	%52 = load i64* %51
	%53 = call %ast.AstNode* @ast_Const(%type.TypeNode* %49, i64 %52)
	%54 = bitcast %ast.AstNode* %53 to %ast.AstNode*
	store %ast.AstNode* %54, %ast.AstNode** %tree
	br label %L.11
L.13:
	call void @lex_Error(i8 27)
	br label %L.11
L.11:
	br label %L.5
L.4:
	call void @lex_Error(i8 50)
	br label %L.5
L.5:
	br label %L.1
L.3:
	call void @lex_Error(i8 50)
	br label %L.1
L.1:
	%55 = call i8 @lex_Next()
	store i8 %55, i8* %tok
	%56 = load %ast.AstNode** %tree
	%57 = bitcast %ast.AstNode* %56 to %ast.AstNode*
	store %ast.AstNode* %57, %ast.AstNode** %rv.0
	br label %return
return:
	%58 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %58
}
@expr_strid = internal global i64 0, align 4
define internal %ast.AstNode* @expr_String() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	%0 = call %type.TypeNode* @type_New(i8 5)
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	store %type.TypeNode* %1, %type.TypeNode** %t
	%2 = load %type.TypeNode** @type_bytetype
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	%4 = load %type.TypeNode** %t
	%5 = getelementptr %type.TypeNode* %4, i32 0, i32 0
	store %type.TypeNode* %3, %type.TypeNode** %5
	%6 = load %type.TypeNode** @type_wordtype
	%7 = bitcast %type.TypeNode* %6 to %type.TypeNode*
	%8 = load %type.TypeNode** %t
	%9 = getelementptr %type.TypeNode* %8, i32 0, i32 2
	store %type.TypeNode* %7, %type.TypeNode** %9
	%10 = load %type.TypeNode** %t
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 6
	store i64 0, i64* %11
	%12 = load i16* @lex_StringLen
	%13 = zext i16 %12 to i64
	%14 = load %type.TypeNode** %t
	%15 = getelementptr %type.TypeNode* %14, i32 0, i32 7
	store i64 %13, i64* %15
	%16 = load %type.TypeNode** %t
	%17 = getelementptr %type.TypeNode* %16, i32 0, i32 0
	%18 = load %type.TypeNode** %17
	%19 = getelementptr %type.TypeNode* %18, i32 0, i32 10
	%20 = load i32* %19
	%21 = load %type.TypeNode** %t
	%22 = getelementptr %type.TypeNode* %21, i32 0, i32 10
	store i32 %20, i32* %22
	%23 = load %target.TargetT** @target_Target
	%24 = getelementptr %target.TargetT* %23, i32 0, i32 2
	%25 = load i8* %24
	%26 = load %type.TypeNode** %t
	%27 = getelementptr %type.TypeNode* %26, i32 0, i32 16
	store i8 %25, i8* %27
	%28 = load %type.TypeNode** %t
	%29 = bitcast %type.TypeNode* %28 to %type.TypeNode*
	%30 = call %ast.AstNode* @ast_New(i8 8, %type.TypeNode* %29)
	%31 = bitcast %ast.AstNode* %30 to %ast.AstNode*
	store %ast.AstNode* %31, %ast.AstNode** %tree
	%32 = load %ast.AstNode** %tree
	%33 = getelementptr %ast.AstNode* %32, i32 0, i32 1
	store i8 4, i8* %33
	%34 = getelementptr [4096 x i8]* @lex_StringBuf
	%35 = bitcast [4096 x i8]* %34 to [0 x i8]*
	%36 = load i16* @lex_StringLen
	%37 = zext i16 %36 to i32
	%38 = call [0 x i8]* @sys_memdup([0 x i8]* %35, i32 %37)
	%39 = bitcast [0 x i8]* %38 to %symb.SymbNode*
	%40 = bitcast %symb.SymbNode* %39 to %symb.SymbNode*
	%41 = load %ast.AstNode** %tree
	%42 = getelementptr %ast.AstNode* %41, i32 0, i32 12
	store %symb.SymbNode* %40, %symb.SymbNode** %42
	%43 = load i64* @expr_strid
	%44 = add i64 %43, 1
	store i64 %44, i64* @expr_strid
	%45 = load i64* @expr_strid
	%46 = load %ast.AstNode** %tree
	%47 = getelementptr %ast.AstNode* %46, i32 0, i32 10
	store i64 %45, i64* %47
	%48 = load %ast.AstNode** %tree
	%49 = bitcast %ast.AstNode* %48 to %ast.AstNode*
	store %ast.AstNode* %49, %ast.AstNode** %rv.0
	br label %return
return:
	%50 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %50
}
define internal %ast.AstNode* @expr_EnumConst(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%s = alloca %symb.SymbNode*
	%0 = load %type.TypeNode** %t
	%1 = getelementptr %type.TypeNode* %0, i32 0, i32 4
	%2 = load %symb.SymbNode** %1
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %s
	br label %L.1
L.1:
	%4 = load %symb.SymbNode** %s
	%5 = icmp ne %symb.SymbNode* %4, null
	%6 = xor i1 %5, true
	br i1 %6, label %L.2, label %L.3
L.3:
	%7 = load %symb.SymbNode** %s
	%8 = getelementptr %symb.SymbNode* %7, i32 0, i32 19
	%9 = getelementptr [0 x i8]* %8
	%10 = bitcast [0 x i8]* %9 to [0 x i8]*
	%11 = getelementptr [64 x i8]* @lex_Ident
	%12 = bitcast [64 x i8]* %11 to [0 x i8]*
	%13 = call i8 @zstr_eq([0 x i8]* %10, [0 x i8]* %12, i32 63)
	%14 = icmp ne i8 %13, 0
	br i1 %14, label %L.5, label %L.4
L.5:
	%15 = load %type.TypeNode** %t
	%16 = bitcast %type.TypeNode* %15 to %type.TypeNode*
	%17 = load %symb.SymbNode** %s
	%18 = getelementptr %symb.SymbNode* %17, i32 0, i32 7
	%19 = load i64* %18
	%20 = call %ast.AstNode* @ast_Const(%type.TypeNode* %16, i64 %19)
	%21 = bitcast %ast.AstNode* %20 to %ast.AstNode*
	store %ast.AstNode* %21, %ast.AstNode** %rv.0
	br label %return
L.4:
	%22 = load %symb.SymbNode** %s
	%23 = getelementptr %symb.SymbNode* %22, i32 0, i32 0
	%24 = load %symb.SymbNode** %23
	%25 = bitcast %symb.SymbNode* %24 to %symb.SymbNode*
	store %symb.SymbNode* %25, %symb.SymbNode** %s
	br label %L.1
L.2:
	%26 = getelementptr [64 x i8]* @lex_Ident
	%27 = bitcast [64 x i8]* %26 to [0 x i8]*
	call void @lex_ErrorI(i8 16, [0 x i8]* %27)
	%28 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %28, %ast.AstNode** %rv.0
	br label %return
return:
	%29 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %29
}
define internal %ast.AstNode* @expr_Extend(%ast.AstNode* %tree.arg, i32 %size.arg, i8 zeroext %iscast.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%size = alloca i32
	%iscast = alloca i8
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	store i32 %size.arg, i32* %size
	store i8 %iscast.arg, i8* %iscast
	%0 = load %ast.AstNode** %tree
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 6
	%2 = load i32* %1
	%3 = load i32* %size
	%4 = icmp ult i32 %2, %3
	br i1 %4, label %L.2, label %L.3
L.2:
	%5 = load %ast.AstNode** %tree
	%6 = getelementptr %ast.AstNode* %5, i32 0, i32 0
	%7 = load i8* %6
	%8 = icmp ne i8 %7, 7
	br i1 %8, label %L.5, label %L.4
L.5:
	%9 = load %ast.AstNode** %tree
	%10 = getelementptr %ast.AstNode* %9, i32 0, i32 1
	%11 = load i8* %10
	%12 = icmp eq i8 %11, 3
	br i1 %12, label %L.7, label %L.8
L.7:
	%13 = load %ast.AstNode** %tree
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 11
	%15 = load %type.TypeNode** %14
	%16 = bitcast %type.TypeNode* %15 to %type.TypeNode*
	%17 = load %ast.AstNode** %tree
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	%19 = call %ast.AstNode* @ast_New1(i8 28, %type.TypeNode* %16, %ast.AstNode* %18)
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	store %ast.AstNode* %20, %ast.AstNode** %tree
	br label %L.6
L.8:
	%21 = load %ast.AstNode** %tree
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 11
	%23 = load %type.TypeNode** %22
	%24 = bitcast %type.TypeNode* %23 to %type.TypeNode*
	%25 = load %ast.AstNode** %tree
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	%27 = call %ast.AstNode* @ast_New1(i8 27, %type.TypeNode* %24, %ast.AstNode* %26)
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	store %ast.AstNode* %28, %ast.AstNode** %tree
	br label %L.6
L.6:
	br label %L.4
L.4:
	%29 = load i32* %size
	%30 = load %ast.AstNode** %tree
	%31 = getelementptr %ast.AstNode* %30, i32 0, i32 6
	store i32 %29, i32* %31
	br label %L.1
L.3:
	%32 = load %ast.AstNode** %tree
	%33 = getelementptr %ast.AstNode* %32, i32 0, i32 6
	%34 = load i32* %33
	%35 = load i32* %size
	%36 = icmp ugt i32 %34, %35
	br i1 %36, label %L.10, label %L.9
L.10:
	%37 = load %ast.AstNode** %tree
	%38 = getelementptr %ast.AstNode* %37, i32 0, i32 0
	%39 = load i8* %38
	%40 = icmp ne i8 %39, 7
	br i1 %40, label %L.12, label %L.13
L.12:
	%41 = load %ast.AstNode** %tree
	%42 = getelementptr %ast.AstNode* %41, i32 0, i32 11
	%43 = load %type.TypeNode** %42
	%44 = bitcast %type.TypeNode* %43 to %type.TypeNode*
	%45 = load %ast.AstNode** %tree
	%46 = bitcast %ast.AstNode* %45 to %ast.AstNode*
	%47 = call %ast.AstNode* @ast_New1(i8 29, %type.TypeNode* %44, %ast.AstNode* %46)
	%48 = bitcast %ast.AstNode* %47 to %ast.AstNode*
	store %ast.AstNode* %48, %ast.AstNode** %tree
	%49 = getelementptr %A.3* @feature, i32 0, i32 4
	%50 = load i8* %49
	%51 = icmp ne i8 %50, 0
	br i1 %51, label %L.14, label %L.15
L.14:
	%52 = load i8* %iscast
	%53 = icmp ne i8 %52, 0
	%54 = xor i1 %53, true
	br label %L.15
L.15:
	%55 = phi i1 [ false, %L.12 ], [ %54, %L.14 ]
	br i1 %55, label %L.17, label %L.16
L.17:
	call void @lex_Error(i8 2)
	br label %L.16
L.16:
	br label %L.11
L.13:
	%56 = load %ast.AstNode** %tree
	%57 = getelementptr %ast.AstNode* %56, i32 0, i32 1
	%58 = load i8* %57
	%59 = icmp eq i8 %58, 3
	br i1 %59, label %L.19, label %L.20
L.19:
	br label %L.18
L.20:
	%60 = load %ast.AstNode** %tree
	%61 = getelementptr %ast.AstNode* %60, i32 0, i32 10
	%62 = load i64* %61
	%63 = call i8 @type_bitsize(i64 %62)
	%64 = zext i8 %63 to i32
	%65 = load i32* %size
	%66 = icmp ugt i32 %64, %65
	br i1 %66, label %L.22, label %L.21
L.22:
	call void @lex_Error(i8 2)
	br label %L.21
L.21:
	br label %L.18
L.18:
	br label %L.11
L.11:
	%67 = load i32* %size
	%68 = load %ast.AstNode** %tree
	%69 = getelementptr %ast.AstNode* %68, i32 0, i32 6
	store i32 %67, i32* %69
	br label %L.9
L.9:
	br label %L.1
L.1:
	%70 = load %ast.AstNode** %tree
	%71 = bitcast %ast.AstNode* %70 to %ast.AstNode*
	store %ast.AstNode* %71, %ast.AstNode** %rv.0
	br label %return
return:
	%72 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %72
}
define internal %ast.AstNode* @expr_ExtendT(%ast.AstNode* %tree.arg, %type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%0 = load %ast.AstNode** %tree
	%1 = bitcast %ast.AstNode* %0 to %ast.AstNode*
	%2 = load %type.TypeNode** %t
	%3 = getelementptr %type.TypeNode* %2, i32 0, i32 9
	%4 = load i32* %3
	%5 = call %ast.AstNode* @expr_Extend(%ast.AstNode* %1, i32 %4, i8 0)
	%6 = bitcast %ast.AstNode* %5 to %ast.AstNode*
	store %ast.AstNode* %6, %ast.AstNode** %tree
	%7 = load %ast.AstNode** %tree
	%8 = bitcast %ast.AstNode* %7 to %ast.AstNode*
	store %ast.AstNode* %8, %ast.AstNode** %rv.0
	br label %return
return:
	%9 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %9
}
define internal %ast.AstNode* @expr_ExtendCast(%ast.AstNode* %tree.arg, %type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%0 = load %ast.AstNode** %tree
	%1 = bitcast %ast.AstNode* %0 to %ast.AstNode*
	%2 = load %type.TypeNode** %t
	%3 = getelementptr %type.TypeNode* %2, i32 0, i32 9
	%4 = load i32* %3
	%5 = call %ast.AstNode* @expr_Extend(%ast.AstNode* %1, i32 %4, i8 1)
	%6 = bitcast %ast.AstNode* %5 to %ast.AstNode*
	store %ast.AstNode* %6, %ast.AstNode** %tree
	%7 = load %type.TypeNode** %t
	%8 = bitcast %type.TypeNode* %7 to %type.TypeNode*
	%9 = load %ast.AstNode** %tree
	%10 = getelementptr %ast.AstNode* %9, i32 0, i32 11
	store %type.TypeNode* %8, %type.TypeNode** %10
	%11 = load %type.TypeNode** %t
	%12 = getelementptr %type.TypeNode* %11, i32 0, i32 13
	%13 = load i8* %12
	%14 = load %ast.AstNode** %tree
	%15 = getelementptr %ast.AstNode* %14, i32 0, i32 1
	store i8 %13, i8* %15
	%16 = load %ast.AstNode** %tree
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	store %ast.AstNode* %17, %ast.AstNode** %rv.0
	br label %return
return:
	%18 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %18
}
define internal %ast.AstNode* @expr_Cast(%ast.AstNode* %tree.arg, %type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%0 = load %ast.AstNode** %tree
	%1 = icmp eq %ast.AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %ast.AstNode** %tree
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %rv.0
	br label %return
L.1:
	%4 = load %type.TypeNode** %t
	%5 = getelementptr %type.TypeNode* %4, i32 0, i32 13
	%6 = load i8* %5
	%7 = zext i8 %6 to i32
	switch i32 %7, label %L.3 [
		i32 1, label %L.5
		i32 2, label %L.6
		i32 3, label %L.7
		i32 4, label %L.8
		i32 6, label %L.9
		i32 5, label %L.9
	]
L.5:
	%8 = load %ast.AstNode** %tree
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 1
	%10 = load i8* %9
	%11 = icmp eq i8 %10, 2
	br i1 %11, label %L.11, label %L.12
L.11:
	%12 = load %ast.AstNode** %tree
	%13 = bitcast %ast.AstNode* %12 to %ast.AstNode*
	%14 = load %type.TypeNode** %t
	%15 = bitcast %type.TypeNode* %14 to %type.TypeNode*
	%16 = call %ast.AstNode* @expr_ExtendCast(%ast.AstNode* %13, %type.TypeNode* %15)
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	store %ast.AstNode* %17, %ast.AstNode** %tree
	br label %L.10
L.12:
	call void @lex_Error(i8 47)
	br label %L.10
L.10:
	br label %L.4
L.6:
	%18 = load %ast.AstNode** %tree
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 1
	%20 = load i8* %19
	%21 = zext i8 %20 to i32
	switch i32 %21, label %L.13 [
		i32 1, label %L.15
		i32 2, label %L.15
		i32 3, label %L.15
		i32 4, label %L.16
		i32 6, label %L.17
		i32 5, label %L.17
	]
L.15:
	%22 = load %ast.AstNode** %tree
	%23 = bitcast %ast.AstNode* %22 to %ast.AstNode*
	%24 = load %type.TypeNode** %t
	%25 = bitcast %type.TypeNode* %24 to %type.TypeNode*
	%26 = call %ast.AstNode* @expr_ExtendCast(%ast.AstNode* %23, %type.TypeNode* %25)
	%27 = bitcast %ast.AstNode* %26 to %ast.AstNode*
	store %ast.AstNode* %27, %ast.AstNode** %tree
	br label %L.14
L.16:
	%28 = load %type.TypeNode** %t
	%29 = bitcast %type.TypeNode* %28 to %type.TypeNode*
	%30 = load %ast.AstNode** %tree
	%31 = bitcast %ast.AstNode* %30 to %ast.AstNode*
	%32 = call %ast.AstNode* @ast_New1(i8 15, %type.TypeNode* %29, %ast.AstNode* %31)
	%33 = bitcast %ast.AstNode* %32 to %ast.AstNode*
	store %ast.AstNode* %33, %ast.AstNode** %tree
	%34 = load %type.TypeNode** %t
	%35 = getelementptr %type.TypeNode* %34, i32 0, i32 13
	%36 = load i8* %35
	%37 = load %ast.AstNode** %tree
	%38 = getelementptr %ast.AstNode* %37, i32 0, i32 1
	store i8 %36, i8* %38
	%39 = load %type.TypeNode** %t
	%40 = getelementptr %type.TypeNode* %39, i32 0, i32 8
	%41 = load i32* %40
	%42 = load %ast.AstNode** %tree
	%43 = getelementptr %ast.AstNode* %42, i32 0, i32 6
	store i32 %41, i32* %43
	br label %L.14
L.17:
	%44 = load %ast.AstNode** %tree
	%45 = getelementptr %ast.AstNode* %44, i32 0, i32 11
	%46 = load %type.TypeNode** %45
	%47 = getelementptr %type.TypeNode* %46, i32 0, i32 14
	%48 = load i8* %47
	%49 = icmp eq i8 %48, 2
	br i1 %49, label %L.18, label %L.19
L.18:
	%50 = load %ast.AstNode** %tree
	%51 = getelementptr %ast.AstNode* %50, i32 0, i32 6
	%52 = load i32* %51
	%53 = load %type.TypeNode** %t
	%54 = getelementptr %type.TypeNode* %53, i32 0, i32 8
	%55 = load i32* %54
	%56 = icmp eq i32 %52, %55
	br label %L.19
L.19:
	%57 = phi i1 [ false, %L.17 ], [ %56, %L.18 ]
	br i1 %57, label %L.21, label %L.22
L.21:
	%58 = load %type.TypeNode** %t
	%59 = bitcast %type.TypeNode* %58 to %type.TypeNode*
	%60 = load %ast.AstNode** %tree
	%61 = getelementptr %ast.AstNode* %60, i32 0, i32 11
	store %type.TypeNode* %59, %type.TypeNode** %61
	%62 = load %type.TypeNode** %t
	%63 = getelementptr %type.TypeNode* %62, i32 0, i32 13
	%64 = load i8* %63
	%65 = load %ast.AstNode** %tree
	%66 = getelementptr %ast.AstNode* %65, i32 0, i32 1
	store i8 %64, i8* %66
	br label %L.20
L.22:
	call void @lex_Error(i8 47)
	br label %L.20
L.20:
	br label %L.14
L.13:
	call void @lex_Error(i8 47)
	br label %L.14
L.14:
	br label %L.4
L.7:
	%67 = load %ast.AstNode** %tree
	%68 = getelementptr %ast.AstNode* %67, i32 0, i32 1
	%69 = load i8* %68
	%70 = zext i8 %69 to i32
	switch i32 %70, label %L.23 [
		i32 2, label %L.25
		i32 3, label %L.25
	]
L.25:
	%71 = load %ast.AstNode** %tree
	%72 = bitcast %ast.AstNode* %71 to %ast.AstNode*
	%73 = load %type.TypeNode** %t
	%74 = bitcast %type.TypeNode* %73 to %type.TypeNode*
	%75 = call %ast.AstNode* @expr_ExtendCast(%ast.AstNode* %72, %type.TypeNode* %74)
	%76 = bitcast %ast.AstNode* %75 to %ast.AstNode*
	store %ast.AstNode* %76, %ast.AstNode** %tree
	br label %L.24
L.23:
	call void @lex_Error(i8 47)
	br label %L.24
L.24:
	br label %L.4
L.8:
	%77 = load %ast.AstNode** %tree
	%78 = getelementptr %ast.AstNode* %77, i32 0, i32 1
	%79 = load i8* %78
	%80 = zext i8 %79 to i32
	switch i32 %80, label %L.26 [
		i32 4, label %L.28
		i32 2, label %L.29
		i32 5, label %L.30
	]
L.28:
	%81 = load %type.TypeNode** %t
	%82 = bitcast %type.TypeNode* %81 to %type.TypeNode*
	%83 = load %ast.AstNode** %tree
	%84 = bitcast %ast.AstNode* %83 to %ast.AstNode*
	%85 = call %ast.AstNode* @ast_New1(i8 15, %type.TypeNode* %82, %ast.AstNode* %84)
	%86 = bitcast %ast.AstNode* %85 to %ast.AstNode*
	store %ast.AstNode* %86, %ast.AstNode** %tree
	%87 = load %type.TypeNode** %t
	%88 = getelementptr %type.TypeNode* %87, i32 0, i32 0
	%89 = load %type.TypeNode** %88
	%90 = bitcast %type.TypeNode* %89 to %type.TypeNode*
	%91 = load %ast.AstNode** %tree
	%92 = getelementptr %ast.AstNode* %91, i32 0, i32 11
	store %type.TypeNode* %90, %type.TypeNode** %92
	%93 = load %type.TypeNode** %t
	%94 = getelementptr %type.TypeNode* %93, i32 0, i32 13
	%95 = load i8* %94
	%96 = load %ast.AstNode** %tree
	%97 = getelementptr %ast.AstNode* %96, i32 0, i32 1
	store i8 %95, i8* %97
	%98 = load %type.TypeNode** %t
	%99 = getelementptr %type.TypeNode* %98, i32 0, i32 8
	%100 = load i32* %99
	%101 = load %ast.AstNode** %tree
	%102 = getelementptr %ast.AstNode* %101, i32 0, i32 6
	store i32 %100, i32* %102
	br label %L.27
L.29:
	%103 = load %ast.AstNode** %tree
	%104 = getelementptr %ast.AstNode* %103, i32 0, i32 6
	%105 = load i32* %104
	%106 = load %target.TargetT** @target_Target
	%107 = getelementptr %target.TargetT* %106, i32 0, i32 8
	%108 = getelementptr %target.SizeAlign* %107, i32 0, i32 0
	%109 = load i8* %108
	%110 = zext i8 %109 to i32
	%111 = icmp ne i32 %105, %110
	br i1 %111, label %L.32, label %L.31
L.32:
	call void @lex_Error(i8 5)
	br label %L.31
L.31:
	%112 = load %type.TypeNode** %t
	%113 = bitcast %type.TypeNode* %112 to %type.TypeNode*
	%114 = load %ast.AstNode** %tree
	%115 = bitcast %ast.AstNode* %114 to %ast.AstNode*
	%116 = call %ast.AstNode* @ast_New1(i8 15, %type.TypeNode* %113, %ast.AstNode* %115)
	%117 = bitcast %ast.AstNode* %116 to %ast.AstNode*
	store %ast.AstNode* %117, %ast.AstNode** %tree
	%118 = load %type.TypeNode** %t
	%119 = getelementptr %type.TypeNode* %118, i32 0, i32 0
	%120 = load %type.TypeNode** %119
	%121 = bitcast %type.TypeNode* %120 to %type.TypeNode*
	%122 = load %ast.AstNode** %tree
	%123 = getelementptr %ast.AstNode* %122, i32 0, i32 11
	store %type.TypeNode* %121, %type.TypeNode** %123
	%124 = load %type.TypeNode** %t
	%125 = getelementptr %type.TypeNode* %124, i32 0, i32 13
	%126 = load i8* %125
	%127 = load %ast.AstNode** %tree
	%128 = getelementptr %ast.AstNode* %127, i32 0, i32 1
	store i8 %126, i8* %128
	%129 = load %type.TypeNode** %t
	%130 = getelementptr %type.TypeNode* %129, i32 0, i32 8
	%131 = load i32* %130
	%132 = load %ast.AstNode** %tree
	%133 = getelementptr %ast.AstNode* %132, i32 0, i32 6
	store i32 %131, i32* %133
	br label %L.27
L.30:
	%134 = load %ast.AstNode** %tree
	%135 = getelementptr %ast.AstNode* %134, i32 0, i32 0
	%136 = load i8* %135
	%137 = icmp eq i8 %136, 25
	br i1 %137, label %L.34, label %L.33
L.34:
	%138 = load %ast.AstNode** %tree
	%139 = getelementptr %ast.AstNode* %138, i32 0, i32 13
	%140 = getelementptr [0 x %ast.AstNode*]* %139, i32 0, i32 0
	%141 = load %ast.AstNode** %140
	%142 = bitcast %ast.AstNode* %141 to %ast.AstNode*
	store %ast.AstNode* %142, %ast.AstNode** %tree
	br label %L.33
L.33:
	%143 = load %ast.AstNode** %tree
	%144 = getelementptr %ast.AstNode* %143, i32 0, i32 0
	%145 = load i8* %144
	%146 = icmp eq i8 %145, 18
	br i1 %146, label %L.35, label %L.36
L.35:
	%147 = load %ast.AstNode** %tree
	%148 = getelementptr %ast.AstNode* %147, i32 0, i32 11
	%149 = load %type.TypeNode** %148
	%150 = getelementptr %type.TypeNode* %149, i32 0, i32 0
	%151 = load %type.TypeNode** %150
	%152 = load %type.TypeNode** @type_bytetype
	%153 = icmp eq %type.TypeNode* %151, %152
	br label %L.36
L.36:
	%154 = phi i1 [ false, %L.33 ], [ %153, %L.35 ]
	br i1 %154, label %L.38, label %L.39
L.38:
	%155 = load %type.TypeNode** %t
	%156 = bitcast %type.TypeNode* %155 to %type.TypeNode*
	%157 = load %ast.AstNode** %tree
	%158 = bitcast %ast.AstNode* %157 to %ast.AstNode*
	%159 = call %ast.AstNode* @ast_New1(i8 15, %type.TypeNode* %156, %ast.AstNode* %158)
	%160 = bitcast %ast.AstNode* %159 to %ast.AstNode*
	store %ast.AstNode* %160, %ast.AstNode** %tree
	%161 = load %type.TypeNode** %t
	%162 = getelementptr %type.TypeNode* %161, i32 0, i32 0
	%163 = load %type.TypeNode** %162
	%164 = bitcast %type.TypeNode* %163 to %type.TypeNode*
	%165 = load %ast.AstNode** %tree
	%166 = getelementptr %ast.AstNode* %165, i32 0, i32 11
	store %type.TypeNode* %164, %type.TypeNode** %166
	%167 = load %type.TypeNode** %t
	%168 = getelementptr %type.TypeNode* %167, i32 0, i32 13
	%169 = load i8* %168
	%170 = load %ast.AstNode** %tree
	%171 = getelementptr %ast.AstNode* %170, i32 0, i32 1
	store i8 %169, i8* %171
	%172 = load %type.TypeNode** %t
	%173 = getelementptr %type.TypeNode* %172, i32 0, i32 8
	%174 = load i32* %173
	%175 = load %ast.AstNode** %tree
	%176 = getelementptr %ast.AstNode* %175, i32 0, i32 6
	store i32 %174, i32* %176
	br label %L.37
L.39:
	call void @lex_Error(i8 47)
	br label %L.37
L.37:
	br label %L.27
L.26:
	call void @lex_Error(i8 47)
	br label %L.27
L.27:
	br label %L.4
L.9:
	%177 = load %type.TypeNode** %t
	%178 = getelementptr %type.TypeNode* %177, i32 0, i32 14
	%179 = load i8* %178
	%180 = icmp eq i8 %179, 2
	br i1 %180, label %L.42, label %L.43
L.42:
	%181 = load %ast.AstNode** %tree
	%182 = getelementptr %ast.AstNode* %181, i32 0, i32 1
	%183 = load i8* %182
	%184 = icmp eq i8 %183, 2
	br label %L.43
L.43:
	%185 = phi i1 [ false, %L.9 ], [ %184, %L.42 ]
	br i1 %185, label %L.40, label %L.41
L.40:
	%186 = load %ast.AstNode** %tree
	%187 = getelementptr %ast.AstNode* %186, i32 0, i32 6
	%188 = load i32* %187
	%189 = load %type.TypeNode** %t
	%190 = getelementptr %type.TypeNode* %189, i32 0, i32 8
	%191 = load i32* %190
	%192 = icmp eq i32 %188, %191
	br label %L.41
L.41:
	%193 = phi i1 [ false, %L.43 ], [ %192, %L.40 ]
	br i1 %193, label %L.45, label %L.46
L.45:
	%194 = load %type.TypeNode** %t
	%195 = bitcast %type.TypeNode* %194 to %type.TypeNode*
	%196 = load %ast.AstNode** %tree
	%197 = getelementptr %ast.AstNode* %196, i32 0, i32 11
	store %type.TypeNode* %195, %type.TypeNode** %197
	%198 = load %type.TypeNode** %t
	%199 = getelementptr %type.TypeNode* %198, i32 0, i32 13
	%200 = load i8* %199
	%201 = load %ast.AstNode** %tree
	%202 = getelementptr %ast.AstNode* %201, i32 0, i32 1
	store i8 %200, i8* %202
	br label %L.44
L.46:
	call void @lex_Error(i8 47)
	br label %L.44
L.44:
	br label %L.4
L.3:
	br label %L.4
L.4:
	%203 = load %ast.AstNode** %tree
	%204 = bitcast %ast.AstNode* %203 to %ast.AstNode*
	store %ast.AstNode* %204, %ast.AstNode** %rv.0
	br label %return
return:
	%205 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %205
}
define internal %ast.AstNode* @expr_ArrayPack(%type.TypeNode* %t.arg, %ast.AstNode* %intree.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	%intree = alloca %ast.AstNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store %ast.AstNode* %intree.arg, %ast.AstNode** %intree
	%offs = alloca i32
	%tsize = alloca i32
	%fsize = alloca i32
	%i = alloca i16
	%tree = alloca %ast.AstNode*
	%vpart = alloca %ast.AstNode*
	%node = alloca %ast.AstNode*
	%cpart = alloca i64
	%bt = alloca %type.TypeNode*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %vpart
	store i64 0, i64* %cpart
	%1 = load %ast.AstNode** %intree
	%2 = getelementptr %ast.AstNode* %1, i32 0, i32 0
	%3 = load i8* %2
	%4 = icmp ne i8 %3, 14
	br i1 %4, label %L.2, label %L.1
L.2:
	call void @lex_Error(i8 71)
	%5 = load %ast.AstNode** %tree
	%6 = bitcast %ast.AstNode* %5 to %ast.AstNode*
	store %ast.AstNode* %6, %ast.AstNode** %rv.0
	br label %return
L.1:
	%7 = load %type.TypeNode** %t
	%8 = getelementptr %type.TypeNode* %7, i32 0, i32 9
	%9 = load i32* %8
	store i32 %9, i32* %tsize
	%10 = load %type.TypeNode** %t
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 0
	%12 = load %type.TypeNode** %11
	%13 = bitcast %type.TypeNode* %12 to %type.TypeNode*
	store %type.TypeNode* %13, %type.TypeNode** %bt
	%14 = load %type.TypeNode** %bt
	%15 = getelementptr %type.TypeNode* %14, i32 0, i32 8
	%16 = load i32* %15
	store i32 %16, i32* %fsize
	%17 = load %type.TypeNode** %t
	%18 = getelementptr %type.TypeNode* %17, i32 0, i32 15
	%19 = load i8* %18
	%20 = icmp eq i8 %19, 1
	br i1 %20, label %L.4, label %L.5
L.4:
	%21 = load i32* %tsize
	store i32 %21, i32* %offs
	br label %L.3
L.5:
	store i32 0, i32* %offs
	br label %L.3
L.3:
	store i16 0, i16* %i
	br label %L.6
L.6:
	%22 = load i16* %i
	%23 = load %ast.AstNode** %intree
	%24 = getelementptr %ast.AstNode* %23, i32 0, i32 2
	%25 = load i16* %24
	%26 = icmp ult i16 %22, %25
	%27 = xor i1 %26, true
	br i1 %27, label %L.7, label %L.8
L.8:
	%28 = load %type.TypeNode** %t
	%29 = getelementptr %type.TypeNode* %28, i32 0, i32 15
	%30 = load i8* %29
	%31 = icmp eq i8 %30, 1
	br i1 %31, label %L.10, label %L.9
L.10:
	%32 = load i32* %offs
	%33 = load i32* %fsize
	%34 = sub i32 %32, %33
	store i32 %34, i32* %offs
	br label %L.9
L.9:
	%35 = load %ast.AstNode** %intree
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 13
	%37 = load i16* %i
	%38 = zext i16 %37 to i32
	%39 = getelementptr [0 x %ast.AstNode*]* %36, i32 0, i32 %38
	%40 = load %ast.AstNode** %39
	%41 = bitcast %ast.AstNode* %40 to %ast.AstNode*
	store %ast.AstNode* %41, %ast.AstNode** %node
	%42 = load %ast.AstNode** %node
	%43 = getelementptr %ast.AstNode* %42, i32 0, i32 0
	%44 = load i8* %43
	%45 = icmp eq i8 %44, 7
	br i1 %45, label %L.12, label %L.13
L.12:
	%46 = load i64* %cpart
	%47 = load %ast.AstNode** %node
	%48 = getelementptr %ast.AstNode* %47, i32 0, i32 10
	%49 = load i64* %48
	%50 = load i32* %offs
	%51 = zext i32 %50 to i64
	%52 = shl i64 %49, %51
	%53 = or i64 %46, %52
	store i64 %53, i64* %cpart
	br label %L.11
L.13:
	%54 = load %ast.AstNode** %node
	%55 = bitcast %ast.AstNode* %54 to %ast.AstNode*
	%56 = load i32* %tsize
	%57 = call %ast.AstNode* @expr_Extend(%ast.AstNode* %55, i32 %56, i8 0)
	%58 = bitcast %ast.AstNode* %57 to %ast.AstNode*
	store %ast.AstNode* %58, %ast.AstNode** %node
	%59 = load %type.TypeNode** %bt
	%60 = bitcast %type.TypeNode* %59 to %type.TypeNode*
	%61 = load %ast.AstNode** %node
	%62 = bitcast %ast.AstNode* %61 to %ast.AstNode*
	%63 = load %type.TypeNode** @type_wordtype
	%64 = bitcast %type.TypeNode* %63 to %type.TypeNode*
	%65 = load i32* %offs
	%66 = zext i32 %65 to i64
	%67 = call %ast.AstNode* @ast_Const(%type.TypeNode* %64, i64 %66)
	%68 = bitcast %ast.AstNode* %67 to %ast.AstNode*
	%69 = call %ast.AstNode* @ast_New2(i8 53, %type.TypeNode* %60, %ast.AstNode* %62, %ast.AstNode* %68)
	%70 = bitcast %ast.AstNode* %69 to %ast.AstNode*
	store %ast.AstNode* %70, %ast.AstNode** %node
	%71 = load %ast.AstNode** %vpart
	%72 = icmp eq %ast.AstNode* %71, null
	br i1 %72, label %L.15, label %L.16
L.15:
	%73 = load %ast.AstNode** %node
	%74 = bitcast %ast.AstNode* %73 to %ast.AstNode*
	store %ast.AstNode* %74, %ast.AstNode** %vpart
	br label %L.14
L.16:
	%75 = load %type.TypeNode** %bt
	%76 = bitcast %type.TypeNode* %75 to %type.TypeNode*
	%77 = load %ast.AstNode** %vpart
	%78 = bitcast %ast.AstNode* %77 to %ast.AstNode*
	%79 = load %ast.AstNode** %node
	%80 = bitcast %ast.AstNode* %79 to %ast.AstNode*
	%81 = call %ast.AstNode* @ast_New2(i8 58, %type.TypeNode* %76, %ast.AstNode* %78, %ast.AstNode* %80)
	%82 = bitcast %ast.AstNode* %81 to %ast.AstNode*
	store %ast.AstNode* %82, %ast.AstNode** %vpart
	br label %L.14
L.14:
	br label %L.11
L.11:
	%83 = load %type.TypeNode** %t
	%84 = getelementptr %type.TypeNode* %83, i32 0, i32 15
	%85 = load i8* %84
	%86 = icmp ne i8 %85, 1
	br i1 %86, label %L.18, label %L.17
L.18:
	%87 = load i32* %offs
	%88 = load i32* %fsize
	%89 = add i32 %87, %88
	store i32 %89, i32* %offs
	br label %L.17
L.17:
	%90 = load i16* %i
	%91 = add i16 %90, 1
	store i16 %91, i16* %i
	br label %L.6
L.7:
	%92 = load %type.TypeNode** @type_wordtype
	%93 = bitcast %type.TypeNode* %92 to %type.TypeNode*
	%94 = load i64* %cpart
	%95 = call %ast.AstNode* @ast_Const(%type.TypeNode* %93, i64 %94)
	%96 = bitcast %ast.AstNode* %95 to %ast.AstNode*
	%97 = load i32* %tsize
	%98 = call %ast.AstNode* @expr_Extend(%ast.AstNode* %96, i32 %97, i8 0)
	%99 = bitcast %ast.AstNode* %98 to %ast.AstNode*
	store %ast.AstNode* %99, %ast.AstNode** %tree
	%100 = load %ast.AstNode** %vpart
	%101 = icmp ne %ast.AstNode* %100, null
	br i1 %101, label %L.20, label %L.19
L.20:
	%102 = load %type.TypeNode** @type_wordtype
	%103 = bitcast %type.TypeNode* %102 to %type.TypeNode*
	%104 = load %ast.AstNode** %tree
	%105 = bitcast %ast.AstNode* %104 to %ast.AstNode*
	%106 = load %ast.AstNode** %vpart
	%107 = bitcast %ast.AstNode* %106 to %ast.AstNode*
	%108 = call %ast.AstNode* @ast_New2(i8 58, %type.TypeNode* %103, %ast.AstNode* %105, %ast.AstNode* %107)
	%109 = bitcast %ast.AstNode* %108 to %ast.AstNode*
	store %ast.AstNode* %109, %ast.AstNode** %tree
	br label %L.19
L.19:
	%110 = load %type.TypeNode** %t
	%111 = bitcast %type.TypeNode* %110 to %type.TypeNode*
	%112 = load %ast.AstNode** %tree
	%113 = getelementptr %ast.AstNode* %112, i32 0, i32 11
	store %type.TypeNode* %111, %type.TypeNode** %113
	%114 = load %ast.AstNode** %tree
	%115 = getelementptr %ast.AstNode* %114, i32 0, i32 1
	store i8 5, i8* %115
	%116 = load %ast.AstNode** %tree
	%117 = bitcast %ast.AstNode* %116 to %ast.AstNode*
	store %ast.AstNode* %117, %ast.AstNode** %rv.0
	br label %return
return:
	%118 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %118
}
define internal %ast.AstNode* @expr_ArrayConst(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%stree = alloca %ast.AstNode*
	%i = alloca i16
	%m = alloca i16
	%n = alloca i16
	%tok = alloca i8
	%once = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 36
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %type.TypeNode** %t
	%5 = bitcast %type.TypeNode* %4 to %type.TypeNode*
	%6 = call %ast.AstNode* @ast_New(i8 14, %type.TypeNode* %5)
	%7 = bitcast %ast.AstNode* %6 to %ast.AstNode*
	store %ast.AstNode* %7, %ast.AstNode** %tree
	%8 = load i64* @expr_strid
	%9 = add i64 %8, 1
	store i64 %9, i64* @expr_strid
	%10 = load i64* @expr_strid
	%11 = load %ast.AstNode** %tree
	%12 = getelementptr %ast.AstNode* %11, i32 0, i32 10
	store i64 %10, i64* %12
	store i8 0, i8* %once
	%13 = load %type.TypeNode** %t
	%14 = getelementptr %type.TypeNode* %13, i32 0, i32 7
	%15 = load i64* %14
	%16 = trunc i64 %15 to i16
	store i16 %16, i16* %n
	%17 = load %type.TypeNode** %t
	%18 = getelementptr %type.TypeNode* %17, i32 0, i32 18
	%19 = load i8* %18
	%20 = icmp ne i8 %19, 0
	br i1 %20, label %L.5, label %L.4
L.5:
	store i16 0, i16* %n
	br label %L.4
L.4:
	store i16 0, i16* %i
	store i16 0, i16* %m
	br label %L.6
L.6:
	%21 = call i8 @lex_Next()
	store i8 %21, i8* %tok
	%22 = load i8* %tok
	%23 = icmp eq i8 %22, 34
	br i1 %23, label %L.9, label %L.8
L.9:
	%24 = call i8 @lex_Next()
	store i8 %24, i8* %tok
	%25 = load %type.TypeNode** %t
	%26 = getelementptr %type.TypeNode* %25, i32 0, i32 2
	%27 = load %type.TypeNode** %26
	%28 = bitcast %type.TypeNode* %27 to %type.TypeNode*
	%29 = call i64 @expr_ConstScalar(%type.TypeNode* %28)
	%30 = trunc i64 %29 to i16
	store i16 %30, i16* %i
	%31 = call i8 @lex_Expect(i8 35)
	store i8 %31, i8* %tok
	%32 = call i8 @lex_Expect(i8 9)
	store i8 %32, i8* %tok
	br label %L.8
L.8:
	%33 = load %type.TypeNode** %t
	%34 = getelementptr %type.TypeNode* %33, i32 0, i32 0
	%35 = load %type.TypeNode** %34
	%36 = bitcast %type.TypeNode* %35 to %type.TypeNode*
	%37 = call %ast.AstNode* @expr_Const(%type.TypeNode* %36)
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	store %ast.AstNode* %38, %ast.AstNode** %stree
	%39 = load i16* %n
	%40 = icmp eq i16 %39, 0
	br i1 %40, label %L.11, label %L.10
L.10:
	%41 = load i16* %i
	%42 = load i16* %n
	%43 = icmp ult i16 %41, %42
	br label %L.11
L.11:
	%44 = phi i1 [ true, %L.8 ], [ %43, %L.10 ]
	br i1 %44, label %L.13, label %L.14
L.13:
	%45 = load %ast.AstNode** %tree
	%46 = bitcast %ast.AstNode* %45 to %ast.AstNode*
	%47 = load i16* %i
	%48 = load %ast.AstNode** %stree
	%49 = bitcast %ast.AstNode* %48 to %ast.AstNode*
	%50 = call %ast.AstNode* @ast_ChildIndexed(%ast.AstNode* %46, i16 %47, %ast.AstNode* %49)
	%51 = bitcast %ast.AstNode* %50 to %ast.AstNode*
	store %ast.AstNode* %51, %ast.AstNode** %tree
	%52 = load i16* %i
	%53 = add i16 %52, 1
	store i16 %53, i16* %i
	%54 = load i16* %i
	%55 = load i16* %m
	%56 = icmp ugt i16 %54, %55
	br i1 %56, label %L.16, label %L.15
L.16:
	%57 = load i16* %i
	store i16 %57, i16* %m
	br label %L.15
L.15:
	br label %L.12
L.14:
	%58 = load i8* %once
	%59 = icmp ne i8 %58, 0
	%60 = xor i1 %59, true
	br i1 %60, label %L.18, label %L.17
L.18:
	store i8 1, i8* %once
	call void @lex_Error(i8 66)
	br label %L.17
L.17:
	br label %L.12
L.12:
	%61 = load i8* @lex_Token
	store i8 %61, i8* %tok
	%62 = load i8* %tok
	%63 = icmp ne i8 %62, 5
	br i1 %63, label %L.7, label %L.19
L.19:
	br label %L.6
L.7:
	%64 = call i8 @lex_Expect(i8 37)
	store i8 %64, i8* %tok
	%65 = load i16* %n
	%66 = icmp eq i16 %65, 0
	br i1 %66, label %L.21, label %L.20
L.21:
	%nt = alloca %type.TypeNode*
	%67 = load i16* %m
	store i16 %67, i16* %n
	%68 = call %type.TypeNode* @type_New(i8 5)
	%69 = bitcast %type.TypeNode* %68 to %type.TypeNode*
	store %type.TypeNode* %69, %type.TypeNode** %nt
	%70 = load %type.TypeNode** %t
	%71 = getelementptr %type.TypeNode* %70, i32 0, i32 0
	%72 = load %type.TypeNode** %71
	%73 = bitcast %type.TypeNode* %72 to %type.TypeNode*
	%74 = load %type.TypeNode** %nt
	%75 = getelementptr %type.TypeNode* %74, i32 0, i32 0
	store %type.TypeNode* %73, %type.TypeNode** %75
	%76 = load %type.TypeNode** %t
	%77 = getelementptr %type.TypeNode* %76, i32 0, i32 2
	%78 = load %type.TypeNode** %77
	%79 = bitcast %type.TypeNode* %78 to %type.TypeNode*
	%80 = load %type.TypeNode** %nt
	%81 = getelementptr %type.TypeNode* %80, i32 0, i32 2
	store %type.TypeNode* %79, %type.TypeNode** %81
	%82 = load i16* %n
	%83 = zext i16 %82 to i64
	%84 = load %type.TypeNode** %nt
	%85 = getelementptr %type.TypeNode* %84, i32 0, i32 7
	store i64 %83, i64* %85
	%86 = load %type.TypeNode** %t
	%87 = getelementptr %type.TypeNode* %86, i32 0, i32 16
	%88 = load i8* %87
	%89 = load %type.TypeNode** %nt
	%90 = getelementptr %type.TypeNode* %89, i32 0, i32 16
	store i8 %88, i8* %90
	%91 = load %type.TypeNode** %t
	%92 = getelementptr %type.TypeNode* %91, i32 0, i32 10
	%93 = load i32* %92
	%94 = load %type.TypeNode** %nt
	%95 = getelementptr %type.TypeNode* %94, i32 0, i32 10
	store i32 %93, i32* %95
	%96 = load %type.TypeNode** %nt
	%97 = bitcast %type.TypeNode* %96 to %type.TypeNode*
	store %type.TypeNode* %97, %type.TypeNode** %t
	br label %L.20
L.20:
	store i16 0, i16* %i
	br label %L.22
L.22:
	%98 = load i16* %i
	%99 = load i16* %m
	%100 = icmp ult i16 %98, %99
	%101 = xor i1 %100, true
	br i1 %101, label %L.23, label %L.24
L.24:
	%102 = load %ast.AstNode** %tree
	%103 = getelementptr %ast.AstNode* %102, i32 0, i32 13
	%104 = load i16* %i
	%105 = zext i16 %104 to i32
	%106 = getelementptr [0 x %ast.AstNode*]* %103, i32 0, i32 %105
	%107 = load %ast.AstNode** %106
	%108 = icmp eq %ast.AstNode* %107, null
	br i1 %108, label %L.26, label %L.25
L.26:
	%109 = load %type.TypeNode** %t
	%110 = getelementptr %type.TypeNode* %109, i32 0, i32 0
	%111 = load %type.TypeNode** %110
	%112 = bitcast %type.TypeNode* %111 to %type.TypeNode*
	%113 = call %ast.AstNode* @ast_Const(%type.TypeNode* %112, i64 0)
	%114 = bitcast %ast.AstNode* %113 to %ast.AstNode*
	%115 = load %ast.AstNode** %tree
	%116 = getelementptr %ast.AstNode* %115, i32 0, i32 13
	%117 = load i16* %i
	%118 = zext i16 %117 to i32
	%119 = getelementptr [0 x %ast.AstNode*]* %116, i32 0, i32 %118
	store %ast.AstNode* %114, %ast.AstNode** %119
	br label %L.25
L.25:
	%120 = load i16* %i
	%121 = add i16 %120, 1
	store i16 %121, i16* %i
	br label %L.22
L.23:
	br label %L.27
L.27:
	%122 = load i16* %i
	%123 = load i16* %n
	%124 = icmp ult i16 %122, %123
	%125 = xor i1 %124, true
	br i1 %125, label %L.28, label %L.29
L.29:
	%126 = load %ast.AstNode** %tree
	%127 = bitcast %ast.AstNode* %126 to %ast.AstNode*
	%128 = load i16* %i
	%129 = load %type.TypeNode** %t
	%130 = getelementptr %type.TypeNode* %129, i32 0, i32 0
	%131 = load %type.TypeNode** %130
	%132 = bitcast %type.TypeNode* %131 to %type.TypeNode*
	%133 = call %ast.AstNode* @ast_Const(%type.TypeNode* %132, i64 0)
	%134 = bitcast %ast.AstNode* %133 to %ast.AstNode*
	%135 = call %ast.AstNode* @ast_ChildIndexed(%ast.AstNode* %127, i16 %128, %ast.AstNode* %134)
	%136 = bitcast %ast.AstNode* %135 to %ast.AstNode*
	store %ast.AstNode* %136, %ast.AstNode** %tree
	%137 = load i16* %i
	%138 = add i16 %137, 1
	store i16 %138, i16* %i
	br label %L.27
L.28:
	%139 = load %type.TypeNode** %t
	%140 = bitcast %type.TypeNode* %139 to %type.TypeNode*
	%141 = load %ast.AstNode** %tree
	%142 = getelementptr %ast.AstNode* %141, i32 0, i32 11
	store %type.TypeNode* %140, %type.TypeNode** %142
	%143 = load %type.TypeNode** %t
	%144 = getelementptr %type.TypeNode* %143, i32 0, i32 14
	%145 = load i8* %144
	%146 = icmp eq i8 %145, 2
	br i1 %146, label %L.31, label %L.30
L.31:
	%147 = load %type.TypeNode** %t
	%148 = bitcast %type.TypeNode* %147 to %type.TypeNode*
	%149 = load %ast.AstNode** %tree
	%150 = bitcast %ast.AstNode* %149 to %ast.AstNode*
	%151 = call %ast.AstNode* @expr_ArrayPack(%type.TypeNode* %148, %ast.AstNode* %150)
	%152 = bitcast %ast.AstNode* %151 to %ast.AstNode*
	store %ast.AstNode* %152, %ast.AstNode** %tree
	br label %L.30
L.30:
	br label %L.1
L.3:
	%153 = load i8* %tok
	%154 = icmp eq i8 %153, 39
	br i1 %154, label %L.33, label %L.34
L.33:
	%155 = call %ast.AstNode* @expr_String()
	%156 = bitcast %ast.AstNode* %155 to %ast.AstNode*
	store %ast.AstNode* %156, %ast.AstNode** %tree
	%157 = load %ast.AstNode** %tree
	%158 = getelementptr %ast.AstNode* %157, i32 0, i32 1
	store i8 4, i8* %158
	%159 = call i8 @lex_Next()
	store i8 %159, i8* %tok
	br label %L.32
L.34:
	call void @lex_ErrorT(i8 14, i8 36)
	br label %L.32
L.32:
	br label %L.1
L.1:
	%160 = load %ast.AstNode** %tree
	%161 = bitcast %ast.AstNode* %160 to %ast.AstNode*
	store %ast.AstNode* %161, %ast.AstNode** %rv.0
	br label %return
return:
	%162 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %162
}
define internal %ast.AstNode* @expr_RecordPack(%type.TypeNode* %t.arg, %ast.AstNode* %intree.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	%intree = alloca %ast.AstNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store %ast.AstNode* %intree.arg, %ast.AstNode** %intree
	%offs = alloca i32
	%tsize = alloca i32
	%fsize = alloca i32
	%f = alloca %symb.SymbNode*
	%i = alloca i16
	%tree = alloca %ast.AstNode*
	%vpart = alloca %ast.AstNode*
	%node = alloca %ast.AstNode*
	%cpart = alloca i64
	%ft = alloca %type.TypeNode*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %vpart
	store i64 0, i64* %cpart
	%1 = load %ast.AstNode** %intree
	%2 = getelementptr %ast.AstNode* %1, i32 0, i32 0
	%3 = load i8* %2
	%4 = icmp ne i8 %3, 14
	br i1 %4, label %L.2, label %L.1
L.2:
	call void @lex_Error(i8 71)
	%5 = load %ast.AstNode** %tree
	%6 = bitcast %ast.AstNode* %5 to %ast.AstNode*
	store %ast.AstNode* %6, %ast.AstNode** %rv.0
	br label %return
L.1:
	%7 = load %type.TypeNode** %t
	%8 = getelementptr %type.TypeNode* %7, i32 0, i32 9
	%9 = load i32* %8
	store i32 %9, i32* %tsize
	%10 = load %type.TypeNode** %t
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 4
	%12 = load %symb.SymbNode** %11
	%13 = bitcast %symb.SymbNode* %12 to %symb.SymbNode*
	store %symb.SymbNode* %13, %symb.SymbNode** %f
	%14 = load %type.TypeNode** %t
	%15 = getelementptr %type.TypeNode* %14, i32 0, i32 15
	%16 = load i8* %15
	%17 = icmp eq i8 %16, 1
	br i1 %17, label %L.4, label %L.5
L.4:
	%18 = load i32* %tsize
	store i32 %18, i32* %offs
	br label %L.3
L.5:
	store i32 0, i32* %offs
	br label %L.3
L.3:
	store i16 0, i16* %i
	br label %L.6
L.6:
	%19 = load %symb.SymbNode** %f
	%20 = icmp ne %symb.SymbNode* %19, null
	%21 = xor i1 %20, true
	br i1 %21, label %L.7, label %L.8
L.8:
	%22 = load %symb.SymbNode** %f
	%23 = getelementptr %symb.SymbNode* %22, i32 0, i32 1
	%24 = load %type.TypeNode** %23
	%25 = icmp ne %type.TypeNode* %24, null
	br i1 %25, label %L.10, label %L.9
L.10:
	%26 = load %symb.SymbNode** %f
	%27 = getelementptr %symb.SymbNode* %26, i32 0, i32 1
	%28 = load %type.TypeNode** %27
	%29 = bitcast %type.TypeNode* %28 to %type.TypeNode*
	store %type.TypeNode* %29, %type.TypeNode** %ft
	%30 = load %type.TypeNode** %ft
	%31 = getelementptr %type.TypeNode* %30, i32 0, i32 8
	%32 = load i32* %31
	store i32 %32, i32* %fsize
	%33 = load %type.TypeNode** %t
	%34 = getelementptr %type.TypeNode* %33, i32 0, i32 15
	%35 = load i8* %34
	%36 = icmp eq i8 %35, 1
	br i1 %36, label %L.12, label %L.11
L.12:
	%37 = load i32* %offs
	%38 = load i32* %fsize
	%39 = sub i32 %37, %38
	store i32 %39, i32* %offs
	br label %L.11
L.11:
	%40 = load i16* %i
	%41 = load %ast.AstNode** %intree
	%42 = getelementptr %ast.AstNode* %41, i32 0, i32 2
	%43 = load i16* %42
	%44 = icmp uge i16 %40, %43
	br i1 %44, label %L.14, label %L.13
L.14:
	call void @lex_Error(i8 70)
	%45 = load %ast.AstNode** %tree
	%46 = bitcast %ast.AstNode* %45 to %ast.AstNode*
	store %ast.AstNode* %46, %ast.AstNode** %rv.0
	br label %return
L.13:
	%47 = load %ast.AstNode** %intree
	%48 = getelementptr %ast.AstNode* %47, i32 0, i32 13
	%49 = load i16* %i
	%50 = zext i16 %49 to i32
	%51 = getelementptr [0 x %ast.AstNode*]* %48, i32 0, i32 %50
	%52 = load %ast.AstNode** %51
	%53 = bitcast %ast.AstNode* %52 to %ast.AstNode*
	store %ast.AstNode* %53, %ast.AstNode** %node
	%54 = load %ast.AstNode** %node
	%55 = getelementptr %ast.AstNode* %54, i32 0, i32 0
	%56 = load i8* %55
	%57 = icmp eq i8 %56, 7
	br i1 %57, label %L.16, label %L.17
L.16:
	%58 = load i64* %cpart
	%59 = load %ast.AstNode** %node
	%60 = getelementptr %ast.AstNode* %59, i32 0, i32 10
	%61 = load i64* %60
	%62 = load i32* %offs
	%63 = zext i32 %62 to i64
	%64 = shl i64 %61, %63
	%65 = or i64 %58, %64
	store i64 %65, i64* %cpart
	br label %L.15
L.17:
	%66 = load %ast.AstNode** %node
	%67 = bitcast %ast.AstNode* %66 to %ast.AstNode*
	%68 = load i32* %tsize
	%69 = call %ast.AstNode* @expr_Extend(%ast.AstNode* %67, i32 %68, i8 0)
	%70 = bitcast %ast.AstNode* %69 to %ast.AstNode*
	store %ast.AstNode* %70, %ast.AstNode** %node
	%71 = load %type.TypeNode** %ft
	%72 = bitcast %type.TypeNode* %71 to %type.TypeNode*
	%73 = load %ast.AstNode** %node
	%74 = bitcast %ast.AstNode* %73 to %ast.AstNode*
	%75 = load %type.TypeNode** @type_wordtype
	%76 = bitcast %type.TypeNode* %75 to %type.TypeNode*
	%77 = load i32* %offs
	%78 = zext i32 %77 to i64
	%79 = call %ast.AstNode* @ast_Const(%type.TypeNode* %76, i64 %78)
	%80 = bitcast %ast.AstNode* %79 to %ast.AstNode*
	%81 = call %ast.AstNode* @ast_New2(i8 53, %type.TypeNode* %72, %ast.AstNode* %74, %ast.AstNode* %80)
	%82 = bitcast %ast.AstNode* %81 to %ast.AstNode*
	store %ast.AstNode* %82, %ast.AstNode** %node
	%83 = load %ast.AstNode** %vpart
	%84 = icmp eq %ast.AstNode* %83, null
	br i1 %84, label %L.19, label %L.20
L.19:
	%85 = load %ast.AstNode** %node
	%86 = bitcast %ast.AstNode* %85 to %ast.AstNode*
	store %ast.AstNode* %86, %ast.AstNode** %vpart
	br label %L.18
L.20:
	%87 = load %type.TypeNode** %ft
	%88 = bitcast %type.TypeNode* %87 to %type.TypeNode*
	%89 = load %ast.AstNode** %vpart
	%90 = bitcast %ast.AstNode* %89 to %ast.AstNode*
	%91 = load %ast.AstNode** %node
	%92 = bitcast %ast.AstNode* %91 to %ast.AstNode*
	%93 = call %ast.AstNode* @ast_New2(i8 58, %type.TypeNode* %88, %ast.AstNode* %90, %ast.AstNode* %92)
	%94 = bitcast %ast.AstNode* %93 to %ast.AstNode*
	store %ast.AstNode* %94, %ast.AstNode** %vpart
	br label %L.18
L.18:
	br label %L.15
L.15:
	%95 = load %type.TypeNode** %t
	%96 = getelementptr %type.TypeNode* %95, i32 0, i32 15
	%97 = load i8* %96
	%98 = icmp ne i8 %97, 1
	br i1 %98, label %L.22, label %L.21
L.22:
	%99 = load i32* %offs
	%100 = load i32* %fsize
	%101 = add i32 %99, %100
	store i32 %101, i32* %offs
	br label %L.21
L.21:
	br label %L.9
L.9:
	%102 = load %symb.SymbNode** %f
	%103 = getelementptr %symb.SymbNode* %102, i32 0, i32 0
	%104 = load %symb.SymbNode** %103
	%105 = bitcast %symb.SymbNode* %104 to %symb.SymbNode*
	store %symb.SymbNode* %105, %symb.SymbNode** %f
	%106 = load i16* %i
	%107 = add i16 %106, 1
	store i16 %107, i16* %i
	br label %L.6
L.7:
	%108 = load %type.TypeNode** @type_wordtype
	%109 = bitcast %type.TypeNode* %108 to %type.TypeNode*
	%110 = load i64* %cpart
	%111 = call %ast.AstNode* @ast_Const(%type.TypeNode* %109, i64 %110)
	%112 = bitcast %ast.AstNode* %111 to %ast.AstNode*
	%113 = load i32* %tsize
	%114 = call %ast.AstNode* @expr_Extend(%ast.AstNode* %112, i32 %113, i8 0)
	%115 = bitcast %ast.AstNode* %114 to %ast.AstNode*
	store %ast.AstNode* %115, %ast.AstNode** %tree
	%116 = load %ast.AstNode** %vpart
	%117 = icmp ne %ast.AstNode* %116, null
	br i1 %117, label %L.24, label %L.23
L.24:
	%118 = load %type.TypeNode** @type_wordtype
	%119 = bitcast %type.TypeNode* %118 to %type.TypeNode*
	%120 = load %ast.AstNode** %tree
	%121 = bitcast %ast.AstNode* %120 to %ast.AstNode*
	%122 = load %ast.AstNode** %vpart
	%123 = bitcast %ast.AstNode* %122 to %ast.AstNode*
	%124 = call %ast.AstNode* @ast_New2(i8 58, %type.TypeNode* %119, %ast.AstNode* %121, %ast.AstNode* %123)
	%125 = bitcast %ast.AstNode* %124 to %ast.AstNode*
	store %ast.AstNode* %125, %ast.AstNode** %tree
	br label %L.23
L.23:
	%126 = load %type.TypeNode** %t
	%127 = bitcast %type.TypeNode* %126 to %type.TypeNode*
	%128 = load %ast.AstNode** %tree
	%129 = getelementptr %ast.AstNode* %128, i32 0, i32 11
	store %type.TypeNode* %127, %type.TypeNode** %129
	%130 = load %ast.AstNode** %tree
	%131 = getelementptr %ast.AstNode* %130, i32 0, i32 1
	store i8 6, i8* %131
	%132 = load %ast.AstNode** %tree
	%133 = bitcast %ast.AstNode* %132 to %ast.AstNode*
	store %ast.AstNode* %133, %ast.AstNode** %rv.0
	br label %return
return:
	%134 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %134
}
define internal %ast.AstNode* @expr_RecordConst(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%stree = alloca %ast.AstNode*
	%fs = alloca %symb.SymbNode*
	%ft = alloca %type.TypeNode*
	%max = alloca i16
	%tok = alloca i8
	%once = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 36
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %type.TypeNode** %t
	%5 = bitcast %type.TypeNode* %4 to %type.TypeNode*
	%6 = call %ast.AstNode* @ast_New(i8 14, %type.TypeNode* %5)
	%7 = bitcast %ast.AstNode* %6 to %ast.AstNode*
	store %ast.AstNode* %7, %ast.AstNode** %tree
	%8 = load i64* @expr_strid
	%9 = add i64 %8, 1
	store i64 %9, i64* @expr_strid
	%10 = load i64* @expr_strid
	%11 = load %ast.AstNode** %tree
	%12 = getelementptr %ast.AstNode* %11, i32 0, i32 10
	store i64 %10, i64* %12
	store i8 0, i8* %once
	store i16 0, i16* %max
	%13 = load %type.TypeNode** %t
	%14 = getelementptr %type.TypeNode* %13, i32 0, i32 4
	%15 = load %symb.SymbNode** %14
	%16 = bitcast %symb.SymbNode* %15 to %symb.SymbNode*
	store %symb.SymbNode* %16, %symb.SymbNode** %fs
	br label %L.4
L.4:
	%17 = call i8 @lex_Next()
	store i8 %17, i8* %tok
	%18 = load i8* %tok
	%19 = icmp eq i8 %18, 2
	br i1 %19, label %L.7, label %L.6
L.7:
	%20 = call i8 @lex_Next()
	store i8 %20, i8* %tok
	%21 = load i8* %tok
	%22 = icmp eq i8 %21, 40
	br i1 %22, label %L.9, label %L.10
L.9:
	%23 = load %type.TypeNode** %t
	%24 = getelementptr %type.TypeNode* %23, i32 0, i32 4
	%25 = load %symb.SymbNode** %24
	%26 = bitcast %symb.SymbNode* %25 to %symb.SymbNode*
	%27 = getelementptr [64 x i8]* @lex_Ident
	%28 = bitcast [64 x i8]* %27 to [0 x i8]*
	%29 = call %symb.SymbNode* @symb_FindLocal(%symb.SymbNode* %26, [0 x i8]* %28)
	%30 = bitcast %symb.SymbNode* %29 to %symb.SymbNode*
	store %symb.SymbNode* %30, %symb.SymbNode** %fs
	%31 = load %symb.SymbNode** %fs
	%32 = icmp eq %symb.SymbNode* %31, null
	br i1 %32, label %L.12, label %L.11
L.12:
	%33 = getelementptr [64 x i8]* @lex_Ident
	%34 = bitcast [64 x i8]* %33 to [0 x i8]*
	call void @lex_ErrorI(i8 16, [0 x i8]* %34)
	br label %L.11
L.11:
	%35 = call i8 @lex_Next()
	store i8 %35, i8* %tok
	br label %L.8
L.10:
	call void @lex_Error(i8 15)
	br label %L.8
L.8:
	%36 = call i8 @lex_Expect(i8 9)
	store i8 %36, i8* %tok
	br label %L.6
L.6:
	%37 = bitcast %type.TypeNode* null to %type.TypeNode*
	store %type.TypeNode* %37, %type.TypeNode** %ft
	%38 = load %symb.SymbNode** %fs
	%39 = icmp ne %symb.SymbNode* %38, null
	br i1 %39, label %L.14, label %L.13
L.14:
	%40 = load %symb.SymbNode** %fs
	%41 = getelementptr %symb.SymbNode* %40, i32 0, i32 1
	%42 = load %type.TypeNode** %41
	%43 = bitcast %type.TypeNode* %42 to %type.TypeNode*
	store %type.TypeNode* %43, %type.TypeNode** %ft
	br label %L.13
L.13:
	%44 = load %type.TypeNode** %ft
	%45 = bitcast %type.TypeNode* %44 to %type.TypeNode*
	%46 = call %ast.AstNode* @expr_Const(%type.TypeNode* %45)
	%47 = bitcast %ast.AstNode* %46 to %ast.AstNode*
	store %ast.AstNode* %47, %ast.AstNode** %stree
	%48 = load %symb.SymbNode** %fs
	%49 = icmp ne %symb.SymbNode* %48, null
	br i1 %49, label %L.16, label %L.17
L.16:
	%50 = load %ast.AstNode** %tree
	%51 = bitcast %ast.AstNode* %50 to %ast.AstNode*
	%52 = load %symb.SymbNode** %fs
	%53 = getelementptr %symb.SymbNode* %52, i32 0, i32 9
	%54 = load i16* %53
	%55 = load %ast.AstNode** %stree
	%56 = bitcast %ast.AstNode* %55 to %ast.AstNode*
	%57 = call %ast.AstNode* @ast_ChildIndexed(%ast.AstNode* %51, i16 %54, %ast.AstNode* %56)
	%58 = bitcast %ast.AstNode* %57 to %ast.AstNode*
	store %ast.AstNode* %58, %ast.AstNode** %tree
	%59 = load %symb.SymbNode** %fs
	%60 = getelementptr %symb.SymbNode* %59, i32 0, i32 9
	%61 = load i16* %60
	%62 = load i16* %max
	%63 = icmp ugt i16 %61, %62
	br i1 %63, label %L.19, label %L.18
L.19:
	%64 = load %symb.SymbNode** %fs
	%65 = getelementptr %symb.SymbNode* %64, i32 0, i32 9
	%66 = load i16* %65
	store i16 %66, i16* %max
	br label %L.18
L.18:
	%67 = load %symb.SymbNode** %fs
	%68 = getelementptr %symb.SymbNode* %67, i32 0, i32 0
	%69 = load %symb.SymbNode** %68
	%70 = bitcast %symb.SymbNode* %69 to %symb.SymbNode*
	store %symb.SymbNode* %70, %symb.SymbNode** %fs
	br label %L.15
L.17:
	%71 = load i8* %once
	%72 = icmp ne i8 %71, 0
	%73 = xor i1 %72, true
	br i1 %73, label %L.21, label %L.20
L.21:
	store i8 1, i8* %once
	call void @lex_Error(i8 66)
	br label %L.20
L.20:
	br label %L.15
L.15:
	%74 = load i8* @lex_Token
	store i8 %74, i8* %tok
	%75 = load i8* %tok
	%76 = icmp ne i8 %75, 5
	br i1 %76, label %L.5, label %L.22
L.22:
	br label %L.4
L.5:
	%77 = call i8 @lex_Expect(i8 37)
	store i8 %77, i8* %tok
	%78 = load %type.TypeNode** %t
	%79 = getelementptr %type.TypeNode* %78, i32 0, i32 4
	%80 = load %symb.SymbNode** %79
	%81 = bitcast %symb.SymbNode* %80 to %symb.SymbNode*
	store %symb.SymbNode* %81, %symb.SymbNode** %fs
	br label %L.23
L.23:
	%82 = load %symb.SymbNode** %fs
	%83 = icmp ne %symb.SymbNode* %82, null
	br i1 %83, label %L.26, label %L.27
L.26:
	%84 = load %symb.SymbNode** %fs
	%85 = getelementptr %symb.SymbNode* %84, i32 0, i32 9
	%86 = load i16* %85
	%87 = load i16* %max
	%88 = icmp ule i16 %86, %87
	br label %L.27
L.27:
	%89 = phi i1 [ false, %L.23 ], [ %88, %L.26 ]
	%90 = xor i1 %89, true
	br i1 %90, label %L.24, label %L.25
L.25:
	%91 = load %ast.AstNode** %tree
	%92 = getelementptr %ast.AstNode* %91, i32 0, i32 13
	%93 = load %symb.SymbNode** %fs
	%94 = getelementptr %symb.SymbNode* %93, i32 0, i32 9
	%95 = load i16* %94
	%96 = zext i16 %95 to i32
	%97 = getelementptr [0 x %ast.AstNode*]* %92, i32 0, i32 %96
	%98 = load %ast.AstNode** %97
	%99 = icmp eq %ast.AstNode* %98, null
	br i1 %99, label %L.29, label %L.28
L.29:
	%100 = load %symb.SymbNode** %fs
	%101 = getelementptr %symb.SymbNode* %100, i32 0, i32 1
	%102 = load %type.TypeNode** %101
	%103 = bitcast %type.TypeNode* %102 to %type.TypeNode*
	%104 = call %ast.AstNode* @ast_Const(%type.TypeNode* %103, i64 0)
	%105 = bitcast %ast.AstNode* %104 to %ast.AstNode*
	%106 = load %ast.AstNode** %tree
	%107 = getelementptr %ast.AstNode* %106, i32 0, i32 13
	%108 = load %symb.SymbNode** %fs
	%109 = getelementptr %symb.SymbNode* %108, i32 0, i32 9
	%110 = load i16* %109
	%111 = zext i16 %110 to i32
	%112 = getelementptr [0 x %ast.AstNode*]* %107, i32 0, i32 %111
	store %ast.AstNode* %105, %ast.AstNode** %112
	br label %L.28
L.28:
	%113 = load %symb.SymbNode** %fs
	%114 = getelementptr %symb.SymbNode* %113, i32 0, i32 0
	%115 = load %symb.SymbNode** %114
	%116 = bitcast %symb.SymbNode* %115 to %symb.SymbNode*
	store %symb.SymbNode* %116, %symb.SymbNode** %fs
	br label %L.23
L.24:
	br label %L.30
L.30:
	%117 = load %symb.SymbNode** %fs
	%118 = icmp ne %symb.SymbNode* %117, null
	%119 = xor i1 %118, true
	br i1 %119, label %L.31, label %L.32
L.32:
	%120 = load %ast.AstNode** %tree
	%121 = bitcast %ast.AstNode* %120 to %ast.AstNode*
	%122 = load %symb.SymbNode** %fs
	%123 = getelementptr %symb.SymbNode* %122, i32 0, i32 9
	%124 = load i16* %123
	%125 = load %symb.SymbNode** %fs
	%126 = getelementptr %symb.SymbNode* %125, i32 0, i32 1
	%127 = load %type.TypeNode** %126
	%128 = bitcast %type.TypeNode* %127 to %type.TypeNode*
	%129 = call %ast.AstNode* @ast_Const(%type.TypeNode* %128, i64 0)
	%130 = bitcast %ast.AstNode* %129 to %ast.AstNode*
	%131 = call %ast.AstNode* @ast_ChildIndexed(%ast.AstNode* %121, i16 %124, %ast.AstNode* %130)
	%132 = bitcast %ast.AstNode* %131 to %ast.AstNode*
	store %ast.AstNode* %132, %ast.AstNode** %tree
	%133 = load %symb.SymbNode** %fs
	%134 = getelementptr %symb.SymbNode* %133, i32 0, i32 0
	%135 = load %symb.SymbNode** %134
	%136 = bitcast %symb.SymbNode* %135 to %symb.SymbNode*
	store %symb.SymbNode* %136, %symb.SymbNode** %fs
	br label %L.30
L.31:
	%137 = load %type.TypeNode** %t
	%138 = getelementptr %type.TypeNode* %137, i32 0, i32 14
	%139 = load i8* %138
	%140 = icmp eq i8 %139, 2
	br i1 %140, label %L.34, label %L.33
L.34:
	%141 = load %type.TypeNode** %t
	%142 = bitcast %type.TypeNode* %141 to %type.TypeNode*
	%143 = load %ast.AstNode** %tree
	%144 = bitcast %ast.AstNode* %143 to %ast.AstNode*
	%145 = call %ast.AstNode* @expr_RecordPack(%type.TypeNode* %142, %ast.AstNode* %144)
	%146 = bitcast %ast.AstNode* %145 to %ast.AstNode*
	store %ast.AstNode* %146, %ast.AstNode** %tree
	br label %L.33
L.33:
	br label %L.1
L.3:
	call void @lex_ErrorT(i8 14, i8 36)
	br label %L.1
L.1:
	%147 = load %ast.AstNode** %tree
	%148 = bitcast %ast.AstNode* %147 to %ast.AstNode*
	store %ast.AstNode* %148, %ast.AstNode** %rv.0
	br label %return
return:
	%149 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %149
}
define internal %ast.AstNode* @expr_CompositeValue(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load %type.TypeNode** %t
	%2 = icmp ne %type.TypeNode* %1, null
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = load %type.TypeNode** %t
	%4 = getelementptr %type.TypeNode* %3, i32 0, i32 13
	%5 = load i8* %4
	%6 = zext i8 %5 to i32
	switch i32 %6, label %L.4 [
		i32 6, label %L.6
		i32 5, label %L.7
		i32 4, label %L.8
	]
L.6:
	%7 = load %type.TypeNode** %t
	%8 = bitcast %type.TypeNode* %7 to %type.TypeNode*
	%9 = call %ast.AstNode* @expr_RecordConst(%type.TypeNode* %8)
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	store %ast.AstNode* %10, %ast.AstNode** %tree
	br label %L.5
L.7:
	%11 = load %type.TypeNode** %t
	%12 = bitcast %type.TypeNode* %11 to %type.TypeNode*
	%13 = call %ast.AstNode* @expr_ArrayConst(%type.TypeNode* %12)
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	store %ast.AstNode* %14, %ast.AstNode** %tree
	br label %L.5
L.8:
	%15 = load %type.TypeNode** %t
	%16 = getelementptr %type.TypeNode* %15, i32 0, i32 0
	%17 = load %type.TypeNode** %16
	%18 = bitcast %type.TypeNode* %17 to %type.TypeNode*
	%19 = call %ast.AstNode* @expr_CompositeValue(%type.TypeNode* %18)
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	store %ast.AstNode* %20, %ast.AstNode** %tree
	br label %L.5
L.4:
	call void @lex_Error(i8 49)
	br label %L.5
L.5:
	br label %L.1
L.3:
	call void @lex_Error(i8 48)
	br label %L.1
L.1:
	%21 = load %ast.AstNode** %tree
	%22 = bitcast %ast.AstNode* %21 to %ast.AstNode*
	store %ast.AstNode* %22, %ast.AstNode** %rv.0
	br label %return
return:
	%23 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %23
}
define internal i32 @expr_CalcAlign(i32 %base.arg, i32 %offset.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%base = alloca i32
	%offset = alloca i32
	store i32 %base.arg, i32* %base
	store i32 %offset.arg, i32* %offset
	%new = alloca i32
	%tz = alloca i32
	%0 = load i32* %offset
	%1 = icmp eq i32 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i32* %base
	store i32 %2, i32* %new
	br label %L.1
L.3:
	store i32 0, i32* %tz
	br label %L.4
L.4:
	%3 = load i32* %offset
	%4 = and i32 %3, 1
	%5 = icmp eq i32 %4, 0
	%6 = xor i1 %5, true
	br i1 %6, label %L.5, label %L.6
L.6:
	%7 = load i32* %offset
	%8 = lshr i32 %7, 1
	store i32 %8, i32* %offset
	%9 = load i32* %tz
	%10 = add i32 %9, 1
	store i32 %10, i32* %tz
	br label %L.4
L.5:
	%11 = load i32* %tz
	%12 = shl i32 1, %11
	store i32 %12, i32* %new
	%13 = load i32* %base
	%14 = load i32* %new
	%15 = icmp ult i32 %13, %14
	%16 = select i1 %15, i32 %13, i32 %14
	store i32 %16, i32* %new
	br label %L.1
L.1:
	%17 = load i32* %new
	store i32 %17, i32* %rv.0
	br label %return
return:
	%18 = load i32* %rv.0
	ret i32 %18
}
define internal i32 @expr_FieldAlign(i32 %base.arg, %type.TypeNode* %record.arg, i32 %fieldno.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%base = alloca i32
	%record = alloca %type.TypeNode*
	%fieldno = alloca i32
	store i32 %base.arg, i32* %base
	store %type.TypeNode* %record.arg, %type.TypeNode** %record
	store i32 %fieldno.arg, i32* %fieldno
	%offs = alloca i32
	%i = alloca i32
	%s = alloca %symb.SymbNode*
	%0 = load %type.TypeNode** %record
	%1 = getelementptr %type.TypeNode* %0, i32 0, i32 13
	%2 = load i8* %1
	%3 = icmp ne i8 %2, 6
	br i1 %3, label %L.2, label %L.1
L.2:
	store i32 0, i32* %rv.0
	br label %return
L.1:
	store i32 0, i32* %offs
	store i32 0, i32* %i
	%4 = load %type.TypeNode** %record
	%5 = getelementptr %type.TypeNode* %4, i32 0, i32 4
	%6 = load %symb.SymbNode** %5
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	store %symb.SymbNode* %7, %symb.SymbNode** %s
	br label %L.3
L.3:
	%8 = load i32* %i
	%9 = load i32* %fieldno
	%10 = icmp ult i32 %8, %9
	br i1 %10, label %L.6, label %L.7
L.6:
	%11 = load %symb.SymbNode** %s
	%12 = icmp ne %symb.SymbNode* %11, null
	br label %L.7
L.7:
	%13 = phi i1 [ false, %L.3 ], [ %12, %L.6 ]
	%14 = xor i1 %13, true
	br i1 %14, label %L.4, label %L.5
L.5:
	%15 = load %type.TypeNode** %record
	%16 = getelementptr %type.TypeNode* %15, i32 0, i32 14
	%17 = load i8* %16
	%18 = icmp eq i8 %17, 2
	br i1 %18, label %L.9, label %L.10
L.9:
	%19 = load i32* %offs
	%20 = load %symb.SymbNode** %s
	%21 = getelementptr %symb.SymbNode* %20, i32 0, i32 1
	%22 = load %type.TypeNode** %21
	%23 = getelementptr %type.TypeNode* %22, i32 0, i32 8
	%24 = load i32* %23
	%25 = add i32 %19, %24
	store i32 %25, i32* %offs
	br label %L.8
L.10:
	%26 = load i32* %offs
	%27 = load %symb.SymbNode** %s
	%28 = getelementptr %symb.SymbNode* %27, i32 0, i32 1
	%29 = load %type.TypeNode** %28
	%30 = getelementptr %type.TypeNode* %29, i32 0, i32 9
	%31 = load i32* %30
	%32 = load %target.TargetT** @target_Target
	%33 = getelementptr %target.TargetT* %32, i32 0, i32 3
	%34 = load i8* %33
	%35 = zext i8 %34 to i32
	%36 = udiv i32 %31, %35
	%37 = add i32 %26, %36
	store i32 %37, i32* %offs
	br label %L.8
L.8:
	%38 = load i32* %i
	%39 = add i32 %38, 1
	store i32 %39, i32* %i
	%40 = load %symb.SymbNode** %s
	%41 = getelementptr %symb.SymbNode* %40, i32 0, i32 0
	%42 = load %symb.SymbNode** %41
	%43 = bitcast %symb.SymbNode* %42 to %symb.SymbNode*
	store %symb.SymbNode* %43, %symb.SymbNode** %s
	br label %L.3
L.4:
	%44 = load i32* %base
	%45 = load i32* %offs
	%46 = call i32 @expr_CalcAlign(i32 %44, i32 %45)
	store i32 %46, i32* %rv.0
	br label %return
return:
	%47 = load i32* %rv.0
	ret i32 %47
}
@S.550 = internal constant [30 x i8] c"GetAlignment: unexpected node\00"define internal i32 @expr_GetAlignment(%ast.AstNode* %tree.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%tree = alloca %ast.AstNode*
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	%alignment = alloca i32
	%0 = load %ast.AstNode** %tree
	%1 = icmp eq %ast.AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	store i32 0, i32* %rv.0
	br label %return
L.1:
	%2 = load %ast.AstNode** %tree
	%3 = getelementptr %ast.AstNode* %2, i32 0, i32 0
	%4 = load i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.3 [
		i32 9, label %L.5
		i32 25, label %L.6
		i32 30, label %L.7
		i32 16, label %L.8
		i32 17, label %L.9
		i32 18, label %L.9
		i32 14, label %L.10
		i32 8, label %L.10
	]
L.5:
	%6 = load %ast.AstNode** %tree
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 11
	%8 = load %type.TypeNode** %7
	%9 = icmp ne %type.TypeNode* %8, null
	br i1 %9, label %L.12, label %L.13
L.12:
	%10 = load %ast.AstNode** %tree
	%11 = getelementptr %ast.AstNode* %10, i32 0, i32 11
	%12 = load %type.TypeNode** %11
	%13 = getelementptr %type.TypeNode* %12, i32 0, i32 10
	%14 = load i32* %13
	%15 = load %target.TargetT** @target_Target
	%16 = getelementptr %target.TargetT* %15, i32 0, i32 3
	%17 = load i8* %16
	%18 = zext i8 %17 to i32
	%19 = udiv i32 %14, %18
	store i32 %19, i32* %alignment
	br label %L.11
L.13:
	store i32 0, i32* %alignment
	br label %L.11
L.11:
	br label %L.4
L.6:
	%20 = load %ast.AstNode** %tree
	%21 = getelementptr %ast.AstNode* %20, i32 0, i32 1
	%22 = load i8* %21
	%23 = icmp eq i8 %22, 4
	br i1 %23, label %L.14, label %L.15
L.14:
	%24 = load %ast.AstNode** %tree
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 11
	%26 = load %type.TypeNode** %25
	%27 = icmp ne %type.TypeNode* %26, null
	br label %L.15
L.15:
	%28 = phi i1 [ false, %L.6 ], [ %27, %L.14 ]
	br i1 %28, label %L.17, label %L.18
L.17:
	%29 = load %ast.AstNode** %tree
	%30 = getelementptr %ast.AstNode* %29, i32 0, i32 11
	%31 = load %type.TypeNode** %30
	%32 = getelementptr %type.TypeNode* %31, i32 0, i32 10
	%33 = load i32* %32
	%34 = load %target.TargetT** @target_Target
	%35 = getelementptr %target.TargetT* %34, i32 0, i32 3
	%36 = load i8* %35
	%37 = zext i8 %36 to i32
	%38 = udiv i32 %33, %37
	store i32 %38, i32* %alignment
	br label %L.16
L.18:
	store i32 0, i32* %alignment
	br label %L.16
L.16:
	br label %L.4
L.7:
	%39 = load %ast.AstNode** %tree
	%40 = getelementptr %ast.AstNode* %39, i32 0, i32 13
	%41 = getelementptr [0 x %ast.AstNode*]* %40, i32 0, i32 0
	%42 = load %ast.AstNode** %41
	%43 = bitcast %ast.AstNode* %42 to %ast.AstNode*
	%44 = call i32 @expr_GetAlignment(%ast.AstNode* %43)
	store i32 %44, i32* %alignment
	br label %L.4
L.8:
	%45 = load %ast.AstNode** %tree
	%46 = getelementptr %ast.AstNode* %45, i32 0, i32 13
	%47 = getelementptr [0 x %ast.AstNode*]* %46, i32 0, i32 0
	%48 = load %ast.AstNode** %47
	%49 = bitcast %ast.AstNode* %48 to %ast.AstNode*
	%50 = call i32 @expr_GetAlignment(%ast.AstNode* %49)
	store i32 %50, i32* %alignment
	%51 = load i32* %alignment
	%52 = icmp ne i32 %51, 0
	br i1 %52, label %L.20, label %L.19
L.20:
	%53 = load i32* %alignment
	%54 = load %ast.AstNode** %tree
	%55 = getelementptr %ast.AstNode* %54, i32 0, i32 13
	%56 = getelementptr [0 x %ast.AstNode*]* %55, i32 0, i32 0
	%57 = load %ast.AstNode** %56
	%58 = getelementptr %ast.AstNode* %57, i32 0, i32 11
	%59 = load %type.TypeNode** %58
	%60 = bitcast %type.TypeNode* %59 to %type.TypeNode*
	%61 = load %ast.AstNode** %tree
	%62 = getelementptr %ast.AstNode* %61, i32 0, i32 10
	%63 = load i64* %62
	%64 = trunc i64 %63 to i32
	%65 = call i32 @expr_FieldAlign(i32 %53, %type.TypeNode* %60, i32 %64)
	store i32 %65, i32* %alignment
	br label %L.19
L.19:
	br label %L.4
L.9:
	%66 = load %ast.AstNode** %tree
	%67 = getelementptr %ast.AstNode* %66, i32 0, i32 13
	%68 = getelementptr [0 x %ast.AstNode*]* %67, i32 0, i32 0
	%69 = load %ast.AstNode** %68
	%70 = bitcast %ast.AstNode* %69 to %ast.AstNode*
	%71 = call i32 @expr_GetAlignment(%ast.AstNode* %70)
	store i32 %71, i32* %alignment
	%72 = load i32* %alignment
	%73 = icmp ne i32 %72, 0
	br i1 %73, label %L.22, label %L.21
L.22:
	%74 = load %ast.AstNode** %tree
	%75 = getelementptr %ast.AstNode* %74, i32 0, i32 13
	%76 = getelementptr [0 x %ast.AstNode*]* %75, i32 0, i32 1
	%77 = load %ast.AstNode** %76
	%78 = getelementptr %ast.AstNode* %77, i32 0, i32 0
	%79 = load i8* %78
	%80 = icmp eq i8 %79, 7
	br i1 %80, label %L.24, label %L.25
L.24:
	%size = alloca i32
	%81 = load %ast.AstNode** %tree
	%82 = getelementptr %ast.AstNode* %81, i32 0, i32 13
	%83 = getelementptr [0 x %ast.AstNode*]* %82, i32 0, i32 0
	%84 = load %ast.AstNode** %83
	%85 = getelementptr %ast.AstNode* %84, i32 0, i32 11
	%86 = load %type.TypeNode** %85
	%87 = getelementptr %type.TypeNode* %86, i32 0, i32 0
	%88 = load %type.TypeNode** %87
	%89 = getelementptr %type.TypeNode* %88, i32 0, i32 9
	%90 = load i32* %89
	%91 = load %target.TargetT** @target_Target
	%92 = getelementptr %target.TargetT* %91, i32 0, i32 3
	%93 = load i8* %92
	%94 = zext i8 %93 to i32
	%95 = udiv i32 %90, %94
	store i32 %95, i32* %size
	%96 = load i32* %alignment
	%97 = load %ast.AstNode** %tree
	%98 = getelementptr %ast.AstNode* %97, i32 0, i32 13
	%99 = getelementptr [0 x %ast.AstNode*]* %98, i32 0, i32 1
	%100 = load %ast.AstNode** %99
	%101 = getelementptr %ast.AstNode* %100, i32 0, i32 10
	%102 = load i64* %101
	%103 = trunc i64 %102 to i32
	%104 = load i32* %size
	%105 = mul i32 %103, %104
	%106 = call i32 @expr_CalcAlign(i32 %96, i32 %105)
	store i32 %106, i32* %alignment
	br label %L.23
L.25:
	store i32 0, i32* %alignment
	br label %L.23
L.23:
	br label %L.21
L.21:
	br label %L.4
L.10:
	%107 = load %ast.AstNode** %tree
	%108 = getelementptr %ast.AstNode* %107, i32 0, i32 11
	%109 = load %type.TypeNode** %108
	%110 = getelementptr %type.TypeNode* %109, i32 0, i32 10
	%111 = load i32* %110
	store i32 %111, i32* %alignment
	br label %L.4
L.3:
	%112 = getelementptr [30 x i8]* @S.550
	%113 = bitcast [30 x i8]* %112 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %113)
	%114 = load %ast.AstNode** %tree
	%115 = bitcast %ast.AstNode* %114 to %ast.AstNode*
	call void @ast_Dump(%ast.AstNode* %115)
	br label %L.4
L.4:
	%116 = load i32* %alignment
	store i32 %116, i32* %rv.0
	br label %return
return:
	%117 = load i32* %rv.0
	ret i32 %117
}
define internal %ast.AstNode* @expr_Slice(%ast.AstNode* %array.arg, %ast.AstNode* %inx.arg, %ast.AstNode* %len.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%array = alloca %ast.AstNode*
	%inx = alloca %ast.AstNode*
	%len = alloca %ast.AstNode*
	store %ast.AstNode* %array.arg, %ast.AstNode** %array
	store %ast.AstNode* %inx.arg, %ast.AstNode** %inx
	store %ast.AstNode* %len.arg, %ast.AstNode** %len
	%at = alloca %type.TypeNode*
	%st = alloca %type.TypeNode*
	%tree = alloca %ast.AstNode*
	%blen = alloca i32
	%slen = alloca i32
	%0 = load %ast.AstNode** %array
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 11
	%2 = load %type.TypeNode** %1
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	store %type.TypeNode* %3, %type.TypeNode** %at
	%4 = call %type.TypeNode* @type_New(i8 5)
	%5 = bitcast %type.TypeNode* %4 to %type.TypeNode*
	store %type.TypeNode* %5, %type.TypeNode** %st
	%6 = load %type.TypeNode** %at
	%7 = getelementptr %type.TypeNode* %6, i32 0, i32 0
	%8 = load %type.TypeNode** %7
	%9 = bitcast %type.TypeNode* %8 to %type.TypeNode*
	%10 = load %type.TypeNode** %st
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 0
	store %type.TypeNode* %9, %type.TypeNode** %11
	%12 = load %type.TypeNode** %at
	%13 = getelementptr %type.TypeNode* %12, i32 0, i32 14
	%14 = load i8* %13
	%15 = load %type.TypeNode** %st
	%16 = getelementptr %type.TypeNode* %15, i32 0, i32 14
	store i8 %14, i8* %16
	%17 = load %type.TypeNode** %at
	%18 = getelementptr %type.TypeNode* %17, i32 0, i32 16
	%19 = load i8* %18
	%20 = load %type.TypeNode** %st
	%21 = getelementptr %type.TypeNode* %20, i32 0, i32 16
	store i8 %19, i8* %21
	store i32 0, i32* %blen
	store i32 0, i32* %slen
	%22 = load %type.TypeNode** %at
	%23 = getelementptr %type.TypeNode* %22, i32 0, i32 18
	%24 = load i8* %23
	%25 = icmp ne i8 %24, 0
	%26 = xor i1 %25, true
	br i1 %26, label %L.2, label %L.1
L.2:
	%27 = load %type.TypeNode** %at
	%28 = getelementptr %type.TypeNode* %27, i32 0, i32 7
	%29 = load i64* %28
	%30 = trunc i64 %29 to i32
	store i32 %30, i32* %blen
	br label %L.1
L.1:
	%31 = load %ast.AstNode** %len
	%32 = icmp ne %ast.AstNode* %31, null
	br i1 %32, label %L.3, label %L.4
L.3:
	%33 = load %ast.AstNode** %len
	%34 = getelementptr %ast.AstNode* %33, i32 0, i32 0
	%35 = load i8* %34
	%36 = icmp eq i8 %35, 7
	br label %L.4
L.4:
	%37 = phi i1 [ false, %L.1 ], [ %36, %L.3 ]
	br i1 %37, label %L.6, label %L.5
L.6:
	%38 = load %ast.AstNode** %len
	%39 = getelementptr %ast.AstNode* %38, i32 0, i32 10
	%40 = load i64* %39
	%41 = trunc i64 %40 to i32
	store i32 %41, i32* %slen
	br label %L.5
L.5:
	%42 = load i32* %blen
	%43 = icmp eq i32 %42, 0
	br i1 %43, label %L.7, label %L.8
L.7:
	%44 = load i32* %slen
	%45 = icmp eq i32 %44, 0
	br label %L.8
L.8:
	%46 = phi i1 [ false, %L.5 ], [ %45, %L.7 ]
	br i1 %46, label %L.10, label %L.11
L.10:
	%47 = load %type.TypeNode** %st
	%48 = getelementptr %type.TypeNode* %47, i32 0, i32 18
	store i8 1, i8* %48
	br label %L.9
L.11:
	%49 = load i32* %slen
	%50 = icmp eq i32 %49, 0
	br i1 %50, label %L.13, label %L.14
L.13:
	%51 = load i32* %blen
	store i32 %51, i32* %slen
	%52 = load %ast.AstNode** %inx
	%53 = getelementptr %ast.AstNode* %52, i32 0, i32 0
	%54 = load i8* %53
	%55 = icmp eq i8 %54, 7
	br i1 %55, label %L.16, label %L.15
L.16:
	%56 = load i32* %blen
	%57 = load %ast.AstNode** %inx
	%58 = getelementptr %ast.AstNode* %57, i32 0, i32 10
	%59 = load i64* %58
	%60 = trunc i64 %59 to i32
	%61 = sub i32 %56, %60
	store i32 %61, i32* %slen
	br label %L.15
L.15:
	br label %L.12
L.14:
	br label %L.12
L.12:
	%62 = load i32* %slen
	%63 = zext i32 %62 to i64
	%64 = load %type.TypeNode** %st
	%65 = getelementptr %type.TypeNode* %64, i32 0, i32 7
	store i64 %63, i64* %65
	br label %L.9
L.9:
	%66 = load %type.TypeNode** %at
	%67 = getelementptr %type.TypeNode* %66, i32 0, i32 0
	%68 = load %type.TypeNode** %67
	%69 = getelementptr %type.TypeNode* %68, i32 0, i32 8
	%70 = load i32* %69
	%71 = load i32* %slen
	%72 = mul i32 %70, %71
	%73 = load %type.TypeNode** %st
	%74 = getelementptr %type.TypeNode* %73, i32 0, i32 8
	store i32 %72, i32* %74
	%75 = load %type.TypeNode** %st
	%76 = getelementptr %type.TypeNode* %75, i32 0, i32 8
	%77 = load i32* %76
	%78 = load %type.TypeNode** %st
	%79 = getelementptr %type.TypeNode* %78, i32 0, i32 9
	store i32 %77, i32* %79
	%80 = load %ast.AstNode** %inx
	%81 = icmp ne %ast.AstNode* %80, null
	br i1 %81, label %L.17, label %L.18
L.17:
	%82 = load %ast.AstNode** %inx
	%83 = getelementptr %ast.AstNode* %82, i32 0, i32 0
	%84 = load i8* %83
	%85 = icmp eq i8 %84, 7
	br label %L.18
L.18:
	%86 = phi i1 [ false, %L.9 ], [ %85, %L.17 ]
	br i1 %86, label %L.20, label %L.21
L.20:
	%offs = alloca i32
	%87 = load %ast.AstNode** %inx
	%88 = getelementptr %ast.AstNode* %87, i32 0, i32 10
	%89 = load i64* %88
	%90 = trunc i64 %89 to i32
	%91 = load %type.TypeNode** %at
	%92 = getelementptr %type.TypeNode* %91, i32 0, i32 0
	%93 = load %type.TypeNode** %92
	%94 = getelementptr %type.TypeNode* %93, i32 0, i32 9
	%95 = load i32* %94
	%96 = load %target.TargetT** @target_Target
	%97 = getelementptr %target.TargetT* %96, i32 0, i32 3
	%98 = load i8* %97
	%99 = zext i8 %98 to i32
	%100 = udiv i32 %95, %99
	%101 = mul i32 %90, %100
	store i32 %101, i32* %offs
	%102 = load %type.TypeNode** %at
	%103 = getelementptr %type.TypeNode* %102, i32 0, i32 10
	%104 = load i32* %103
	%105 = load %target.TargetT** @target_Target
	%106 = getelementptr %target.TargetT* %105, i32 0, i32 3
	%107 = load i8* %106
	%108 = zext i8 %107 to i32
	%109 = udiv i32 %104, %108
	%110 = load i32* %offs
	%111 = call i32 @expr_CalcAlign(i32 %109, i32 %110)
	%112 = load %target.TargetT** @target_Target
	%113 = getelementptr %target.TargetT* %112, i32 0, i32 3
	%114 = load i8* %113
	%115 = zext i8 %114 to i32
	%116 = mul i32 %111, %115
	%117 = load %type.TypeNode** %st
	%118 = getelementptr %type.TypeNode* %117, i32 0, i32 10
	store i32 %116, i32* %118
	br label %L.19
L.21:
	%119 = load %type.TypeNode** %at
	%120 = getelementptr %type.TypeNode* %119, i32 0, i32 0
	%121 = load %type.TypeNode** %120
	%122 = getelementptr %type.TypeNode* %121, i32 0, i32 10
	%123 = load i32* %122
	%124 = load %type.TypeNode** %st
	%125 = getelementptr %type.TypeNode* %124, i32 0, i32 10
	store i32 %123, i32* %125
	br label %L.19
L.19:
	%126 = load %type.TypeNode** %st
	%127 = bitcast %type.TypeNode* %126 to %type.TypeNode*
	%128 = load %ast.AstNode** %array
	%129 = bitcast %ast.AstNode* %128 to %ast.AstNode*
	%130 = load %ast.AstNode** %inx
	%131 = bitcast %ast.AstNode* %130 to %ast.AstNode*
	%132 = call %ast.AstNode* @ast_New2(i8 18, %type.TypeNode* %127, %ast.AstNode* %129, %ast.AstNode* %131)
	%133 = bitcast %ast.AstNode* %132 to %ast.AstNode*
	store %ast.AstNode* %133, %ast.AstNode** %tree
	%134 = load %ast.AstNode** %tree
	%135 = bitcast %ast.AstNode* %134 to %ast.AstNode*
	%136 = load %ast.AstNode** %len
	%137 = bitcast %ast.AstNode* %136 to %ast.AstNode*
	%138 = call %ast.AstNode* @ast_Child(%ast.AstNode* %135, %ast.AstNode* %137)
	%139 = bitcast %ast.AstNode* %138 to %ast.AstNode*
	store %ast.AstNode* %139, %ast.AstNode** %tree
	%140 = load %ast.AstNode** %tree
	%141 = bitcast %ast.AstNode* %140 to %ast.AstNode*
	store %ast.AstNode* %141, %ast.AstNode** %rv.0
	br label %return
return:
	%142 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %142
}
define internal %ast.AstNode* @expr_Load(%ast.AstNode* %tree.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	%t = alloca %type.TypeNode*
	%0 = load %ast.AstNode** %tree
	%1 = icmp eq %ast.AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %ast.AstNode** %tree
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %rv.0
	br label %return
L.1:
	%4 = load %ast.AstNode** %tree
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 0
	%6 = load i8* %5
	%7 = zext i8 %6 to i32
	switch i32 %7, label %L.3 [
		i32 2, label %L.5
		i32 9, label %L.6
		i32 17, label %L.6
		i32 16, label %L.6
		i32 18, label %L.6
		i32 25, label %L.6
	]
L.5:
	%8 = load %ast.AstNode** %tree
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 11
	%10 = load %type.TypeNode** %9
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 3
	%12 = load %symb.SymbNode** %11
	%13 = getelementptr %symb.SymbNode* %12, i32 0, i32 19
	%14 = getelementptr [0 x i8]* %13
	%15 = bitcast [0 x i8]* %14 to [0 x i8]*
	call void @lex_ErrorI(i8 26, [0 x i8]* %15)
	%16 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %16, %ast.AstNode** %tree
	br label %L.4
L.6:
	%17 = load %ast.AstNode** %tree
	%18 = getelementptr %ast.AstNode* %17, i32 0, i32 11
	%19 = load %type.TypeNode** %18
	%20 = bitcast %type.TypeNode* %19 to %type.TypeNode*
	store %type.TypeNode* %20, %type.TypeNode** %t
	%21 = load %type.TypeNode** %t
	%22 = getelementptr %type.TypeNode* %21, i32 0, i32 13
	%23 = load i8* %22
	%24 = zext i8 %23 to i32
	switch i32 %24, label %L.7 [
		i32 4, label %L.9
	]
L.9:
	%25 = load %type.TypeNode** %t
	%26 = getelementptr %type.TypeNode* %25, i32 0, i32 0
	%27 = load %type.TypeNode** %26
	%28 = bitcast %type.TypeNode* %27 to %type.TypeNode*
	store %type.TypeNode* %28, %type.TypeNode** %t
	%29 = load %type.TypeNode** %t
	%30 = bitcast %type.TypeNode* %29 to %type.TypeNode*
	%31 = load %ast.AstNode** %tree
	%32 = bitcast %ast.AstNode* %31 to %ast.AstNode*
	%33 = call %ast.AstNode* @ast_New1(i8 25, %type.TypeNode* %30, %ast.AstNode* %32)
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	store %ast.AstNode* %34, %ast.AstNode** %tree
	%35 = load %ast.AstNode** %tree
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 1
	store i8 4, i8* %36
	%37 = load %target.TargetT** @target_Target
	%38 = getelementptr %target.TargetT* %37, i32 0, i32 8
	%39 = getelementptr %target.SizeAlign* %38, i32 0, i32 0
	%40 = load i8* %39
	%41 = zext i8 %40 to i32
	%42 = load %ast.AstNode** %tree
	%43 = getelementptr %ast.AstNode* %42, i32 0, i32 6
	store i32 %41, i32* %43
	br label %L.8
L.7:
	%44 = load %type.TypeNode** %t
	%45 = bitcast %type.TypeNode* %44 to %type.TypeNode*
	%46 = load %ast.AstNode** %tree
	%47 = bitcast %ast.AstNode* %46 to %ast.AstNode*
	%48 = call %ast.AstNode* @ast_New1(i8 25, %type.TypeNode* %45, %ast.AstNode* %47)
	%49 = bitcast %ast.AstNode* %48 to %ast.AstNode*
	store %ast.AstNode* %49, %ast.AstNode** %tree
	%50 = load %type.TypeNode** %t
	%51 = getelementptr %type.TypeNode* %50, i32 0, i32 13
	%52 = load i8* %51
	%53 = load %ast.AstNode** %tree
	%54 = getelementptr %ast.AstNode* %53, i32 0, i32 1
	store i8 %52, i8* %54
	%55 = load %type.TypeNode** %t
	%56 = getelementptr %type.TypeNode* %55, i32 0, i32 9
	%57 = load i32* %56
	%58 = load %ast.AstNode** %tree
	%59 = getelementptr %ast.AstNode* %58, i32 0, i32 6
	store i32 %57, i32* %59
	br label %L.8
L.8:
	br label %L.4
L.3:
	br label %L.4
L.4:
	%60 = load %ast.AstNode** %tree
	%61 = bitcast %ast.AstNode* %60 to %ast.AstNode*
	store %ast.AstNode* %61, %ast.AstNode** %rv.0
	br label %return
return:
	%62 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %62
}
define internal %ast.AstNode* @expr_CoerceToRef(%ast.AstNode* %tree.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	%0 = load %ast.AstNode** %tree
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 0
	%2 = load i8* %1
	%3 = icmp eq i8 %2, 25
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %ast.AstNode** %tree
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 13
	%6 = getelementptr [0 x %ast.AstNode*]* %5, i32 0, i32 0
	%7 = load %ast.AstNode** %6
	%8 = bitcast %ast.AstNode* %7 to %ast.AstNode*
	store %ast.AstNode* %8, %ast.AstNode** %tree
	br label %L.1
L.3:
	%9 = load %ast.AstNode** %tree
	%10 = getelementptr %ast.AstNode* %9, i32 0, i32 0
	%11 = load i8* %10
	%12 = icmp eq i8 %11, 30
	br i1 %12, label %L.4, label %L.5
L.4:
	%13 = load %ast.AstNode** %tree
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 13
	%15 = getelementptr [0 x %ast.AstNode*]* %14, i32 0, i32 0
	%16 = load %ast.AstNode** %15
	%17 = getelementptr %ast.AstNode* %16, i32 0, i32 0
	%18 = load i8* %17
	%19 = icmp eq i8 %18, 25
	br label %L.5
L.5:
	%20 = phi i1 [ false, %L.3 ], [ %19, %L.4 ]
	br i1 %20, label %L.7, label %L.6
L.7:
	%21 = load %ast.AstNode** %tree
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 13
	%23 = getelementptr [0 x %ast.AstNode*]* %22, i32 0, i32 0
	%24 = load %ast.AstNode** %23
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 13
	%26 = getelementptr [0 x %ast.AstNode*]* %25, i32 0, i32 0
	%27 = load %ast.AstNode** %26
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	store %ast.AstNode* %28, %ast.AstNode** %tree
	br label %L.6
L.6:
	br label %L.1
L.1:
	%29 = load %ast.AstNode** %tree
	%30 = getelementptr %ast.AstNode* %29, i32 0, i32 0
	%31 = load i8* %30
	%32 = icmp ne i8 %31, 14
	br i1 %32, label %L.9, label %L.8
L.9:
	%33 = load %ast.AstNode** %tree
	%34 = getelementptr %ast.AstNode* %33, i32 0, i32 11
	%35 = load %type.TypeNode** %34
	%36 = bitcast %type.TypeNode* %35 to %type.TypeNode*
	%37 = load %ast.AstNode** %tree
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	%39 = call %ast.AstNode* @ast_New1(i8 19, %type.TypeNode* %36, %ast.AstNode* %38)
	%40 = bitcast %ast.AstNode* %39 to %ast.AstNode*
	store %ast.AstNode* %40, %ast.AstNode** %tree
	br label %L.8
L.8:
	%41 = load %ast.AstNode** %tree
	%42 = getelementptr %ast.AstNode* %41, i32 0, i32 1
	store i8 4, i8* %42
	%43 = load %ast.AstNode** %tree
	%44 = bitcast %ast.AstNode* %43 to %ast.AstNode*
	store %ast.AstNode* %44, %ast.AstNode** %rv.0
	br label %return
return:
	%45 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %45
}
define internal zeroext i8 @expr_CheckRefAttributes(%type.TypeNode* %to.arg, %type.TypeNode* %fm.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%to = alloca %type.TypeNode*
	%fm = alloca %type.TypeNode*
	store %type.TypeNode* %to.arg, %type.TypeNode** %to
	store %type.TypeNode* %fm.arg, %type.TypeNode** %fm
	%0 = load %type.TypeNode** %to
	%1 = getelementptr %type.TypeNode* %0, i32 0, i32 16
	%2 = load i8* %1
	%3 = load %type.TypeNode** %fm
	%4 = getelementptr %type.TypeNode* %3, i32 0, i32 16
	%5 = load i8* %4
	%6 = icmp ne i8 %2, %5
	br i1 %6, label %L.2, label %L.1
L.2:
	store i8 0, i8* %rv.0
	br label %return
L.1:
	%7 = load %type.TypeNode** %to
	%8 = getelementptr %type.TypeNode* %7, i32 0, i32 10
	%9 = load i32* %8
	%10 = load %type.TypeNode** %fm
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 10
	%12 = load i32* %11
	%13 = icmp ugt i32 %9, %12
	br i1 %13, label %L.4, label %L.3
L.4:
	store i8 0, i8* %rv.0
	br label %return
L.3:
	%14 = load %type.TypeNode** %to
	%15 = getelementptr %type.TypeNode* %14, i32 0, i32 13
	%16 = load i8* %15
	%17 = icmp eq i8 %16, 4
	br i1 %17, label %L.5, label %L.6
L.5:
	%18 = load %type.TypeNode** %fm
	%19 = getelementptr %type.TypeNode* %18, i32 0, i32 13
	%20 = load i8* %19
	%21 = icmp eq i8 %20, 4
	br label %L.6
L.6:
	%22 = phi i1 [ false, %L.3 ], [ %21, %L.5 ]
	br i1 %22, label %L.8, label %L.7
L.8:
	%23 = load %type.TypeNode** %to
	%24 = getelementptr %type.TypeNode* %23, i32 0, i32 0
	%25 = load %type.TypeNode** %24
	%26 = bitcast %type.TypeNode* %25 to %type.TypeNode*
	%27 = load %type.TypeNode** %fm
	%28 = getelementptr %type.TypeNode* %27, i32 0, i32 0
	%29 = load %type.TypeNode** %28
	%30 = bitcast %type.TypeNode* %29 to %type.TypeNode*
	%31 = call i8 @expr_CheckRefAttributes(%type.TypeNode* %26, %type.TypeNode* %30)
	store i8 %31, i8* %rv.0
	br label %return
L.7:
	store i8 1, i8* %rv.0
	br label %return
return:
	%32 = load i8* %rv.0
	ret i8 %32
}
@S.551 = internal constant [34 x i8] c"Ref alignment or endian mismatch\0A\00"define internal %ast.AstNode* @expr_Actual(%ast.AstNode* %tree.arg, %type.TypeNode* %to.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%to = alloca %type.TypeNode*
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	store %type.TypeNode* %to.arg, %type.TypeNode** %to
	%fm = alloca %type.TypeNode*
	%bt = alloca %type.TypeNode*
	%ok = alloca i8
	%0 = load %ast.AstNode** %tree
	%1 = icmp eq %ast.AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %type.TypeNode** %to
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	%4 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %3)
	%5 = bitcast %ast.AstNode* %4 to %ast.AstNode*
	store %ast.AstNode* %5, %ast.AstNode** %tree
	%6 = load %ast.AstNode** %tree
	%7 = icmp eq %ast.AstNode* %6, null
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = load %ast.AstNode** %tree
	%9 = bitcast %ast.AstNode* %8 to %ast.AstNode*
	store %ast.AstNode* %9, %ast.AstNode** %rv.0
	br label %return
L.3:
	br label %L.1
L.1:
	%10 = load %ast.AstNode** %tree
	%11 = getelementptr %ast.AstNode* %10, i32 0, i32 11
	%12 = load %type.TypeNode** %11
	%13 = bitcast %type.TypeNode* %12 to %type.TypeNode*
	store %type.TypeNode* %13, %type.TypeNode** %fm
	%14 = load %type.TypeNode** %fm
	%15 = icmp eq %type.TypeNode* %14, null
	br i1 %15, label %L.6, label %L.5
L.6:
	%16 = load %ast.AstNode** %tree
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	store %ast.AstNode* %17, %ast.AstNode** %rv.0
	br label %return
L.5:
	store i8 1, i8* %ok
	%18 = load %type.TypeNode** %to
	%19 = getelementptr %type.TypeNode* %18, i32 0, i32 13
	%20 = load i8* %19
	%21 = zext i8 %20 to i32
	switch i32 %21, label %L.7 [
		i32 4, label %L.9
		i32 7, label %L.10
		i32 1, label %L.11
		i32 2, label %L.11
		i32 3, label %L.11
		i32 6, label %L.12
		i32 5, label %L.12
	]
L.9:
	%22 = load %type.TypeNode** %to
	%23 = getelementptr %type.TypeNode* %22, i32 0, i32 0
	%24 = load %type.TypeNode** %23
	%25 = bitcast %type.TypeNode* %24 to %type.TypeNode*
	store %type.TypeNode* %25, %type.TypeNode** %bt
	%26 = load %type.TypeNode** %bt
	%27 = icmp eq %type.TypeNode* %26, null
	br i1 %27, label %L.14, label %L.13
L.14:
	call void @lex_Error(i8 20)
	%28 = load %ast.AstNode** %tree
	%29 = bitcast %ast.AstNode* %28 to %ast.AstNode*
	store %ast.AstNode* %29, %ast.AstNode** %rv.0
	br label %return
L.13:
	%30 = load %ast.AstNode** %tree
	%31 = getelementptr %ast.AstNode* %30, i32 0, i32 1
	%32 = load i8* %31
	%33 = icmp eq i8 %32, 4
	br i1 %33, label %L.15, label %L.16
L.15:
	%34 = load %type.TypeNode** %bt
	%35 = bitcast %type.TypeNode* %34 to %type.TypeNode*
	%36 = load %type.TypeNode** %fm
	%37 = bitcast %type.TypeNode* %36 to %type.TypeNode*
	%38 = call i8 @type_Compat(%type.TypeNode* %35, %type.TypeNode* %37)
	%39 = icmp ne i8 %38, 0
	br label %L.16
L.16:
	%40 = phi i1 [ false, %L.13 ], [ %39, %L.15 ]
	br i1 %40, label %L.18, label %L.19
L.18:
	%41 = load %type.TypeNode** %bt
	%42 = load %type.TypeNode** %to
	%43 = icmp ne %type.TypeNode* %41, %42
	br i1 %43, label %L.21, label %L.20
L.21:
	%44 = load %ast.AstNode** %tree
	%45 = bitcast %ast.AstNode* %44 to %ast.AstNode*
	%46 = load %type.TypeNode** %to
	%47 = bitcast %type.TypeNode* %46 to %type.TypeNode*
	%48 = call %ast.AstNode* @expr_Cast(%ast.AstNode* %45, %type.TypeNode* %47)
	%49 = bitcast %ast.AstNode* %48 to %ast.AstNode*
	store %ast.AstNode* %49, %ast.AstNode** %tree
	br label %L.20
L.20:
	br label %L.17
L.19:
	%50 = load %ast.AstNode** %tree
	%51 = bitcast %ast.AstNode* %50 to %ast.AstNode*
	%52 = call %ast.AstNode* @expr_CoerceToRef(%ast.AstNode* %51)
	%53 = bitcast %ast.AstNode* %52 to %ast.AstNode*
	store %ast.AstNode* %53, %ast.AstNode** %tree
	%54 = load %ast.AstNode** %tree
	%55 = getelementptr %ast.AstNode* %54, i32 0, i32 11
	%56 = load %type.TypeNode** %55
	%57 = bitcast %type.TypeNode* %56 to %type.TypeNode*
	store %type.TypeNode* %57, %type.TypeNode** %fm
	%58 = load %type.TypeNode** %bt
	%59 = bitcast %type.TypeNode* %58 to %type.TypeNode*
	%60 = load %type.TypeNode** %fm
	%61 = bitcast %type.TypeNode* %60 to %type.TypeNode*
	%62 = call i8 @type_Compat(%type.TypeNode* %59, %type.TypeNode* %61)
	%63 = icmp ne i8 %62, 0
	br i1 %63, label %L.23, label %L.24
L.23:
	%64 = load %type.TypeNode** %bt
	%65 = load %type.TypeNode** %to
	%66 = icmp ne %type.TypeNode* %64, %65
	br i1 %66, label %L.26, label %L.25
L.26:
	%67 = load %ast.AstNode** %tree
	%68 = bitcast %ast.AstNode* %67 to %ast.AstNode*
	%69 = load %type.TypeNode** %to
	%70 = bitcast %type.TypeNode* %69 to %type.TypeNode*
	%71 = call %ast.AstNode* @expr_Cast(%ast.AstNode* %68, %type.TypeNode* %70)
	%72 = bitcast %ast.AstNode* %71 to %ast.AstNode*
	store %ast.AstNode* %72, %ast.AstNode** %tree
	br label %L.25
L.25:
	br label %L.22
L.24:
	store i8 0, i8* %ok
	br label %L.22
L.22:
	br label %L.17
L.17:
	%73 = load %type.TypeNode** %bt
	%74 = getelementptr %type.TypeNode* %73, i32 0, i32 18
	%75 = load i8* %74
	%76 = icmp ne i8 %75, 0
	br i1 %76, label %L.27, label %L.28
L.27:
	%77 = load %ast.AstNode** %tree
	%78 = getelementptr %ast.AstNode* %77, i32 0, i32 11
	%79 = load %type.TypeNode** %78
	%80 = getelementptr %type.TypeNode* %79, i32 0, i32 18
	%81 = load i8* %80
	%82 = icmp ne i8 %81, 0
	%83 = xor i1 %82, true
	br label %L.28
L.28:
	%84 = phi i1 [ false, %L.17 ], [ %83, %L.27 ]
	br i1 %84, label %L.30, label %L.29
L.30:
	%85 = load %type.TypeNode** %bt
	%86 = bitcast %type.TypeNode* %85 to %type.TypeNode*
	%87 = load %ast.AstNode** %tree
	%88 = bitcast %ast.AstNode* %87 to %ast.AstNode*
	%89 = call %ast.AstNode* @ast_New1(i8 15, %type.TypeNode* %86, %ast.AstNode* %88)
	%90 = bitcast %ast.AstNode* %89 to %ast.AstNode*
	store %ast.AstNode* %90, %ast.AstNode** %tree
	br label %L.29
L.29:
	%91 = load %type.TypeNode** %bt
	%92 = bitcast %type.TypeNode* %91 to %type.TypeNode*
	%93 = load %type.TypeNode** %fm
	%94 = bitcast %type.TypeNode* %93 to %type.TypeNode*
	%95 = call i8 @expr_CheckRefAttributes(%type.TypeNode* %92, %type.TypeNode* %94)
	%96 = icmp ne i8 %95, 0
	%97 = xor i1 %96, true
	br i1 %97, label %L.32, label %L.31
L.32:
	%98 = getelementptr [34 x i8]* @S.551
	%99 = bitcast [34 x i8]* %98 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %99)
	br label %L.31
L.31:
	br label %L.8
L.10:
	%100 = load %type.TypeNode** %to
	%101 = bitcast %type.TypeNode* %100 to %type.TypeNode*
	%102 = load %type.TypeNode** %fm
	%103 = bitcast %type.TypeNode* %102 to %type.TypeNode*
	%104 = call i8 @type_Compat(%type.TypeNode* %101, %type.TypeNode* %103)
	store i8 %104, i8* %ok
	br label %L.8
L.11:
	%105 = load %type.TypeNode** %fm
	%106 = bitcast %type.TypeNode* %105 to %type.TypeNode*
	%107 = load %type.TypeNode** %to
	%108 = bitcast %type.TypeNode* %107 to %type.TypeNode*
	%109 = call i8 @type_Compat(%type.TypeNode* %106, %type.TypeNode* %108)
	store i8 %109, i8* %ok
	%110 = load %type.TypeNode** %to
	%111 = getelementptr %type.TypeNode* %110, i32 0, i32 9
	%112 = load i32* %111
	%113 = load %ast.AstNode** %tree
	%114 = getelementptr %ast.AstNode* %113, i32 0, i32 6
	%115 = load i32* %114
	%116 = icmp ne i32 %112, %115
	br i1 %116, label %L.34, label %L.33
L.34:
	%117 = load %ast.AstNode** %tree
	%118 = bitcast %ast.AstNode* %117 to %ast.AstNode*
	%119 = load %type.TypeNode** %to
	%120 = bitcast %type.TypeNode* %119 to %type.TypeNode*
	%121 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %118, %type.TypeNode* %120)
	%122 = bitcast %ast.AstNode* %121 to %ast.AstNode*
	store %ast.AstNode* %122, %ast.AstNode** %tree
	br label %L.33
L.33:
	br label %L.8
L.12:
	%123 = load %type.TypeNode** %fm
	%124 = bitcast %type.TypeNode* %123 to %type.TypeNode*
	%125 = load %type.TypeNode** %to
	%126 = bitcast %type.TypeNode* %125 to %type.TypeNode*
	%127 = call i8 @type_Compat(%type.TypeNode* %124, %type.TypeNode* %126)
	store i8 %127, i8* %ok
	br label %L.8
L.7:
	br label %L.8
L.8:
	%128 = load i8* %ok
	%129 = icmp ne i8 %128, 0
	%130 = xor i1 %129, true
	br i1 %130, label %L.36, label %L.35
L.36:
	call void @lex_Error(i8 65)
	br label %L.35
L.35:
	%131 = load %ast.AstNode** %tree
	%132 = bitcast %ast.AstNode* %131 to %ast.AstNode*
	store %ast.AstNode* %132, %ast.AstNode** %rv.0
	br label %return
return:
	%133 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %133
}
define internal %ast.AstNode* @expr_UnOp(i8 zeroext %op.arg, %ast.AstNode* %rhs.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%op = alloca i8
	%rhs = alloca %ast.AstNode*
	store i8 %op.arg, i8* %op
	store %ast.AstNode* %rhs.arg, %ast.AstNode** %rhs
	%tree = alloca %ast.AstNode*
	%0 = load %ast.AstNode** %rhs
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 0
	%2 = load i8* %1
	%3 = icmp eq i8 %2, 7
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %ast.AstNode** %rhs
	%5 = bitcast %ast.AstNode* %4 to %ast.AstNode*
	store %ast.AstNode* %5, %ast.AstNode** %tree
	%6 = load i8* %op
	%7 = zext i8 %6 to i32
	switch i32 %7, label %L.4 [
		i32 31, label %L.6
		i32 32, label %L.7
		i32 62, label %L.8
		i32 33, label %L.9
	]
L.6:
	%8 = load %ast.AstNode** %tree
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 10
	%10 = load i64* %9
	%11 = sub i64 0, %10
	%12 = load %ast.AstNode** %tree
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 10
	store i64 %11, i64* %13
	br label %L.5
L.7:
	%14 = load %ast.AstNode** %tree
	%15 = getelementptr %ast.AstNode* %14, i32 0, i32 10
	%16 = load i64* %15
	%17 = xor i64 %16, -1
	%18 = load %ast.AstNode** %tree
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 10
	store i64 %17, i64* %19
	br label %L.5
L.8:
	%20 = load %ast.AstNode** %tree
	%21 = getelementptr %ast.AstNode* %20, i32 0, i32 10
	%22 = load i64* %21
	%23 = xor i64 %22, 1
	%24 = load %ast.AstNode** %tree
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 10
	store i64 %23, i64* %25
	br label %L.5
L.9:
	%26 = load %ast.AstNode** %tree
	%27 = getelementptr %ast.AstNode* %26, i32 0, i32 1
	%28 = load i8* %27
	%29 = icmp eq i8 %28, 3
	br i1 %29, label %L.10, label %L.11
L.10:
	%30 = load %ast.AstNode** %tree
	%31 = getelementptr %ast.AstNode* %30, i32 0, i32 10
	%32 = load i64* %31
	%33 = icmp slt i64 %32, 0
	br label %L.11
L.11:
	%34 = phi i1 [ false, %L.9 ], [ %33, %L.10 ]
	br i1 %34, label %L.13, label %L.12
L.13:
	%35 = load %ast.AstNode** %tree
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 10
	%37 = load i64* %36
	%38 = sub i64 0, %37
	%39 = load %ast.AstNode** %tree
	%40 = getelementptr %ast.AstNode* %39, i32 0, i32 10
	store i64 %38, i64* %40
	br label %L.12
L.12:
	br label %L.5
L.4:
	br label %L.5
L.5:
	br label %L.1
L.3:
	%41 = load i8* %op
	%42 = load %ast.AstNode** %rhs
	%43 = getelementptr %ast.AstNode* %42, i32 0, i32 11
	%44 = load %type.TypeNode** %43
	%45 = bitcast %type.TypeNode* %44 to %type.TypeNode*
	%46 = load %ast.AstNode** %rhs
	%47 = bitcast %ast.AstNode* %46 to %ast.AstNode*
	%48 = call %ast.AstNode* @ast_New1(i8 %41, %type.TypeNode* %45, %ast.AstNode* %47)
	%49 = bitcast %ast.AstNode* %48 to %ast.AstNode*
	store %ast.AstNode* %49, %ast.AstNode** %tree
	br label %L.1
L.1:
	%50 = load %ast.AstNode** %tree
	%51 = bitcast %ast.AstNode* %50 to %ast.AstNode*
	store %ast.AstNode* %51, %ast.AstNode** %rv.0
	br label %return
return:
	%52 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %52
}
define internal zeroext i8 @expr_IsSignedBinOp(%ast.AstNode* %lhs.arg, %ast.AstNode* %rhs.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%lhs = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	store %ast.AstNode* %lhs.arg, %ast.AstNode** %lhs
	store %ast.AstNode* %rhs.arg, %ast.AstNode** %rhs
	%0 = load %ast.AstNode** %lhs
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 1
	%2 = load i8* %1
	%3 = icmp eq i8 %2, 3
	br i1 %3, label %L.2, label %L.1
L.1:
	%4 = load %ast.AstNode** %rhs
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 1
	%6 = load i8* %5
	%7 = icmp eq i8 %6, 3
	br label %L.2
L.2:
	%8 = phi i1 [ true, %L.0 ], [ %7, %L.1 ]
	br i1 %8, label %L.4, label %L.3
L.4:
	store i8 1, i8* %rv.0
	br label %return
L.3:
	store i8 0, i8* %rv.0
	br label %return
return:
	%9 = load i8* %rv.0
	ret i8 %9
}
define internal %ast.AstNode* @expr_BinOp(i8 zeroext %op.arg, %ast.AstNode* %lhs.arg, %ast.AstNode* %rhs.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%op = alloca i8
	%lhs = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	store i8 %op.arg, i8* %op
	store %ast.AstNode* %lhs.arg, %ast.AstNode** %lhs
	store %ast.AstNode* %rhs.arg, %ast.AstNode** %rhs
	%tree = alloca %ast.AstNode*
	%sl = alloca i32
	%sr = alloca i32
	%fold = alloca i8
	%swap = alloca i8
	%0 = load %ast.AstNode** %lhs
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 0
	%2 = load i8* %1
	%3 = icmp eq i8 %2, 2
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %ast.AstNode** %lhs
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 11
	%6 = load %type.TypeNode** %5
	%7 = getelementptr %type.TypeNode* %6, i32 0, i32 3
	%8 = load %symb.SymbNode** %7
	%9 = getelementptr %symb.SymbNode* %8, i32 0, i32 19
	%10 = getelementptr [0 x i8]* %9
	%11 = bitcast [0 x i8]* %10 to [0 x i8]*
	call void @lex_ErrorI(i8 26, [0 x i8]* %11)
	%12 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %12, %ast.AstNode** %rv.0
	br label %return
L.1:
	%13 = load %ast.AstNode** %rhs
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 0
	%15 = load i8* %14
	%16 = icmp eq i8 %15, 2
	br i1 %16, label %L.4, label %L.3
L.4:
	%17 = load %ast.AstNode** %rhs
	%18 = getelementptr %ast.AstNode* %17, i32 0, i32 11
	%19 = load %type.TypeNode** %18
	%20 = getelementptr %type.TypeNode* %19, i32 0, i32 3
	%21 = load %symb.SymbNode** %20
	%22 = getelementptr %symb.SymbNode* %21, i32 0, i32 19
	%23 = getelementptr [0 x i8]* %22
	%24 = bitcast [0 x i8]* %23 to [0 x i8]*
	call void @lex_ErrorI(i8 26, [0 x i8]* %24)
	%25 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %25, %ast.AstNode** %rv.0
	br label %return
L.3:
	store i8 0, i8* %fold
	store i8 0, i8* %swap
	%26 = load %ast.AstNode** %lhs
	%27 = getelementptr %ast.AstNode* %26, i32 0, i32 0
	%28 = load i8* %27
	%29 = icmp eq i8 %28, 7
	br i1 %29, label %L.6, label %L.5
L.6:
	%30 = load %ast.AstNode** %rhs
	%31 = getelementptr %ast.AstNode* %30, i32 0, i32 0
	%32 = load i8* %31
	%33 = icmp eq i8 %32, 7
	br i1 %33, label %L.8, label %L.9
L.8:
	%34 = load i8* %op
	%35 = zext i8 %34 to i32
	switch i32 %35, label %L.10 [
		i32 34, label %L.12
		i32 35, label %L.13
		i32 58, label %L.14
		i32 59, label %L.15
		i32 57, label %L.16
		i32 36, label %L.17
		i32 37, label %L.18
		i32 38, label %L.19
		i32 53, label %L.20
		i32 55, label %L.20
		i32 54, label %L.21
		i32 56, label %L.22
		i32 49, label %L.23
		i32 50, label %L.24
		i32 51, label %L.25
		i32 52, label %L.26
		i32 39, label %L.27
		i32 40, label %L.28
		i32 41, label %L.29
		i32 42, label %L.30
		i32 43, label %L.31
		i32 44, label %L.32
		i32 45, label %L.33
		i32 46, label %L.34
		i32 47, label %L.35
		i32 48, label %L.36
	]
L.12:
	%36 = load %ast.AstNode** %lhs
	%37 = getelementptr %ast.AstNode* %36, i32 0, i32 10
	%38 = load i64* %37
	%39 = load %ast.AstNode** %rhs
	%40 = getelementptr %ast.AstNode* %39, i32 0, i32 10
	%41 = load i64* %40
	%42 = add i64 %38, %41
	store i64 %42, i64* %37
	%43 = load %ast.AstNode** %lhs
	%44 = bitcast %ast.AstNode* %43 to %ast.AstNode*
	store %ast.AstNode* %44, %ast.AstNode** %rv.0
	br label %return
L.13:
	%45 = load %ast.AstNode** %lhs
	%46 = getelementptr %ast.AstNode* %45, i32 0, i32 10
	%47 = load i64* %46
	%48 = load %ast.AstNode** %rhs
	%49 = getelementptr %ast.AstNode* %48, i32 0, i32 10
	%50 = load i64* %49
	%51 = sub i64 %47, %50
	store i64 %51, i64* %46
	%52 = load %ast.AstNode** %lhs
	%53 = bitcast %ast.AstNode* %52 to %ast.AstNode*
	store %ast.AstNode* %53, %ast.AstNode** %rv.0
	br label %return
L.14:
	%54 = load %ast.AstNode** %lhs
	%55 = getelementptr %ast.AstNode* %54, i32 0, i32 10
	%56 = load i64* %55
	%57 = load %ast.AstNode** %rhs
	%58 = getelementptr %ast.AstNode* %57, i32 0, i32 10
	%59 = load i64* %58
	%60 = or i64 %56, %59
	%61 = load %ast.AstNode** %lhs
	%62 = getelementptr %ast.AstNode* %61, i32 0, i32 10
	store i64 %60, i64* %62
	%63 = load %ast.AstNode** %lhs
	%64 = bitcast %ast.AstNode* %63 to %ast.AstNode*
	store %ast.AstNode* %64, %ast.AstNode** %rv.0
	br label %return
L.15:
	%65 = load %ast.AstNode** %lhs
	%66 = getelementptr %ast.AstNode* %65, i32 0, i32 10
	%67 = load i64* %66
	%68 = load %ast.AstNode** %rhs
	%69 = getelementptr %ast.AstNode* %68, i32 0, i32 10
	%70 = load i64* %69
	%71 = xor i64 %67, %70
	%72 = load %ast.AstNode** %lhs
	%73 = getelementptr %ast.AstNode* %72, i32 0, i32 10
	store i64 %71, i64* %73
	%74 = load %ast.AstNode** %lhs
	%75 = bitcast %ast.AstNode* %74 to %ast.AstNode*
	store %ast.AstNode* %75, %ast.AstNode** %rv.0
	br label %return
L.16:
	%76 = load %ast.AstNode** %lhs
	%77 = getelementptr %ast.AstNode* %76, i32 0, i32 10
	%78 = load i64* %77
	%79 = load %ast.AstNode** %rhs
	%80 = getelementptr %ast.AstNode* %79, i32 0, i32 10
	%81 = load i64* %80
	%82 = and i64 %78, %81
	%83 = load %ast.AstNode** %lhs
	%84 = getelementptr %ast.AstNode* %83, i32 0, i32 10
	store i64 %82, i64* %84
	%85 = load %ast.AstNode** %lhs
	%86 = bitcast %ast.AstNode* %85 to %ast.AstNode*
	store %ast.AstNode* %86, %ast.AstNode** %rv.0
	br label %return
L.17:
	%87 = load %ast.AstNode** %lhs
	%88 = getelementptr %ast.AstNode* %87, i32 0, i32 10
	%89 = load i64* %88
	%90 = load %ast.AstNode** %rhs
	%91 = getelementptr %ast.AstNode* %90, i32 0, i32 10
	%92 = load i64* %91
	%93 = mul i64 %89, %92
	%94 = load %ast.AstNode** %lhs
	%95 = getelementptr %ast.AstNode* %94, i32 0, i32 10
	store i64 %93, i64* %95
	%96 = load %ast.AstNode** %lhs
	%97 = bitcast %ast.AstNode* %96 to %ast.AstNode*
	store %ast.AstNode* %97, %ast.AstNode** %rv.0
	br label %return
L.18:
	%98 = load %ast.AstNode** %lhs
	%99 = getelementptr %ast.AstNode* %98, i32 0, i32 10
	%100 = load i64* %99
	%101 = load %ast.AstNode** %rhs
	%102 = getelementptr %ast.AstNode* %101, i32 0, i32 10
	%103 = load i64* %102
	%104 = udiv i64 %100, %103
	%105 = load %ast.AstNode** %lhs
	%106 = getelementptr %ast.AstNode* %105, i32 0, i32 10
	store i64 %104, i64* %106
	%107 = load %ast.AstNode** %lhs
	%108 = bitcast %ast.AstNode* %107 to %ast.AstNode*
	store %ast.AstNode* %108, %ast.AstNode** %rv.0
	br label %return
L.19:
	%109 = load %ast.AstNode** %lhs
	%110 = getelementptr %ast.AstNode* %109, i32 0, i32 10
	%111 = load i64* %110
	%112 = load %ast.AstNode** %rhs
	%113 = getelementptr %ast.AstNode* %112, i32 0, i32 10
	%114 = load i64* %113
	%115 = urem i64 %111, %114
	%116 = load %ast.AstNode** %lhs
	%117 = getelementptr %ast.AstNode* %116, i32 0, i32 10
	store i64 %115, i64* %117
	%118 = load %ast.AstNode** %lhs
	%119 = bitcast %ast.AstNode* %118 to %ast.AstNode*
	store %ast.AstNode* %119, %ast.AstNode** %rv.0
	br label %return
L.20:
	%120 = load %ast.AstNode** %lhs
	%121 = getelementptr %ast.AstNode* %120, i32 0, i32 10
	%122 = load i64* %121
	%123 = load %ast.AstNode** %rhs
	%124 = getelementptr %ast.AstNode* %123, i32 0, i32 10
	%125 = load i64* %124
	%126 = shl i64 %122, %125
	%127 = load %ast.AstNode** %lhs
	%128 = getelementptr %ast.AstNode* %127, i32 0, i32 10
	store i64 %126, i64* %128
	%129 = load %ast.AstNode** %lhs
	%130 = bitcast %ast.AstNode* %129 to %ast.AstNode*
	store %ast.AstNode* %130, %ast.AstNode** %rv.0
	br label %return
L.21:
	%131 = load %ast.AstNode** %lhs
	%132 = getelementptr %ast.AstNode* %131, i32 0, i32 10
	%133 = load i64* %132
	%134 = load %ast.AstNode** %rhs
	%135 = getelementptr %ast.AstNode* %134, i32 0, i32 10
	%136 = load i64* %135
	%137 = lshr i64 %133, %136
	%138 = load %ast.AstNode** %lhs
	%139 = getelementptr %ast.AstNode* %138, i32 0, i32 10
	store i64 %137, i64* %139
	%140 = load %ast.AstNode** %lhs
	%141 = bitcast %ast.AstNode* %140 to %ast.AstNode*
	store %ast.AstNode* %141, %ast.AstNode** %rv.0
	br label %return
L.22:
	%142 = load %ast.AstNode** %lhs
	%143 = getelementptr %ast.AstNode* %142, i32 0, i32 10
	%144 = load i64* %143
	%145 = load %ast.AstNode** %rhs
	%146 = getelementptr %ast.AstNode* %145, i32 0, i32 10
	%147 = load i64* %146
	%148 = shl i64 %144, %147
	%149 = load %ast.AstNode** %lhs
	%150 = getelementptr %ast.AstNode* %149, i32 0, i32 10
	store i64 %148, i64* %150
	%151 = load %ast.AstNode** %lhs
	%152 = bitcast %ast.AstNode* %151 to %ast.AstNode*
	store %ast.AstNode* %152, %ast.AstNode** %rv.0
	br label %return
L.23:
	%153 = load %ast.AstNode** %rhs
	%154 = getelementptr %ast.AstNode* %153, i32 0, i32 10
	%155 = load i64* %154
	%156 = load %ast.AstNode** %lhs
	%157 = getelementptr %ast.AstNode* %156, i32 0, i32 10
	%158 = load i64* %157
	%159 = icmp ult i64 %155, %158
	br i1 %159, label %L.38, label %L.37
L.38:
	%160 = load %ast.AstNode** %rhs
	%161 = getelementptr %ast.AstNode* %160, i32 0, i32 10
	%162 = load i64* %161
	%163 = load %ast.AstNode** %lhs
	%164 = getelementptr %ast.AstNode* %163, i32 0, i32 10
	store i64 %162, i64* %164
	br label %L.37
L.37:
	%165 = load %ast.AstNode** %lhs
	%166 = bitcast %ast.AstNode* %165 to %ast.AstNode*
	store %ast.AstNode* %166, %ast.AstNode** %rv.0
	br label %return
L.24:
	%167 = load %ast.AstNode** %rhs
	%168 = getelementptr %ast.AstNode* %167, i32 0, i32 10
	%169 = load i64* %168
	%170 = load %ast.AstNode** %lhs
	%171 = getelementptr %ast.AstNode* %170, i32 0, i32 10
	%172 = load i64* %171
	%173 = icmp ugt i64 %169, %172
	br i1 %173, label %L.40, label %L.39
L.40:
	%174 = load %ast.AstNode** %rhs
	%175 = getelementptr %ast.AstNode* %174, i32 0, i32 10
	%176 = load i64* %175
	%177 = load %ast.AstNode** %lhs
	%178 = getelementptr %ast.AstNode* %177, i32 0, i32 10
	store i64 %176, i64* %178
	br label %L.39
L.39:
	%179 = load %ast.AstNode** %lhs
	%180 = bitcast %ast.AstNode* %179 to %ast.AstNode*
	store %ast.AstNode* %180, %ast.AstNode** %rv.0
	br label %return
L.25:
	%181 = load %ast.AstNode** %rhs
	%182 = getelementptr %ast.AstNode* %181, i32 0, i32 10
	%183 = load i64* %182
	%184 = load %ast.AstNode** %lhs
	%185 = getelementptr %ast.AstNode* %184, i32 0, i32 10
	%186 = load i64* %185
	%187 = icmp slt i64 %183, %186
	br i1 %187, label %L.42, label %L.41
L.42:
	%188 = load %ast.AstNode** %rhs
	%189 = getelementptr %ast.AstNode* %188, i32 0, i32 10
	%190 = load i64* %189
	%191 = load %ast.AstNode** %lhs
	%192 = getelementptr %ast.AstNode* %191, i32 0, i32 10
	store i64 %190, i64* %192
	br label %L.41
L.41:
	%193 = load %ast.AstNode** %lhs
	%194 = bitcast %ast.AstNode* %193 to %ast.AstNode*
	store %ast.AstNode* %194, %ast.AstNode** %rv.0
	br label %return
L.26:
	%195 = load %ast.AstNode** %rhs
	%196 = getelementptr %ast.AstNode* %195, i32 0, i32 10
	%197 = load i64* %196
	%198 = load %ast.AstNode** %lhs
	%199 = getelementptr %ast.AstNode* %198, i32 0, i32 10
	%200 = load i64* %199
	%201 = icmp sgt i64 %197, %200
	br i1 %201, label %L.44, label %L.43
L.44:
	%202 = load %ast.AstNode** %rhs
	%203 = getelementptr %ast.AstNode* %202, i32 0, i32 10
	%204 = load i64* %203
	%205 = load %ast.AstNode** %lhs
	%206 = getelementptr %ast.AstNode* %205, i32 0, i32 10
	store i64 %204, i64* %206
	br label %L.43
L.43:
	%207 = load %ast.AstNode** %lhs
	%208 = bitcast %ast.AstNode* %207 to %ast.AstNode*
	store %ast.AstNode* %208, %ast.AstNode** %rv.0
	br label %return
L.27:
	%209 = load %ast.AstNode** %lhs
	%210 = getelementptr %ast.AstNode* %209, i32 0, i32 10
	%211 = load i64* %210
	%212 = load %ast.AstNode** %rhs
	%213 = getelementptr %ast.AstNode* %212, i32 0, i32 10
	%214 = load i64* %213
	%215 = icmp eq i64 %211, %214
	%216 = zext i1 %215 to i32
	%217 = zext i32 %216 to i64
	%218 = load %ast.AstNode** %lhs
	%219 = getelementptr %ast.AstNode* %218, i32 0, i32 10
	store i64 %217, i64* %219
	%220 = load %ast.AstNode** %lhs
	%221 = bitcast %ast.AstNode* %220 to %ast.AstNode*
	store %ast.AstNode* %221, %ast.AstNode** %rv.0
	br label %return
L.28:
	%222 = load %ast.AstNode** %lhs
	%223 = getelementptr %ast.AstNode* %222, i32 0, i32 10
	%224 = load i64* %223
	%225 = load %ast.AstNode** %rhs
	%226 = getelementptr %ast.AstNode* %225, i32 0, i32 10
	%227 = load i64* %226
	%228 = icmp ne i64 %224, %227
	%229 = zext i1 %228 to i32
	%230 = zext i32 %229 to i64
	%231 = load %ast.AstNode** %lhs
	%232 = getelementptr %ast.AstNode* %231, i32 0, i32 10
	store i64 %230, i64* %232
	%233 = load %ast.AstNode** %lhs
	%234 = bitcast %ast.AstNode* %233 to %ast.AstNode*
	store %ast.AstNode* %234, %ast.AstNode** %rv.0
	br label %return
L.29:
	%235 = load %ast.AstNode** %lhs
	%236 = getelementptr %ast.AstNode* %235, i32 0, i32 10
	%237 = load i64* %236
	%238 = load %ast.AstNode** %rhs
	%239 = getelementptr %ast.AstNode* %238, i32 0, i32 10
	%240 = load i64* %239
	%241 = icmp ult i64 %237, %240
	%242 = zext i1 %241 to i32
	%243 = zext i32 %242 to i64
	%244 = load %ast.AstNode** %lhs
	%245 = getelementptr %ast.AstNode* %244, i32 0, i32 10
	store i64 %243, i64* %245
	%246 = load %ast.AstNode** %lhs
	%247 = bitcast %ast.AstNode* %246 to %ast.AstNode*
	store %ast.AstNode* %247, %ast.AstNode** %rv.0
	br label %return
L.30:
	%248 = load %ast.AstNode** %lhs
	%249 = getelementptr %ast.AstNode* %248, i32 0, i32 10
	%250 = load i64* %249
	%251 = load %ast.AstNode** %rhs
	%252 = getelementptr %ast.AstNode* %251, i32 0, i32 10
	%253 = load i64* %252
	%254 = icmp ugt i64 %250, %253
	%255 = zext i1 %254 to i32
	%256 = zext i32 %255 to i64
	%257 = load %ast.AstNode** %lhs
	%258 = getelementptr %ast.AstNode* %257, i32 0, i32 10
	store i64 %256, i64* %258
	%259 = load %ast.AstNode** %lhs
	%260 = bitcast %ast.AstNode* %259 to %ast.AstNode*
	store %ast.AstNode* %260, %ast.AstNode** %rv.0
	br label %return
L.31:
	%261 = load %ast.AstNode** %lhs
	%262 = getelementptr %ast.AstNode* %261, i32 0, i32 10
	%263 = load i64* %262
	%264 = load %ast.AstNode** %rhs
	%265 = getelementptr %ast.AstNode* %264, i32 0, i32 10
	%266 = load i64* %265
	%267 = icmp ule i64 %263, %266
	%268 = zext i1 %267 to i32
	%269 = zext i32 %268 to i64
	%270 = load %ast.AstNode** %lhs
	%271 = getelementptr %ast.AstNode* %270, i32 0, i32 10
	store i64 %269, i64* %271
	%272 = load %ast.AstNode** %lhs
	%273 = bitcast %ast.AstNode* %272 to %ast.AstNode*
	store %ast.AstNode* %273, %ast.AstNode** %rv.0
	br label %return
L.32:
	%274 = load %ast.AstNode** %lhs
	%275 = getelementptr %ast.AstNode* %274, i32 0, i32 10
	%276 = load i64* %275
	%277 = load %ast.AstNode** %rhs
	%278 = getelementptr %ast.AstNode* %277, i32 0, i32 10
	%279 = load i64* %278
	%280 = icmp uge i64 %276, %279
	%281 = zext i1 %280 to i32
	%282 = zext i32 %281 to i64
	%283 = load %ast.AstNode** %lhs
	%284 = getelementptr %ast.AstNode* %283, i32 0, i32 10
	store i64 %282, i64* %284
	%285 = load %ast.AstNode** %lhs
	%286 = bitcast %ast.AstNode* %285 to %ast.AstNode*
	store %ast.AstNode* %286, %ast.AstNode** %rv.0
	br label %return
L.33:
	%287 = load %ast.AstNode** %lhs
	%288 = getelementptr %ast.AstNode* %287, i32 0, i32 10
	%289 = load i64* %288
	%290 = load %ast.AstNode** %rhs
	%291 = getelementptr %ast.AstNode* %290, i32 0, i32 10
	%292 = load i64* %291
	%293 = icmp slt i64 %289, %292
	%294 = zext i1 %293 to i32
	%295 = zext i32 %294 to i64
	%296 = load %ast.AstNode** %lhs
	%297 = getelementptr %ast.AstNode* %296, i32 0, i32 10
	store i64 %295, i64* %297
	%298 = load %ast.AstNode** %lhs
	%299 = bitcast %ast.AstNode* %298 to %ast.AstNode*
	store %ast.AstNode* %299, %ast.AstNode** %rv.0
	br label %return
L.34:
	%300 = load %ast.AstNode** %lhs
	%301 = getelementptr %ast.AstNode* %300, i32 0, i32 10
	%302 = load i64* %301
	%303 = load %ast.AstNode** %rhs
	%304 = getelementptr %ast.AstNode* %303, i32 0, i32 10
	%305 = load i64* %304
	%306 = icmp sgt i64 %302, %305
	%307 = zext i1 %306 to i32
	%308 = zext i32 %307 to i64
	%309 = load %ast.AstNode** %lhs
	%310 = getelementptr %ast.AstNode* %309, i32 0, i32 10
	store i64 %308, i64* %310
	%311 = load %ast.AstNode** %lhs
	%312 = bitcast %ast.AstNode* %311 to %ast.AstNode*
	store %ast.AstNode* %312, %ast.AstNode** %rv.0
	br label %return
L.35:
	%313 = load %ast.AstNode** %lhs
	%314 = getelementptr %ast.AstNode* %313, i32 0, i32 10
	%315 = load i64* %314
	%316 = load %ast.AstNode** %rhs
	%317 = getelementptr %ast.AstNode* %316, i32 0, i32 10
	%318 = load i64* %317
	%319 = icmp sle i64 %315, %318
	%320 = zext i1 %319 to i32
	%321 = zext i32 %320 to i64
	%322 = load %ast.AstNode** %lhs
	%323 = getelementptr %ast.AstNode* %322, i32 0, i32 10
	store i64 %321, i64* %323
	%324 = load %ast.AstNode** %lhs
	%325 = bitcast %ast.AstNode* %324 to %ast.AstNode*
	store %ast.AstNode* %325, %ast.AstNode** %rv.0
	br label %return
L.36:
	%326 = load %ast.AstNode** %lhs
	%327 = getelementptr %ast.AstNode* %326, i32 0, i32 10
	%328 = load i64* %327
	%329 = load %ast.AstNode** %rhs
	%330 = getelementptr %ast.AstNode* %329, i32 0, i32 10
	%331 = load i64* %330
	%332 = icmp sge i64 %328, %331
	%333 = zext i1 %332 to i32
	%334 = zext i32 %333 to i64
	%335 = load %ast.AstNode** %lhs
	%336 = getelementptr %ast.AstNode* %335, i32 0, i32 10
	store i64 %334, i64* %336
	%337 = load %ast.AstNode** %lhs
	%338 = bitcast %ast.AstNode* %337 to %ast.AstNode*
	store %ast.AstNode* %338, %ast.AstNode** %rv.0
	br label %return
L.10:
	br label %L.11
L.11:
	br label %L.7
L.9:
	store i8 1, i8* %swap
	br label %L.7
L.7:
	br label %L.5
L.5:
	%339 = load %ast.AstNode** %lhs
	%340 = getelementptr %ast.AstNode* %339, i32 0, i32 1
	%341 = load i8* %340
	%342 = icmp eq i8 %341, 4
	br i1 %342, label %L.46, label %L.45
L.45:
	%343 = load %ast.AstNode** %lhs
	%344 = getelementptr %ast.AstNode* %343, i32 0, i32 1
	%345 = load i8* %344
	%346 = icmp eq i8 %345, 7
	br label %L.46
L.46:
	%347 = phi i1 [ true, %L.5 ], [ %346, %L.45 ]
	br i1 %347, label %L.48, label %L.47
L.48:
	%348 = load %ast.AstNode** %rhs
	%349 = getelementptr %ast.AstNode* %348, i32 0, i32 0
	%350 = load i8* %349
	%351 = icmp eq i8 %350, 7
	br i1 %351, label %L.50, label %L.49
L.50:
	%352 = load i8* %op
	%353 = icmp eq i8 %352, 39
	br i1 %353, label %L.52, label %L.51
L.51:
	%354 = load i8* %op
	%355 = icmp eq i8 %354, 40
	br label %L.52
L.52:
	%356 = phi i1 [ true, %L.50 ], [ %355, %L.51 ]
	br i1 %356, label %L.54, label %L.53
L.54:
	%357 = load %ast.AstNode** %rhs
	%358 = getelementptr %ast.AstNode* %357, i32 0, i32 1
	store i8 4, i8* %358
	%359 = load %target.TargetT** @target_Target
	%360 = getelementptr %target.TargetT* %359, i32 0, i32 8
	%361 = getelementptr %target.SizeAlign* %360, i32 0, i32 0
	%362 = load i8* %361
	%363 = zext i8 %362 to i32
	%364 = load %ast.AstNode** %rhs
	%365 = getelementptr %ast.AstNode* %364, i32 0, i32 6
	store i32 %363, i32* %365
	br label %L.53
L.53:
	br label %L.49
L.49:
	br label %L.47
L.47:
	%366 = load %ast.AstNode** %lhs
	%367 = getelementptr %ast.AstNode* %366, i32 0, i32 6
	%368 = load i32* %367
	store i32 %368, i32* %sl
	%369 = load %ast.AstNode** %rhs
	%370 = getelementptr %ast.AstNode* %369, i32 0, i32 6
	%371 = load i32* %370
	store i32 %371, i32* %sr
	%372 = load i32* %sl
	%373 = load i32* %sr
	%374 = icmp ugt i32 %372, %373
	br i1 %374, label %L.56, label %L.57
L.56:
	%375 = load %ast.AstNode** %rhs
	%376 = bitcast %ast.AstNode* %375 to %ast.AstNode*
	%377 = load i32* %sl
	%378 = call %ast.AstNode* @expr_Extend(%ast.AstNode* %376, i32 %377, i8 0)
	%379 = bitcast %ast.AstNode* %378 to %ast.AstNode*
	store %ast.AstNode* %379, %ast.AstNode** %rhs
	br label %L.55
L.57:
	%380 = load i32* %sr
	%381 = load i32* %sl
	%382 = icmp ugt i32 %380, %381
	br i1 %382, label %L.59, label %L.58
L.59:
	%383 = load %ast.AstNode** %lhs
	%384 = bitcast %ast.AstNode* %383 to %ast.AstNode*
	%385 = load i32* %sr
	%386 = call %ast.AstNode* @expr_Extend(%ast.AstNode* %384, i32 %385, i8 0)
	%387 = bitcast %ast.AstNode* %386 to %ast.AstNode*
	store %ast.AstNode* %387, %ast.AstNode** %lhs
	br label %L.58
L.58:
	br label %L.55
L.55:
	%388 = load i8* %op
	%389 = load %ast.AstNode** %lhs
	%390 = getelementptr %ast.AstNode* %389, i32 0, i32 11
	%391 = load %type.TypeNode** %390
	%392 = bitcast %type.TypeNode* %391 to %type.TypeNode*
	%393 = load %ast.AstNode** %lhs
	%394 = bitcast %ast.AstNode* %393 to %ast.AstNode*
	%395 = load %ast.AstNode** %rhs
	%396 = bitcast %ast.AstNode* %395 to %ast.AstNode*
	%397 = call %ast.AstNode* @ast_New2(i8 %388, %type.TypeNode* %392, %ast.AstNode* %394, %ast.AstNode* %396)
	%398 = bitcast %ast.AstNode* %397 to %ast.AstNode*
	store %ast.AstNode* %398, %ast.AstNode** %tree
	%399 = load %ast.AstNode** %tree
	%400 = bitcast %ast.AstNode* %399 to %ast.AstNode*
	store %ast.AstNode* %400, %ast.AstNode** %rv.0
	br label %return
return:
	%401 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %401
}
@S.552 = internal constant [19 x i8] c"Intrinsic unknown\0A\00"define internal %ast.AstNode* @expr_Intrinsic(%symb.SymbNode* %ps.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%ps = alloca %symb.SymbNode*
	store %symb.SymbNode* %ps.arg, %symb.SymbNode** %ps
	%tree = alloca %ast.AstNode*
	%lhs = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	%tok = alloca i8
	%which = alloca i8
	%op = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 32
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = call i8 @lex_Next()
	store i8 %4, i8* %tok
	%5 = load %symb.SymbNode** %ps
	%6 = getelementptr %symb.SymbNode* %5, i32 0, i32 7
	%7 = load i64* %6
	%8 = trunc i64 %7 to i8
	store i8 %8, i8* %which
	%9 = load i8* %which
	%10 = zext i8 %9 to i32
	switch i32 %10, label %L.4 [
		i32 1, label %L.6
		i32 2, label %L.7
		i32 3, label %L.7
	]
L.6:
	%11 = bitcast %type.TypeNode* null to %type.TypeNode*
	%12 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %11)
	%13 = bitcast %ast.AstNode* %12 to %ast.AstNode*
	store %ast.AstNode* %13, %ast.AstNode** %rhs
	%14 = load %ast.AstNode** %rhs
	%15 = icmp ne %ast.AstNode* %14, null
	br i1 %15, label %L.9, label %L.8
L.9:
	%16 = load %ast.AstNode** %rhs
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	%18 = call %ast.AstNode* @expr_UnOp(i8 33, %ast.AstNode* %17)
	%19 = bitcast %ast.AstNode* %18 to %ast.AstNode*
	store %ast.AstNode* %19, %ast.AstNode** %tree
	%20 = load %ast.AstNode** %tree
	%21 = getelementptr %ast.AstNode* %20, i32 0, i32 1
	%22 = load i8* %21
	%23 = icmp eq i8 %22, 3
	br i1 %23, label %L.11, label %L.10
L.11:
	%i = alloca i32
	store i32 0, i32* %i
	br label %L.12
L.12:
	%24 = load i32* %i
	%25 = icmp ult i32 %24, 4
	br i1 %25, label %L.15, label %L.16
L.15:
	%26 = load %ast.AstNode** %tree
	%27 = getelementptr %ast.AstNode* %26, i32 0, i32 6
	%28 = load i32* %27
	%29 = load i32* %i
	%30 = getelementptr [4 x %type.TypeNode*]* @type_inttypes, i32 0, i32 %29
	%31 = load %type.TypeNode** %30
	%32 = getelementptr %type.TypeNode* %31, i32 0, i32 8
	%33 = load i32* %32
	%34 = icmp ugt i32 %28, %33
	br label %L.16
L.16:
	%35 = phi i1 [ false, %L.12 ], [ %34, %L.15 ]
	%36 = xor i1 %35, true
	br i1 %36, label %L.13, label %L.14
L.14:
	%37 = load i32* %i
	%38 = add i32 %37, 1
	store i32 %38, i32* %i
	br label %L.12
L.13:
	%39 = load i32* %i
	%40 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 %39
	%41 = load %type.TypeNode** %40
	%42 = bitcast %type.TypeNode* %41 to %type.TypeNode*
	%43 = load %ast.AstNode** %tree
	%44 = getelementptr %ast.AstNode* %43, i32 0, i32 11
	store %type.TypeNode* %42, %type.TypeNode** %44
	%45 = load %ast.AstNode** %tree
	%46 = getelementptr %ast.AstNode* %45, i32 0, i32 1
	store i8 2, i8* %46
	br label %L.10
L.10:
	br label %L.8
L.8:
	br label %L.5
L.7:
	%47 = bitcast %type.TypeNode* null to %type.TypeNode*
	%48 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %47)
	%49 = bitcast %ast.AstNode* %48 to %ast.AstNode*
	store %ast.AstNode* %49, %ast.AstNode** %lhs
	%50 = call i8 @lex_Expect(i8 5)
	%51 = bitcast %type.TypeNode* null to %type.TypeNode*
	%52 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %51)
	%53 = bitcast %ast.AstNode* %52 to %ast.AstNode*
	store %ast.AstNode* %53, %ast.AstNode** %rhs
	%54 = load %ast.AstNode** %lhs
	%55 = icmp ne %ast.AstNode* %54, null
	br i1 %55, label %L.17, label %L.18
L.17:
	%56 = load %ast.AstNode** %rhs
	%57 = icmp ne %ast.AstNode* %56, null
	br label %L.18
L.18:
	%58 = phi i1 [ false, %L.7 ], [ %57, %L.17 ]
	br i1 %58, label %L.20, label %L.19
L.20:
	%59 = load %ast.AstNode** %lhs
	%60 = bitcast %ast.AstNode* %59 to %ast.AstNode*
	%61 = load %ast.AstNode** %rhs
	%62 = bitcast %ast.AstNode* %61 to %ast.AstNode*
	%63 = call i8 @expr_IsSignedBinOp(%ast.AstNode* %60, %ast.AstNode* %62)
	%64 = icmp ne i8 %63, 0
	br i1 %64, label %L.22, label %L.23
L.22:
	%65 = load i8* %which
	%66 = icmp eq i8 %65, 2
	br i1 %66, label %L.25, label %L.26
L.25:
	store i8 51, i8* %op
	br label %L.24
L.26:
	store i8 52, i8* %op
	br label %L.24
L.24:
	br label %L.21
L.23:
	%67 = load i8* %which
	%68 = icmp eq i8 %67, 2
	br i1 %68, label %L.28, label %L.29
L.28:
	store i8 49, i8* %op
	br label %L.27
L.29:
	store i8 50, i8* %op
	br label %L.27
L.27:
	br label %L.21
L.21:
	%69 = load i8* %op
	%70 = load %ast.AstNode** %lhs
	%71 = bitcast %ast.AstNode* %70 to %ast.AstNode*
	%72 = load %ast.AstNode** %rhs
	%73 = bitcast %ast.AstNode* %72 to %ast.AstNode*
	%74 = call %ast.AstNode* @expr_BinOp(i8 %69, %ast.AstNode* %71, %ast.AstNode* %73)
	%75 = bitcast %ast.AstNode* %74 to %ast.AstNode*
	store %ast.AstNode* %75, %ast.AstNode** %tree
	br label %L.19
L.19:
	br label %L.5
L.4:
	%76 = getelementptr [19 x i8]* @S.552
	%77 = bitcast [19 x i8]* %76 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %77)
	br label %L.5
L.5:
	%78 = call i8 @lex_Expect(i8 33)
	store i8 %78, i8* %tok
	br label %L.1
L.3:
	call void @lex_ErrorT(i8 14, i8 32)
	br label %L.1
L.1:
	%79 = load %ast.AstNode** %tree
	%80 = bitcast %ast.AstNode* %79 to %ast.AstNode*
	store %ast.AstNode* %80, %ast.AstNode** %rv.0
	br label %return
return:
	%81 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %81
}
define internal %ast.AstNode* @expr_Call(%symb.SymbNode* %ps.arg, %ast.AstNode* %tree.arg, %ast.AstNode* %arg.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%ps = alloca %symb.SymbNode*
	%tree = alloca %ast.AstNode*
	%arg = alloca %ast.AstNode*
	store %symb.SymbNode* %ps.arg, %symb.SymbNode** %ps
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	store %ast.AstNode* %arg.arg, %ast.AstNode** %arg
	%t = alloca %type.TypeNode*
	%s = alloca %symb.SymbNode*
	%tok = alloca i8
	%0 = load %symb.SymbNode** %ps
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 1
	%2 = load %type.TypeNode** %1
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	store %type.TypeNode* %3, %type.TypeNode** %t
	%4 = load %ast.AstNode** %tree
	%5 = icmp eq %ast.AstNode* %4, null
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = load %type.TypeNode** %t
	%7 = bitcast %type.TypeNode* %6 to %type.TypeNode*
	%8 = call %ast.AstNode* @ast_New(i8 10, %type.TypeNode* %7)
	%9 = bitcast %ast.AstNode* %8 to %ast.AstNode*
	store %ast.AstNode* %9, %ast.AstNode** %tree
	%10 = load %symb.SymbNode** %ps
	%11 = bitcast %symb.SymbNode* %10 to %symb.SymbNode*
	%12 = load %ast.AstNode** %tree
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 12
	store %symb.SymbNode* %11, %symb.SymbNode** %13
	br label %L.1
L.3:
	%14 = load %type.TypeNode** %t
	%15 = bitcast %type.TypeNode* %14 to %type.TypeNode*
	%16 = load %ast.AstNode** %tree
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	%18 = call %ast.AstNode* @ast_New1(i8 11, %type.TypeNode* %15, %ast.AstNode* %17)
	%19 = bitcast %ast.AstNode* %18 to %ast.AstNode*
	store %ast.AstNode* %19, %ast.AstNode** %tree
	%20 = load %type.TypeNode** %t
	%21 = icmp ne %type.TypeNode* %20, null
	br i1 %21, label %L.5, label %L.6
L.5:
	%22 = load %type.TypeNode** %t
	%23 = getelementptr %type.TypeNode* %22, i32 0, i32 13
	%24 = load i8* %23
	%25 = load %ast.AstNode** %tree
	%26 = getelementptr %ast.AstNode* %25, i32 0, i32 1
	store i8 %24, i8* %26
	br label %L.4
L.6:
	%27 = load %ast.AstNode** %tree
	%28 = getelementptr %ast.AstNode* %27, i32 0, i32 1
	store i8 0, i8* %28
	br label %L.4
L.4:
	%29 = load %symb.SymbNode** %ps
	%30 = bitcast %symb.SymbNode* %29 to %symb.SymbNode*
	%31 = load %ast.AstNode** %tree
	%32 = getelementptr %ast.AstNode* %31, i32 0, i32 12
	store %symb.SymbNode* %30, %symb.SymbNode** %32
	br label %L.1
L.1:
	%33 = load %type.TypeNode** %t
	%34 = icmp ne %type.TypeNode* %33, null
	br i1 %34, label %L.8, label %L.7
L.8:
	%35 = load %type.TypeNode** %t
	%36 = getelementptr %type.TypeNode* %35, i32 0, i32 13
	%37 = load i8* %36
	%38 = load %ast.AstNode** %tree
	%39 = getelementptr %ast.AstNode* %38, i32 0, i32 1
	store i8 %37, i8* %39
	%40 = load %type.TypeNode** %t
	%41 = getelementptr %type.TypeNode* %40, i32 0, i32 9
	%42 = load i32* %41
	%43 = load %ast.AstNode** %tree
	%44 = getelementptr %ast.AstNode* %43, i32 0, i32 6
	store i32 %42, i32* %44
	%45 = load %type.TypeNode** %t
	%46 = getelementptr %type.TypeNode* %45, i32 0, i32 13
	%47 = load i8* %46
	%48 = icmp eq i8 %47, 4
	br i1 %48, label %L.10, label %L.9
L.10:
	%49 = load %type.TypeNode** %t
	%50 = getelementptr %type.TypeNode* %49, i32 0, i32 0
	%51 = load %type.TypeNode** %50
	%52 = bitcast %type.TypeNode* %51 to %type.TypeNode*
	%53 = load %ast.AstNode** %tree
	%54 = getelementptr %ast.AstNode* %53, i32 0, i32 11
	store %type.TypeNode* %52, %type.TypeNode** %54
	%55 = load %target.TargetT** @target_Target
	%56 = getelementptr %target.TargetT* %55, i32 0, i32 8
	%57 = getelementptr %target.SizeAlign* %56, i32 0, i32 0
	%58 = load i8* %57
	%59 = zext i8 %58 to i32
	%60 = load %ast.AstNode** %tree
	%61 = getelementptr %ast.AstNode* %60, i32 0, i32 6
	store i32 %59, i32* %61
	br label %L.9
L.9:
	br label %L.7
L.7:
	%62 = load %symb.SymbNode** %ps
	%63 = getelementptr %symb.SymbNode* %62, i32 0, i32 3
	%64 = load %symb.SymbNode** %63
	%65 = bitcast %symb.SymbNode* %64 to %symb.SymbNode*
	store %symb.SymbNode* %65, %symb.SymbNode** %s
	%66 = load %ast.AstNode** %arg
	%67 = icmp ne %ast.AstNode* %66, null
	br i1 %67, label %L.12, label %L.11
L.12:
	%68 = load %ast.AstNode** %arg
	%69 = bitcast %ast.AstNode* %68 to %ast.AstNode*
	%70 = call %ast.AstNode* @expr_Load(%ast.AstNode* %69)
	%71 = bitcast %ast.AstNode* %70 to %ast.AstNode*
	store %ast.AstNode* %71, %ast.AstNode** %arg
	%72 = load %ast.AstNode** %arg
	%73 = bitcast %ast.AstNode* %72 to %ast.AstNode*
	%74 = load %symb.SymbNode** %s
	%75 = getelementptr %symb.SymbNode* %74, i32 0, i32 1
	%76 = load %type.TypeNode** %75
	%77 = bitcast %type.TypeNode* %76 to %type.TypeNode*
	%78 = call %ast.AstNode* @expr_Actual(%ast.AstNode* %73, %type.TypeNode* %77)
	%79 = bitcast %ast.AstNode* %78 to %ast.AstNode*
	store %ast.AstNode* %79, %ast.AstNode** %arg
	%80 = load %ast.AstNode** %tree
	%81 = bitcast %ast.AstNode* %80 to %ast.AstNode*
	%82 = load %ast.AstNode** %arg
	%83 = bitcast %ast.AstNode* %82 to %ast.AstNode*
	%84 = call %ast.AstNode* @ast_Child(%ast.AstNode* %81, %ast.AstNode* %83)
	%85 = bitcast %ast.AstNode* %84 to %ast.AstNode*
	store %ast.AstNode* %85, %ast.AstNode** %tree
	%86 = load %symb.SymbNode** %s
	%87 = getelementptr %symb.SymbNode* %86, i32 0, i32 0
	%88 = load %symb.SymbNode** %87
	%89 = bitcast %symb.SymbNode* %88 to %symb.SymbNode*
	store %symb.SymbNode* %89, %symb.SymbNode** %s
	br label %L.11
L.11:
	%90 = load i8* @lex_Token
	store i8 %90, i8* %tok
	%91 = load i8* %tok
	%92 = icmp eq i8 %91, 32
	br i1 %92, label %L.14, label %L.15
L.14:
	%93 = call i8 @lex_Next()
	store i8 %93, i8* %tok
	%94 = load i8* %tok
	%95 = icmp ne i8 %94, 33
	br i1 %95, label %L.17, label %L.16
L.17:
	br label %L.18
L.18:
	%96 = load %symb.SymbNode** %s
	%97 = icmp eq %symb.SymbNode* %96, null
	br i1 %97, label %L.21, label %L.20
L.21:
	call void @lex_Error(i8 64)
	%98 = getelementptr [4 x i8]* @expr_skiplist
	%99 = bitcast [4 x i8]* %98 to [0 x i8]*
	%100 = call i8 @lex_Skip([0 x i8]* %99)
	store i8 %100, i8* %tok
	br label %L.19
L.20:
	%101 = bitcast %ast.AstNode* null to %ast.AstNode*
	%102 = load %symb.SymbNode** %s
	%103 = getelementptr %symb.SymbNode* %102, i32 0, i32 1
	%104 = load %type.TypeNode** %103
	%105 = bitcast %type.TypeNode* %104 to %type.TypeNode*
	%106 = call %ast.AstNode* @expr_Actual(%ast.AstNode* %101, %type.TypeNode* %105)
	%107 = bitcast %ast.AstNode* %106 to %ast.AstNode*
	store %ast.AstNode* %107, %ast.AstNode** %arg
	%108 = load %ast.AstNode** %tree
	%109 = bitcast %ast.AstNode* %108 to %ast.AstNode*
	%110 = load %ast.AstNode** %arg
	%111 = bitcast %ast.AstNode* %110 to %ast.AstNode*
	%112 = call %ast.AstNode* @ast_Child(%ast.AstNode* %109, %ast.AstNode* %111)
	%113 = bitcast %ast.AstNode* %112 to %ast.AstNode*
	store %ast.AstNode* %113, %ast.AstNode** %tree
	%114 = load %symb.SymbNode** %s
	%115 = getelementptr %symb.SymbNode* %114, i32 0, i32 0
	%116 = load %symb.SymbNode** %115
	%117 = bitcast %symb.SymbNode* %116 to %symb.SymbNode*
	store %symb.SymbNode* %117, %symb.SymbNode** %s
	%118 = load i8* @lex_Token
	store i8 %118, i8* %tok
	%119 = load i8* %tok
	%120 = icmp ne i8 %119, 5
	br i1 %120, label %L.19, label %L.22
L.22:
	%121 = call i8 @lex_Next()
	store i8 %121, i8* %tok
	br label %L.18
L.19:
	br label %L.16
L.16:
	%122 = call i8 @lex_Expect(i8 33)
	store i8 %122, i8* %tok
	br label %L.13
L.15:
	call void @lex_ErrorT(i8 14, i8 32)
	br label %L.13
L.13:
	%123 = load %symb.SymbNode** %s
	%124 = icmp ne %symb.SymbNode* %123, null
	br i1 %124, label %L.24, label %L.23
L.24:
	call void @lex_Error(i8 63)
	br label %L.23
L.23:
	%125 = load %ast.AstNode** %tree
	%126 = bitcast %ast.AstNode* %125 to %ast.AstNode*
	store %ast.AstNode* %126, %ast.AstNode** %rv.0
	br label %return
return:
	%127 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %127
}
define internal %ast.AstNode* @expr_Atom(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%tree = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load %symb.SymbNode** %s
	%2 = icmp ne %symb.SymbNode* %1, null
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = load %symb.SymbNode** %s
	%4 = getelementptr %symb.SymbNode* %3, i32 0, i32 1
	%5 = load %type.TypeNode** %4
	%6 = bitcast %type.TypeNode* %5 to %type.TypeNode*
	store %type.TypeNode* %6, %type.TypeNode** %t
	%7 = load %symb.SymbNode** %s
	%8 = getelementptr %symb.SymbNode* %7, i32 0, i32 12
	%9 = load i8* %8
	%10 = zext i8 %9 to i32
	switch i32 %10, label %L.3 [
		i32 3, label %L.5
		i32 1, label %L.6
		i32 5, label %L.7
		i32 2, label %L.8
	]
L.5:
	%11 = load %type.TypeNode** %t
	%12 = bitcast %type.TypeNode* %11 to %type.TypeNode*
	%13 = call %ast.AstNode* @ast_New(i8 9, %type.TypeNode* %12)
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	store %ast.AstNode* %14, %ast.AstNode** %tree
	%15 = load %symb.SymbNode** %s
	%16 = bitcast %symb.SymbNode* %15 to %symb.SymbNode*
	%17 = load %ast.AstNode** %tree
	%18 = getelementptr %ast.AstNode* %17, i32 0, i32 12
	store %symb.SymbNode* %16, %symb.SymbNode** %18
	%19 = load %ast.AstNode** %tree
	%20 = getelementptr %ast.AstNode* %19, i32 0, i32 1
	store i8 4, i8* %20
	%21 = load %type.TypeNode** %t
	%22 = getelementptr %type.TypeNode* %21, i32 0, i32 9
	%23 = load i32* %22
	%24 = load %ast.AstNode** %tree
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 6
	store i32 %23, i32* %25
	br label %L.4
L.6:
	%26 = load %type.TypeNode** %t
	%27 = getelementptr %type.TypeNode* %26, i32 0, i32 13
	%28 = load i8* %27
	%29 = icmp ule i8 %28, 4
	br i1 %29, label %L.10, label %L.9
L.9:
	%30 = load %type.TypeNode** %t
	%31 = getelementptr %type.TypeNode* %30, i32 0, i32 14
	%32 = load i8* %31
	%33 = icmp eq i8 %32, 2
	br label %L.10
L.10:
	%34 = phi i1 [ true, %L.6 ], [ %33, %L.9 ]
	br i1 %34, label %L.12, label %L.13
L.12:
	%35 = load %type.TypeNode** %t
	%36 = bitcast %type.TypeNode* %35 to %type.TypeNode*
	%37 = load %symb.SymbNode** %s
	%38 = getelementptr %symb.SymbNode* %37, i32 0, i32 7
	%39 = load i64* %38
	%40 = call %ast.AstNode* @ast_Const(%type.TypeNode* %36, i64 %39)
	%41 = bitcast %ast.AstNode* %40 to %ast.AstNode*
	store %ast.AstNode* %41, %ast.AstNode** %tree
	br label %L.11
L.13:
	%42 = load %type.TypeNode** %t
	%43 = bitcast %type.TypeNode* %42 to %type.TypeNode*
	%44 = call %ast.AstNode* @ast_New(i8 9, %type.TypeNode* %43)
	%45 = bitcast %ast.AstNode* %44 to %ast.AstNode*
	store %ast.AstNode* %45, %ast.AstNode** %tree
	%46 = load %symb.SymbNode** %s
	%47 = bitcast %symb.SymbNode* %46 to %symb.SymbNode*
	%48 = load %ast.AstNode** %tree
	%49 = getelementptr %ast.AstNode* %48, i32 0, i32 12
	store %symb.SymbNode* %47, %symb.SymbNode** %49
	%50 = load %ast.AstNode** %tree
	%51 = getelementptr %ast.AstNode* %50, i32 0, i32 1
	store i8 4, i8* %51
	%52 = load %type.TypeNode** %t
	%53 = getelementptr %type.TypeNode* %52, i32 0, i32 9
	%54 = load i32* %53
	%55 = load %ast.AstNode** %tree
	%56 = getelementptr %ast.AstNode* %55, i32 0, i32 6
	store i32 %54, i32* %56
	br label %L.11
L.11:
	%57 = load %type.TypeNode** %t
	%58 = getelementptr %type.TypeNode* %57, i32 0, i32 13
	%59 = load i8* %58
	%60 = icmp eq i8 %59, 4
	br i1 %60, label %L.15, label %L.14
L.15:
	%61 = load %type.TypeNode** %t
	%62 = getelementptr %type.TypeNode* %61, i32 0, i32 0
	%63 = load %type.TypeNode** %62
	%64 = bitcast %type.TypeNode* %63 to %type.TypeNode*
	%65 = load %ast.AstNode** %tree
	%66 = getelementptr %ast.AstNode* %65, i32 0, i32 11
	store %type.TypeNode* %64, %type.TypeNode** %66
	br label %L.14
L.14:
	br label %L.4
L.7:
	%67 = load %symb.SymbNode** %s
	%68 = getelementptr %symb.SymbNode* %67, i32 0, i32 7
	%69 = load i64* %68
	%70 = icmp ne i64 %69, 0
	br i1 %70, label %L.17, label %L.18
L.17:
	%71 = load %symb.SymbNode** %s
	%72 = bitcast %symb.SymbNode* %71 to %symb.SymbNode*
	%73 = call %ast.AstNode* @expr_Intrinsic(%symb.SymbNode* %72)
	%74 = bitcast %ast.AstNode* %73 to %ast.AstNode*
	store %ast.AstNode* %74, %ast.AstNode** %tree
	br label %L.16
L.18:
	%75 = load %symb.SymbNode** %s
	%76 = bitcast %symb.SymbNode* %75 to %symb.SymbNode*
	%77 = bitcast %ast.AstNode* null to %ast.AstNode*
	%78 = bitcast %ast.AstNode* null to %ast.AstNode*
	%79 = call %ast.AstNode* @expr_Call(%symb.SymbNode* %76, %ast.AstNode* %77, %ast.AstNode* %78)
	%80 = bitcast %ast.AstNode* %79 to %ast.AstNode*
	store %ast.AstNode* %80, %ast.AstNode** %tree
	br label %L.16
L.16:
	br label %L.4
L.8:
	%81 = load %type.TypeNode** %t
	%82 = bitcast %type.TypeNode* %81 to %type.TypeNode*
	%83 = call %ast.AstNode* @ast_New(i8 2, %type.TypeNode* %82)
	%84 = bitcast %ast.AstNode* %83 to %ast.AstNode*
	store %ast.AstNode* %84, %ast.AstNode** %tree
	%85 = load %symb.SymbNode** %s
	%86 = bitcast %symb.SymbNode* %85 to %symb.SymbNode*
	%87 = load %ast.AstNode** %tree
	%88 = getelementptr %ast.AstNode* %87, i32 0, i32 12
	store %symb.SymbNode* %86, %symb.SymbNode** %88
	br label %L.4
L.3:
	%89 = load %symb.SymbNode** %s
	%90 = getelementptr %symb.SymbNode* %89, i32 0, i32 19
	%91 = getelementptr [0 x i8]* %90
	%92 = bitcast [0 x i8]* %91 to [0 x i8]*
	call void @lex_ErrorI(i8 19, [0 x i8]* %92)
	br label %L.4
L.4:
	br label %L.1
L.1:
	%93 = load %ast.AstNode** %tree
	%94 = bitcast %ast.AstNode* %93 to %ast.AstNode*
	store %ast.AstNode* %94, %ast.AstNode** %rv.0
	br label %return
return:
	%95 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %95
}
define internal %ast.AstNode* @expr_Primary(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%tree = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	%bt = alloca %type.TypeNode*
	%tok = alloca i8
	%done = alloca i8
	%0 = load %symb.SymbNode** %s
	%1 = bitcast %symb.SymbNode* %0 to %symb.SymbNode*
	%2 = call %ast.AstNode* @expr_Atom(%symb.SymbNode* %1)
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %tree
	%4 = load i8* @lex_Token
	store i8 %4, i8* %tok
	store i8 0, i8* %done
	br label %L.1
L.1:
	%5 = load i8* %done
	%6 = icmp ne i8 %5, 0
	%7 = xor i1 %6, true
	br i1 %7, label %L.6, label %L.7
L.6:
	%8 = load %ast.AstNode** %tree
	%9 = icmp ne %ast.AstNode* %8, null
	br label %L.7
L.7:
	%10 = phi i1 [ false, %L.1 ], [ %9, %L.6 ]
	br i1 %10, label %L.4, label %L.5
L.4:
	%11 = load %ast.AstNode** %tree
	%12 = getelementptr %ast.AstNode* %11, i32 0, i32 11
	%13 = load %type.TypeNode** %12
	%14 = icmp ne %type.TypeNode* %13, null
	br label %L.5
L.5:
	%15 = phi i1 [ false, %L.7 ], [ %14, %L.4 ]
	%16 = xor i1 %15, true
	br i1 %16, label %L.2, label %L.3
L.3:
	%17 = load %ast.AstNode** %tree
	%18 = getelementptr %ast.AstNode* %17, i32 0, i32 11
	%19 = load %type.TypeNode** %18
	%20 = bitcast %type.TypeNode* %19 to %type.TypeNode*
	store %type.TypeNode* %20, %type.TypeNode** %t
	%21 = load i8* %tok
	%22 = zext i8 %21 to i32
	switch i32 %22, label %L.8 [
		i32 2, label %L.10
		i32 7, label %L.11
		i32 34, label %L.12
		i32 8, label %L.13
	]
L.10:
	%23 = call i8 @lex_Next()
	store i8 %23, i8* %tok
	%24 = load %ast.AstNode** %tree
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 0
	%26 = load i8* %25
	%27 = icmp eq i8 %26, 2
	br i1 %27, label %L.15, label %L.16
L.15:
	%28 = load %type.TypeNode** %t
	%29 = getelementptr %type.TypeNode* %28, i32 0, i32 13
	%30 = load i8* %29
	%31 = icmp eq i8 %30, 1
	br i1 %31, label %L.18, label %L.19
L.18:
	%32 = load %type.TypeNode** %t
	%33 = bitcast %type.TypeNode* %32 to %type.TypeNode*
	%34 = call %ast.AstNode* @expr_EnumConst(%type.TypeNode* %33)
	%35 = bitcast %ast.AstNode* %34 to %ast.AstNode*
	store %ast.AstNode* %35, %ast.AstNode** %tree
	%36 = call i8 @lex_Next()
	store i8 %36, i8* %tok
	br label %L.17
L.19:
	%37 = load %symb.SymbNode** %s
	%38 = getelementptr %symb.SymbNode* %37, i32 0, i32 19
	%39 = getelementptr [0 x i8]* %38
	%40 = bitcast [0 x i8]* %39 to [0 x i8]*
	call void @lex_ErrorI(i8 26, [0 x i8]* %40)
	br label %L.17
L.17:
	br label %L.14
L.16:
	%41 = load i8* %tok
	%42 = icmp eq i8 %41, 40
	br i1 %42, label %L.21, label %L.22
L.21:
	%43 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %43, %symb.SymbNode** %s
	%44 = load %type.TypeNode** %t
	%45 = bitcast %type.TypeNode* %44 to %type.TypeNode*
	store %type.TypeNode* %45, %type.TypeNode** %bt
	%46 = load %type.TypeNode** %t
	%47 = getelementptr %type.TypeNode* %46, i32 0, i32 13
	%48 = load i8* %47
	%49 = icmp eq i8 %48, 4
	br i1 %49, label %L.24, label %L.23
L.24:
	%50 = load %type.TypeNode** %t
	%51 = getelementptr %type.TypeNode* %50, i32 0, i32 0
	%52 = load %type.TypeNode** %51
	%53 = bitcast %type.TypeNode* %52 to %type.TypeNode*
	store %type.TypeNode* %53, %type.TypeNode** %bt
	br label %L.23
L.23:
	%54 = load %type.TypeNode** %bt
	%55 = icmp ne %type.TypeNode* %54, null
	br i1 %55, label %L.26, label %L.25
L.26:
	br label %L.27
L.27:
	%56 = load %type.TypeNode** %bt
	%57 = getelementptr %type.TypeNode* %56, i32 0, i32 5
	%58 = load %symb.SymbNode** %57
	%59 = bitcast %symb.SymbNode* %58 to %symb.SymbNode*
	%60 = getelementptr [64 x i8]* @lex_Ident
	%61 = bitcast [64 x i8]* %60 to [0 x i8]*
	%62 = call %symb.SymbNode* @symb_FindMethod(%symb.SymbNode* %59, [0 x i8]* %61)
	%63 = bitcast %symb.SymbNode* %62 to %symb.SymbNode*
	store %symb.SymbNode* %63, %symb.SymbNode** %s
	%64 = load %symb.SymbNode** %s
	%65 = icmp ne %symb.SymbNode* %64, null
	br i1 %65, label %L.31, label %L.30
L.30:
	%66 = load %type.TypeNode** %bt
	%67 = getelementptr %type.TypeNode* %66, i32 0, i32 0
	%68 = load %type.TypeNode** %67
	%69 = icmp eq %type.TypeNode* %68, null
	br label %L.31
L.31:
	%70 = phi i1 [ true, %L.27 ], [ %69, %L.30 ]
	br i1 %70, label %L.28, label %L.29
L.29:
	%71 = load %type.TypeNode** %bt
	%72 = getelementptr %type.TypeNode* %71, i32 0, i32 0
	%73 = load %type.TypeNode** %72
	%74 = bitcast %type.TypeNode* %73 to %type.TypeNode*
	store %type.TypeNode* %74, %type.TypeNode** %bt
	br label %L.27
L.28:
	br label %L.25
L.25:
	%75 = load %symb.SymbNode** %s
	%76 = icmp ne %symb.SymbNode* %75, null
	br i1 %76, label %L.33, label %L.34
L.33:
	%77 = call i8 @lex_Next()
	store i8 %77, i8* %tok
	%78 = load %symb.SymbNode** %s
	%79 = bitcast %symb.SymbNode* %78 to %symb.SymbNode*
	%80 = bitcast %ast.AstNode* null to %ast.AstNode*
	%81 = load %ast.AstNode** %tree
	%82 = bitcast %ast.AstNode* %81 to %ast.AstNode*
	%83 = call %ast.AstNode* @expr_Call(%symb.SymbNode* %79, %ast.AstNode* %80, %ast.AstNode* %82)
	%84 = bitcast %ast.AstNode* %83 to %ast.AstNode*
	store %ast.AstNode* %84, %ast.AstNode** %tree
	br label %L.32
L.34:
	%85 = load %type.TypeNode** %t
	%86 = getelementptr %type.TypeNode* %85, i32 0, i32 13
	%87 = load i8* %86
	%88 = icmp eq i8 %87, 4
	br i1 %88, label %L.36, label %L.35
L.36:
	%89 = load %type.TypeNode** %t
	%90 = getelementptr %type.TypeNode* %89, i32 0, i32 0
	%91 = load %type.TypeNode** %90
	%92 = icmp ne %type.TypeNode* %91, null
	br i1 %92, label %L.38, label %L.39
L.38:
	%93 = load %type.TypeNode** %t
	%94 = getelementptr %type.TypeNode* %93, i32 0, i32 0
	%95 = load %type.TypeNode** %94
	%96 = bitcast %type.TypeNode* %95 to %type.TypeNode*
	store %type.TypeNode* %96, %type.TypeNode** %t
	%97 = load %type.TypeNode** %t
	%98 = bitcast %type.TypeNode* %97 to %type.TypeNode*
	%99 = load %ast.AstNode** %tree
	%100 = bitcast %ast.AstNode* %99 to %ast.AstNode*
	%101 = call %ast.AstNode* @ast_New1(i8 25, %type.TypeNode* %98, %ast.AstNode* %100)
	%102 = bitcast %ast.AstNode* %101 to %ast.AstNode*
	store %ast.AstNode* %102, %ast.AstNode** %tree
	%103 = load %ast.AstNode** %tree
	%104 = getelementptr %ast.AstNode* %103, i32 0, i32 1
	store i8 4, i8* %104
	%105 = load %target.TargetT** @target_Target
	%106 = getelementptr %target.TargetT* %105, i32 0, i32 8
	%107 = getelementptr %target.SizeAlign* %106, i32 0, i32 0
	%108 = load i8* %107
	%109 = zext i8 %108 to i32
	%110 = load %ast.AstNode** %tree
	%111 = getelementptr %ast.AstNode* %110, i32 0, i32 6
	store i32 %109, i32* %111
	br label %L.37
L.39:
	call void @lex_Error(i8 20)
	%112 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %112, %ast.AstNode** %tree
	br label %L.37
L.37:
	br label %L.35
L.35:
	%113 = load %type.TypeNode** %t
	%114 = getelementptr %type.TypeNode* %113, i32 0, i32 13
	%115 = load i8* %114
	%116 = icmp eq i8 %115, 6
	br i1 %116, label %L.41, label %L.40
L.41:
	%117 = load %type.TypeNode** %t
	%118 = getelementptr %type.TypeNode* %117, i32 0, i32 4
	%119 = load %symb.SymbNode** %118
	%120 = bitcast %symb.SymbNode* %119 to %symb.SymbNode*
	%121 = getelementptr [64 x i8]* @lex_Ident
	%122 = bitcast [64 x i8]* %121 to [0 x i8]*
	%123 = call %symb.SymbNode* @symb_FindLocal(%symb.SymbNode* %120, [0 x i8]* %122)
	%124 = bitcast %symb.SymbNode* %123 to %symb.SymbNode*
	store %symb.SymbNode* %124, %symb.SymbNode** %s
	%125 = load %symb.SymbNode** %s
	%126 = icmp ne %symb.SymbNode* %125, null
	br i1 %126, label %L.43, label %L.44
L.43:
	%127 = call i8 @lex_Next()
	store i8 %127, i8* %tok
	%128 = load %symb.SymbNode** %s
	%129 = getelementptr %symb.SymbNode* %128, i32 0, i32 1
	%130 = load %type.TypeNode** %129
	%131 = bitcast %type.TypeNode* %130 to %type.TypeNode*
	store %type.TypeNode* %131, %type.TypeNode** %t
	%132 = load %type.TypeNode** %t
	%133 = bitcast %type.TypeNode* %132 to %type.TypeNode*
	%134 = load %ast.AstNode** %tree
	%135 = bitcast %ast.AstNode* %134 to %ast.AstNode*
	%136 = call %ast.AstNode* @ast_New1(i8 16, %type.TypeNode* %133, %ast.AstNode* %135)
	%137 = bitcast %ast.AstNode* %136 to %ast.AstNode*
	store %ast.AstNode* %137, %ast.AstNode** %tree
	%138 = load %symb.SymbNode** %s
	%139 = getelementptr %symb.SymbNode* %138, i32 0, i32 9
	%140 = load i16* %139
	%141 = zext i16 %140 to i64
	%142 = load %ast.AstNode** %tree
	%143 = getelementptr %ast.AstNode* %142, i32 0, i32 10
	store i64 %141, i64* %143
	%144 = load %ast.AstNode** %tree
	%145 = getelementptr %ast.AstNode* %144, i32 0, i32 1
	store i8 4, i8* %145
	%146 = load %type.TypeNode** %t
	%147 = getelementptr %type.TypeNode* %146, i32 0, i32 9
	%148 = load i32* %147
	%149 = load %ast.AstNode** %tree
	%150 = getelementptr %ast.AstNode* %149, i32 0, i32 6
	store i32 %148, i32* %150
	br label %L.42
L.44:
	%151 = getelementptr [64 x i8]* @lex_Ident
	%152 = bitcast [64 x i8]* %151 to [0 x i8]*
	call void @lex_ErrorI(i8 18, [0 x i8]* %152)
	%153 = call i8 @lex_Next()
	store i8 %153, i8* %tok
	br label %L.42
L.42:
	br label %L.40
L.40:
	br label %L.32
L.32:
	br label %L.20
L.22:
	call void @lex_Error(i8 15)
	br label %L.20
L.20:
	br label %L.14
L.14:
	br label %L.9
L.11:
	%154 = call i8 @lex_Next()
	store i8 %154, i8* %tok
	%155 = load %ast.AstNode** %tree
	%156 = getelementptr %ast.AstNode* %155, i32 0, i32 0
	%157 = load i8* %156
	%158 = icmp eq i8 %157, 2
	br i1 %158, label %L.46, label %L.45
L.46:
	%159 = load %ast.AstNode** %tree
	%160 = getelementptr %ast.AstNode* %159, i32 0, i32 12
	%161 = load %symb.SymbNode** %160
	%162 = getelementptr %symb.SymbNode* %161, i32 0, i32 19
	%163 = getelementptr [0 x i8]* %162
	%164 = bitcast [0 x i8]* %163 to [0 x i8]*
	call void @lex_ErrorI(i8 26, [0 x i8]* %164)
	br label %L.45
L.45:
	%165 = load %type.TypeNode** %t
	%166 = getelementptr %type.TypeNode* %165, i32 0, i32 13
	%167 = load i8* %166
	%168 = icmp eq i8 %167, 4
	br i1 %168, label %L.48, label %L.49
L.48:
	%169 = load %type.TypeNode** %t
	%170 = getelementptr %type.TypeNode* %169, i32 0, i32 0
	%171 = load %type.TypeNode** %170
	%172 = icmp ne %type.TypeNode* %171, null
	br i1 %172, label %L.51, label %L.52
L.51:
	%173 = load %type.TypeNode** %t
	%174 = getelementptr %type.TypeNode* %173, i32 0, i32 0
	%175 = load %type.TypeNode** %174
	%176 = bitcast %type.TypeNode* %175 to %type.TypeNode*
	store %type.TypeNode* %176, %type.TypeNode** %t
	%177 = load %type.TypeNode** %t
	%178 = bitcast %type.TypeNode* %177 to %type.TypeNode*
	%179 = load %ast.AstNode** %tree
	%180 = bitcast %ast.AstNode* %179 to %ast.AstNode*
	%181 = call %ast.AstNode* @ast_New1(i8 25, %type.TypeNode* %178, %ast.AstNode* %180)
	%182 = bitcast %ast.AstNode* %181 to %ast.AstNode*
	store %ast.AstNode* %182, %ast.AstNode** %tree
	%183 = load %ast.AstNode** %tree
	%184 = getelementptr %ast.AstNode* %183, i32 0, i32 1
	store i8 4, i8* %184
	%185 = load %target.TargetT** @target_Target
	%186 = getelementptr %target.TargetT* %185, i32 0, i32 8
	%187 = getelementptr %target.SizeAlign* %186, i32 0, i32 0
	%188 = load i8* %187
	%189 = zext i8 %188 to i32
	%190 = load %ast.AstNode** %tree
	%191 = getelementptr %ast.AstNode* %190, i32 0, i32 6
	store i32 %189, i32* %191
	br label %L.50
L.52:
	call void @lex_Error(i8 20)
	%192 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %192, %ast.AstNode** %tree
	br label %L.50
L.50:
	br label %L.47
L.49:
	%193 = load %type.TypeNode** %t
	%194 = getelementptr %type.TypeNode* %193, i32 0, i32 13
	%195 = load i8* %194
	%196 = icmp eq i8 %195, 7
	br i1 %196, label %L.54, label %L.55
L.54:
	%197 = load %type.TypeNode** %t
	%198 = bitcast %type.TypeNode* %197 to %type.TypeNode*
	%199 = load %ast.AstNode** %tree
	%200 = bitcast %ast.AstNode* %199 to %ast.AstNode*
	%201 = call %ast.AstNode* @ast_New1(i8 25, %type.TypeNode* %198, %ast.AstNode* %200)
	%202 = bitcast %ast.AstNode* %201 to %ast.AstNode*
	store %ast.AstNode* %202, %ast.AstNode** %tree
	%203 = load %ast.AstNode** %tree
	%204 = getelementptr %ast.AstNode* %203, i32 0, i32 1
	store i8 7, i8* %204
	%205 = load %type.TypeNode** %t
	%206 = getelementptr %type.TypeNode* %205, i32 0, i32 4
	%207 = load %symb.SymbNode** %206
	%208 = bitcast %symb.SymbNode* %207 to %symb.SymbNode*
	%209 = load %ast.AstNode** %tree
	%210 = bitcast %ast.AstNode* %209 to %ast.AstNode*
	%211 = bitcast %ast.AstNode* null to %ast.AstNode*
	%212 = call %ast.AstNode* @expr_Call(%symb.SymbNode* %208, %ast.AstNode* %210, %ast.AstNode* %211)
	%213 = bitcast %ast.AstNode* %212 to %ast.AstNode*
	store %ast.AstNode* %213, %ast.AstNode** %tree
	br label %L.53
L.55:
	call void @lex_Error(i8 56)
	br label %L.53
L.53:
	br label %L.47
L.47:
	br label %L.9
L.12:
	%214 = call i8 @lex_Next()
	store i8 %214, i8* %tok
	%215 = load %ast.AstNode** %tree
	%216 = getelementptr %ast.AstNode* %215, i32 0, i32 0
	%217 = load i8* %216
	%218 = icmp eq i8 %217, 2
	br i1 %218, label %L.57, label %L.56
L.57:
	%219 = load %ast.AstNode** %tree
	%220 = getelementptr %ast.AstNode* %219, i32 0, i32 12
	%221 = load %symb.SymbNode** %220
	%222 = getelementptr %symb.SymbNode* %221, i32 0, i32 19
	%223 = getelementptr [0 x i8]* %222
	%224 = bitcast [0 x i8]* %223 to [0 x i8]*
	call void @lex_ErrorI(i8 26, [0 x i8]* %224)
	br label %L.56
L.56:
	%225 = load %type.TypeNode** %t
	%226 = getelementptr %type.TypeNode* %225, i32 0, i32 13
	%227 = load i8* %226
	%228 = icmp eq i8 %227, 4
	br i1 %228, label %L.59, label %L.58
L.59:
	%229 = load %type.TypeNode** %t
	%230 = getelementptr %type.TypeNode* %229, i32 0, i32 0
	%231 = load %type.TypeNode** %230
	%232 = icmp ne %type.TypeNode* %231, null
	br i1 %232, label %L.61, label %L.62
L.61:
	%233 = load %type.TypeNode** %t
	%234 = getelementptr %type.TypeNode* %233, i32 0, i32 0
	%235 = load %type.TypeNode** %234
	%236 = bitcast %type.TypeNode* %235 to %type.TypeNode*
	store %type.TypeNode* %236, %type.TypeNode** %t
	%237 = load %type.TypeNode** %t
	%238 = bitcast %type.TypeNode* %237 to %type.TypeNode*
	%239 = load %ast.AstNode** %tree
	%240 = bitcast %ast.AstNode* %239 to %ast.AstNode*
	%241 = call %ast.AstNode* @ast_New1(i8 25, %type.TypeNode* %238, %ast.AstNode* %240)
	%242 = bitcast %ast.AstNode* %241 to %ast.AstNode*
	store %ast.AstNode* %242, %ast.AstNode** %tree
	%243 = load %ast.AstNode** %tree
	%244 = getelementptr %ast.AstNode* %243, i32 0, i32 1
	store i8 4, i8* %244
	%245 = load %target.TargetT** @target_Target
	%246 = getelementptr %target.TargetT* %245, i32 0, i32 8
	%247 = getelementptr %target.SizeAlign* %246, i32 0, i32 0
	%248 = load i8* %247
	%249 = zext i8 %248 to i32
	%250 = load %ast.AstNode** %tree
	%251 = getelementptr %ast.AstNode* %250, i32 0, i32 6
	store i32 %249, i32* %251
	br label %L.60
L.62:
	call void @lex_Error(i8 20)
	%252 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %252, %ast.AstNode** %tree
	br label %L.60
L.60:
	br label %L.58
L.58:
	%253 = load %type.TypeNode** %t
	%254 = getelementptr %type.TypeNode* %253, i32 0, i32 13
	%255 = load i8* %254
	%256 = icmp eq i8 %255, 5
	br i1 %256, label %L.64, label %L.65
L.64:
	%index = alloca %ast.AstNode*
	%257 = load %type.TypeNode** %t
	%258 = getelementptr %type.TypeNode* %257, i32 0, i32 2
	%259 = load %type.TypeNode** %258
	%260 = bitcast %type.TypeNode* %259 to %type.TypeNode*
	%261 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %260)
	%262 = bitcast %ast.AstNode* %261 to %ast.AstNode*
	store %ast.AstNode* %262, %ast.AstNode** %index
	%263 = load i8* @lex_Token
	store i8 %263, i8* %tok
	%264 = load i8* %tok
	%265 = icmp eq i8 %264, 3
	br i1 %265, label %L.67, label %L.68
L.67:
	%len = alloca %ast.AstNode*
	%266 = call i8 @lex_Next()
	store i8 %266, i8* %tok
	%267 = load %type.TypeNode** %t
	%268 = getelementptr %type.TypeNode* %267, i32 0, i32 2
	%269 = load %type.TypeNode** %268
	%270 = bitcast %type.TypeNode* %269 to %type.TypeNode*
	%271 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %270)
	%272 = bitcast %ast.AstNode* %271 to %ast.AstNode*
	store %ast.AstNode* %272, %ast.AstNode** %len
	%273 = load %ast.AstNode** %tree
	%274 = bitcast %ast.AstNode* %273 to %ast.AstNode*
	%275 = load %ast.AstNode** %index
	%276 = bitcast %ast.AstNode* %275 to %ast.AstNode*
	%277 = load %ast.AstNode** %len
	%278 = bitcast %ast.AstNode* %277 to %ast.AstNode*
	%279 = call %ast.AstNode* @expr_Slice(%ast.AstNode* %274, %ast.AstNode* %276, %ast.AstNode* %278)
	%280 = bitcast %ast.AstNode* %279 to %ast.AstNode*
	store %ast.AstNode* %280, %ast.AstNode** %tree
	store i8 1, i8* %done
	br label %L.66
L.68:
	%281 = load %type.TypeNode** %t
	%282 = getelementptr %type.TypeNode* %281, i32 0, i32 0
	%283 = load %type.TypeNode** %282
	%284 = bitcast %type.TypeNode* %283 to %type.TypeNode*
	store %type.TypeNode* %284, %type.TypeNode** %t
	%285 = load %type.TypeNode** %t
	%286 = bitcast %type.TypeNode* %285 to %type.TypeNode*
	%287 = load %ast.AstNode** %tree
	%288 = bitcast %ast.AstNode* %287 to %ast.AstNode*
	%289 = load %ast.AstNode** %index
	%290 = bitcast %ast.AstNode* %289 to %ast.AstNode*
	%291 = call %ast.AstNode* @ast_New2(i8 17, %type.TypeNode* %286, %ast.AstNode* %288, %ast.AstNode* %290)
	%292 = bitcast %ast.AstNode* %291 to %ast.AstNode*
	store %ast.AstNode* %292, %ast.AstNode** %tree
	%293 = load %ast.AstNode** %tree
	%294 = getelementptr %ast.AstNode* %293, i32 0, i32 1
	store i8 4, i8* %294
	%295 = load %type.TypeNode** %t
	%296 = getelementptr %type.TypeNode* %295, i32 0, i32 9
	%297 = load i32* %296
	%298 = load %ast.AstNode** %tree
	%299 = getelementptr %ast.AstNode* %298, i32 0, i32 6
	store i32 %297, i32* %299
	br label %L.66
L.66:
	br label %L.63
L.65:
	call void @lex_Error(i8 57)
	br label %L.63
L.63:
	%300 = call i8 @lex_Expect(i8 35)
	store i8 %300, i8* %tok
	br label %L.9
L.13:
	%301 = call i8 @lex_Next()
	store i8 %301, i8* %tok
	%302 = load %type.TypeNode** %t
	%303 = bitcast %type.TypeNode* %302 to %type.TypeNode*
	%304 = call %ast.AstNode* @expr_Property(%type.TypeNode* %303)
	%305 = bitcast %ast.AstNode* %304 to %ast.AstNode*
	store %ast.AstNode* %305, %ast.AstNode** %tree
	br label %L.9
L.8:
	store i8 1, i8* %done
	br label %L.9
L.9:
	br label %L.1
L.2:
	%306 = load %ast.AstNode** %tree
	%307 = bitcast %ast.AstNode* %306 to %ast.AstNode*
	store %ast.AstNode* %307, %ast.AstNode** %rv.0
	br label %return
return:
	%308 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %308
}
define internal %ast.AstNode* @expr_Term(%type.TypeNode* %et.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%et = alloca %type.TypeNode*
	store %type.TypeNode* %et.arg, %type.TypeNode** %et
	%tree = alloca %ast.AstNode*
	%tok = alloca i8
	%t = alloca %type.TypeNode*
	%s = alloca %symb.SymbNode*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 40, label %L.3
		i32 38, label %L.4
		i32 39, label %L.5
		i32 32, label %L.6
		i32 36, label %L.7
	]
L.3:
	%4 = getelementptr [64 x i8]* @lex_Ident
	%5 = bitcast [64 x i8]* %4 to [0 x i8]*
	%6 = call %symb.SymbNode* @symb_Find([0 x i8]* %5)
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	store %symb.SymbNode* %7, %symb.SymbNode** %s
	%8 = load %symb.SymbNode** %s
	%9 = icmp ne %symb.SymbNode* %8, null
	br i1 %9, label %L.9, label %L.10
L.9:
	%10 = call i8 @lex_Next()
	store i8 %10, i8* %tok
	%11 = load %symb.SymbNode** %s
	%12 = getelementptr %symb.SymbNode* %11, i32 0, i32 12
	%13 = load i8* %12
	%14 = icmp eq i8 %13, 5
	br i1 %14, label %L.13, label %L.14
L.13:
	%15 = load %type.TypeNode** %et
	%16 = icmp ne %type.TypeNode* %15, null
	br label %L.14
L.14:
	%17 = phi i1 [ false, %L.9 ], [ %16, %L.13 ]
	br i1 %17, label %L.11, label %L.12
L.11:
	%18 = load %type.TypeNode** %et
	%19 = getelementptr %type.TypeNode* %18, i32 0, i32 13
	%20 = load i8* %19
	%21 = icmp eq i8 %20, 7
	br label %L.12
L.12:
	%22 = phi i1 [ false, %L.14 ], [ %21, %L.11 ]
	br i1 %22, label %L.16, label %L.17
L.16:
	%23 = call %type.TypeNode* @type_New(i8 7)
	%24 = bitcast %type.TypeNode* %23 to %type.TypeNode*
	store %type.TypeNode* %24, %type.TypeNode** %t
	%25 = load %symb.SymbNode** %s
	%26 = bitcast %symb.SymbNode* %25 to %symb.SymbNode*
	%27 = load %type.TypeNode** %t
	%28 = getelementptr %type.TypeNode* %27, i32 0, i32 4
	store %symb.SymbNode* %26, %symb.SymbNode** %28
	%29 = load %type.TypeNode** %t
	%30 = bitcast %type.TypeNode* %29 to %type.TypeNode*
	%31 = call %ast.AstNode* @ast_New(i8 9, %type.TypeNode* %30)
	%32 = bitcast %ast.AstNode* %31 to %ast.AstNode*
	store %ast.AstNode* %32, %ast.AstNode** %tree
	%33 = load %symb.SymbNode** %s
	%34 = bitcast %symb.SymbNode* %33 to %symb.SymbNode*
	%35 = load %ast.AstNode** %tree
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 12
	store %symb.SymbNode* %34, %symb.SymbNode** %36
	%37 = load %ast.AstNode** %tree
	%38 = getelementptr %ast.AstNode* %37, i32 0, i32 1
	store i8 7, i8* %38
	br label %L.15
L.17:
	%39 = load %symb.SymbNode** %s
	%40 = bitcast %symb.SymbNode* %39 to %symb.SymbNode*
	%41 = call %ast.AstNode* @expr_Primary(%symb.SymbNode* %40)
	%42 = bitcast %ast.AstNode* %41 to %ast.AstNode*
	store %ast.AstNode* %42, %ast.AstNode** %tree
	%43 = load %ast.AstNode** %tree
	%44 = icmp ne %ast.AstNode* %43, null
	br i1 %44, label %L.19, label %L.18
L.19:
	%45 = load %ast.AstNode** %tree
	%46 = getelementptr %ast.AstNode* %45, i32 0, i32 0
	%47 = load i8* %46
	%48 = icmp eq i8 %47, 2
	br i1 %48, label %L.21, label %L.22
L.21:
	%49 = load i8* %tok
	%50 = zext i8 %49 to i32
	switch i32 %50, label %L.23 [
		i32 32, label %L.25
		i32 36, label %L.26
	]
L.25:
	%51 = call i8 @lex_Next()
	store i8 %51, i8* %tok
	%52 = load %ast.AstNode** %tree
	%53 = getelementptr %ast.AstNode* %52, i32 0, i32 11
	%54 = load %type.TypeNode** %53
	%55 = bitcast %type.TypeNode* %54 to %type.TypeNode*
	store %type.TypeNode* %55, %type.TypeNode** %t
	%56 = bitcast %type.TypeNode* null to %type.TypeNode*
	%57 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %56)
	%58 = bitcast %ast.AstNode* %57 to %ast.AstNode*
	store %ast.AstNode* %58, %ast.AstNode** %tree
	%59 = load %ast.AstNode** %tree
	%60 = bitcast %ast.AstNode* %59 to %ast.AstNode*
	%61 = load %type.TypeNode** %t
	%62 = bitcast %type.TypeNode* %61 to %type.TypeNode*
	%63 = call %ast.AstNode* @expr_Cast(%ast.AstNode* %60, %type.TypeNode* %62)
	%64 = bitcast %ast.AstNode* %63 to %ast.AstNode*
	store %ast.AstNode* %64, %ast.AstNode** %tree
	%65 = call i8 @lex_Expect(i8 33)
	store i8 %65, i8* %tok
	br label %L.24
L.26:
	%66 = load %ast.AstNode** %tree
	%67 = getelementptr %ast.AstNode* %66, i32 0, i32 11
	%68 = load %type.TypeNode** %67
	%69 = bitcast %type.TypeNode* %68 to %type.TypeNode*
	%70 = call %ast.AstNode* @expr_CompositeValue(%type.TypeNode* %69)
	%71 = bitcast %ast.AstNode* %70 to %ast.AstNode*
	store %ast.AstNode* %71, %ast.AstNode** %tree
	br label %L.24
L.23:
	br label %L.24
L.24:
	br label %L.20
L.22:
	%72 = load %ast.AstNode** %tree
	%73 = bitcast %ast.AstNode* %72 to %ast.AstNode*
	%74 = call %ast.AstNode* @expr_Load(%ast.AstNode* %73)
	%75 = bitcast %ast.AstNode* %74 to %ast.AstNode*
	store %ast.AstNode* %75, %ast.AstNode** %tree
	%76 = load %ast.AstNode** %tree
	%77 = icmp ne %ast.AstNode* %76, null
	br i1 %77, label %L.29, label %L.30
L.29:
	%78 = load %ast.AstNode** %tree
	%79 = getelementptr %ast.AstNode* %78, i32 0, i32 0
	%80 = load i8* %79
	%81 = icmp ne i8 %80, 7
	br label %L.30
L.30:
	%82 = phi i1 [ false, %L.22 ], [ %81, %L.29 ]
	br i1 %82, label %L.27, label %L.28
L.27:
	%83 = load %ast.AstNode** %tree
	%84 = getelementptr %ast.AstNode* %83, i32 0, i32 11
	%85 = load %type.TypeNode** %84
	%86 = bitcast %type.TypeNode* %85 to %type.TypeNode*
	%87 = load %target.TargetT** @target_Target
	%88 = getelementptr %target.TargetT* %87, i32 0, i32 2
	%89 = load i8* %88
	%90 = call i8 @type_NeedSwap(%type.TypeNode* %86, i8 %89)
	%91 = icmp ne i8 %90, 0
	br label %L.28
L.28:
	%92 = phi i1 [ false, %L.30 ], [ %91, %L.27 ]
	br i1 %92, label %L.32, label %L.31
L.32:
	%93 = load %ast.AstNode** %tree
	%94 = getelementptr %ast.AstNode* %93, i32 0, i32 11
	%95 = load %type.TypeNode** %94
	%96 = bitcast %type.TypeNode* %95 to %type.TypeNode*
	%97 = load %ast.AstNode** %tree
	%98 = bitcast %ast.AstNode* %97 to %ast.AstNode*
	%99 = call %ast.AstNode* @ast_New1(i8 30, %type.TypeNode* %96, %ast.AstNode* %98)
	%100 = bitcast %ast.AstNode* %99 to %ast.AstNode*
	store %ast.AstNode* %100, %ast.AstNode** %tree
	%101 = load %ast.AstNode** %tree
	%102 = getelementptr %ast.AstNode* %101, i32 0, i32 11
	%103 = load %type.TypeNode** %102
	%104 = bitcast %type.TypeNode* %103 to %type.TypeNode*
	%105 = load %target.TargetT** @target_Target
	%106 = getelementptr %target.TargetT* %105, i32 0, i32 2
	%107 = load i8* %106
	%108 = call %type.TypeNode* @type_ChangeOrder(%type.TypeNode* %104, i8 %107)
	%109 = bitcast %type.TypeNode* %108 to %type.TypeNode*
	%110 = load %ast.AstNode** %tree
	%111 = getelementptr %ast.AstNode* %110, i32 0, i32 11
	store %type.TypeNode* %109, %type.TypeNode** %111
	br label %L.31
L.31:
	br label %L.20
L.20:
	br label %L.18
L.18:
	br label %L.15
L.15:
	br label %L.8
L.10:
	%112 = load %type.TypeNode** %et
	%113 = icmp ne %type.TypeNode* %112, null
	br i1 %113, label %L.33, label %L.34
L.33:
	%114 = load %type.TypeNode** %et
	%115 = getelementptr %type.TypeNode* %114, i32 0, i32 13
	%116 = load i8* %115
	%117 = icmp eq i8 %116, 1
	br label %L.34
L.34:
	%118 = phi i1 [ false, %L.10 ], [ %117, %L.33 ]
	br i1 %118, label %L.36, label %L.37
L.36:
	%119 = load %type.TypeNode** %et
	%120 = bitcast %type.TypeNode* %119 to %type.TypeNode*
	%121 = call %ast.AstNode* @expr_EnumConst(%type.TypeNode* %120)
	%122 = bitcast %ast.AstNode* %121 to %ast.AstNode*
	store %ast.AstNode* %122, %ast.AstNode** %tree
	br label %L.35
L.37:
	%123 = getelementptr [64 x i8]* @lex_Ident
	%124 = bitcast [64 x i8]* %123 to [0 x i8]*
	call void @lex_ErrorI(i8 16, [0 x i8]* %124)
	br label %L.35
L.35:
	%125 = call i8 @lex_Next()
	store i8 %125, i8* %tok
	br label %L.8
L.8:
	br label %L.2
L.4:
	%126 = load %type.TypeNode** %et
	%127 = bitcast %type.TypeNode* %126 to %type.TypeNode*
	%128 = call %ast.AstNode* @ast_New(i8 7, %type.TypeNode* %127)
	%129 = bitcast %ast.AstNode* %128 to %ast.AstNode*
	store %ast.AstNode* %129, %ast.AstNode** %tree
	%130 = load i64* @lex_Number
	%131 = load %ast.AstNode** %tree
	%132 = getelementptr %ast.AstNode* %131, i32 0, i32 10
	store i64 %130, i64* %132
	%133 = load %ast.AstNode** %tree
	%134 = getelementptr %ast.AstNode* %133, i32 0, i32 1
	store i8 2, i8* %134
	%135 = load i64* @lex_Number
	%136 = call i8 @type_bitsize(i64 %135)
	%137 = zext i8 %136 to i32
	%138 = load %ast.AstNode** %tree
	%139 = getelementptr %ast.AstNode* %138, i32 0, i32 6
	store i32 %137, i32* %139
	%140 = load %type.TypeNode** %et
	%141 = icmp eq %type.TypeNode* %140, null
	br i1 %141, label %L.39, label %L.40
L.39:
	%142 = load %type.TypeNode** @type_wordtype
	%143 = bitcast %type.TypeNode* %142 to %type.TypeNode*
	%144 = load %ast.AstNode** %tree
	%145 = getelementptr %ast.AstNode* %144, i32 0, i32 11
	store %type.TypeNode* %143, %type.TypeNode** %145
	br label %L.38
L.40:
	%146 = load %type.TypeNode** %et
	%147 = getelementptr %type.TypeNode* %146, i32 0, i32 13
	%148 = load i8* %147
	%149 = icmp eq i8 %148, 4
	br i1 %149, label %L.42, label %L.43
L.42:
	%150 = load %type.TypeNode** %et
	%151 = getelementptr %type.TypeNode* %150, i32 0, i32 0
	%152 = load %type.TypeNode** %151
	%153 = bitcast %type.TypeNode* %152 to %type.TypeNode*
	%154 = load %ast.AstNode** %tree
	%155 = getelementptr %ast.AstNode* %154, i32 0, i32 11
	store %type.TypeNode* %153, %type.TypeNode** %155
	%156 = load %ast.AstNode** %tree
	%157 = getelementptr %ast.AstNode* %156, i32 0, i32 1
	store i8 4, i8* %157
	%158 = load %target.TargetT** @target_Target
	%159 = getelementptr %target.TargetT* %158, i32 0, i32 8
	%160 = getelementptr %target.SizeAlign* %159, i32 0, i32 0
	%161 = load i8* %160
	%162 = zext i8 %161 to i32
	%163 = load %ast.AstNode** %tree
	%164 = getelementptr %ast.AstNode* %163, i32 0, i32 6
	store i32 %162, i32* %164
	br label %L.41
L.43:
	%165 = load %type.TypeNode** %et
	%166 = getelementptr %type.TypeNode* %165, i32 0, i32 8
	%167 = load i32* %166
	%168 = load %ast.AstNode** %tree
	%169 = getelementptr %ast.AstNode* %168, i32 0, i32 6
	%170 = load i32* %169
	%171 = icmp ugt i32 %167, %170
	br i1 %171, label %L.45, label %L.44
L.45:
	%172 = load %type.TypeNode** %et
	%173 = getelementptr %type.TypeNode* %172, i32 0, i32 8
	%174 = load i32* %173
	%175 = load %ast.AstNode** %tree
	%176 = getelementptr %ast.AstNode* %175, i32 0, i32 6
	store i32 %174, i32* %176
	br label %L.44
L.44:
	br label %L.41
L.41:
	br label %L.38
L.38:
	%177 = call i8 @lex_Next()
	store i8 %177, i8* %tok
	br label %L.2
L.5:
	%178 = call %ast.AstNode* @expr_String()
	%179 = bitcast %ast.AstNode* %178 to %ast.AstNode*
	store %ast.AstNode* %179, %ast.AstNode** %tree
	%180 = call i8 @lex_Next()
	store i8 %180, i8* %tok
	br label %L.2
L.6:
	%181 = call i8 @lex_Next()
	store i8 %181, i8* %tok
	%182 = load %type.TypeNode** %et
	%183 = bitcast %type.TypeNode* %182 to %type.TypeNode*
	%184 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %183)
	%185 = bitcast %ast.AstNode* %184 to %ast.AstNode*
	store %ast.AstNode* %185, %ast.AstNode** %tree
	%186 = load i8* @lex_Token
	store i8 %186, i8* %tok
	%187 = call i8 @lex_Expect(i8 33)
	br label %L.2
L.7:
	%188 = load %type.TypeNode** %et
	%189 = bitcast %type.TypeNode* %188 to %type.TypeNode*
	%190 = call %ast.AstNode* @expr_CompositeValue(%type.TypeNode* %189)
	%191 = bitcast %ast.AstNode* %190 to %ast.AstNode*
	store %ast.AstNode* %191, %ast.AstNode** %tree
	br label %L.2
L.1:
	br label %L.2
L.2:
	%192 = load %ast.AstNode** %tree
	%193 = bitcast %ast.AstNode* %192 to %ast.AstNode*
	store %ast.AstNode* %193, %ast.AstNode** %rv.0
	br label %return
return:
	%194 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %194
}
define internal %ast.AstNode* @expr_Unary(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%tl = alloca %type.TypeNode*
	%tok = alloca i8
	%savetok = alloca i8
	%0 = load i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load i8* %tok
	store i8 %1, i8* %savetok
	%2 = load i8* %tok
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 15, label %L.3
		i32 14, label %L.3
		i32 13, label %L.3
		i32 12, label %L.3
	]
L.3:
	%4 = call i8 @lex_Next()
	store i8 %4, i8* %tok
	br label %L.2
L.1:
	br label %L.2
L.2:
	%5 = load %type.TypeNode** %t
	%6 = bitcast %type.TypeNode* %5 to %type.TypeNode*
	%7 = call %ast.AstNode* @expr_Term(%type.TypeNode* %6)
	%8 = bitcast %ast.AstNode* %7 to %ast.AstNode*
	store %ast.AstNode* %8, %ast.AstNode** %tree
	%9 = load %ast.AstNode** %tree
	%10 = icmp ne %ast.AstNode* %9, null
	br i1 %10, label %L.5, label %L.4
L.5:
	%11 = load %ast.AstNode** %tree
	%12 = getelementptr %ast.AstNode* %11, i32 0, i32 11
	%13 = load %type.TypeNode** %12
	%14 = bitcast %type.TypeNode* %13 to %type.TypeNode*
	store %type.TypeNode* %14, %type.TypeNode** %tl
	%15 = load i8* %savetok
	%16 = zext i8 %15 to i32
	switch i32 %16, label %L.6 [
		i32 15, label %L.8
		i32 13, label %L.9
		i32 12, label %L.10
	]
L.8:
	%17 = load %ast.AstNode** %tree
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	%19 = call %ast.AstNode* @expr_UnOp(i8 31, %ast.AstNode* %18)
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	store %ast.AstNode* %20, %ast.AstNode** %tree
	%21 = load %ast.AstNode** %tree
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 1
	%23 = load i8* %22
	%24 = icmp eq i8 %23, 2
	br i1 %24, label %L.12, label %L.11
L.12:
	%i = alloca i32
	store i32 0, i32* %i
	br label %L.13
L.13:
	%25 = load i32* %i
	%26 = icmp ult i32 %25, 4
	br i1 %26, label %L.16, label %L.17
L.16:
	%27 = load %ast.AstNode** %tree
	%28 = getelementptr %ast.AstNode* %27, i32 0, i32 6
	%29 = load i32* %28
	%30 = load i32* %i
	%31 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 %30
	%32 = load %type.TypeNode** %31
	%33 = getelementptr %type.TypeNode* %32, i32 0, i32 8
	%34 = load i32* %33
	%35 = icmp ugt i32 %29, %34
	br label %L.17
L.17:
	%36 = phi i1 [ false, %L.13 ], [ %35, %L.16 ]
	%37 = xor i1 %36, true
	br i1 %37, label %L.14, label %L.15
L.15:
	%38 = load i32* %i
	%39 = add i32 %38, 1
	store i32 %39, i32* %i
	br label %L.13
L.14:
	%40 = load i32* %i
	%41 = getelementptr [4 x %type.TypeNode*]* @type_inttypes, i32 0, i32 %40
	%42 = load %type.TypeNode** %41
	%43 = bitcast %type.TypeNode* %42 to %type.TypeNode*
	%44 = load %ast.AstNode** %tree
	%45 = getelementptr %ast.AstNode* %44, i32 0, i32 11
	store %type.TypeNode* %43, %type.TypeNode** %45
	%46 = load %ast.AstNode** %tree
	%47 = getelementptr %ast.AstNode* %46, i32 0, i32 1
	store i8 3, i8* %47
	br label %L.11
L.11:
	br label %L.7
L.9:
	%48 = load %ast.AstNode** %tree
	%49 = bitcast %ast.AstNode* %48 to %ast.AstNode*
	%50 = call %ast.AstNode* @expr_UnOp(i8 32, %ast.AstNode* %49)
	%51 = bitcast %ast.AstNode* %50 to %ast.AstNode*
	store %ast.AstNode* %51, %ast.AstNode** %tree
	br label %L.7
L.10:
	%52 = load %ast.AstNode** %tree
	%53 = bitcast %ast.AstNode* %52 to %ast.AstNode*
	%54 = call %ast.AstNode* @expr_ForceBoolean(%ast.AstNode* %53)
	%55 = bitcast %ast.AstNode* %54 to %ast.AstNode*
	store %ast.AstNode* %55, %ast.AstNode** %tree
	%56 = load %ast.AstNode** %tree
	%57 = bitcast %ast.AstNode* %56 to %ast.AstNode*
	%58 = call %ast.AstNode* @expr_UnOp(i8 62, %ast.AstNode* %57)
	%59 = bitcast %ast.AstNode* %58 to %ast.AstNode*
	store %ast.AstNode* %59, %ast.AstNode** %tree
	br label %L.7
L.6:
	br label %L.7
L.7:
	br label %L.4
L.4:
	%60 = load %ast.AstNode** %tree
	%61 = bitcast %ast.AstNode* %60 to %ast.AstNode*
	store %ast.AstNode* %61, %ast.AstNode** %rv.0
	br label %return
return:
	%62 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %62
}
@expr_mulop = internal constant [6 x i8] [ i8 36, i8 37, i8 38, i8 53, i8 54, i8 57 ], align 1
define internal %ast.AstNode* @expr_Mul(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	%op = alloca i8
	%tok = alloca i8
	%0 = load %type.TypeNode** %t
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	%2 = call %ast.AstNode* @expr_Unary(%type.TypeNode* %1)
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %tree
	%4 = load %ast.AstNode** %tree
	%5 = icmp ne %ast.AstNode* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	br label %L.3
L.3:
	%6 = load i8* @lex_Token
	store i8 %6, i8* %tok
	%7 = load i8* %tok
	%8 = icmp ult i8 %7, 18
	br i1 %8, label %L.7, label %L.6
L.6:
	%9 = load i8* %tok
	%10 = icmp ugt i8 %9, 23
	br label %L.7
L.7:
	%11 = phi i1 [ true, %L.3 ], [ %10, %L.6 ]
	br i1 %11, label %L.4, label %L.5
L.5:
	%12 = load i8* %tok
	%13 = sub i8 %12, 18
	%14 = zext i8 %13 to i32
	%15 = getelementptr [6 x i8]* @expr_mulop, i32 0, i32 %14
	%16 = load i8* %15
	store i8 %16, i8* %op
	%17 = call i8 @lex_Next()
	store i8 %17, i8* %tok
	%18 = load %ast.AstNode** %tree
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 11
	%20 = load %type.TypeNode** %19
	%21 = bitcast %type.TypeNode* %20 to %type.TypeNode*
	%22 = call %ast.AstNode* @expr_Unary(%type.TypeNode* %21)
	%23 = bitcast %ast.AstNode* %22 to %ast.AstNode*
	store %ast.AstNode* %23, %ast.AstNode** %rhs
	%24 = load %ast.AstNode** %rhs
	%25 = icmp eq %ast.AstNode* %24, null
	br i1 %25, label %L.4, label %L.8
L.8:
	%26 = load %ast.AstNode** %tree
	%27 = getelementptr %ast.AstNode* %26, i32 0, i32 1
	%28 = load i8* %27
	%29 = icmp eq i8 %28, 3
	br i1 %29, label %L.10, label %L.9
L.10:
	%30 = load i8* %op
	%31 = zext i8 %30 to i32
	switch i32 %31, label %L.11 [
		i32 53, label %L.13
		i32 54, label %L.14
	]
L.13:
	store i8 55, i8* %op
	br label %L.12
L.14:
	store i8 56, i8* %op
	br label %L.12
L.11:
	br label %L.12
L.12:
	br label %L.9
L.9:
	%32 = load i8* %op
	%33 = load %ast.AstNode** %tree
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	%35 = load %ast.AstNode** %rhs
	%36 = bitcast %ast.AstNode* %35 to %ast.AstNode*
	%37 = call %ast.AstNode* @expr_BinOp(i8 %32, %ast.AstNode* %34, %ast.AstNode* %36)
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	store %ast.AstNode* %38, %ast.AstNode** %tree
	br label %L.3
L.4:
	br label %L.1
L.1:
	%39 = load %ast.AstNode** %tree
	%40 = bitcast %ast.AstNode* %39 to %ast.AstNode*
	store %ast.AstNode* %40, %ast.AstNode** %rv.0
	br label %return
return:
	%41 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %41
}
@expr_addop = internal constant [4 x i8] [ i8 34, i8 35, i8 58, i8 59 ], align 1
define internal %ast.AstNode* @expr_Add(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	%op = alloca i8
	%tok = alloca i8
	%0 = load %type.TypeNode** %t
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	%2 = call %ast.AstNode* @expr_Mul(%type.TypeNode* %1)
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %tree
	%4 = load %ast.AstNode** %tree
	%5 = icmp ne %ast.AstNode* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	br label %L.3
L.3:
	%6 = load i8* @lex_Token
	store i8 %6, i8* %tok
	%7 = load i8* %tok
	%8 = icmp ult i8 %7, 14
	br i1 %8, label %L.7, label %L.6
L.6:
	%9 = load i8* %tok
	%10 = icmp ugt i8 %9, 17
	br label %L.7
L.7:
	%11 = phi i1 [ true, %L.3 ], [ %10, %L.6 ]
	br i1 %11, label %L.4, label %L.5
L.5:
	%12 = load i8* %tok
	%13 = sub i8 %12, 14
	%14 = zext i8 %13 to i32
	%15 = getelementptr [4 x i8]* @expr_addop, i32 0, i32 %14
	%16 = load i8* %15
	store i8 %16, i8* %op
	%17 = call i8 @lex_Next()
	store i8 %17, i8* %tok
	%18 = load %ast.AstNode** %tree
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 11
	%20 = load %type.TypeNode** %19
	%21 = bitcast %type.TypeNode* %20 to %type.TypeNode*
	%22 = call %ast.AstNode* @expr_Mul(%type.TypeNode* %21)
	%23 = bitcast %ast.AstNode* %22 to %ast.AstNode*
	store %ast.AstNode* %23, %ast.AstNode** %rhs
	%24 = load %ast.AstNode** %rhs
	%25 = icmp eq %ast.AstNode* %24, null
	br i1 %25, label %L.4, label %L.8
L.8:
	%26 = load i8* %op
	%27 = load %ast.AstNode** %tree
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	%29 = load %ast.AstNode** %rhs
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	%31 = call %ast.AstNode* @expr_BinOp(i8 %26, %ast.AstNode* %28, %ast.AstNode* %30)
	%32 = bitcast %ast.AstNode* %31 to %ast.AstNode*
	store %ast.AstNode* %32, %ast.AstNode** %tree
	br label %L.3
L.4:
	br label %L.1
L.1:
	%33 = load %ast.AstNode** %tree
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	store %ast.AstNode* %34, %ast.AstNode** %rv.0
	br label %return
return:
	%35 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %35
}
@expr_ucmpop = internal constant [6 x i8] [ i8 39, i8 40, i8 41, i8 42, i8 43, i8 44 ], align 1
@expr_scmpop = internal constant [6 x i8] [ i8 39, i8 40, i8 45, i8 46, i8 47, i8 48 ], align 1
define internal %ast.AstNode* @expr_ScalarCompare(i8 zeroext %tok.arg, %ast.AstNode* %lhs.arg, %ast.AstNode* %rhs.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tok = alloca i8
	%lhs = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	store i8 %tok.arg, i8* %tok
	store %ast.AstNode* %lhs.arg, %ast.AstNode** %lhs
	store %ast.AstNode* %rhs.arg, %ast.AstNode** %rhs
	%tree = alloca %ast.AstNode*
	%op = alloca i8
	%0 = load %ast.AstNode** %lhs
	%1 = bitcast %ast.AstNode* %0 to %ast.AstNode*
	%2 = load %ast.AstNode** %rhs
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	%4 = call i8 @expr_IsSignedBinOp(%ast.AstNode* %1, %ast.AstNode* %3)
	%5 = icmp ne i8 %4, 0
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = load i8* %tok
	%7 = sub i8 %6, 24
	%8 = zext i8 %7 to i32
	%9 = getelementptr [6 x i8]* @expr_scmpop, i32 0, i32 %8
	%10 = load i8* %9
	store i8 %10, i8* %op
	br label %L.1
L.3:
	%11 = load i8* %tok
	%12 = sub i8 %11, 24
	%13 = zext i8 %12 to i32
	%14 = getelementptr [6 x i8]* @expr_ucmpop, i32 0, i32 %13
	%15 = load i8* %14
	store i8 %15, i8* %op
	br label %L.1
L.1:
	%16 = load i8* %op
	%17 = load %ast.AstNode** %lhs
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	%19 = load %ast.AstNode** %rhs
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	%21 = call %ast.AstNode* @expr_BinOp(i8 %16, %ast.AstNode* %18, %ast.AstNode* %20)
	%22 = bitcast %ast.AstNode* %21 to %ast.AstNode*
	store %ast.AstNode* %22, %ast.AstNode** %tree
	%23 = load %ast.AstNode** %tree
	%24 = icmp ne %ast.AstNode* %23, null
	br i1 %24, label %L.5, label %L.4
L.5:
	%25 = load %type.TypeNode** @type_booltype
	%26 = bitcast %type.TypeNode* %25 to %type.TypeNode*
	%27 = load %ast.AstNode** %tree
	%28 = getelementptr %ast.AstNode* %27, i32 0, i32 11
	store %type.TypeNode* %26, %type.TypeNode** %28
	%29 = load %ast.AstNode** %tree
	%30 = getelementptr %ast.AstNode* %29, i32 0, i32 1
	store i8 1, i8* %30
	%31 = load %ast.AstNode** %tree
	%32 = getelementptr %ast.AstNode* %31, i32 0, i32 6
	store i32 1, i32* %32
	br label %L.4
L.4:
	%33 = load %ast.AstNode** %tree
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	store %ast.AstNode* %34, %ast.AstNode** %rv.0
	br label %return
return:
	%35 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %35
}
@S.557 = internal constant [36 x i8] c"ArrayCompare: packed and not packed\00"define internal %ast.AstNode* @expr_ArrayCompare(i8 zeroext %tok.arg, %ast.AstNode* %lhs.arg, %ast.AstNode* %rhs.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tok = alloca i8
	%lhs = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	store i8 %tok.arg, i8* %tok
	store %ast.AstNode* %lhs.arg, %ast.AstNode** %lhs
	store %ast.AstNode* %rhs.arg, %ast.AstNode** %rhs
	%tree = alloca %ast.AstNode*
	%op = alloca i8
	%lsize = alloca %ast.AstNode*
	%rsize = alloca %ast.AstNode*
	%align = alloca %ast.AstNode*
	%lalign = alloca i32
	%ralign = alloca i32
	%0 = load i8* %tok
	%1 = zext i8 %0 to i32
	switch i32 %1, label %L.1 [
		i32 24, label %L.3
		i32 25, label %L.4
	]
L.3:
	store i8 22, i8* %op
	br label %L.2
L.4:
	store i8 23, i8* %op
	br label %L.2
L.1:
	call void @lex_Error(i8 33)
	%2 = load %ast.AstNode** %lhs
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %rv.0
	br label %return
L.2:
	%4 = load %ast.AstNode** %lhs
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 11
	%6 = load %type.TypeNode** %5
	%7 = getelementptr %type.TypeNode* %6, i32 0, i32 14
	%8 = load i8* %7
	%9 = icmp eq i8 %8, 2
	br i1 %9, label %L.6, label %L.5
L.6:
	%10 = load %ast.AstNode** %rhs
	%11 = getelementptr %ast.AstNode* %10, i32 0, i32 11
	%12 = load %type.TypeNode** %11
	%13 = getelementptr %type.TypeNode* %12, i32 0, i32 14
	%14 = load i8* %13
	%15 = icmp ne i8 %14, 2
	br i1 %15, label %L.8, label %L.7
L.8:
	%16 = getelementptr [36 x i8]* @S.557
	%17 = bitcast [36 x i8]* %16 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %17)
	br label %L.7
L.7:
	%18 = load %ast.AstNode** %lhs
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 1
	store i8 2, i8* %19
	%20 = load %ast.AstNode** %rhs
	%21 = getelementptr %ast.AstNode* %20, i32 0, i32 1
	store i8 2, i8* %21
	%22 = load i8* %op
	%23 = icmp eq i8 %22, 22
	br i1 %23, label %L.10, label %L.11
L.10:
	store i8 39, i8* %op
	br label %L.9
L.11:
	store i8 40, i8* %op
	br label %L.9
L.9:
	%24 = load i8* %op
	%25 = load %type.TypeNode** @type_booltype
	%26 = bitcast %type.TypeNode* %25 to %type.TypeNode*
	%27 = load %ast.AstNode** %lhs
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	%29 = load %ast.AstNode** %rhs
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	%31 = call %ast.AstNode* @ast_New2(i8 %24, %type.TypeNode* %26, %ast.AstNode* %28, %ast.AstNode* %30)
	%32 = bitcast %ast.AstNode* %31 to %ast.AstNode*
	store %ast.AstNode* %32, %ast.AstNode** %tree
	%33 = load %ast.AstNode** %tree
	%34 = getelementptr %ast.AstNode* %33, i32 0, i32 1
	store i8 1, i8* %34
	%35 = load %ast.AstNode** %tree
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 6
	store i32 1, i32* %36
	%37 = load %ast.AstNode** %tree
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	store %ast.AstNode* %38, %ast.AstNode** %rv.0
	br label %return
L.5:
	%39 = load %ast.AstNode** %lhs
	%40 = getelementptr %ast.AstNode* %39, i32 0, i32 0
	%41 = load i8* %40
	%42 = icmp eq i8 %41, 25
	br i1 %42, label %L.12, label %L.13
L.12:
	%43 = load %ast.AstNode** %lhs
	%44 = getelementptr %ast.AstNode* %43, i32 0, i32 1
	%45 = load i8* %44
	%46 = icmp eq i8 %45, 5
	br label %L.13
L.13:
	%47 = phi i1 [ false, %L.5 ], [ %46, %L.12 ]
	br i1 %47, label %L.15, label %L.14
L.15:
	%48 = load %ast.AstNode** %lhs
	%49 = getelementptr %ast.AstNode* %48, i32 0, i32 13
	%50 = getelementptr [0 x %ast.AstNode*]* %49, i32 0, i32 0
	%51 = load %ast.AstNode** %50
	%52 = bitcast %ast.AstNode* %51 to %ast.AstNode*
	store %ast.AstNode* %52, %ast.AstNode** %lhs
	br label %L.14
L.14:
	%53 = load %ast.AstNode** %rhs
	%54 = getelementptr %ast.AstNode* %53, i32 0, i32 0
	%55 = load i8* %54
	%56 = icmp eq i8 %55, 25
	br i1 %56, label %L.16, label %L.17
L.16:
	%57 = load %ast.AstNode** %rhs
	%58 = getelementptr %ast.AstNode* %57, i32 0, i32 1
	%59 = load i8* %58
	%60 = icmp eq i8 %59, 5
	br label %L.17
L.17:
	%61 = phi i1 [ false, %L.14 ], [ %60, %L.16 ]
	br i1 %61, label %L.19, label %L.18
L.19:
	%62 = load %ast.AstNode** %rhs
	%63 = getelementptr %ast.AstNode* %62, i32 0, i32 13
	%64 = getelementptr [0 x %ast.AstNode*]* %63, i32 0, i32 0
	%65 = load %ast.AstNode** %64
	%66 = bitcast %ast.AstNode* %65 to %ast.AstNode*
	store %ast.AstNode* %66, %ast.AstNode** %rhs
	br label %L.18
L.18:
	%67 = load %ast.AstNode** %lhs
	%68 = bitcast %ast.AstNode* %67 to %ast.AstNode*
	%69 = call i32 @expr_GetAlignment(%ast.AstNode* %68)
	store i32 %69, i32* %lalign
	%70 = load %ast.AstNode** %rhs
	%71 = bitcast %ast.AstNode* %70 to %ast.AstNode*
	%72 = call i32 @expr_GetAlignment(%ast.AstNode* %71)
	store i32 %72, i32* %ralign
	%73 = load i32* %ralign
	%74 = load i32* %lalign
	%75 = icmp ult i32 %73, %74
	br i1 %75, label %L.21, label %L.20
L.21:
	%76 = load i32* %ralign
	store i32 %76, i32* %lalign
	br label %L.20
L.20:
	%77 = load %ast.AstNode** %lhs
	%78 = getelementptr %ast.AstNode* %77, i32 0, i32 0
	%79 = load i8* %78
	%80 = icmp eq i8 %79, 18
	br i1 %80, label %L.23, label %L.24
L.23:
	%81 = load %ast.AstNode** %lhs
	%82 = getelementptr %ast.AstNode* %81, i32 0, i32 13
	%83 = getelementptr [0 x %ast.AstNode*]* %82, i32 0, i32 2
	%84 = load %ast.AstNode** %83
	%85 = bitcast %ast.AstNode* %84 to %ast.AstNode*
	store %ast.AstNode* %85, %ast.AstNode** %lsize
	br label %L.22
L.24:
	%86 = load %type.TypeNode** @type_wordtype
	%87 = bitcast %type.TypeNode* %86 to %type.TypeNode*
	%88 = load %ast.AstNode** %lhs
	%89 = getelementptr %ast.AstNode* %88, i32 0, i32 11
	%90 = load %type.TypeNode** %89
	%91 = getelementptr %type.TypeNode* %90, i32 0, i32 7
	%92 = load i64* %91
	%93 = call %ast.AstNode* @ast_Const(%type.TypeNode* %87, i64 %92)
	%94 = bitcast %ast.AstNode* %93 to %ast.AstNode*
	store %ast.AstNode* %94, %ast.AstNode** %lsize
	br label %L.22
L.22:
	%95 = load %ast.AstNode** %rhs
	%96 = getelementptr %ast.AstNode* %95, i32 0, i32 0
	%97 = load i8* %96
	%98 = icmp eq i8 %97, 18
	br i1 %98, label %L.26, label %L.27
L.26:
	%99 = load %ast.AstNode** %rhs
	%100 = getelementptr %ast.AstNode* %99, i32 0, i32 13
	%101 = getelementptr [0 x %ast.AstNode*]* %100, i32 0, i32 2
	%102 = load %ast.AstNode** %101
	%103 = bitcast %ast.AstNode* %102 to %ast.AstNode*
	store %ast.AstNode* %103, %ast.AstNode** %rsize
	br label %L.25
L.27:
	%104 = load %type.TypeNode** @type_wordtype
	%105 = bitcast %type.TypeNode* %104 to %type.TypeNode*
	%106 = load %ast.AstNode** %rhs
	%107 = getelementptr %ast.AstNode* %106, i32 0, i32 11
	%108 = load %type.TypeNode** %107
	%109 = getelementptr %type.TypeNode* %108, i32 0, i32 7
	%110 = load i64* %109
	%111 = call %ast.AstNode* @ast_Const(%type.TypeNode* %105, i64 %110)
	%112 = bitcast %ast.AstNode* %111 to %ast.AstNode*
	store %ast.AstNode* %112, %ast.AstNode** %rsize
	br label %L.25
L.25:
	%113 = load i8* %op
	%114 = load %type.TypeNode** @type_booltype
	%115 = bitcast %type.TypeNode* %114 to %type.TypeNode*
	%116 = load %ast.AstNode** %lhs
	%117 = bitcast %ast.AstNode* %116 to %ast.AstNode*
	%118 = load %ast.AstNode** %rhs
	%119 = bitcast %ast.AstNode* %118 to %ast.AstNode*
	%120 = call %ast.AstNode* @ast_New2(i8 %113, %type.TypeNode* %115, %ast.AstNode* %117, %ast.AstNode* %119)
	%121 = bitcast %ast.AstNode* %120 to %ast.AstNode*
	store %ast.AstNode* %121, %ast.AstNode** %tree
	%122 = load %ast.AstNode** %tree
	%123 = getelementptr %ast.AstNode* %122, i32 0, i32 1
	store i8 1, i8* %123
	%124 = load %ast.AstNode** %tree
	%125 = getelementptr %ast.AstNode* %124, i32 0, i32 6
	store i32 1, i32* %125
	%126 = load %ast.AstNode** %tree
	%127 = bitcast %ast.AstNode* %126 to %ast.AstNode*
	%128 = load %ast.AstNode** %lsize
	%129 = bitcast %ast.AstNode* %128 to %ast.AstNode*
	%130 = call %ast.AstNode* @ast_Child(%ast.AstNode* %127, %ast.AstNode* %129)
	%131 = bitcast %ast.AstNode* %130 to %ast.AstNode*
	store %ast.AstNode* %131, %ast.AstNode** %tree
	%132 = load %type.TypeNode** @type_wordtype
	%133 = bitcast %type.TypeNode* %132 to %type.TypeNode*
	%134 = load i32* %lalign
	%135 = zext i32 %134 to i64
	%136 = call %ast.AstNode* @ast_Const(%type.TypeNode* %133, i64 %135)
	%137 = bitcast %ast.AstNode* %136 to %ast.AstNode*
	store %ast.AstNode* %137, %ast.AstNode** %align
	%138 = load %ast.AstNode** %tree
	%139 = bitcast %ast.AstNode* %138 to %ast.AstNode*
	%140 = load %ast.AstNode** %align
	%141 = bitcast %ast.AstNode* %140 to %ast.AstNode*
	%142 = call %ast.AstNode* @ast_Child(%ast.AstNode* %139, %ast.AstNode* %141)
	%143 = bitcast %ast.AstNode* %142 to %ast.AstNode*
	store %ast.AstNode* %143, %ast.AstNode** %tree
	%144 = load %ast.AstNode** %tree
	%145 = bitcast %ast.AstNode* %144 to %ast.AstNode*
	store %ast.AstNode* %145, %ast.AstNode** %rv.0
	br label %return
return:
	%146 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %146
}
define internal zeroext i8 @expr_NodeKind(%ast.AstNode* %node.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%kind = alloca i8
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 0
	%2 = load i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 9, label %L.3
		i32 18, label %L.3
	]
L.3:
	%4 = load %ast.AstNode** %node
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 11
	%6 = load %type.TypeNode** %5
	%7 = icmp ne %type.TypeNode* %6, null
	br i1 %7, label %L.5, label %L.6
L.5:
	%8 = load %ast.AstNode** %node
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 11
	%10 = load %type.TypeNode** %9
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 13
	%12 = load i8* %11
	store i8 %12, i8* %kind
	br label %L.4
L.6:
	store i8 0, i8* %kind
	br label %L.4
L.4:
	br label %L.2
L.1:
	%13 = load %ast.AstNode** %node
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 1
	%15 = load i8* %14
	store i8 %15, i8* %kind
	br label %L.2
L.2:
	%16 = load i8* %kind
	store i8 %16, i8* %rv.0
	br label %return
return:
	%17 = load i8* %rv.0
	ret i8 %17
}
define internal %ast.AstNode* @expr_Compare(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	%tok = alloca i8
	%savetok = alloca i8
	%0 = load %type.TypeNode** %t
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	%2 = call %ast.AstNode* @expr_Add(%type.TypeNode* %1)
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %tree
	%4 = load i8* @lex_Token
	store i8 %4, i8* %tok
	%5 = load i8* %tok
	%6 = icmp uge i8 %5, 24
	br i1 %6, label %L.1, label %L.2
L.1:
	%7 = load i8* %tok
	%8 = icmp ule i8 %7, 29
	br label %L.2
L.2:
	%9 = phi i1 [ false, %L.0 ], [ %8, %L.1 ]
	br i1 %9, label %L.4, label %L.3
L.4:
	%10 = load i8* %tok
	store i8 %10, i8* %savetok
	%11 = call i8 @lex_Next()
	store i8 %11, i8* %tok
	%12 = load %ast.AstNode** %tree
	%13 = icmp ne %ast.AstNode* %12, null
	br i1 %13, label %L.6, label %L.5
L.6:
	%14 = load %ast.AstNode** %tree
	%15 = getelementptr %ast.AstNode* %14, i32 0, i32 11
	%16 = load %type.TypeNode** %15
	%17 = bitcast %type.TypeNode* %16 to %type.TypeNode*
	%18 = call %ast.AstNode* @expr_Add(%type.TypeNode* %17)
	%19 = bitcast %ast.AstNode* %18 to %ast.AstNode*
	store %ast.AstNode* %19, %ast.AstNode** %rhs
	%20 = load %ast.AstNode** %rhs
	%21 = icmp ne %ast.AstNode* %20, null
	br i1 %21, label %L.8, label %L.7
L.8:
	%22 = load %ast.AstNode** %tree
	%23 = bitcast %ast.AstNode* %22 to %ast.AstNode*
	%24 = call i8 @expr_NodeKind(%ast.AstNode* %23)
	%25 = zext i8 %24 to i32
	switch i32 %25, label %L.9 [
		i32 1, label %L.11
		i32 2, label %L.11
		i32 3, label %L.11
		i32 4, label %L.11
		i32 7, label %L.11
		i32 5, label %L.12
	]
L.11:
	%26 = load i8* %savetok
	%27 = load %ast.AstNode** %tree
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	%29 = load %ast.AstNode** %rhs
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	%31 = call %ast.AstNode* @expr_ScalarCompare(i8 %26, %ast.AstNode* %28, %ast.AstNode* %30)
	%32 = bitcast %ast.AstNode* %31 to %ast.AstNode*
	store %ast.AstNode* %32, %ast.AstNode** %tree
	br label %L.10
L.12:
	%33 = load i8* %savetok
	%34 = load %ast.AstNode** %tree
	%35 = bitcast %ast.AstNode* %34 to %ast.AstNode*
	%36 = load %ast.AstNode** %rhs
	%37 = bitcast %ast.AstNode* %36 to %ast.AstNode*
	%38 = call %ast.AstNode* @expr_ArrayCompare(i8 %33, %ast.AstNode* %35, %ast.AstNode* %37)
	%39 = bitcast %ast.AstNode* %38 to %ast.AstNode*
	store %ast.AstNode* %39, %ast.AstNode** %tree
	br label %L.10
L.9:
	call void @lex_Error(i8 33)
	br label %L.10
L.10:
	br label %L.7
L.7:
	br label %L.5
L.5:
	br label %L.3
L.3:
	%40 = load %ast.AstNode** %tree
	%41 = bitcast %ast.AstNode* %40 to %ast.AstNode*
	store %ast.AstNode* %41, %ast.AstNode** %rv.0
	br label %return
return:
	%42 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %42
}
define internal %ast.AstNode* @expr_BoolAnd(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = load %type.TypeNode** %t
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	%2 = call %ast.AstNode* @expr_Compare(%type.TypeNode* %1)
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %tree
	br label %L.1
L.1:
	%4 = load i8* @lex_Token
	store i8 %4, i8* %tok
	%5 = load i8* %tok
	%6 = icmp ne i8 %5, 30
	br i1 %6, label %L.2, label %L.3
L.3:
	%7 = call i8 @lex_Next()
	store i8 %7, i8* %tok
	%8 = load %ast.AstNode** %tree
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 11
	%10 = load %type.TypeNode** %9
	%11 = bitcast %type.TypeNode* %10 to %type.TypeNode*
	%12 = call %ast.AstNode* @expr_Compare(%type.TypeNode* %11)
	%13 = bitcast %ast.AstNode* %12 to %ast.AstNode*
	store %ast.AstNode* %13, %ast.AstNode** %rhs
	%14 = load %ast.AstNode** %tree
	%15 = icmp ne %ast.AstNode* %14, null
	br i1 %15, label %L.4, label %L.5
L.4:
	%16 = load %ast.AstNode** %rhs
	%17 = icmp ne %ast.AstNode* %16, null
	br label %L.5
L.5:
	%18 = phi i1 [ false, %L.3 ], [ %17, %L.4 ]
	br i1 %18, label %L.7, label %L.6
L.7:
	%19 = load %ast.AstNode** %tree
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	%21 = call %ast.AstNode* @expr_ForceBoolean(%ast.AstNode* %20)
	%22 = bitcast %ast.AstNode* %21 to %ast.AstNode*
	store %ast.AstNode* %22, %ast.AstNode** %tree
	%23 = load %ast.AstNode** %rhs
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	%25 = call %ast.AstNode* @expr_ForceBoolean(%ast.AstNode* %24)
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	store %ast.AstNode* %26, %ast.AstNode** %rhs
	%27 = load %ast.AstNode** %tree
	%28 = getelementptr %ast.AstNode* %27, i32 0, i32 0
	%29 = load i8* %28
	%30 = icmp eq i8 %29, 7
	br i1 %30, label %L.8, label %L.9
L.8:
	%31 = load %ast.AstNode** %rhs
	%32 = getelementptr %ast.AstNode* %31, i32 0, i32 0
	%33 = load i8* %32
	%34 = icmp eq i8 %33, 7
	br label %L.9
L.9:
	%35 = phi i1 [ false, %L.7 ], [ %34, %L.8 ]
	br i1 %35, label %L.11, label %L.12
L.11:
	%36 = load %ast.AstNode** %tree
	%37 = getelementptr %ast.AstNode* %36, i32 0, i32 10
	%38 = load i64* %37
	%39 = load %ast.AstNode** %rhs
	%40 = getelementptr %ast.AstNode* %39, i32 0, i32 10
	%41 = load i64* %40
	%42 = and i64 %38, %41
	%43 = load %ast.AstNode** %tree
	%44 = getelementptr %ast.AstNode* %43, i32 0, i32 10
	store i64 %42, i64* %44
	br label %L.10
L.12:
	%45 = load %type.TypeNode** @type_booltype
	%46 = bitcast %type.TypeNode* %45 to %type.TypeNode*
	%47 = load %ast.AstNode** %tree
	%48 = bitcast %ast.AstNode* %47 to %ast.AstNode*
	%49 = load %ast.AstNode** %rhs
	%50 = bitcast %ast.AstNode* %49 to %ast.AstNode*
	%51 = call %ast.AstNode* @ast_New2(i8 60, %type.TypeNode* %46, %ast.AstNode* %48, %ast.AstNode* %50)
	%52 = bitcast %ast.AstNode* %51 to %ast.AstNode*
	store %ast.AstNode* %52, %ast.AstNode** %tree
	br label %L.10
L.10:
	br label %L.6
L.6:
	br label %L.1
L.2:
	%53 = load %ast.AstNode** %tree
	%54 = bitcast %ast.AstNode* %53 to %ast.AstNode*
	store %ast.AstNode* %54, %ast.AstNode** %rv.0
	br label %return
return:
	%55 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %55
}
define internal %ast.AstNode* @expr_Bool(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = load %type.TypeNode** %t
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	%2 = call %ast.AstNode* @expr_BoolAnd(%type.TypeNode* %1)
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %tree
	br label %L.1
L.1:
	%4 = load i8* @lex_Token
	store i8 %4, i8* %tok
	%5 = load i8* %tok
	%6 = icmp ne i8 %5, 31
	br i1 %6, label %L.2, label %L.3
L.3:
	%7 = call i8 @lex_Next()
	store i8 %7, i8* %tok
	%8 = load %ast.AstNode** %tree
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 11
	%10 = load %type.TypeNode** %9
	%11 = bitcast %type.TypeNode* %10 to %type.TypeNode*
	%12 = call %ast.AstNode* @expr_BoolAnd(%type.TypeNode* %11)
	%13 = bitcast %ast.AstNode* %12 to %ast.AstNode*
	store %ast.AstNode* %13, %ast.AstNode** %rhs
	%14 = load %ast.AstNode** %tree
	%15 = icmp ne %ast.AstNode* %14, null
	br i1 %15, label %L.4, label %L.5
L.4:
	%16 = load %ast.AstNode** %rhs
	%17 = icmp ne %ast.AstNode* %16, null
	br label %L.5
L.5:
	%18 = phi i1 [ false, %L.3 ], [ %17, %L.4 ]
	br i1 %18, label %L.7, label %L.6
L.7:
	%19 = load %ast.AstNode** %tree
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	%21 = call %ast.AstNode* @expr_ForceBoolean(%ast.AstNode* %20)
	%22 = bitcast %ast.AstNode* %21 to %ast.AstNode*
	store %ast.AstNode* %22, %ast.AstNode** %tree
	%23 = load %ast.AstNode** %rhs
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	%25 = call %ast.AstNode* @expr_ForceBoolean(%ast.AstNode* %24)
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	store %ast.AstNode* %26, %ast.AstNode** %rhs
	%27 = load %ast.AstNode** %tree
	%28 = getelementptr %ast.AstNode* %27, i32 0, i32 0
	%29 = load i8* %28
	%30 = icmp eq i8 %29, 7
	br i1 %30, label %L.8, label %L.9
L.8:
	%31 = load %ast.AstNode** %rhs
	%32 = getelementptr %ast.AstNode* %31, i32 0, i32 0
	%33 = load i8* %32
	%34 = icmp eq i8 %33, 7
	br label %L.9
L.9:
	%35 = phi i1 [ false, %L.7 ], [ %34, %L.8 ]
	br i1 %35, label %L.11, label %L.12
L.11:
	%36 = load %ast.AstNode** %tree
	%37 = getelementptr %ast.AstNode* %36, i32 0, i32 10
	%38 = load i64* %37
	%39 = load %ast.AstNode** %rhs
	%40 = getelementptr %ast.AstNode* %39, i32 0, i32 10
	%41 = load i64* %40
	%42 = or i64 %38, %41
	%43 = load %ast.AstNode** %tree
	%44 = getelementptr %ast.AstNode* %43, i32 0, i32 10
	store i64 %42, i64* %44
	br label %L.10
L.12:
	%45 = load %type.TypeNode** @type_booltype
	%46 = bitcast %type.TypeNode* %45 to %type.TypeNode*
	%47 = load %ast.AstNode** %tree
	%48 = bitcast %ast.AstNode* %47 to %ast.AstNode*
	%49 = load %ast.AstNode** %rhs
	%50 = bitcast %ast.AstNode* %49 to %ast.AstNode*
	%51 = call %ast.AstNode* @ast_New2(i8 61, %type.TypeNode* %46, %ast.AstNode* %48, %ast.AstNode* %50)
	%52 = bitcast %ast.AstNode* %51 to %ast.AstNode*
	store %ast.AstNode* %52, %ast.AstNode** %tree
	br label %L.10
L.10:
	br label %L.6
L.6:
	br label %L.1
L.2:
	%53 = load %ast.AstNode** %tree
	%54 = bitcast %ast.AstNode* %53 to %ast.AstNode*
	store %ast.AstNode* %54, %ast.AstNode** %rv.0
	br label %return
return:
	%55 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %55
}
define internal %ast.AstNode* @expr_Const(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%0 = load %type.TypeNode** %t
	%1 = icmp ne %type.TypeNode* %0, null
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %type.TypeNode** %t
	%3 = getelementptr %type.TypeNode* %2, i32 0, i32 13
	%4 = load i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.4 [
		i32 4, label %L.6
		i32 6, label %L.7
		i32 5, label %L.8
	]
L.6:
	%6 = load i8* @lex_Token
	%7 = zext i8 %6 to i32
	switch i32 %7, label %L.9 [
		i32 36, label %L.11
		i32 39, label %L.11
	]
L.11:
	%8 = load %type.TypeNode** %t
	%9 = getelementptr %type.TypeNode* %8, i32 0, i32 0
	%10 = load %type.TypeNode** %9
	%11 = bitcast %type.TypeNode* %10 to %type.TypeNode*
	%12 = call %ast.AstNode* @expr_Const(%type.TypeNode* %11)
	%13 = bitcast %ast.AstNode* %12 to %ast.AstNode*
	store %ast.AstNode* %13, %ast.AstNode** %tree
	%14 = load %type.TypeNode** %t
	%15 = getelementptr %type.TypeNode* %14, i32 0, i32 0
	%16 = load %type.TypeNode** %15
	%17 = bitcast %type.TypeNode* %16 to %type.TypeNode*
	%18 = load %ast.AstNode** %tree
	%19 = bitcast %ast.AstNode* %18 to %ast.AstNode*
	%20 = call %ast.AstNode* @ast_New1(i8 19, %type.TypeNode* %17, %ast.AstNode* %19)
	%21 = bitcast %ast.AstNode* %20 to %ast.AstNode*
	store %ast.AstNode* %21, %ast.AstNode** %tree
	br label %L.10
L.9:
	%22 = load %type.TypeNode** %t
	%23 = bitcast %type.TypeNode* %22 to %type.TypeNode*
	%24 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %23)
	%25 = bitcast %ast.AstNode* %24 to %ast.AstNode*
	store %ast.AstNode* %25, %ast.AstNode** %tree
	%26 = load %type.TypeNode** %t
	%27 = bitcast %type.TypeNode* %26 to %type.TypeNode*
	%28 = load %ast.AstNode** %tree
	%29 = getelementptr %ast.AstNode* %28, i32 0, i32 11
	store %type.TypeNode* %27, %type.TypeNode** %29
	br label %L.10
L.10:
	br label %L.5
L.7:
	%30 = load %type.TypeNode** %t
	%31 = bitcast %type.TypeNode* %30 to %type.TypeNode*
	%32 = call %ast.AstNode* @expr_RecordConst(%type.TypeNode* %31)
	%33 = bitcast %ast.AstNode* %32 to %ast.AstNode*
	store %ast.AstNode* %33, %ast.AstNode** %tree
	br label %L.5
L.8:
	%34 = load %type.TypeNode** %t
	%35 = bitcast %type.TypeNode* %34 to %type.TypeNode*
	%36 = call %ast.AstNode* @expr_ArrayConst(%type.TypeNode* %35)
	%37 = bitcast %ast.AstNode* %36 to %ast.AstNode*
	store %ast.AstNode* %37, %ast.AstNode** %tree
	br label %L.5
L.4:
	%38 = load %type.TypeNode** %t
	%39 = bitcast %type.TypeNode* %38 to %type.TypeNode*
	%40 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %39)
	%41 = bitcast %ast.AstNode* %40 to %ast.AstNode*
	store %ast.AstNode* %41, %ast.AstNode** %tree
	br label %L.5
L.5:
	br label %L.1
L.3:
	%42 = load %type.TypeNode** %t
	%43 = bitcast %type.TypeNode* %42 to %type.TypeNode*
	%44 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %43)
	%45 = bitcast %ast.AstNode* %44 to %ast.AstNode*
	store %ast.AstNode* %45, %ast.AstNode** %tree
	br label %L.1
L.1:
	%46 = load %ast.AstNode** %tree
	%47 = bitcast %ast.AstNode* %46 to %ast.AstNode*
	store %ast.AstNode* %47, %ast.AstNode** %rv.0
	br label %return
return:
	%48 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %48
}
define internal i64 @expr_ConstScalar(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca i64
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tree = alloca %ast.AstNode*
	%rv = alloca i64
	store i64 0, i64* %rv
	%0 = load %type.TypeNode** %t
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	%2 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %1)
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %tree
	%4 = load %ast.AstNode** %tree
	%5 = icmp ne %ast.AstNode* %4, null
	br i1 %5, label %L.1, label %L.2
L.1:
	%6 = load %ast.AstNode** %tree
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 0
	%8 = load i8* %7
	%9 = icmp eq i8 %8, 7
	br label %L.2
L.2:
	%10 = phi i1 [ false, %L.0 ], [ %9, %L.1 ]
	br i1 %10, label %L.4, label %L.5
L.4:
	%11 = load %ast.AstNode** %tree
	%12 = getelementptr %ast.AstNode* %11, i32 0, i32 10
	%13 = load i64* %12
	store i64 %13, i64* %rv
	br label %L.3
L.5:
	call void @lex_Error(i8 68)
	br label %L.3
L.3:
	%14 = load i64* %rv
	store i64 %14, i64* %rv.0
	br label %return
return:
	%15 = load i64* %rv.0
	ret i64 %15
}
@stmt_isthenlist = internal constant [3 x i8] [ i8 50, i8 48, i8 0 ], align 1
@stmt_thenlist = internal constant [2 x i8] [ i8 48, i8 0 ], align 1
@stmt_elselist = internal constant [2 x i8] [ i8 49, i8 0 ], align 1
@stmt_aslist = internal constant [2 x i8] [ i8 59, i8 0 ], align 1
@stmt_dolist = internal constant [2 x i8] [ i8 53, i8 0 ], align 1
@stmt_withlist = internal constant [2 x i8] [ i8 56, i8 0 ], align 1
@stmt_skiplist = internal constant [3 x i8] [ i8 37, i8 4, i8 0 ], align 1
@stmt_LoopLevel = internal global i8 0, align 1
@stmt_CurFile = internal global %symb.SymbNode* zeroinitializer, align 4
@stmt_skipgroup = internal constant [2 x i8] [ i8 37, i8 0 ], align 1
@stmt_skipstmt = internal constant [2 x i8] [ i8 4, i8 0 ], align 1
define internal void @stmt_WhenSkip(i8 zeroext %tok.arg) nounwind {
L.0:
	%tok = alloca i8
	store i8 %tok.arg, i8* %tok
	%0 = load i8* %tok
	%1 = icmp eq i8 %0, 36
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = getelementptr [2 x i8]* @stmt_skipgroup
	%3 = bitcast [2 x i8]* %2 to [0 x i8]*
	%4 = call i8 @lex_Skip([0 x i8]* %3)
	%5 = call i8 @lex_Expect(i8 37)
	br label %L.1
L.3:
	%6 = getelementptr [2 x i8]* @stmt_skipstmt
	%7 = bitcast [2 x i8]* %6 to [0 x i8]*
	%8 = call i8 @lex_Skip([0 x i8]* %7)
	%9 = call i8 @lex_Expect(i8 4)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal %ast.AstNode* @stmt_WhenDo(i8 zeroext %nest.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%nest = alloca i8
	store i8 %nest.arg, i8* %nest
	%tree = alloca %ast.AstNode*
	%stree = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	%2 = icmp eq i8 %1, 36
	br i1 %2, label %L.2, label %L.3
L.2:
	%3 = call i8 @lex_Next()
	store i8 %3, i8* %tok
	%4 = bitcast %type.TypeNode* null to %type.TypeNode*
	%5 = call %ast.AstNode* @ast_New(i8 64, %type.TypeNode* %4)
	%6 = bitcast %ast.AstNode* %5 to %ast.AstNode*
	store %ast.AstNode* %6, %ast.AstNode** %tree
	br label %L.4
L.4:
	%7 = load i8* %tok
	%8 = icmp ne i8 %7, 37
	br i1 %8, label %L.7, label %L.8
L.7:
	%9 = load i8* %tok
	%10 = icmp ne i8 %9, 1
	br label %L.8
L.8:
	%11 = phi i1 [ false, %L.4 ], [ %10, %L.7 ]
	%12 = xor i1 %11, true
	br i1 %12, label %L.5, label %L.6
L.6:
	%13 = load i8* %nest
	%14 = zext i8 %13 to i32
	switch i32 %14, label %L.9 [
		i32 0, label %L.11
		i32 1, label %L.12
		i32 2, label %L.13
	]
L.11:
	%15 = call %ast.AstNode* @stmt_ProgStmt()
	%16 = bitcast %ast.AstNode* %15 to %ast.AstNode*
	store %ast.AstNode* %16, %ast.AstNode** %stree
	br label %L.10
L.12:
	%17 = call %ast.AstNode* @stmt_PkgStmt()
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	store %ast.AstNode* %18, %ast.AstNode** %stree
	br label %L.10
L.13:
	%19 = call %ast.AstNode* @stmt_Statement()
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	store %ast.AstNode* %20, %ast.AstNode** %stree
	br label %L.10
L.9:
	br label %L.10
L.10:
	%21 = load %ast.AstNode** %stree
	%22 = icmp ne %ast.AstNode* %21, null
	br i1 %22, label %L.15, label %L.14
L.15:
	%23 = load %ast.AstNode** %tree
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	%25 = load %ast.AstNode** %stree
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	%27 = call %ast.AstNode* @ast_Child(%ast.AstNode* %24, %ast.AstNode* %26)
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	store %ast.AstNode* %28, %ast.AstNode** %tree
	br label %L.14
L.14:
	%29 = load i8* @lex_Token
	store i8 %29, i8* %tok
	br label %L.4
L.5:
	%30 = call i8 @lex_Expect(i8 37)
	br label %L.1
L.3:
	%31 = load i8* %nest
	%32 = zext i8 %31 to i32
	switch i32 %32, label %L.16 [
		i32 0, label %L.18
		i32 1, label %L.19
		i32 2, label %L.20
	]
L.18:
	%33 = call %ast.AstNode* @stmt_ProgStmt()
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	store %ast.AstNode* %34, %ast.AstNode** %tree
	br label %L.17
L.19:
	%35 = call %ast.AstNode* @stmt_PkgStmt()
	%36 = bitcast %ast.AstNode* %35 to %ast.AstNode*
	store %ast.AstNode* %36, %ast.AstNode** %tree
	br label %L.17
L.20:
	%37 = call %ast.AstNode* @stmt_Statement()
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	store %ast.AstNode* %38, %ast.AstNode** %tree
	br label %L.17
L.16:
	br label %L.17
L.17:
	br label %L.1
L.1:
	%39 = load %ast.AstNode** %tree
	%40 = bitcast %ast.AstNode* %39 to %ast.AstNode*
	store %ast.AstNode* %40, %ast.AstNode** %rv.0
	br label %return
return:
	%41 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %41
}
define internal %ast.AstNode* @stmt_WhenStmt(i8 zeroext %nest.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%nest = alloca i8
	store i8 %nest.arg, i8* %nest
	%tree = alloca %ast.AstNode*
	%val = alloca i64
	%tok = alloca i8
	%ctree = alloca %ast.AstNode*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = bitcast %type.TypeNode* null to %type.TypeNode*
	%2 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %1)
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %ctree
	%4 = load %ast.AstNode** %ctree
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 0
	%6 = load i8* %5
	%7 = icmp ne i8 %6, 7
	br i1 %7, label %L.2, label %L.1
L.2:
	call void @lex_Error(i8 68)
	%8 = load %ast.AstNode** %tree
	%9 = bitcast %ast.AstNode* %8 to %ast.AstNode*
	store %ast.AstNode* %9, %ast.AstNode** %rv.0
	br label %return
L.1:
	%10 = load %ast.AstNode** %ctree
	%11 = getelementptr %ast.AstNode* %10, i32 0, i32 10
	%12 = load i64* %11
	store i64 %12, i64* %val
	%13 = getelementptr [2 x i8]* @stmt_thenlist
	%14 = bitcast [2 x i8]* %13 to [0 x i8]*
	%15 = call i8 @lex_Keyword([0 x i8]* %14)
	store i8 %15, i8* %tok
	%16 = load i8* %tok
	%17 = icmp eq i8 %16, 48
	br i1 %17, label %L.4, label %L.5
L.4:
	%18 = call i8 @lex_Next()
	store i8 %18, i8* %tok
	%19 = load i64* %val
	%20 = icmp eq i64 %19, 0
	br i1 %20, label %L.7, label %L.8
L.7:
	%21 = load i8* %tok
	call void @stmt_WhenSkip(i8 %21)
	br label %L.6
L.8:
	%22 = load i8* %nest
	%23 = call %ast.AstNode* @stmt_WhenDo(i8 %22)
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	store %ast.AstNode* %24, %ast.AstNode** %tree
	br label %L.6
L.6:
	%25 = getelementptr [2 x i8]* @stmt_elselist
	%26 = bitcast [2 x i8]* %25 to [0 x i8]*
	%27 = call i8 @lex_Keyword([0 x i8]* %26)
	store i8 %27, i8* %tok
	%28 = load i8* %tok
	%29 = icmp eq i8 %28, 49
	br i1 %29, label %L.10, label %L.9
L.10:
	%30 = call i8 @lex_Next()
	store i8 %30, i8* %tok
	%31 = load i64* %val
	%32 = icmp eq i64 %31, 0
	br i1 %32, label %L.12, label %L.13
L.12:
	%33 = load i8* %nest
	%34 = call %ast.AstNode* @stmt_WhenDo(i8 %33)
	%35 = bitcast %ast.AstNode* %34 to %ast.AstNode*
	store %ast.AstNode* %35, %ast.AstNode** %tree
	br label %L.11
L.13:
	%36 = load i8* %tok
	call void @stmt_WhenSkip(i8 %36)
	br label %L.11
L.11:
	br label %L.9
L.9:
	br label %L.3
L.5:
	call void @lex_ErrorT(i8 14, i8 48)
	br label %L.3
L.3:
	%37 = load %ast.AstNode** %tree
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	store %ast.AstNode* %38, %ast.AstNode** %rv.0
	br label %return
return:
	%39 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %39
}
define internal %ast.AstNode* @stmt_TypeDecl() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%tok = alloca i8
	%s = alloca %symb.SymbNode*
	%bs = alloca %symb.SymbNode*
	%t = alloca %type.TypeNode*
	%bt = alloca %type.TypeNode*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 40
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = getelementptr [64 x i8]* @lex_Ident
	%5 = bitcast [64 x i8]* %4 to [0 x i8]*
	%6 = call %symb.SymbNode* @symb_New(i8 2, [0 x i8]* %5, i8 1)
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	store %symb.SymbNode* %7, %symb.SymbNode** %s
	%8 = bitcast %type.TypeNode* null to %type.TypeNode*
	store %type.TypeNode* %8, %type.TypeNode** %bt
	%9 = call i8 @lex_Next()
	store i8 %9, i8* %tok
	%10 = load i8* %tok
	%11 = icmp eq i8 %10, 32
	br i1 %11, label %L.5, label %L.4
L.5:
	%12 = call i8 @lex_Next()
	store i8 %12, i8* %tok
	%13 = load i8* %tok
	%14 = icmp eq i8 %13, 40
	br i1 %14, label %L.7, label %L.6
L.7:
	%15 = getelementptr [64 x i8]* @lex_Ident
	%16 = bitcast [64 x i8]* %15 to [0 x i8]*
	%17 = call %symb.SymbNode* @symb_Find([0 x i8]* %16)
	%18 = bitcast %symb.SymbNode* %17 to %symb.SymbNode*
	store %symb.SymbNode* %18, %symb.SymbNode** %bs
	%19 = load %symb.SymbNode** %bs
	%20 = icmp ne %symb.SymbNode* %19, null
	br i1 %20, label %L.9, label %L.10
L.9:
	%21 = load %symb.SymbNode** %bs
	%22 = getelementptr %symb.SymbNode* %21, i32 0, i32 12
	%23 = load i8* %22
	%24 = icmp eq i8 %23, 2
	br i1 %24, label %L.12, label %L.13
L.12:
	%25 = load %symb.SymbNode** %bs
	%26 = getelementptr %symb.SymbNode* %25, i32 0, i32 1
	%27 = load %type.TypeNode** %26
	%28 = bitcast %type.TypeNode* %27 to %type.TypeNode*
	store %type.TypeNode* %28, %type.TypeNode** %bt
	br label %L.11
L.13:
	call void @lex_Error(i8 23)
	br label %L.11
L.11:
	br label %L.8
L.10:
	%29 = getelementptr [64 x i8]* @lex_Ident
	%30 = bitcast [64 x i8]* %29 to [0 x i8]*
	call void @lex_ErrorI(i8 16, [0 x i8]* %30)
	br label %L.8
L.8:
	%31 = call i8 @lex_Next()
	store i8 %31, i8* %tok
	br label %L.6
L.6:
	%32 = call i8 @lex_Expect(i8 33)
	store i8 %32, i8* %tok
	br label %L.4
L.4:
	%33 = load %symb.SymbNode** %s
	%34 = getelementptr %symb.SymbNode* %33, i32 0, i32 14
	%35 = load i8* %34
	%36 = icmp ne i8 %35, 0
	%37 = xor i1 %36, true
	br i1 %37, label %L.15, label %L.14
L.15:
	%38 = load %symb.SymbNode** %s
	%39 = bitcast %symb.SymbNode* %38 to %symb.SymbNode*
	call void @symb_MakeVisible(%symb.SymbNode* %39)
	br label %L.14
L.14:
	%40 = load i8* %tok
	%41 = icmp eq i8 %40, 3
	br i1 %41, label %L.17, label %L.16
L.17:
	%42 = call i8 @lex_Next()
	store i8 %42, i8* %tok
	%43 = load i8* %tok
	%44 = load %type.TypeNode** %bt
	%45 = bitcast %type.TypeNode* %44 to %type.TypeNode*
	%46 = call %type.TypeNode* @type_Def(i8 %43, %type.TypeNode* %45)
	%47 = bitcast %type.TypeNode* %46 to %type.TypeNode*
	store %type.TypeNode* %47, %type.TypeNode** %t
	%48 = load %type.TypeNode** %t
	%49 = icmp ne %type.TypeNode* %48, null
	br i1 %49, label %L.18, label %L.19
L.18:
	%50 = load %type.TypeNode** %t
	%51 = getelementptr %type.TypeNode* %50, i32 0, i32 3
	%52 = load %symb.SymbNode** %51
	%53 = icmp eq %symb.SymbNode* %52, null
	br label %L.19
L.19:
	%54 = phi i1 [ false, %L.17 ], [ %53, %L.18 ]
	br i1 %54, label %L.21, label %L.20
L.21:
	%55 = load %symb.SymbNode** %s
	%56 = bitcast %symb.SymbNode* %55 to %symb.SymbNode*
	%57 = load %type.TypeNode** %t
	%58 = getelementptr %type.TypeNode* %57, i32 0, i32 3
	store %symb.SymbNode* %56, %symb.SymbNode** %58
	br label %L.20
L.20:
	%59 = load i8* @lex_Token
	store i8 %59, i8* %tok
	%60 = load i8* %tok
	%61 = icmp eq i8 %60, 3
	br i1 %61, label %L.23, label %L.22
L.23:
	%62 = load %type.TypeNode** %t
	%63 = bitcast %type.TypeNode* %62 to %type.TypeNode*
	%64 = call %type.TypeNode* @type_TypeAttributes(%type.TypeNode* %63)
	%65 = bitcast %type.TypeNode* %64 to %type.TypeNode*
	store %type.TypeNode* %65, %type.TypeNode** %t
	br label %L.22
L.22:
	%66 = load %type.TypeNode** %t
	%67 = bitcast %type.TypeNode* %66 to %type.TypeNode*
	%68 = load %symb.SymbNode** %s
	%69 = getelementptr %symb.SymbNode* %68, i32 0, i32 1
	store %type.TypeNode* %67, %type.TypeNode** %69
	%70 = load %symb.SymbNode** %s
	%71 = getelementptr %symb.SymbNode* %70, i32 0, i32 14
	%72 = load i8* %71
	%73 = icmp ne i8 %72, 0
	br i1 %73, label %L.25, label %L.24
L.25:
	%74 = load %symb.SymbNode** %s
	%75 = bitcast %symb.SymbNode* %74 to %symb.SymbNode*
	%76 = load %type.TypeNode** %t
	%77 = bitcast %type.TypeNode* %76 to %type.TypeNode*
	call void @type_FwdFix(%symb.SymbNode* %75, %type.TypeNode* %77)
	br label %L.24
L.24:
	%78 = load %type.TypeNode** %t
	%79 = bitcast %type.TypeNode* %78 to %type.TypeNode*
	call void @type_Final(%type.TypeNode* %79)
	br label %L.16
L.16:
	%80 = call i8 @lex_Expect(i8 4)
	store i8 %80, i8* %tok
	br label %L.1
L.3:
	call void @lex_Error(i8 15)
	br label %L.1
L.1:
	%81 = load %ast.AstNode** %tree
	%82 = bitcast %ast.AstNode* %81 to %ast.AstNode*
	store %ast.AstNode* %82, %ast.AstNode** %rv.0
	br label %return
return:
	%83 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %83
}
define internal %ast.AstNode* @stmt_VarNew(%symb.SymbNode* %s.arg, %type.TypeNode* %t.arg, %ast.AstNode* %iv.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%s = alloca %symb.SymbNode*
	%t = alloca %type.TypeNode*
	%iv = alloca %ast.AstNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store %ast.AstNode* %iv.arg, %ast.AstNode** %iv
	%node = alloca %ast.AstNode*
	%0 = load %type.TypeNode** %t
	%1 = bitcast %type.TypeNode* %0 to %type.TypeNode*
	%2 = load %symb.SymbNode** %s
	%3 = getelementptr %symb.SymbNode* %2, i32 0, i32 1
	store %type.TypeNode* %1, %type.TypeNode** %3
	%4 = load %type.TypeNode** %t
	%5 = bitcast %type.TypeNode* %4 to %type.TypeNode*
	%6 = call %ast.AstNode* @ast_New(i8 5, %type.TypeNode* %5)
	%7 = bitcast %ast.AstNode* %6 to %ast.AstNode*
	store %ast.AstNode* %7, %ast.AstNode** %node
	%8 = load %ast.AstNode** %iv
	%9 = icmp ne %ast.AstNode* %8, null
	br i1 %9, label %L.2, label %L.1
L.2:
	%10 = load %ast.AstNode** %node
	%11 = bitcast %ast.AstNode* %10 to %ast.AstNode*
	%12 = load %ast.AstNode** %iv
	%13 = bitcast %ast.AstNode* %12 to %ast.AstNode*
	%14 = call %ast.AstNode* @ast_Child(%ast.AstNode* %11, %ast.AstNode* %13)
	%15 = bitcast %ast.AstNode* %14 to %ast.AstNode*
	store %ast.AstNode* %15, %ast.AstNode** %node
	br label %L.1
L.1:
	%16 = load %ast.AstNode** %node
	%17 = getelementptr %ast.AstNode* %16, i32 0, i32 1
	store i8 4, i8* %17
	%18 = load %type.TypeNode** %t
	%19 = getelementptr %type.TypeNode* %18, i32 0, i32 9
	%20 = load i32* %19
	%21 = load %ast.AstNode** %node
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 6
	store i32 %20, i32* %22
	%23 = load %symb.SymbNode** %s
	%24 = bitcast %symb.SymbNode* %23 to %symb.SymbNode*
	%25 = load %ast.AstNode** %node
	%26 = getelementptr %ast.AstNode* %25, i32 0, i32 12
	store %symb.SymbNode* %24, %symb.SymbNode** %26
	%27 = load %ast.AstNode** %node
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	store %ast.AstNode* %28, %ast.AstNode** %rv.0
	br label %return
return:
	%29 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %29
}
define internal %ast.AstNode* @stmt_VarDecl() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%stree = alloca %ast.AstNode*
	%iv = alloca %ast.AstNode*
	%tok = alloca i8
	%t = alloca %type.TypeNode*
	%s = alloca %symb.SymbNode*
	%ss = alloca %symb.SymbNode*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 40
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = getelementptr [64 x i8]* @lex_Ident
	%5 = bitcast [64 x i8]* %4 to [0 x i8]*
	%6 = call %symb.SymbNode* @symb_New(i8 3, [0 x i8]* %5, i8 0)
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	store %symb.SymbNode* %7, %symb.SymbNode** %s
	%8 = load %symb.SymbNode** %s
	%9 = bitcast %symb.SymbNode* %8 to %symb.SymbNode*
	store %symb.SymbNode* %9, %symb.SymbNode** %ss
	%10 = call i8 @lex_Next()
	store i8 %10, i8* %tok
	br label %L.3
L.3:
	%11 = load i8* %tok
	%12 = icmp eq i8 %11, 5
	%13 = xor i1 %12, true
	br i1 %13, label %L.4, label %L.5
L.5:
	%14 = call i8 @lex_Next()
	store i8 %14, i8* %tok
	%15 = load i8* %tok
	%16 = icmp eq i8 %15, 40
	br i1 %16, label %L.7, label %L.8
L.7:
	%17 = getelementptr [64 x i8]* @lex_Ident
	%18 = bitcast [64 x i8]* %17 to [0 x i8]*
	%19 = call %symb.SymbNode* @symb_New(i8 3, [0 x i8]* %18, i8 0)
	%20 = bitcast %symb.SymbNode* %19 to %symb.SymbNode*
	store %symb.SymbNode* %20, %symb.SymbNode** %s
	%21 = call i8 @lex_Next()
	store i8 %21, i8* %tok
	br label %L.6
L.8:
	call void @lex_Error(i8 15)
	br label %L.6
L.6:
	br label %L.3
L.4:
	%22 = load i8* %tok
	%23 = icmp eq i8 %22, 3
	br i1 %23, label %L.10, label %L.11
L.10:
	%24 = call i8 @lex_Next()
	store i8 %24, i8* %tok
	%25 = load i8* %tok
	%26 = bitcast %type.TypeNode* null to %type.TypeNode*
	%27 = call %type.TypeNode* @type_Def(i8 %25, %type.TypeNode* %26)
	%28 = bitcast %type.TypeNode* %27 to %type.TypeNode*
	store %type.TypeNode* %28, %type.TypeNode** %t
	%29 = load i8* @lex_Token
	store i8 %29, i8* %tok
	%30 = load i8* %tok
	%31 = icmp eq i8 %30, 3
	br i1 %31, label %L.13, label %L.12
L.13:
	%32 = load %symb.SymbNode** %s
	%33 = bitcast %symb.SymbNode* %32 to %symb.SymbNode*
	%34 = load %type.TypeNode** %t
	%35 = bitcast %type.TypeNode* %34 to %type.TypeNode*
	%36 = call %type.TypeNode* @type_VarAttributes(%symb.SymbNode* %33, %type.TypeNode* %35)
	%37 = bitcast %type.TypeNode* %36 to %type.TypeNode*
	store %type.TypeNode* %37, %type.TypeNode** %t
	br label %L.12
L.12:
	%38 = load %type.TypeNode** %t
	%39 = bitcast %type.TypeNode* %38 to %type.TypeNode*
	call void @type_Final(%type.TypeNode* %39)
	%40 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %40, %ast.AstNode** %iv
	%41 = load i8* @lex_Token
	store i8 %41, i8* %tok
	%42 = load i8* %tok
	%43 = icmp eq i8 %42, 9
	br i1 %43, label %L.15, label %L.14
L.15:
	%44 = call i8 @lex_Next()
	store i8 %44, i8* %tok
	%45 = load %type.TypeNode** %t
	%46 = bitcast %type.TypeNode* %45 to %type.TypeNode*
	%47 = call %ast.AstNode* @expr_Const(%type.TypeNode* %46)
	%48 = bitcast %ast.AstNode* %47 to %ast.AstNode*
	store %ast.AstNode* %48, %ast.AstNode** %iv
	%49 = load %symb.SymbNode** %s
	%50 = getelementptr %symb.SymbNode* %49, i32 0, i32 15
	store i8 1, i8* %50
	br label %L.14
L.14:
	br label %L.9
L.11:
	call void @lex_ErrorT(i8 14, i8 3)
	br label %L.9
L.9:
	%51 = load %symb.SymbNode** %ss
	%52 = getelementptr %symb.SymbNode* %51, i32 0, i32 0
	%53 = load %symb.SymbNode** %52
	%54 = icmp eq %symb.SymbNode* %53, null
	br i1 %54, label %L.17, label %L.18
L.17:
	%55 = load %symb.SymbNode** %ss
	%56 = bitcast %symb.SymbNode* %55 to %symb.SymbNode*
	%57 = load %type.TypeNode** %t
	%58 = bitcast %type.TypeNode* %57 to %type.TypeNode*
	%59 = load %ast.AstNode** %iv
	%60 = bitcast %ast.AstNode* %59 to %ast.AstNode*
	%61 = call %ast.AstNode* @stmt_VarNew(%symb.SymbNode* %56, %type.TypeNode* %58, %ast.AstNode* %60)
	%62 = bitcast %ast.AstNode* %61 to %ast.AstNode*
	store %ast.AstNode* %62, %ast.AstNode** %tree
	br label %L.16
L.18:
	%63 = bitcast %type.TypeNode* null to %type.TypeNode*
	%64 = call %ast.AstNode* @ast_New(i8 64, %type.TypeNode* %63)
	%65 = bitcast %ast.AstNode* %64 to %ast.AstNode*
	store %ast.AstNode* %65, %ast.AstNode** %tree
	br label %L.19
L.19:
	%66 = load %symb.SymbNode** %ss
	%67 = bitcast %symb.SymbNode* %66 to %symb.SymbNode*
	%68 = load %type.TypeNode** %t
	%69 = bitcast %type.TypeNode* %68 to %type.TypeNode*
	%70 = load %ast.AstNode** %iv
	%71 = bitcast %ast.AstNode* %70 to %ast.AstNode*
	%72 = call %ast.AstNode* @stmt_VarNew(%symb.SymbNode* %67, %type.TypeNode* %69, %ast.AstNode* %71)
	%73 = bitcast %ast.AstNode* %72 to %ast.AstNode*
	store %ast.AstNode* %73, %ast.AstNode** %stree
	%74 = load %ast.AstNode** %tree
	%75 = bitcast %ast.AstNode* %74 to %ast.AstNode*
	%76 = load %ast.AstNode** %stree
	%77 = bitcast %ast.AstNode* %76 to %ast.AstNode*
	%78 = call %ast.AstNode* @ast_Child(%ast.AstNode* %75, %ast.AstNode* %77)
	%79 = bitcast %ast.AstNode* %78 to %ast.AstNode*
	store %ast.AstNode* %79, %ast.AstNode** %tree
	%80 = load %symb.SymbNode** %ss
	%81 = load %symb.SymbNode** %s
	%82 = icmp eq %symb.SymbNode* %80, %81
	br i1 %82, label %L.23, label %L.22
L.22:
	%83 = load %symb.SymbNode** %ss
	%84 = getelementptr %symb.SymbNode* %83, i32 0, i32 0
	%85 = load %symb.SymbNode** %84
	%86 = icmp eq %symb.SymbNode* %85, null
	br label %L.23
L.23:
	%87 = phi i1 [ true, %L.19 ], [ %86, %L.22 ]
	br i1 %87, label %L.20, label %L.21
L.21:
	%88 = load %symb.SymbNode** %ss
	%89 = getelementptr %symb.SymbNode* %88, i32 0, i32 0
	%90 = load %symb.SymbNode** %89
	%91 = bitcast %symb.SymbNode* %90 to %symb.SymbNode*
	store %symb.SymbNode* %91, %symb.SymbNode** %ss
	br label %L.19
L.20:
	br label %L.16
L.16:
	%92 = call i8 @lex_Expect(i8 4)
	store i8 %92, i8* %tok
	br label %L.1
L.1:
	%93 = load %ast.AstNode** %tree
	%94 = bitcast %ast.AstNode* %93 to %ast.AstNode*
	store %ast.AstNode* %94, %ast.AstNode** %rv.0
	br label %return
return:
	%95 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %95
}
define internal %ast.AstNode* @stmt_ConstDecl() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%s = alloca %symb.SymbNode*
	%t = alloca %type.TypeNode*
	%tok = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 40
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = getelementptr [64 x i8]* @lex_Ident
	%5 = bitcast [64 x i8]* %4 to [0 x i8]*
	%6 = call %symb.SymbNode* @symb_New(i8 1, [0 x i8]* %5, i8 0)
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	store %symb.SymbNode* %7, %symb.SymbNode** %s
	%8 = call i8 @lex_Next()
	store i8 %8, i8* %tok
	%9 = bitcast %type.TypeNode* null to %type.TypeNode*
	store %type.TypeNode* %9, %type.TypeNode** %t
	%10 = load i8* %tok
	%11 = icmp eq i8 %10, 3
	br i1 %11, label %L.5, label %L.4
L.5:
	%12 = call i8 @lex_Next()
	store i8 %12, i8* %tok
	%13 = load i8* %tok
	%14 = bitcast %type.TypeNode* null to %type.TypeNode*
	%15 = call %type.TypeNode* @type_Def(i8 %13, %type.TypeNode* %14)
	%16 = bitcast %type.TypeNode* %15 to %type.TypeNode*
	store %type.TypeNode* %16, %type.TypeNode** %t
	%17 = load i8* @lex_Token
	store i8 %17, i8* %tok
	%18 = load i8* %tok
	%19 = icmp eq i8 %18, 3
	br i1 %19, label %L.7, label %L.6
L.7:
	%20 = load %type.TypeNode** %t
	%21 = bitcast %type.TypeNode* %20 to %type.TypeNode*
	%22 = call %type.TypeNode* @type_TypeAttributes(%type.TypeNode* %21)
	%23 = bitcast %type.TypeNode* %22 to %type.TypeNode*
	store %type.TypeNode* %23, %type.TypeNode** %t
	%24 = load i8* @lex_Token
	store i8 %24, i8* %tok
	br label %L.6
L.6:
	%25 = load %type.TypeNode** %t
	%26 = bitcast %type.TypeNode* %25 to %type.TypeNode*
	call void @type_Final(%type.TypeNode* %26)
	br label %L.4
L.4:
	%27 = load i8* %tok
	%28 = icmp eq i8 %27, 9
	br i1 %28, label %L.9, label %L.10
L.9:
	%29 = call i8 @lex_Next()
	store i8 %29, i8* %tok
	%30 = load %type.TypeNode** %t
	%31 = bitcast %type.TypeNode* %30 to %type.TypeNode*
	%32 = call %ast.AstNode* @expr_Const(%type.TypeNode* %31)
	%33 = bitcast %ast.AstNode* %32 to %ast.AstNode*
	store %ast.AstNode* %33, %ast.AstNode** %tree
	%34 = load %type.TypeNode** %t
	%35 = icmp eq %type.TypeNode* %34, null
	br i1 %35, label %L.12, label %L.11
L.12:
	%36 = load %ast.AstNode** %tree
	%37 = getelementptr %ast.AstNode* %36, i32 0, i32 11
	%38 = load %type.TypeNode** %37
	%39 = bitcast %type.TypeNode* %38 to %type.TypeNode*
	store %type.TypeNode* %39, %type.TypeNode** %t
	br label %L.11
L.11:
	%40 = load %type.TypeNode** %t
	%41 = getelementptr %type.TypeNode* %40, i32 0, i32 13
	%42 = load i8* %41
	%43 = icmp ule i8 %42, 4
	br i1 %43, label %L.14, label %L.13
L.13:
	%44 = load %type.TypeNode** %t
	%45 = getelementptr %type.TypeNode* %44, i32 0, i32 14
	%46 = load i8* %45
	%47 = icmp eq i8 %46, 2
	br label %L.14
L.14:
	%48 = phi i1 [ true, %L.11 ], [ %47, %L.13 ]
	br i1 %48, label %L.16, label %L.17
L.16:
	%49 = load %ast.AstNode** %tree
	%50 = getelementptr %ast.AstNode* %49, i32 0, i32 0
	%51 = load i8* %50
	%52 = icmp eq i8 %51, 7
	br i1 %52, label %L.19, label %L.20
L.19:
	%53 = load %ast.AstNode** %tree
	%54 = getelementptr %ast.AstNode* %53, i32 0, i32 10
	%55 = load i64* %54
	%56 = load %symb.SymbNode** %s
	%57 = getelementptr %symb.SymbNode* %56, i32 0, i32 7
	store i64 %55, i64* %57
	%58 = load %type.TypeNode** %t
	%59 = icmp eq %type.TypeNode* %58, null
	br i1 %59, label %L.22, label %L.21
L.22:
	%60 = load %ast.AstNode** %tree
	%61 = getelementptr %ast.AstNode* %60, i32 0, i32 11
	%62 = load %type.TypeNode** %61
	%63 = bitcast %type.TypeNode* %62 to %type.TypeNode*
	store %type.TypeNode* %63, %type.TypeNode** %t
	br label %L.21
L.21:
	%64 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %64, %ast.AstNode** %tree
	br label %L.18
L.20:
	call void @lex_Error(i8 67)
	br label %L.18
L.18:
	br label %L.15
L.17:
	%65 = load %type.TypeNode** %t
	%66 = getelementptr %type.TypeNode* %65, i32 0, i32 13
	%67 = load i8* %66
	%68 = icmp eq i8 %67, 5
	br i1 %68, label %L.23, label %L.24
L.23:
	%69 = load %type.TypeNode** %t
	%70 = getelementptr %type.TypeNode* %69, i32 0, i32 18
	%71 = load i8* %70
	%72 = icmp ne i8 %71, 0
	br label %L.24
L.24:
	%73 = phi i1 [ false, %L.17 ], [ %72, %L.23 ]
	br i1 %73, label %L.26, label %L.25
L.26:
	%74 = load %ast.AstNode** %tree
	%75 = getelementptr %ast.AstNode* %74, i32 0, i32 11
	%76 = load %type.TypeNode** %75
	%77 = bitcast %type.TypeNode* %76 to %type.TypeNode*
	store %type.TypeNode* %77, %type.TypeNode** %t
	br label %L.25
L.25:
	%78 = load %type.TypeNode** %t
	%79 = bitcast %type.TypeNode* %78 to %type.TypeNode*
	%80 = load %ast.AstNode** %tree
	%81 = bitcast %ast.AstNode* %80 to %ast.AstNode*
	%82 = call %ast.AstNode* @ast_New1(i8 6, %type.TypeNode* %79, %ast.AstNode* %81)
	%83 = bitcast %ast.AstNode* %82 to %ast.AstNode*
	store %ast.AstNode* %83, %ast.AstNode** %tree
	%84 = load %symb.SymbNode** %s
	%85 = bitcast %symb.SymbNode* %84 to %symb.SymbNode*
	%86 = load %ast.AstNode** %tree
	%87 = getelementptr %ast.AstNode* %86, i32 0, i32 12
	store %symb.SymbNode* %85, %symb.SymbNode** %87
	br label %L.15
L.15:
	%88 = load %symb.SymbNode** %s
	%89 = getelementptr %symb.SymbNode* %88, i32 0, i32 15
	store i8 1, i8* %89
	br label %L.8
L.10:
	call void @lex_Error(i8 67)
	br label %L.8
L.8:
	%90 = load %type.TypeNode** %t
	%91 = bitcast %type.TypeNode* %90 to %type.TypeNode*
	%92 = load %symb.SymbNode** %s
	%93 = getelementptr %symb.SymbNode* %92, i32 0, i32 1
	store %type.TypeNode* %91, %type.TypeNode** %93
	br label %L.1
L.3:
	call void @lex_Error(i8 15)
	br label %L.1
L.1:
	%94 = call i8 @lex_Expect(i8 4)
	store i8 %94, i8* %tok
	%95 = load %ast.AstNode** %tree
	%96 = bitcast %ast.AstNode* %95 to %ast.AstNode*
	store %ast.AstNode* %96, %ast.AstNode** %rv.0
	br label %return
return:
	%97 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %97
}
define internal %ast.AstNode* @stmt_GetLHS() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%s = alloca %symb.SymbNode*
	%tok = alloca i8
	%tree = alloca %ast.AstNode*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 40
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = getelementptr [64 x i8]* @lex_Ident
	%5 = bitcast [64 x i8]* %4 to [0 x i8]*
	%6 = call %symb.SymbNode* @symb_Find([0 x i8]* %5)
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	store %symb.SymbNode* %7, %symb.SymbNode** %s
	%8 = call i8 @lex_Next()
	store i8 %8, i8* %tok
	%9 = load %symb.SymbNode** %s
	%10 = icmp ne %symb.SymbNode* %9, null
	br i1 %10, label %L.5, label %L.6
L.5:
	%11 = load %symb.SymbNode** %s
	%12 = bitcast %symb.SymbNode* %11 to %symb.SymbNode*
	%13 = call %ast.AstNode* @expr_Primary(%symb.SymbNode* %12)
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	store %ast.AstNode* %14, %ast.AstNode** %tree
	%15 = load %ast.AstNode** %tree
	%16 = getelementptr %ast.AstNode* %15, i32 0, i32 0
	%17 = load i8* %16
	%18 = icmp eq i8 %17, 2
	br i1 %18, label %L.8, label %L.7
L.8:
	%19 = load %ast.AstNode** %tree
	%20 = getelementptr %ast.AstNode* %19, i32 0, i32 12
	%21 = load %symb.SymbNode** %20
	%22 = getelementptr %symb.SymbNode* %21, i32 0, i32 19
	%23 = getelementptr [0 x i8]* %22
	%24 = bitcast [0 x i8]* %23 to [0 x i8]*
	call void @lex_ErrorI(i8 26, [0 x i8]* %24)
	br label %L.7
L.7:
	br label %L.4
L.6:
	%25 = getelementptr [64 x i8]* @lex_Ident
	%26 = bitcast [64 x i8]* %25 to [0 x i8]*
	call void @lex_ErrorI(i8 16, [0 x i8]* %26)
	br label %L.4
L.4:
	br label %L.1
L.3:
	call void @lex_Error(i8 15)
	br label %L.1
L.1:
	%27 = load %ast.AstNode** %tree
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	store %ast.AstNode* %28, %ast.AstNode** %rv.0
	br label %return
return:
	%29 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %29
}
define internal %ast.AstNode* @stmt_Asm() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%node = alloca %ast.AstNode*
	%temp = alloca %ast.AstNode*
	%narg = alloca i16
	%nout = alloca i16
	%tok = alloca i8
	%what = alloca [0 x i8]*
	%i = alloca i16
	%na = alloca i8
	%no = alloca i8
	%constraints = alloca [10 x i8]
	%outputs = alloca [10 x %ast.AstNode*]
	%tlhead = alloca %type.TypeListEntry*
	%tltail = alloca %type.TypeListEntry*
	%tl = alloca %type.TypeListEntry*
	%0 = bitcast %type.TypeNode* null to %type.TypeNode*
	%1 = call %ast.AstNode* @ast_New(i8 12, %type.TypeNode* %0)
	%2 = bitcast %ast.AstNode* %1 to %ast.AstNode*
	store %ast.AstNode* %2, %ast.AstNode** %tree
	%3 = load i8* @lex_Token
	store i8 %3, i8* %tok
	%4 = load i8* %tok
	%5 = icmp eq i8 %4, 39
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = load %ast.AstNode** %tree
	%7 = bitcast %ast.AstNode* %6 to %ast.AstNode*
	%8 = call %ast.AstNode* @expr_String()
	%9 = bitcast %ast.AstNode* %8 to %ast.AstNode*
	%10 = call %ast.AstNode* @ast_Child(%ast.AstNode* %7, %ast.AstNode* %9)
	%11 = bitcast %ast.AstNode* %10 to %ast.AstNode*
	store %ast.AstNode* %11, %ast.AstNode** %tree
	%12 = call i8 @lex_Next()
	store i8 %12, i8* %tok
	%13 = load i8* %tok
	%14 = icmp eq i8 %13, 5
	br i1 %14, label %L.5, label %L.4
L.5:
	%15 = call i8 @lex_Next()
	store i8 %15, i8* %tok
	store i16 0, i16* %narg
	store i16 0, i16* %nout
	%16 = load i8* %tok
	%17 = icmp eq i8 %16, 39
	br i1 %17, label %L.7, label %L.8
L.7:
	%18 = call %ast.AstNode* @expr_String()
	%19 = bitcast %ast.AstNode* %18 to %ast.AstNode*
	store %ast.AstNode* %19, %ast.AstNode** %node
	%20 = load %ast.AstNode** %node
	%21 = getelementptr %ast.AstNode* %20, i32 0, i32 12
	%22 = load %symb.SymbNode** %21
	%23 = bitcast %symb.SymbNode* %22 to [0 x i8]*
	%24 = bitcast [0 x i8]* %23 to [0 x i8]*
	store [0 x i8]* %24, [0 x i8]** %what
	%25 = load %ast.AstNode** %tree
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	%27 = load %ast.AstNode** %node
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	%29 = call %ast.AstNode* @ast_Child(%ast.AstNode* %26, %ast.AstNode* %28)
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	store %ast.AstNode* %30, %ast.AstNode** %tree
	%31 = call i8 @lex_Next()
	store i8 %31, i8* %tok
	store i16 0, i16* %i
	br label %L.9
L.9:
	%32 = load [0 x i8]** %what
	%33 = load i16* %i
	%34 = zext i16 %33 to i32
	%35 = getelementptr [0 x i8]* %32, i32 0, i32 %34
	%36 = load i8* %35
	%37 = icmp ne i8 %36, 0
	br i1 %37, label %L.12, label %L.13
L.12:
	%38 = load i16* %narg
	%39 = zext i16 %38 to i32
	%40 = icmp ult i32 %39, 8
	br label %L.13
L.13:
	%41 = phi i1 [ false, %L.9 ], [ %40, %L.12 ]
	%42 = xor i1 %41, true
	br i1 %42, label %L.10, label %L.11
L.11:
	%43 = load [0 x i8]** %what
	%44 = load i16* %i
	%45 = zext i16 %44 to i32
	%46 = getelementptr [0 x i8]* %43, i32 0, i32 %45
	%47 = load i8* %46
	%48 = zext i8 %47 to i32
	switch i32 %48, label %L.14 [
		i32 61, label %L.16
		i32 48, label %L.17
		i32 49, label %L.17
		i32 50, label %L.17
		i32 51, label %L.17
		i32 52, label %L.17
		i32 53, label %L.17
		i32 54, label %L.17
		i32 55, label %L.17
		i32 56, label %L.17
		i32 57, label %L.17
		i32 126, label %L.18
	]
L.16:
	%49 = load i16* %i
	%50 = add i16 %49, 1
	store i16 %50, i16* %i
	%51 = load i16* %nout
	%52 = add i16 %51, 1
	store i16 %52, i16* %nout
	%53 = load i16* %narg
	%54 = zext i16 %53 to i32
	%55 = getelementptr [10 x i8]* %constraints, i32 0, i32 %54
	store i8 11, i8* %55
	%56 = load i16* %narg
	%57 = add i16 %56, 1
	store i16 %57, i16* %narg
	br label %L.15
L.17:
	%58 = load [0 x i8]** %what
	%59 = load i16* %i
	%60 = zext i16 %59 to i32
	%61 = getelementptr [0 x i8]* %58, i32 0, i32 %60
	%62 = load i8* %61
	%63 = sub i8 %62, 48
	%64 = load i16* %narg
	%65 = zext i16 %64 to i32
	%66 = getelementptr [10 x i8]* %constraints, i32 0, i32 %65
	store i8 %63, i8* %66
	%67 = load i16* %narg
	%68 = add i16 %67, 1
	store i16 %68, i16* %narg
	br label %L.15
L.18:
	br label %L.15
L.14:
	%69 = load i16* %narg
	%70 = zext i16 %69 to i32
	%71 = getelementptr [10 x i8]* %constraints, i32 0, i32 %70
	store i8 10, i8* %71
	%72 = load i16* %narg
	%73 = add i16 %72, 1
	store i16 %73, i16* %narg
	br label %L.15
L.15:
	%74 = load i16* %i
	%75 = add i16 %74, 1
	store i16 %75, i16* %i
	%76 = load [0 x i8]** %what
	%77 = load i16* %i
	%78 = zext i16 %77 to i32
	%79 = getelementptr [0 x i8]* %76, i32 0, i32 %78
	%80 = load i8* %79
	%81 = icmp ne i8 %80, 44
	br i1 %81, label %L.10, label %L.19
L.19:
	%82 = load i16* %i
	%83 = add i16 %82, 1
	store i16 %83, i16* %i
	br label %L.9
L.10:
	br label %L.6
L.8:
	call void @lex_ErrorT(i8 14, i8 39)
	br label %L.6
L.6:
	store i8 0, i8* %na
	store i8 0, i8* %no
	br label %L.20
L.20:
	%84 = load i8* %na
	%85 = zext i8 %84 to i16
	%86 = load i16* %narg
	%87 = icmp ult i16 %85, %86
	%88 = xor i1 %87, true
	br i1 %88, label %L.21, label %L.22
L.22:
	%89 = load i8* %na
	%90 = zext i8 %89 to i32
	%91 = getelementptr [10 x i8]* %constraints, i32 0, i32 %90
	%92 = load i8* %91
	%93 = icmp ult i8 %92, 10
	br i1 %93, label %L.24, label %L.25
L.24:
	%94 = load i8* %na
	%95 = zext i8 %94 to i32
	%96 = getelementptr [10 x i8]* %constraints, i32 0, i32 %95
	%97 = load i8* %96
	%98 = zext i8 %97 to i32
	%99 = getelementptr [10 x %ast.AstNode*]* %outputs, i32 0, i32 %98
	%100 = load %ast.AstNode** %99
	%101 = bitcast %ast.AstNode* %100 to %ast.AstNode*
	%102 = call %ast.AstNode* @expr_Load(%ast.AstNode* %101)
	%103 = bitcast %ast.AstNode* %102 to %ast.AstNode*
	store %ast.AstNode* %103, %ast.AstNode** %node
	%104 = load %ast.AstNode** %tree
	%105 = bitcast %ast.AstNode* %104 to %ast.AstNode*
	%106 = load %ast.AstNode** %node
	%107 = bitcast %ast.AstNode* %106 to %ast.AstNode*
	%108 = call %ast.AstNode* @ast_Child(%ast.AstNode* %105, %ast.AstNode* %107)
	%109 = bitcast %ast.AstNode* %108 to %ast.AstNode*
	store %ast.AstNode* %109, %ast.AstNode** %tree
	br label %L.23
L.25:
	%110 = load i8* %tok
	%111 = icmp eq i8 %110, 5
	br i1 %111, label %L.27, label %L.28
L.27:
	%112 = call i8 @lex_Next()
	store i8 %112, i8* %tok
	%113 = load i8* %na
	%114 = zext i8 %113 to i32
	%115 = getelementptr [10 x i8]* %constraints, i32 0, i32 %114
	%116 = load i8* %115
	%117 = icmp eq i8 %116, 11
	br i1 %117, label %L.30, label %L.31
L.30:
	%118 = call %ast.AstNode* @stmt_GetLHS()
	%119 = bitcast %ast.AstNode* %118 to %ast.AstNode*
	%120 = load i8* %no
	%121 = zext i8 %120 to i32
	%122 = getelementptr [10 x %ast.AstNode*]* %outputs, i32 0, i32 %121
	store %ast.AstNode* %119, %ast.AstNode** %122
	%123 = load i8* %no
	%124 = add i8 %123, 1
	store i8 %124, i8* %no
	br label %L.29
L.31:
	%125 = bitcast %type.TypeNode* null to %type.TypeNode*
	%126 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %125)
	%127 = bitcast %ast.AstNode* %126 to %ast.AstNode*
	store %ast.AstNode* %127, %ast.AstNode** %node
	%128 = load %ast.AstNode** %tree
	%129 = bitcast %ast.AstNode* %128 to %ast.AstNode*
	%130 = load %ast.AstNode** %node
	%131 = bitcast %ast.AstNode* %130 to %ast.AstNode*
	%132 = call %ast.AstNode* @ast_Child(%ast.AstNode* %129, %ast.AstNode* %131)
	%133 = bitcast %ast.AstNode* %132 to %ast.AstNode*
	store %ast.AstNode* %133, %ast.AstNode** %tree
	br label %L.29
L.29:
	%134 = load i8* @lex_Token
	store i8 %134, i8* %tok
	br label %L.26
L.28:
	call void @lex_ErrorT(i8 14, i8 5)
	br label %L.26
L.26:
	br label %L.23
L.23:
	%135 = load i8* %na
	%136 = add i8 %135, 1
	store i8 %136, i8* %na
	br label %L.20
L.21:
	%137 = bitcast %type.TypeListEntry* null to %type.TypeListEntry*
	store %type.TypeListEntry* %137, %type.TypeListEntry** %tlhead
	%138 = bitcast %type.TypeListEntry* null to %type.TypeListEntry*
	store %type.TypeListEntry* %138, %type.TypeListEntry** %tltail
	store i8 0, i8* %no
	br label %L.32
L.32:
	%139 = load i8* %no
	%140 = zext i8 %139 to i16
	%141 = load i16* %nout
	%142 = icmp ult i16 %140, %141
	%143 = xor i1 %142, true
	br i1 %143, label %L.33, label %L.34
L.34:
	%144 = call [0 x i8]* @sys_zalloc(i32 8)
	%145 = bitcast [0 x i8]* %144 to %type.TypeListEntry*
	%146 = bitcast %type.TypeListEntry* %145 to %type.TypeListEntry*
	store %type.TypeListEntry* %146, %type.TypeListEntry** %tl
	%147 = load i8* %no
	%148 = zext i8 %147 to i32
	%149 = getelementptr [10 x %ast.AstNode*]* %outputs, i32 0, i32 %148
	%150 = load %ast.AstNode** %149
	%151 = getelementptr %ast.AstNode* %150, i32 0, i32 11
	%152 = load %type.TypeNode** %151
	%153 = bitcast %type.TypeNode* %152 to %type.TypeNode*
	%154 = load %type.TypeListEntry** %tl
	%155 = getelementptr %type.TypeListEntry* %154, i32 0, i32 1
	store %type.TypeNode* %153, %type.TypeNode** %155
	%156 = load %type.TypeListEntry** %tltail
	%157 = icmp eq %type.TypeListEntry* %156, null
	br i1 %157, label %L.36, label %L.37
L.36:
	%158 = load %type.TypeListEntry** %tl
	%159 = bitcast %type.TypeListEntry* %158 to %type.TypeListEntry*
	store %type.TypeListEntry* %159, %type.TypeListEntry** %tlhead
	br label %L.35
L.37:
	%160 = load %type.TypeListEntry** %tl
	%161 = bitcast %type.TypeListEntry* %160 to %type.TypeListEntry*
	%162 = load %type.TypeListEntry** %tltail
	%163 = getelementptr %type.TypeListEntry* %162, i32 0, i32 0
	store %type.TypeListEntry* %161, %type.TypeListEntry** %163
	br label %L.35
L.35:
	%164 = load %type.TypeListEntry** %tl
	%165 = bitcast %type.TypeListEntry* %164 to %type.TypeListEntry*
	store %type.TypeListEntry* %165, %type.TypeListEntry** %tltail
	%166 = load i8* %no
	%167 = add i8 %166, 1
	store i8 %167, i8* %no
	br label %L.32
L.33:
	%168 = load %type.TypeListEntry** %tlhead
	%169 = bitcast %type.TypeListEntry* %168 to %type.TypeNode*
	%170 = bitcast %type.TypeNode* %169 to %type.TypeNode*
	%171 = load %ast.AstNode** %tree
	%172 = getelementptr %ast.AstNode* %171, i32 0, i32 11
	store %type.TypeNode* %170, %type.TypeNode** %172
	%173 = load i16* %nout
	%174 = icmp ugt i16 %173, 0
	br i1 %174, label %L.39, label %L.38
L.39:
	%175 = load %ast.AstNode** %tree
	%176 = bitcast %ast.AstNode* %175 to %ast.AstNode*
	store %ast.AstNode* %176, %ast.AstNode** %node
	%177 = bitcast %type.TypeNode* null to %type.TypeNode*
	%178 = call %ast.AstNode* @ast_New(i8 26, %type.TypeNode* %177)
	%179 = bitcast %ast.AstNode* %178 to %ast.AstNode*
	store %ast.AstNode* %179, %ast.AstNode** %tree
	store i8 0, i8* %no
	br label %L.40
L.40:
	%180 = load i8* %no
	%181 = zext i8 %180 to i16
	%182 = load i16* %nout
	%183 = icmp ult i16 %181, %182
	%184 = xor i1 %183, true
	br i1 %184, label %L.41, label %L.42
L.42:
	%185 = load %ast.AstNode** %tree
	%186 = bitcast %ast.AstNode* %185 to %ast.AstNode*
	%187 = load i8* %no
	%188 = zext i8 %187 to i32
	%189 = getelementptr [10 x %ast.AstNode*]* %outputs, i32 0, i32 %188
	%190 = load %ast.AstNode** %189
	%191 = bitcast %ast.AstNode* %190 to %ast.AstNode*
	%192 = call %ast.AstNode* @ast_Child(%ast.AstNode* %186, %ast.AstNode* %191)
	%193 = bitcast %ast.AstNode* %192 to %ast.AstNode*
	store %ast.AstNode* %193, %ast.AstNode** %tree
	%194 = load i8* %no
	%195 = add i8 %194, 1
	store i8 %195, i8* %no
	br label %L.40
L.41:
	%196 = load i16* %nout
	%197 = icmp ugt i16 %196, 1
	br i1 %197, label %L.44, label %L.45
L.44:
	store i8 0, i8* %no
	br label %L.46
L.46:
	%198 = load i8* %no
	%199 = zext i8 %198 to i16
	%200 = load i16* %nout
	%201 = icmp ult i16 %199, %200
	%202 = xor i1 %201, true
	br i1 %202, label %L.47, label %L.48
L.48:
	%203 = load i8* %no
	%204 = zext i8 %203 to i32
	%205 = getelementptr [10 x %ast.AstNode*]* %outputs, i32 0, i32 %204
	%206 = load %ast.AstNode** %205
	%207 = getelementptr %ast.AstNode* %206, i32 0, i32 11
	%208 = load %type.TypeNode** %207
	%209 = bitcast %type.TypeNode* %208 to %type.TypeNode*
	%210 = load %ast.AstNode** %node
	%211 = bitcast %ast.AstNode* %210 to %ast.AstNode*
	%212 = call %ast.AstNode* @ast_New1(i8 24, %type.TypeNode* %209, %ast.AstNode* %211)
	%213 = bitcast %ast.AstNode* %212 to %ast.AstNode*
	store %ast.AstNode* %213, %ast.AstNode** %temp
	%214 = load %ast.AstNode** %temp
	%215 = getelementptr %ast.AstNode* %214, i32 0, i32 11
	%216 = load %type.TypeNode** %215
	%217 = getelementptr %type.TypeNode* %216, i32 0, i32 13
	%218 = load i8* %217
	%219 = load %ast.AstNode** %temp
	%220 = getelementptr %ast.AstNode* %219, i32 0, i32 1
	store i8 %218, i8* %220
	%221 = load %ast.AstNode** %temp
	%222 = getelementptr %ast.AstNode* %221, i32 0, i32 11
	%223 = load %type.TypeNode** %222
	%224 = getelementptr %type.TypeNode* %223, i32 0, i32 9
	%225 = load i32* %224
	%226 = load %ast.AstNode** %temp
	%227 = getelementptr %ast.AstNode* %226, i32 0, i32 6
	store i32 %225, i32* %227
	%228 = load i8* %no
	%229 = zext i8 %228 to i64
	%230 = load %ast.AstNode** %temp
	%231 = getelementptr %ast.AstNode* %230, i32 0, i32 10
	store i64 %229, i64* %231
	%232 = load %ast.AstNode** %tree
	%233 = bitcast %ast.AstNode* %232 to %ast.AstNode*
	%234 = load %ast.AstNode** %temp
	%235 = bitcast %ast.AstNode* %234 to %ast.AstNode*
	%236 = call %ast.AstNode* @ast_Child(%ast.AstNode* %233, %ast.AstNode* %235)
	%237 = bitcast %ast.AstNode* %236 to %ast.AstNode*
	store %ast.AstNode* %237, %ast.AstNode** %tree
	%238 = load i8* %no
	%239 = add i8 %238, 1
	store i8 %239, i8* %no
	br label %L.46
L.47:
	br label %L.43
L.45:
	%240 = getelementptr [10 x %ast.AstNode*]* %outputs, i32 0, i32 0
	%241 = load %ast.AstNode** %240
	%242 = getelementptr %ast.AstNode* %241, i32 0, i32 11
	%243 = load %type.TypeNode** %242
	%244 = bitcast %type.TypeNode* %243 to %type.TypeNode*
	%245 = load %ast.AstNode** %node
	%246 = bitcast %ast.AstNode* %245 to %ast.AstNode*
	%247 = call %ast.AstNode* @ast_New1(i8 1, %type.TypeNode* %244, %ast.AstNode* %246)
	%248 = bitcast %ast.AstNode* %247 to %ast.AstNode*
	store %ast.AstNode* %248, %ast.AstNode** %temp
	%249 = load %ast.AstNode** %temp
	%250 = getelementptr %ast.AstNode* %249, i32 0, i32 11
	%251 = load %type.TypeNode** %250
	%252 = getelementptr %type.TypeNode* %251, i32 0, i32 13
	%253 = load i8* %252
	%254 = load %ast.AstNode** %temp
	%255 = getelementptr %ast.AstNode* %254, i32 0, i32 1
	store i8 %253, i8* %255
	%256 = load %ast.AstNode** %temp
	%257 = getelementptr %ast.AstNode* %256, i32 0, i32 11
	%258 = load %type.TypeNode** %257
	%259 = getelementptr %type.TypeNode* %258, i32 0, i32 9
	%260 = load i32* %259
	%261 = load %ast.AstNode** %temp
	%262 = getelementptr %ast.AstNode* %261, i32 0, i32 6
	store i32 %260, i32* %262
	%263 = load %ast.AstNode** %tree
	%264 = bitcast %ast.AstNode* %263 to %ast.AstNode*
	%265 = load %ast.AstNode** %temp
	%266 = bitcast %ast.AstNode* %265 to %ast.AstNode*
	%267 = call %ast.AstNode* @ast_Child(%ast.AstNode* %264, %ast.AstNode* %266)
	%268 = bitcast %ast.AstNode* %267 to %ast.AstNode*
	store %ast.AstNode* %268, %ast.AstNode** %tree
	br label %L.43
L.43:
	br label %L.38
L.38:
	br label %L.4
L.4:
	br label %L.1
L.3:
	call void @lex_ErrorT(i8 14, i8 39)
	br label %L.1
L.1:
	%269 = load %ast.AstNode** %tree
	%270 = bitcast %ast.AstNode* %269 to %ast.AstNode*
	store %ast.AstNode* %270, %ast.AstNode** %rv.0
	br label %return
return:
	%271 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %271
}
define internal %ast.AstNode* @stmt_CheckSwap(%ast.AstNode* %lhs.arg, %ast.AstNode* %rhs.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%lhs = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	store %ast.AstNode* %lhs.arg, %ast.AstNode** %lhs
	store %ast.AstNode* %rhs.arg, %ast.AstNode** %rhs
	%0 = load %ast.AstNode** %lhs
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 11
	%2 = load %type.TypeNode** %1
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	%4 = load %target.TargetT** @target_Target
	%5 = getelementptr %target.TargetT* %4, i32 0, i32 2
	%6 = load i8* %5
	%7 = call i8 @type_NeedSwap(%type.TypeNode* %3, i8 %6)
	%8 = icmp ne i8 %7, 0
	br i1 %8, label %L.2, label %L.1
L.2:
	%9 = load %ast.AstNode** %rhs
	%10 = getelementptr %ast.AstNode* %9, i32 0, i32 11
	%11 = load %type.TypeNode** %10
	%12 = bitcast %type.TypeNode* %11 to %type.TypeNode*
	%13 = load %ast.AstNode** %rhs
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	%15 = call %ast.AstNode* @ast_New1(i8 30, %type.TypeNode* %12, %ast.AstNode* %14)
	%16 = bitcast %ast.AstNode* %15 to %ast.AstNode*
	store %ast.AstNode* %16, %ast.AstNode** %rhs
	br label %L.1
L.1:
	%17 = load %ast.AstNode** %rhs
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	store %ast.AstNode* %18, %ast.AstNode** %rv.0
	br label %return
return:
	%19 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %19
}
define internal %ast.AstNode* @stmt_AssignRecord(%ast.AstNode* %lhs.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%lhs = alloca %ast.AstNode*
	store %ast.AstNode* %lhs.arg, %ast.AstNode** %lhs
	%tree = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	%0 = load %ast.AstNode** %lhs
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 11
	%2 = load %type.TypeNode** %1
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	store %type.TypeNode* %3, %type.TypeNode** %t
	%4 = load %type.TypeNode** %t
	%5 = bitcast %type.TypeNode* %4 to %type.TypeNode*
	%6 = call %ast.AstNode* @expr_Term(%type.TypeNode* %5)
	%7 = bitcast %ast.AstNode* %6 to %ast.AstNode*
	store %ast.AstNode* %7, %ast.AstNode** %tree
	%8 = load %ast.AstNode** %tree
	%9 = icmp eq %ast.AstNode* %8, null
	br i1 %9, label %L.2, label %L.1
L.2:
	%10 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %10, %ast.AstNode** %rv.0
	br label %return
L.1:
	%11 = load %type.TypeNode** %t
	%12 = getelementptr %type.TypeNode* %11, i32 0, i32 14
	%13 = load i8* %12
	%14 = icmp eq i8 %13, 2
	br i1 %14, label %L.4, label %L.3
L.4:
	%15 = load %ast.AstNode** %tree
	%16 = getelementptr %ast.AstNode* %15, i32 0, i32 1
	store i8 2, i8* %16
	%17 = load %ast.AstNode** %lhs
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	%19 = load %ast.AstNode** %tree
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	%21 = call %ast.AstNode* @stmt_CheckSwap(%ast.AstNode* %18, %ast.AstNode* %20)
	%22 = bitcast %ast.AstNode* %21 to %ast.AstNode*
	store %ast.AstNode* %22, %ast.AstNode** %tree
	br label %L.3
L.3:
	%23 = bitcast %type.TypeNode* null to %type.TypeNode*
	%24 = load %ast.AstNode** %lhs
	%25 = bitcast %ast.AstNode* %24 to %ast.AstNode*
	%26 = load %ast.AstNode** %tree
	%27 = bitcast %ast.AstNode* %26 to %ast.AstNode*
	%28 = call %ast.AstNode* @ast_New2(i8 26, %type.TypeNode* %23, %ast.AstNode* %25, %ast.AstNode* %27)
	%29 = bitcast %ast.AstNode* %28 to %ast.AstNode*
	store %ast.AstNode* %29, %ast.AstNode** %tree
	%30 = load %ast.AstNode** %tree
	%31 = bitcast %ast.AstNode* %30 to %ast.AstNode*
	store %ast.AstNode* %31, %ast.AstNode** %rv.0
	br label %return
return:
	%32 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %32
}
define internal %ast.AstNode* @stmt_ArrayFix(%ast.AstNode* %tree.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	%0 = load %ast.AstNode** %tree
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 0
	%2 = load i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 9, label %L.3
		i32 14, label %L.4
	]
L.3:
	%4 = load %ast.AstNode** %tree
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 11
	%6 = load %type.TypeNode** %5
	%7 = bitcast %type.TypeNode* %6 to %type.TypeNode*
	%8 = load %ast.AstNode** %tree
	%9 = bitcast %ast.AstNode* %8 to %ast.AstNode*
	%10 = call %ast.AstNode* @ast_New1(i8 19, %type.TypeNode* %7, %ast.AstNode* %9)
	%11 = bitcast %ast.AstNode* %10 to %ast.AstNode*
	store %ast.AstNode* %11, %ast.AstNode** %tree
	br label %L.2
L.4:
	%12 = load %ast.AstNode** %tree
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 1
	store i8 4, i8* %13
	br label %L.2
L.1:
	br label %L.2
L.2:
	%14 = load %ast.AstNode** %tree
	%15 = getelementptr %ast.AstNode* %14, i32 0, i32 11
	%16 = load %type.TypeNode** %15
	%17 = getelementptr %type.TypeNode* %16, i32 0, i32 0
	%18 = load %type.TypeNode** %17
	%19 = load %type.TypeNode** @type_bytetype
	%20 = icmp ne %type.TypeNode* %18, %19
	br i1 %20, label %L.6, label %L.5
L.5:
	%21 = load %ast.AstNode** %tree
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 11
	%23 = load %type.TypeNode** %22
	%24 = getelementptr %type.TypeNode* %23, i32 0, i32 18
	%25 = load i8* %24
	%26 = icmp ne i8 %25, 0
	%27 = xor i1 %26, true
	br label %L.6
L.6:
	%28 = phi i1 [ true, %L.2 ], [ %27, %L.5 ]
	br i1 %28, label %L.8, label %L.7
L.8:
	%29 = load %type.TypeNode** @type_memtype
	%30 = bitcast %type.TypeNode* %29 to %type.TypeNode*
	%31 = load %ast.AstNode** %tree
	%32 = bitcast %ast.AstNode* %31 to %ast.AstNode*
	%33 = call %ast.AstNode* @ast_New1(i8 15, %type.TypeNode* %30, %ast.AstNode* %32)
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	store %ast.AstNode* %34, %ast.AstNode** %tree
	br label %L.7
L.7:
	%35 = load %ast.AstNode** %tree
	%36 = bitcast %ast.AstNode* %35 to %ast.AstNode*
	store %ast.AstNode* %36, %ast.AstNode** %rv.0
	br label %return
return:
	%37 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %37
}
@S.567 = internal constant [20 x i8] c"packed array slices\00"define internal %ast.AstNode* @stmt_AssignArray(%ast.AstNode* %lhs.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%lhs = alloca %ast.AstNode*
	store %ast.AstNode* %lhs.arg, %ast.AstNode** %lhs
	%tree = alloca %ast.AstNode*
	%lsize = alloca %ast.AstNode*
	%rsize = alloca %ast.AstNode*
	%align = alloca %ast.AstNode*
	%lalign = alloca i32
	%ralign = alloca i32
	%t = alloca %type.TypeNode*
	%0 = load %ast.AstNode** %lhs
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 11
	%2 = load %type.TypeNode** %1
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	store %type.TypeNode* %3, %type.TypeNode** %t
	%4 = load %type.TypeNode** %t
	%5 = bitcast %type.TypeNode* %4 to %type.TypeNode*
	%6 = call %ast.AstNode* @expr_Term(%type.TypeNode* %5)
	%7 = bitcast %ast.AstNode* %6 to %ast.AstNode*
	store %ast.AstNode* %7, %ast.AstNode** %tree
	%8 = load %ast.AstNode** %tree
	%9 = icmp eq %ast.AstNode* %8, null
	br i1 %9, label %L.2, label %L.1
L.2:
	%10 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %10, %ast.AstNode** %rv.0
	br label %return
L.1:
	%11 = load %type.TypeNode** %t
	%12 = getelementptr %type.TypeNode* %11, i32 0, i32 14
	%13 = load i8* %12
	%14 = icmp eq i8 %13, 2
	br i1 %14, label %L.4, label %L.5
L.4:
	%15 = load %ast.AstNode** %tree
	%16 = getelementptr %ast.AstNode* %15, i32 0, i32 1
	store i8 2, i8* %16
	%17 = load %ast.AstNode** %lhs
	%18 = getelementptr %ast.AstNode* %17, i32 0, i32 0
	%19 = load i8* %18
	%20 = icmp eq i8 %19, 18
	br i1 %20, label %L.7, label %L.6
L.7:
	%21 = getelementptr [20 x i8]* @S.567
	%22 = bitcast [20 x i8]* %21 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %22)
	br label %L.6
L.6:
	%23 = load %ast.AstNode** %lhs
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	%25 = load %ast.AstNode** %tree
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	%27 = call %ast.AstNode* @stmt_CheckSwap(%ast.AstNode* %24, %ast.AstNode* %26)
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	store %ast.AstNode* %28, %ast.AstNode** %tree
	%29 = bitcast %type.TypeNode* null to %type.TypeNode*
	%30 = load %ast.AstNode** %lhs
	%31 = bitcast %ast.AstNode* %30 to %ast.AstNode*
	%32 = load %ast.AstNode** %tree
	%33 = bitcast %ast.AstNode* %32 to %ast.AstNode*
	%34 = call %ast.AstNode* @ast_New2(i8 26, %type.TypeNode* %29, %ast.AstNode* %31, %ast.AstNode* %33)
	%35 = bitcast %ast.AstNode* %34 to %ast.AstNode*
	store %ast.AstNode* %35, %ast.AstNode** %tree
	br label %L.3
L.5:
	%36 = load %ast.AstNode** %lhs
	%37 = bitcast %ast.AstNode* %36 to %ast.AstNode*
	%38 = call i32 @expr_GetAlignment(%ast.AstNode* %37)
	store i32 %38, i32* %lalign
	%39 = load %ast.AstNode** %lhs
	%40 = getelementptr %ast.AstNode* %39, i32 0, i32 0
	%41 = load i8* %40
	%42 = icmp eq i8 %41, 18
	br i1 %42, label %L.9, label %L.10
L.9:
	%43 = load %ast.AstNode** %lhs
	%44 = getelementptr %ast.AstNode* %43, i32 0, i32 13
	%45 = getelementptr [0 x %ast.AstNode*]* %44, i32 0, i32 2
	%46 = load %ast.AstNode** %45
	%47 = bitcast %ast.AstNode* %46 to %ast.AstNode*
	store %ast.AstNode* %47, %ast.AstNode** %lsize
	br label %L.8
L.10:
	%48 = load %type.TypeNode** @type_wordtype
	%49 = bitcast %type.TypeNode* %48 to %type.TypeNode*
	%50 = load %ast.AstNode** %lhs
	%51 = getelementptr %ast.AstNode* %50, i32 0, i32 11
	%52 = load %type.TypeNode** %51
	%53 = getelementptr %type.TypeNode* %52, i32 0, i32 7
	%54 = load i64* %53
	%55 = call %ast.AstNode* @ast_Const(%type.TypeNode* %49, i64 %54)
	%56 = bitcast %ast.AstNode* %55 to %ast.AstNode*
	store %ast.AstNode* %56, %ast.AstNode** %lsize
	br label %L.8
L.8:
	%57 = load %ast.AstNode** %tree
	%58 = getelementptr %ast.AstNode* %57, i32 0, i32 0
	%59 = load i8* %58
	%60 = icmp eq i8 %59, 25
	br i1 %60, label %L.11, label %L.12
L.11:
	%61 = load %ast.AstNode** %tree
	%62 = getelementptr %ast.AstNode* %61, i32 0, i32 1
	%63 = load i8* %62
	%64 = icmp eq i8 %63, 5
	br label %L.12
L.12:
	%65 = phi i1 [ false, %L.8 ], [ %64, %L.11 ]
	br i1 %65, label %L.14, label %L.13
L.14:
	%66 = load %ast.AstNode** %tree
	%67 = getelementptr %ast.AstNode* %66, i32 0, i32 13
	%68 = getelementptr [0 x %ast.AstNode*]* %67, i32 0, i32 0
	%69 = load %ast.AstNode** %68
	%70 = bitcast %ast.AstNode* %69 to %ast.AstNode*
	store %ast.AstNode* %70, %ast.AstNode** %tree
	br label %L.13
L.13:
	%71 = load %ast.AstNode** %tree
	%72 = bitcast %ast.AstNode* %71 to %ast.AstNode*
	%73 = call i32 @expr_GetAlignment(%ast.AstNode* %72)
	store i32 %73, i32* %ralign
	%74 = load i32* %ralign
	%75 = load i32* %lalign
	%76 = icmp ult i32 %74, %75
	br i1 %76, label %L.16, label %L.15
L.16:
	%77 = load i32* %ralign
	store i32 %77, i32* %lalign
	br label %L.15
L.15:
	%78 = load %ast.AstNode** %tree
	%79 = getelementptr %ast.AstNode* %78, i32 0, i32 0
	%80 = load i8* %79
	%81 = icmp eq i8 %80, 18
	br i1 %81, label %L.18, label %L.19
L.18:
	%82 = load %ast.AstNode** %tree
	%83 = getelementptr %ast.AstNode* %82, i32 0, i32 13
	%84 = getelementptr [0 x %ast.AstNode*]* %83, i32 0, i32 2
	%85 = load %ast.AstNode** %84
	%86 = bitcast %ast.AstNode* %85 to %ast.AstNode*
	store %ast.AstNode* %86, %ast.AstNode** %rsize
	br label %L.17
L.19:
	%87 = load %type.TypeNode** @type_wordtype
	%88 = bitcast %type.TypeNode* %87 to %type.TypeNode*
	%89 = load %ast.AstNode** %tree
	%90 = getelementptr %ast.AstNode* %89, i32 0, i32 11
	%91 = load %type.TypeNode** %90
	%92 = getelementptr %type.TypeNode* %91, i32 0, i32 7
	%93 = load i64* %92
	%94 = call %ast.AstNode* @ast_Const(%type.TypeNode* %88, i64 %93)
	%95 = bitcast %ast.AstNode* %94 to %ast.AstNode*
	store %ast.AstNode* %95, %ast.AstNode** %rsize
	br label %L.17
L.17:
	%96 = load %ast.AstNode** %lsize
	%97 = getelementptr %ast.AstNode* %96, i32 0, i32 0
	%98 = load i8* %97
	%99 = icmp eq i8 %98, 7
	br i1 %99, label %L.20, label %L.21
L.20:
	%100 = load %ast.AstNode** %lsize
	%101 = getelementptr %ast.AstNode* %100, i32 0, i32 10
	%102 = load i64* %101
	%103 = icmp eq i64 %102, 0
	br label %L.21
L.21:
	%104 = phi i1 [ false, %L.17 ], [ %103, %L.20 ]
	br i1 %104, label %L.23, label %L.24
L.23:
	%105 = load %ast.AstNode** %rsize
	%106 = getelementptr %ast.AstNode* %105, i32 0, i32 0
	%107 = load i8* %106
	%108 = icmp eq i8 %107, 7
	br i1 %108, label %L.25, label %L.26
L.25:
	%109 = load %ast.AstNode** %rsize
	%110 = getelementptr %ast.AstNode* %109, i32 0, i32 10
	%111 = load i64* %110
	%112 = icmp eq i64 %111, 0
	br label %L.26
L.26:
	%113 = phi i1 [ false, %L.23 ], [ %112, %L.25 ]
	br i1 %113, label %L.28, label %L.29
L.28:
	call void @lex_Error(i8 58)
	br label %L.27
L.29:
	%114 = load %ast.AstNode** %rsize
	%115 = bitcast %ast.AstNode* %114 to %ast.AstNode*
	store %ast.AstNode* %115, %ast.AstNode** %lsize
	br label %L.27
L.27:
	br label %L.22
L.24:
	%116 = load %ast.AstNode** %rsize
	%117 = getelementptr %ast.AstNode* %116, i32 0, i32 0
	%118 = load i8* %117
	%119 = icmp ne i8 %118, 7
	br i1 %119, label %L.31, label %L.30
L.30:
	%120 = load %ast.AstNode** %rsize
	%121 = getelementptr %ast.AstNode* %120, i32 0, i32 10
	%122 = load i64* %121
	%123 = icmp ne i64 %122, 0
	br label %L.31
L.31:
	%124 = phi i1 [ true, %L.24 ], [ %123, %L.30 ]
	br i1 %124, label %L.33, label %L.32
L.33:
	%125 = load %ast.AstNode** %lsize
	%126 = bitcast %ast.AstNode* %125 to %ast.AstNode*
	%127 = load %ast.AstNode** %rsize
	%128 = bitcast %ast.AstNode* %127 to %ast.AstNode*
	%129 = call %ast.AstNode* @expr_BinOp(i8 49, %ast.AstNode* %126, %ast.AstNode* %128)
	%130 = bitcast %ast.AstNode* %129 to %ast.AstNode*
	store %ast.AstNode* %130, %ast.AstNode** %lsize
	br label %L.32
L.32:
	br label %L.22
L.22:
	%131 = load %ast.AstNode** %lhs
	%132 = bitcast %ast.AstNode* %131 to %ast.AstNode*
	%133 = call %ast.AstNode* @stmt_ArrayFix(%ast.AstNode* %132)
	%134 = bitcast %ast.AstNode* %133 to %ast.AstNode*
	store %ast.AstNode* %134, %ast.AstNode** %lhs
	%135 = load %ast.AstNode** %tree
	%136 = bitcast %ast.AstNode* %135 to %ast.AstNode*
	%137 = call %ast.AstNode* @stmt_ArrayFix(%ast.AstNode* %136)
	%138 = bitcast %ast.AstNode* %137 to %ast.AstNode*
	store %ast.AstNode* %138, %ast.AstNode** %tree
	%139 = load %ast.AstNode** %lhs
	%140 = getelementptr %ast.AstNode* %139, i32 0, i32 11
	%141 = load %type.TypeNode** %140
	%142 = bitcast %type.TypeNode* %141 to %type.TypeNode*
	%143 = load %ast.AstNode** %lhs
	%144 = bitcast %ast.AstNode* %143 to %ast.AstNode*
	%145 = load %ast.AstNode** %tree
	%146 = bitcast %ast.AstNode* %145 to %ast.AstNode*
	%147 = call %ast.AstNode* @ast_New2(i8 20, %type.TypeNode* %142, %ast.AstNode* %144, %ast.AstNode* %146)
	%148 = bitcast %ast.AstNode* %147 to %ast.AstNode*
	store %ast.AstNode* %148, %ast.AstNode** %tree
	%149 = load %ast.AstNode** %tree
	%150 = bitcast %ast.AstNode* %149 to %ast.AstNode*
	%151 = load %ast.AstNode** %lsize
	%152 = bitcast %ast.AstNode* %151 to %ast.AstNode*
	%153 = call %ast.AstNode* @ast_Child(%ast.AstNode* %150, %ast.AstNode* %152)
	%154 = bitcast %ast.AstNode* %153 to %ast.AstNode*
	store %ast.AstNode* %154, %ast.AstNode** %tree
	%155 = load %type.TypeNode** @type_wordtype
	%156 = bitcast %type.TypeNode* %155 to %type.TypeNode*
	%157 = load i32* %lalign
	%158 = zext i32 %157 to i64
	%159 = call %ast.AstNode* @ast_Const(%type.TypeNode* %156, i64 %158)
	%160 = bitcast %ast.AstNode* %159 to %ast.AstNode*
	store %ast.AstNode* %160, %ast.AstNode** %align
	%161 = load %ast.AstNode** %tree
	%162 = bitcast %ast.AstNode* %161 to %ast.AstNode*
	%163 = load %ast.AstNode** %align
	%164 = bitcast %ast.AstNode* %163 to %ast.AstNode*
	%165 = call %ast.AstNode* @ast_Child(%ast.AstNode* %162, %ast.AstNode* %164)
	%166 = bitcast %ast.AstNode* %165 to %ast.AstNode*
	store %ast.AstNode* %166, %ast.AstNode** %tree
	br label %L.3
L.3:
	%167 = load %ast.AstNode** %tree
	%168 = bitcast %ast.AstNode* %167 to %ast.AstNode*
	store %ast.AstNode* %168, %ast.AstNode** %rv.0
	br label %return
return:
	%169 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %169
}
@S.568 = internal constant [34 x i8] c"Ref alignment or endian mismatch\0A\00"define internal %ast.AstNode* @stmt_AdjustRHS(%ast.AstNode* %lhs.arg, %ast.AstNode* %tree.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%lhs = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	store %ast.AstNode* %lhs.arg, %ast.AstNode** %lhs
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	%to = alloca %type.TypeNode*
	%fm = alloca %type.TypeNode*
	%bt = alloca %type.TypeNode*
	%ok = alloca i8
	%0 = load %ast.AstNode** %lhs
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 11
	%2 = load %type.TypeNode** %1
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	store %type.TypeNode* %3, %type.TypeNode** %to
	%4 = load %ast.AstNode** %tree
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 11
	%6 = load %type.TypeNode** %5
	%7 = bitcast %type.TypeNode* %6 to %type.TypeNode*
	store %type.TypeNode* %7, %type.TypeNode** %fm
	store i8 1, i8* %ok
	%8 = load %type.TypeNode** %to
	%9 = getelementptr %type.TypeNode* %8, i32 0, i32 13
	%10 = load i8* %9
	%11 = zext i8 %10 to i32
	switch i32 %11, label %L.1 [
		i32 4, label %L.3
		i32 7, label %L.4
		i32 1, label %L.5
		i32 2, label %L.6
		i32 3, label %L.7
	]
L.3:
	%12 = load %type.TypeNode** %to
	%13 = getelementptr %type.TypeNode* %12, i32 0, i32 0
	%14 = load %type.TypeNode** %13
	%15 = bitcast %type.TypeNode* %14 to %type.TypeNode*
	store %type.TypeNode* %15, %type.TypeNode** %bt
	%16 = load %type.TypeNode** %bt
	%17 = icmp eq %type.TypeNode* %16, null
	br i1 %17, label %L.9, label %L.8
L.9:
	call void @lex_Error(i8 20)
	%18 = load %ast.AstNode** %tree
	%19 = bitcast %ast.AstNode* %18 to %ast.AstNode*
	store %ast.AstNode* %19, %ast.AstNode** %rv.0
	br label %return
L.8:
	%20 = load %ast.AstNode** %tree
	%21 = getelementptr %ast.AstNode* %20, i32 0, i32 1
	%22 = load i8* %21
	%23 = icmp eq i8 %22, 4
	br i1 %23, label %L.10, label %L.11
L.10:
	%24 = load %type.TypeNode** %bt
	%25 = bitcast %type.TypeNode* %24 to %type.TypeNode*
	%26 = load %type.TypeNode** %fm
	%27 = bitcast %type.TypeNode* %26 to %type.TypeNode*
	%28 = call i8 @type_Compat(%type.TypeNode* %25, %type.TypeNode* %27)
	%29 = icmp ne i8 %28, 0
	br label %L.11
L.11:
	%30 = phi i1 [ false, %L.8 ], [ %29, %L.10 ]
	br i1 %30, label %L.13, label %L.14
L.13:
	%31 = load %type.TypeNode** %bt
	%32 = load %type.TypeNode** %to
	%33 = icmp ne %type.TypeNode* %31, %32
	br i1 %33, label %L.16, label %L.15
L.16:
	%34 = load %ast.AstNode** %tree
	%35 = bitcast %ast.AstNode* %34 to %ast.AstNode*
	%36 = load %type.TypeNode** %to
	%37 = bitcast %type.TypeNode* %36 to %type.TypeNode*
	%38 = call %ast.AstNode* @expr_Cast(%ast.AstNode* %35, %type.TypeNode* %37)
	%39 = bitcast %ast.AstNode* %38 to %ast.AstNode*
	store %ast.AstNode* %39, %ast.AstNode** %tree
	br label %L.15
L.15:
	br label %L.12
L.14:
	%40 = load %ast.AstNode** %tree
	%41 = bitcast %ast.AstNode* %40 to %ast.AstNode*
	%42 = call %ast.AstNode* @expr_CoerceToRef(%ast.AstNode* %41)
	%43 = bitcast %ast.AstNode* %42 to %ast.AstNode*
	store %ast.AstNode* %43, %ast.AstNode** %tree
	%44 = load %ast.AstNode** %tree
	%45 = getelementptr %ast.AstNode* %44, i32 0, i32 11
	%46 = load %type.TypeNode** %45
	%47 = bitcast %type.TypeNode* %46 to %type.TypeNode*
	store %type.TypeNode* %47, %type.TypeNode** %fm
	%48 = load %type.TypeNode** %bt
	%49 = bitcast %type.TypeNode* %48 to %type.TypeNode*
	%50 = load %type.TypeNode** %fm
	%51 = bitcast %type.TypeNode* %50 to %type.TypeNode*
	%52 = call i8 @type_Compat(%type.TypeNode* %49, %type.TypeNode* %51)
	%53 = icmp ne i8 %52, 0
	br i1 %53, label %L.18, label %L.19
L.18:
	%54 = load %type.TypeNode** %bt
	%55 = load %type.TypeNode** %to
	%56 = icmp ne %type.TypeNode* %54, %55
	br i1 %56, label %L.21, label %L.20
L.21:
	%57 = load %ast.AstNode** %tree
	%58 = bitcast %ast.AstNode* %57 to %ast.AstNode*
	%59 = load %type.TypeNode** %to
	%60 = bitcast %type.TypeNode* %59 to %type.TypeNode*
	%61 = call %ast.AstNode* @expr_Cast(%ast.AstNode* %58, %type.TypeNode* %60)
	%62 = bitcast %ast.AstNode* %61 to %ast.AstNode*
	store %ast.AstNode* %62, %ast.AstNode** %tree
	br label %L.20
L.20:
	br label %L.17
L.19:
	store i8 0, i8* %ok
	br label %L.17
L.17:
	br label %L.12
L.12:
	%63 = load %type.TypeNode** %bt
	%64 = getelementptr %type.TypeNode* %63, i32 0, i32 18
	%65 = load i8* %64
	%66 = icmp ne i8 %65, 0
	br i1 %66, label %L.22, label %L.23
L.22:
	%67 = load %ast.AstNode** %tree
	%68 = getelementptr %ast.AstNode* %67, i32 0, i32 11
	%69 = load %type.TypeNode** %68
	%70 = getelementptr %type.TypeNode* %69, i32 0, i32 18
	%71 = load i8* %70
	%72 = icmp ne i8 %71, 0
	%73 = xor i1 %72, true
	br label %L.23
L.23:
	%74 = phi i1 [ false, %L.12 ], [ %73, %L.22 ]
	br i1 %74, label %L.25, label %L.24
L.25:
	%75 = load %type.TypeNode** %bt
	%76 = bitcast %type.TypeNode* %75 to %type.TypeNode*
	%77 = load %ast.AstNode** %tree
	%78 = bitcast %ast.AstNode* %77 to %ast.AstNode*
	%79 = call %ast.AstNode* @ast_New1(i8 15, %type.TypeNode* %76, %ast.AstNode* %78)
	%80 = bitcast %ast.AstNode* %79 to %ast.AstNode*
	store %ast.AstNode* %80, %ast.AstNode** %tree
	br label %L.24
L.24:
	%81 = load %type.TypeNode** %bt
	%82 = bitcast %type.TypeNode* %81 to %type.TypeNode*
	%83 = load %type.TypeNode** %fm
	%84 = bitcast %type.TypeNode* %83 to %type.TypeNode*
	%85 = call i8 @expr_CheckRefAttributes(%type.TypeNode* %82, %type.TypeNode* %84)
	%86 = icmp ne i8 %85, 0
	%87 = xor i1 %86, true
	br i1 %87, label %L.27, label %L.26
L.27:
	%88 = getelementptr [34 x i8]* @S.568
	%89 = bitcast [34 x i8]* %88 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %89)
	br label %L.26
L.26:
	br label %L.2
L.4:
	%90 = load %type.TypeNode** %to
	%91 = bitcast %type.TypeNode* %90 to %type.TypeNode*
	%92 = load %type.TypeNode** %fm
	%93 = bitcast %type.TypeNode* %92 to %type.TypeNode*
	%94 = call i8 @type_Compat(%type.TypeNode* %91, %type.TypeNode* %93)
	store i8 %94, i8* %ok
	br label %L.2
L.5:
	%95 = load %type.TypeNode** %fm
	%96 = bitcast %type.TypeNode* %95 to %type.TypeNode*
	%97 = load %type.TypeNode** %to
	%98 = bitcast %type.TypeNode* %97 to %type.TypeNode*
	%99 = call i8 @type_Compat(%type.TypeNode* %96, %type.TypeNode* %98)
	store i8 %99, i8* %ok
	%100 = load i8* %ok
	%101 = icmp ne i8 %100, 0
	%102 = xor i1 %101, true
	br i1 %102, label %L.28, label %L.29
L.28:
	%103 = load %type.TypeNode** %fm
	%104 = getelementptr %type.TypeNode* %103, i32 0, i32 13
	%105 = load i8* %104
	%106 = icmp eq i8 %105, 2
	br label %L.29
L.29:
	%107 = phi i1 [ false, %L.5 ], [ %106, %L.28 ]
	br i1 %107, label %L.31, label %L.30
L.31:
	store i8 1, i8* %ok
	br label %L.30
L.30:
	%108 = load %ast.AstNode** %lhs
	%109 = getelementptr %ast.AstNode* %108, i32 0, i32 6
	%110 = load i32* %109
	%111 = load %ast.AstNode** %tree
	%112 = getelementptr %ast.AstNode* %111, i32 0, i32 6
	%113 = load i32* %112
	%114 = icmp ne i32 %110, %113
	br i1 %114, label %L.33, label %L.32
L.33:
	%115 = load %ast.AstNode** %tree
	%116 = bitcast %ast.AstNode* %115 to %ast.AstNode*
	%117 = load %type.TypeNode** %to
	%118 = bitcast %type.TypeNode* %117 to %type.TypeNode*
	%119 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %116, %type.TypeNode* %118)
	%120 = bitcast %ast.AstNode* %119 to %ast.AstNode*
	store %ast.AstNode* %120, %ast.AstNode** %tree
	br label %L.32
L.32:
	br label %L.2
L.6:
	%121 = load %type.TypeNode** %fm
	%122 = bitcast %type.TypeNode* %121 to %type.TypeNode*
	%123 = load %type.TypeNode** %to
	%124 = bitcast %type.TypeNode* %123 to %type.TypeNode*
	%125 = call i8 @type_Compat(%type.TypeNode* %122, %type.TypeNode* %124)
	store i8 %125, i8* %ok
	%126 = load i8* %ok
	%127 = icmp ne i8 %126, 0
	%128 = xor i1 %127, true
	br i1 %128, label %L.35, label %L.34
L.35:
	%129 = load %type.TypeNode** %fm
	%130 = getelementptr %type.TypeNode* %129, i32 0, i32 13
	%131 = load i8* %130
	%132 = zext i8 %131 to i32
	switch i32 %132, label %L.36 [
		i32 1, label %L.38
		i32 3, label %L.39
	]
L.38:
	store i8 1, i8* %ok
	br label %L.37
L.39:
	%133 = getelementptr %A.3* @feature, i32 0, i32 4
	%134 = load i8* %133
	%135 = icmp ne i8 %134, 0
	br i1 %135, label %L.41, label %L.40
L.41:
	call void @lex_Error(i8 4)
	br label %L.40
L.40:
	store i8 1, i8* %ok
	br label %L.37
L.36:
	br label %L.37
L.37:
	br label %L.34
L.34:
	%136 = load %ast.AstNode** %lhs
	%137 = getelementptr %ast.AstNode* %136, i32 0, i32 6
	%138 = load i32* %137
	%139 = load %ast.AstNode** %tree
	%140 = getelementptr %ast.AstNode* %139, i32 0, i32 6
	%141 = load i32* %140
	%142 = icmp ne i32 %138, %141
	br i1 %142, label %L.43, label %L.42
L.43:
	%143 = load %ast.AstNode** %tree
	%144 = bitcast %ast.AstNode* %143 to %ast.AstNode*
	%145 = load %type.TypeNode** %to
	%146 = bitcast %type.TypeNode* %145 to %type.TypeNode*
	%147 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %144, %type.TypeNode* %146)
	%148 = bitcast %ast.AstNode* %147 to %ast.AstNode*
	store %ast.AstNode* %148, %ast.AstNode** %tree
	br label %L.42
L.42:
	br label %L.2
L.7:
	%149 = load %type.TypeNode** %fm
	%150 = bitcast %type.TypeNode* %149 to %type.TypeNode*
	%151 = load %type.TypeNode** %to
	%152 = bitcast %type.TypeNode* %151 to %type.TypeNode*
	%153 = call i8 @type_Compat(%type.TypeNode* %150, %type.TypeNode* %152)
	store i8 %153, i8* %ok
	%154 = load i8* %ok
	%155 = icmp ne i8 %154, 0
	%156 = xor i1 %155, true
	br i1 %156, label %L.44, label %L.45
L.44:
	%157 = load %type.TypeNode** %fm
	%158 = getelementptr %type.TypeNode* %157, i32 0, i32 13
	%159 = load i8* %158
	%160 = icmp eq i8 %159, 2
	br label %L.45
L.45:
	%161 = phi i1 [ false, %L.7 ], [ %160, %L.44 ]
	br i1 %161, label %L.47, label %L.46
L.47:
	%162 = getelementptr %A.3* @feature, i32 0, i32 4
	%163 = load i8* %162
	%164 = icmp ne i8 %163, 0
	br i1 %164, label %L.49, label %L.48
L.49:
	call void @lex_Error(i8 3)
	br label %L.48
L.48:
	store i8 1, i8* %ok
	br label %L.46
L.46:
	%165 = load %ast.AstNode** %lhs
	%166 = getelementptr %ast.AstNode* %165, i32 0, i32 6
	%167 = load i32* %166
	%168 = load %ast.AstNode** %tree
	%169 = getelementptr %ast.AstNode* %168, i32 0, i32 6
	%170 = load i32* %169
	%171 = icmp ne i32 %167, %170
	br i1 %171, label %L.51, label %L.50
L.51:
	%172 = load %ast.AstNode** %tree
	%173 = bitcast %ast.AstNode* %172 to %ast.AstNode*
	%174 = load %type.TypeNode** %to
	%175 = bitcast %type.TypeNode* %174 to %type.TypeNode*
	%176 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %173, %type.TypeNode* %175)
	%177 = bitcast %ast.AstNode* %176 to %ast.AstNode*
	store %ast.AstNode* %177, %ast.AstNode** %tree
	br label %L.50
L.50:
	br label %L.2
L.1:
	br label %L.2
L.2:
	%178 = load i8* %ok
	%179 = icmp ne i8 %178, 0
	%180 = xor i1 %179, true
	br i1 %180, label %L.53, label %L.52
L.53:
	call void @lex_Error(i8 38)
	br label %L.52
L.52:
	%181 = load %ast.AstNode** %lhs
	%182 = bitcast %ast.AstNode* %181 to %ast.AstNode*
	%183 = load %ast.AstNode** %tree
	%184 = bitcast %ast.AstNode* %183 to %ast.AstNode*
	%185 = call %ast.AstNode* @stmt_CheckSwap(%ast.AstNode* %182, %ast.AstNode* %184)
	%186 = bitcast %ast.AstNode* %185 to %ast.AstNode*
	store %ast.AstNode* %186, %ast.AstNode** %tree
	%187 = load %ast.AstNode** %tree
	%188 = bitcast %ast.AstNode* %187 to %ast.AstNode*
	store %ast.AstNode* %188, %ast.AstNode** %rv.0
	br label %return
return:
	%189 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %189
}
define internal %ast.AstNode* @stmt_Assign(%ast.AstNode* %lhs.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%lhs = alloca %ast.AstNode*
	store %ast.AstNode* %lhs.arg, %ast.AstNode** %lhs
	%tree = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	%lrhs = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	%op = alloca i8
	%tok = alloca i8
	%optok = alloca i8
	%nl = alloca i16
	%nr = alloca i16
	%i = alloca i16
	%tl = alloca %type.TypeListEntry*
	%0 = bitcast %type.TypeNode* null to %type.TypeNode*
	%1 = load %ast.AstNode** %lhs
	%2 = bitcast %ast.AstNode* %1 to %ast.AstNode*
	%3 = call %ast.AstNode* @ast_New1(i8 26, %type.TypeNode* %0, %ast.AstNode* %2)
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	store %ast.AstNode* %4, %ast.AstNode** %tree
	store i16 1, i16* %nl
	%5 = load i8* @lex_Token
	store i8 %5, i8* %tok
	br label %L.1
L.1:
	%6 = load i8* %tok
	%7 = icmp ne i8 %6, 5
	br i1 %7, label %L.2, label %L.3
L.3:
	%8 = call i8 @lex_Next()
	store i8 %8, i8* %tok
	%9 = call %ast.AstNode* @stmt_GetLHS()
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	store %ast.AstNode* %10, %ast.AstNode** %lhs
	%11 = load %ast.AstNode** %tree
	%12 = bitcast %ast.AstNode* %11 to %ast.AstNode*
	%13 = load %ast.AstNode** %lhs
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	%15 = call %ast.AstNode* @ast_Child(%ast.AstNode* %12, %ast.AstNode* %14)
	%16 = bitcast %ast.AstNode* %15 to %ast.AstNode*
	store %ast.AstNode* %16, %ast.AstNode** %tree
	%17 = load i16* %nl
	%18 = add i16 %17, 1
	store i16 %18, i16* %nl
	%19 = load i8* @lex_Token
	store i8 %19, i8* %tok
	br label %L.1
L.2:
	%20 = load i8* %tok
	%21 = icmp uge i8 %20, 9
	br i1 %21, label %L.4, label %L.5
L.4:
	%22 = load i8* %tok
	%23 = icmp ule i8 %22, 11
	br label %L.5
L.5:
	%24 = phi i1 [ false, %L.2 ], [ %23, %L.4 ]
	br i1 %24, label %L.7, label %L.8
L.7:
	%25 = load i8* %tok
	store i8 %25, i8* %optok
	%26 = call i8 @lex_Next()
	store i8 %26, i8* %tok
	store i16 0, i16* %nr
	br label %L.9
L.9:
	%27 = load %ast.AstNode** %tree
	%28 = getelementptr %ast.AstNode* %27, i32 0, i32 13
	%29 = load i16* %nr
	%30 = zext i16 %29 to i32
	%31 = getelementptr [0 x %ast.AstNode*]* %28, i32 0, i32 %30
	%32 = load %ast.AstNode** %31
	%33 = bitcast %ast.AstNode* %32 to %ast.AstNode*
	store %ast.AstNode* %33, %ast.AstNode** %lhs
	%34 = load %ast.AstNode** %lhs
	%35 = icmp ne %ast.AstNode* %34, null
	br i1 %35, label %L.12, label %L.13
L.12:
	%36 = load %ast.AstNode** %lhs
	%37 = getelementptr %ast.AstNode* %36, i32 0, i32 11
	%38 = load %type.TypeNode** %37
	%39 = bitcast %type.TypeNode* %38 to %type.TypeNode*
	store %type.TypeNode* %39, %type.TypeNode** %t
	br label %L.11
L.13:
	%40 = bitcast %type.TypeNode* null to %type.TypeNode*
	store %type.TypeNode* %40, %type.TypeNode** %t
	br label %L.11
L.11:
	%41 = load %type.TypeNode** %t
	%42 = icmp ne %type.TypeNode* %41, null
	br i1 %42, label %L.14, label %L.15
L.14:
	%43 = load %type.TypeNode** %t
	%44 = getelementptr %type.TypeNode* %43, i32 0, i32 13
	%45 = load i8* %44
	%46 = icmp eq i8 %45, 6
	br label %L.15
L.15:
	%47 = phi i1 [ false, %L.11 ], [ %46, %L.14 ]
	br i1 %47, label %L.17, label %L.18
L.17:
	%48 = load i8* %optok
	%49 = icmp eq i8 %48, 9
	br i1 %49, label %L.19, label %L.20
L.19:
	%50 = load i16* %nl
	%51 = icmp eq i16 %50, 1
	br label %L.20
L.20:
	%52 = phi i1 [ false, %L.17 ], [ %51, %L.19 ]
	br i1 %52, label %L.22, label %L.23
L.22:
	%53 = load %ast.AstNode** %lhs
	%54 = bitcast %ast.AstNode* %53 to %ast.AstNode*
	%55 = call %ast.AstNode* @stmt_AssignRecord(%ast.AstNode* %54)
	%56 = bitcast %ast.AstNode* %55 to %ast.AstNode*
	store %ast.AstNode* %56, %ast.AstNode** %tree
	br label %L.21
L.23:
	call void @lex_Error(i8 35)
	br label %L.21
L.21:
	%57 = load i16* %nr
	%58 = add i16 %57, 1
	store i16 %58, i16* %nr
	br label %L.16
L.18:
	%59 = load %type.TypeNode** %t
	%60 = icmp ne %type.TypeNode* %59, null
	br i1 %60, label %L.24, label %L.25
L.24:
	%61 = load %type.TypeNode** %t
	%62 = getelementptr %type.TypeNode* %61, i32 0, i32 13
	%63 = load i8* %62
	%64 = icmp eq i8 %63, 5
	br label %L.25
L.25:
	%65 = phi i1 [ false, %L.18 ], [ %64, %L.24 ]
	br i1 %65, label %L.27, label %L.28
L.27:
	%66 = load i8* %optok
	%67 = icmp eq i8 %66, 9
	br i1 %67, label %L.29, label %L.30
L.29:
	%68 = load i16* %nl
	%69 = icmp eq i16 %68, 1
	br label %L.30
L.30:
	%70 = phi i1 [ false, %L.27 ], [ %69, %L.29 ]
	br i1 %70, label %L.32, label %L.33
L.32:
	%71 = load %ast.AstNode** %lhs
	%72 = bitcast %ast.AstNode* %71 to %ast.AstNode*
	%73 = call %ast.AstNode* @stmt_AssignArray(%ast.AstNode* %72)
	%74 = bitcast %ast.AstNode* %73 to %ast.AstNode*
	store %ast.AstNode* %74, %ast.AstNode** %tree
	br label %L.31
L.33:
	call void @lex_Error(i8 35)
	br label %L.31
L.31:
	%75 = load i16* %nr
	%76 = add i16 %75, 1
	store i16 %76, i16* %nr
	br label %L.26
L.28:
	%77 = load %type.TypeNode** %t
	%78 = bitcast %type.TypeNode* %77 to %type.TypeNode*
	%79 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %78)
	%80 = bitcast %ast.AstNode* %79 to %ast.AstNode*
	store %ast.AstNode* %80, %ast.AstNode** %rhs
	%81 = load %ast.AstNode** %rhs
	%82 = icmp ne %ast.AstNode* %81, null
	br i1 %82, label %L.35, label %L.34
L.35:
	%83 = load %ast.AstNode** %rhs
	%84 = getelementptr %ast.AstNode* %83, i32 0, i32 0
	%85 = load i8* %84
	%86 = icmp eq i8 %85, 10
	br i1 %86, label %L.37, label %L.36
L.36:
	%87 = load %ast.AstNode** %rhs
	%88 = getelementptr %ast.AstNode* %87, i32 0, i32 0
	%89 = load i8* %88
	%90 = icmp eq i8 %89, 11
	br label %L.37
L.37:
	%91 = phi i1 [ true, %L.35 ], [ %90, %L.36 ]
	br i1 %91, label %L.39, label %L.40
L.39:
	%92 = load %ast.AstNode** %rhs
	%93 = getelementptr %ast.AstNode* %92, i32 0, i32 12
	%94 = load %symb.SymbNode** %93
	%95 = getelementptr %symb.SymbNode* %94, i32 0, i32 4
	%96 = load %type.TypeListEntry** %95
	%97 = bitcast %type.TypeListEntry* %96 to %type.TypeListEntry*
	store %type.TypeListEntry* %97, %type.TypeListEntry** %tl
	%98 = load %type.TypeListEntry** %tl
	%99 = icmp ne %type.TypeListEntry* %98, null
	br i1 %99, label %L.42, label %L.43
L.42:
	%100 = load %type.TypeListEntry** %tl
	%101 = getelementptr %type.TypeListEntry* %100, i32 0, i32 0
	%102 = load %type.TypeListEntry** %101
	%103 = icmp ne %type.TypeListEntry* %102, null
	br i1 %103, label %L.45, label %L.46
L.45:
	store i16 0, i16* %i
	br label %L.47
L.47:
	%104 = load %type.TypeListEntry** %tl
	%105 = getelementptr %type.TypeListEntry* %104, i32 0, i32 1
	%106 = load %type.TypeNode** %105
	%107 = bitcast %type.TypeNode* %106 to %type.TypeNode*
	%108 = load %ast.AstNode** %rhs
	%109 = bitcast %ast.AstNode* %108 to %ast.AstNode*
	%110 = call %ast.AstNode* @ast_New1(i8 24, %type.TypeNode* %107, %ast.AstNode* %109)
	%111 = bitcast %ast.AstNode* %110 to %ast.AstNode*
	store %ast.AstNode* %111, %ast.AstNode** %lrhs
	%112 = load %type.TypeListEntry** %tl
	%113 = getelementptr %type.TypeListEntry* %112, i32 0, i32 1
	%114 = load %type.TypeNode** %113
	%115 = getelementptr %type.TypeNode* %114, i32 0, i32 13
	%116 = load i8* %115
	%117 = load %ast.AstNode** %lrhs
	%118 = getelementptr %ast.AstNode* %117, i32 0, i32 1
	store i8 %116, i8* %118
	%119 = load %ast.AstNode** %lrhs
	%120 = getelementptr %ast.AstNode* %119, i32 0, i32 1
	%121 = load i8* %120
	%122 = icmp eq i8 %121, 4
	br i1 %122, label %L.50, label %L.51
L.50:
	%123 = load %type.TypeListEntry** %tl
	%124 = getelementptr %type.TypeListEntry* %123, i32 0, i32 1
	%125 = load %type.TypeNode** %124
	%126 = getelementptr %type.TypeNode* %125, i32 0, i32 0
	%127 = load %type.TypeNode** %126
	%128 = bitcast %type.TypeNode* %127 to %type.TypeNode*
	%129 = load %ast.AstNode** %lrhs
	%130 = getelementptr %ast.AstNode* %129, i32 0, i32 11
	store %type.TypeNode* %128, %type.TypeNode** %130
	%131 = load %target.TargetT** @target_Target
	%132 = getelementptr %target.TargetT* %131, i32 0, i32 8
	%133 = getelementptr %target.SizeAlign* %132, i32 0, i32 0
	%134 = load i8* %133
	%135 = zext i8 %134 to i32
	%136 = load %ast.AstNode** %lrhs
	%137 = getelementptr %ast.AstNode* %136, i32 0, i32 6
	store i32 %135, i32* %137
	br label %L.49
L.51:
	%138 = load %type.TypeListEntry** %tl
	%139 = getelementptr %type.TypeListEntry* %138, i32 0, i32 1
	%140 = load %type.TypeNode** %139
	%141 = getelementptr %type.TypeNode* %140, i32 0, i32 9
	%142 = load i32* %141
	%143 = load %ast.AstNode** %lrhs
	%144 = getelementptr %ast.AstNode* %143, i32 0, i32 6
	store i32 %142, i32* %144
	br label %L.49
L.49:
	%145 = load i16* %i
	%146 = zext i16 %145 to i64
	%147 = load %ast.AstNode** %lrhs
	%148 = getelementptr %ast.AstNode* %147, i32 0, i32 10
	store i64 %146, i64* %148
	%149 = load %ast.AstNode** %tree
	%150 = bitcast %ast.AstNode* %149 to %ast.AstNode*
	%151 = load %ast.AstNode** %lrhs
	%152 = bitcast %ast.AstNode* %151 to %ast.AstNode*
	%153 = call %ast.AstNode* @ast_Child(%ast.AstNode* %150, %ast.AstNode* %152)
	%154 = bitcast %ast.AstNode* %153 to %ast.AstNode*
	store %ast.AstNode* %154, %ast.AstNode** %tree
	%155 = load i16* %i
	%156 = add i16 %155, 1
	store i16 %156, i16* %i
	%157 = load %type.TypeListEntry** %tl
	%158 = getelementptr %type.TypeListEntry* %157, i32 0, i32 0
	%159 = load %type.TypeListEntry** %158
	%160 = bitcast %type.TypeListEntry* %159 to %type.TypeListEntry*
	store %type.TypeListEntry* %160, %type.TypeListEntry** %tl
	%161 = load %type.TypeListEntry** %tl
	%162 = icmp eq %type.TypeListEntry* %161, null
	br i1 %162, label %L.48, label %L.52
L.52:
	br label %L.47
L.48:
	%163 = load i16* %nr
	%164 = load i16* %i
	%165 = add i16 %163, %164
	store i16 %165, i16* %nr
	br label %L.44
L.46:
	%166 = load %ast.AstNode** %lhs
	%167 = bitcast %ast.AstNode* %166 to %ast.AstNode*
	%168 = load %ast.AstNode** %rhs
	%169 = bitcast %ast.AstNode* %168 to %ast.AstNode*
	%170 = call %ast.AstNode* @stmt_AdjustRHS(%ast.AstNode* %167, %ast.AstNode* %169)
	%171 = bitcast %ast.AstNode* %170 to %ast.AstNode*
	store %ast.AstNode* %171, %ast.AstNode** %rhs
	%172 = load %ast.AstNode** %tree
	%173 = bitcast %ast.AstNode* %172 to %ast.AstNode*
	%174 = load %ast.AstNode** %rhs
	%175 = bitcast %ast.AstNode* %174 to %ast.AstNode*
	%176 = call %ast.AstNode* @ast_Child(%ast.AstNode* %173, %ast.AstNode* %175)
	%177 = bitcast %ast.AstNode* %176 to %ast.AstNode*
	store %ast.AstNode* %177, %ast.AstNode** %tree
	%178 = load i16* %nr
	%179 = add i16 %178, 1
	store i16 %179, i16* %nr
	br label %L.44
L.44:
	br label %L.41
L.43:
	call void @lex_Error(i8 37)
	br label %L.41
L.41:
	br label %L.38
L.40:
	%180 = load %ast.AstNode** %rhs
	%181 = getelementptr %ast.AstNode* %180, i32 0, i32 11
	%182 = load %type.TypeNode** %181
	%183 = icmp ne %type.TypeNode* %182, null
	br i1 %183, label %L.54, label %L.55
L.54:
	%184 = load i8* %optok
	%185 = icmp ne i8 %184, 9
	br i1 %185, label %L.57, label %L.56
L.57:
	%186 = load %ast.AstNode** %lhs
	%187 = bitcast %ast.AstNode* %186 to %ast.AstNode*
	%188 = call %ast.AstNode* @expr_Load(%ast.AstNode* %187)
	%189 = bitcast %ast.AstNode* %188 to %ast.AstNode*
	store %ast.AstNode* %189, %ast.AstNode** %lrhs
	%190 = load i8* %optok
	%191 = icmp eq i8 %190, 10
	br i1 %191, label %L.59, label %L.60
L.59:
	store i8 34, i8* %op
	br label %L.58
L.60:
	store i8 35, i8* %op
	br label %L.58
L.58:
	%192 = load i8* %op
	%193 = load %ast.AstNode** %lrhs
	%194 = bitcast %ast.AstNode* %193 to %ast.AstNode*
	%195 = load %ast.AstNode** %rhs
	%196 = bitcast %ast.AstNode* %195 to %ast.AstNode*
	%197 = call %ast.AstNode* @expr_BinOp(i8 %192, %ast.AstNode* %194, %ast.AstNode* %196)
	%198 = bitcast %ast.AstNode* %197 to %ast.AstNode*
	store %ast.AstNode* %198, %ast.AstNode** %rhs
	br label %L.56
L.56:
	%199 = load %ast.AstNode** %lhs
	%200 = bitcast %ast.AstNode* %199 to %ast.AstNode*
	%201 = load %ast.AstNode** %rhs
	%202 = bitcast %ast.AstNode* %201 to %ast.AstNode*
	%203 = call %ast.AstNode* @stmt_AdjustRHS(%ast.AstNode* %200, %ast.AstNode* %202)
	%204 = bitcast %ast.AstNode* %203 to %ast.AstNode*
	store %ast.AstNode* %204, %ast.AstNode** %rhs
	br label %L.53
L.55:
	call void @lex_Error(i8 37)
	br label %L.53
L.53:
	%205 = load %ast.AstNode** %tree
	%206 = bitcast %ast.AstNode* %205 to %ast.AstNode*
	%207 = load %ast.AstNode** %rhs
	%208 = bitcast %ast.AstNode* %207 to %ast.AstNode*
	%209 = call %ast.AstNode* @ast_Child(%ast.AstNode* %206, %ast.AstNode* %208)
	%210 = bitcast %ast.AstNode* %209 to %ast.AstNode*
	store %ast.AstNode* %210, %ast.AstNode** %tree
	%211 = load i16* %nr
	%212 = add i16 %211, 1
	store i16 %212, i16* %nr
	br label %L.38
L.38:
	br label %L.34
L.34:
	br label %L.26
L.26:
	br label %L.16
L.16:
	%213 = load i8* @lex_Token
	store i8 %213, i8* %tok
	%214 = load i8* %tok
	%215 = icmp ne i8 %214, 5
	br i1 %215, label %L.10, label %L.61
L.61:
	%216 = call i8 @lex_Next()
	store i8 %216, i8* %tok
	br label %L.9
L.10:
	%217 = load i16* %nl
	%218 = load i16* %nr
	%219 = icmp ne i16 %217, %218
	br i1 %219, label %L.63, label %L.62
L.63:
	%220 = load i16* %nl
	%221 = load i16* %nr
	%222 = icmp ult i16 %220, %221
	br i1 %222, label %L.65, label %L.66
L.65:
	call void @lex_Error(i8 39)
	br label %L.64
L.66:
	call void @lex_Error(i8 40)
	br label %L.64
L.64:
	br label %L.62
L.62:
	br label %L.6
L.8:
	call void @lex_Error(i8 34)
	br label %L.6
L.6:
	%223 = load %ast.AstNode** %tree
	%224 = bitcast %ast.AstNode* %223 to %ast.AstNode*
	store %ast.AstNode* %224, %ast.AstNode** %rv.0
	br label %return
return:
	%225 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %225
}
define internal %ast.AstNode* @stmt_AssignOrCall(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%tree = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load %symb.SymbNode** %s
	%2 = getelementptr %symb.SymbNode* %1, i32 0, i32 12
	%3 = load i8* %2
	%4 = icmp eq i8 %3, 6
	br i1 %4, label %L.2, label %L.1
L.2:
	%5 = load %symb.SymbNode** %s
	%6 = bitcast %symb.SymbNode* %5 to %symb.SymbNode*
	%7 = call %symb.SymbNode* @symb_FindPackage(%symb.SymbNode* %6)
	%8 = bitcast %symb.SymbNode* %7 to %symb.SymbNode*
	store %symb.SymbNode* %8, %symb.SymbNode** %s
	%9 = call i8 @lex_Next()
	store i8 %9, i8* %tok
	br label %L.1
L.1:
	%10 = load %symb.SymbNode** %s
	%11 = icmp ne %symb.SymbNode* %10, null
	br i1 %11, label %L.4, label %L.5
L.4:
	%12 = load %symb.SymbNode** %s
	%13 = bitcast %symb.SymbNode* %12 to %symb.SymbNode*
	%14 = call %ast.AstNode* @expr_Primary(%symb.SymbNode* %13)
	%15 = bitcast %ast.AstNode* %14 to %ast.AstNode*
	store %ast.AstNode* %15, %ast.AstNode** %tree
	%16 = load %ast.AstNode** %tree
	%17 = icmp ne %ast.AstNode* %16, null
	br i1 %17, label %L.7, label %L.6
L.7:
	%18 = load %ast.AstNode** %tree
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 0
	%20 = load i8* %19
	%21 = zext i8 %20 to i32
	switch i32 %21, label %L.8 [
		i32 10, label %L.10
		i32 11, label %L.10
		i32 12, label %L.10
		i32 2, label %L.11
	]
L.10:
	br label %L.9
L.11:
	%22 = load %ast.AstNode** %tree
	%23 = getelementptr %ast.AstNode* %22, i32 0, i32 12
	%24 = load %symb.SymbNode** %23
	%25 = getelementptr %symb.SymbNode* %24, i32 0, i32 19
	%26 = getelementptr [0 x i8]* %25
	%27 = bitcast [0 x i8]* %26 to [0 x i8]*
	call void @lex_ErrorI(i8 26, [0 x i8]* %27)
	%28 = getelementptr [3 x i8]* @stmt_skiplist
	%29 = bitcast [3 x i8]* %28 to [0 x i8]*
	%30 = call i8 @lex_Skip([0 x i8]* %29)
	store i8 %30, i8* %tok
	br label %L.9
L.8:
	%31 = load %ast.AstNode** %tree
	%32 = bitcast %ast.AstNode* %31 to %ast.AstNode*
	%33 = call %ast.AstNode* @stmt_Assign(%ast.AstNode* %32)
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	store %ast.AstNode* %34, %ast.AstNode** %tree
	br label %L.9
L.9:
	br label %L.6
L.6:
	br label %L.3
L.5:
	%35 = getelementptr [64 x i8]* @lex_Ident
	%36 = bitcast [64 x i8]* %35 to [0 x i8]*
	call void @lex_ErrorI(i8 16, [0 x i8]* %36)
	%37 = getelementptr [3 x i8]* @stmt_skiplist
	%38 = bitcast [3 x i8]* %37 to [0 x i8]*
	%39 = call i8 @lex_Skip([0 x i8]* %38)
	store i8 %39, i8* %tok
	br label %L.3
L.3:
	%40 = call i8 @lex_Expect(i8 4)
	store i8 %40, i8* %tok
	%41 = load %ast.AstNode** %tree
	%42 = bitcast %ast.AstNode* %41 to %ast.AstNode*
	store %ast.AstNode* %42, %ast.AstNode** %rv.0
	br label %return
return:
	%43 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %43
}
define internal %ast.AstNode* @stmt_Return() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%rval = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	%tl = alloca %type.TypeListEntry*
	%tok = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = bitcast %type.TypeListEntry* null to %type.TypeListEntry*
	store %type.TypeListEntry* %1, %type.TypeListEntry** %tl
	%2 = load %symb.SymbNode** @symb_curproc
	%3 = icmp ne %symb.SymbNode* %2, null
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %symb.SymbNode** @symb_curproc
	%5 = getelementptr %symb.SymbNode* %4, i32 0, i32 4
	%6 = load %type.TypeListEntry** %5
	%7 = bitcast %type.TypeListEntry* %6 to %type.TypeListEntry*
	store %type.TypeListEntry* %7, %type.TypeListEntry** %tl
	br label %L.1
L.3:
	call void @lex_Error(i8 53)
	br label %L.1
L.1:
	%8 = bitcast %type.TypeNode* null to %type.TypeNode*
	%9 = call %ast.AstNode* @ast_New(i8 70, %type.TypeNode* %8)
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	store %ast.AstNode* %10, %ast.AstNode** %tree
	%11 = load i8* @lex_Token
	store i8 %11, i8* %tok
	br label %L.4
L.4:
	%12 = load i8* %tok
	%13 = icmp eq i8 %12, 4
	br i1 %13, label %L.5, label %L.6
L.6:
	%14 = load %type.TypeListEntry** %tl
	%15 = icmp ne %type.TypeListEntry* %14, null
	br i1 %15, label %L.8, label %L.9
L.8:
	%16 = load %type.TypeListEntry** %tl
	%17 = getelementptr %type.TypeListEntry* %16, i32 0, i32 1
	%18 = load %type.TypeNode** %17
	%19 = bitcast %type.TypeNode* %18 to %type.TypeNode*
	store %type.TypeNode* %19, %type.TypeNode** %t
	br label %L.7
L.9:
	call void @lex_Error(i8 41)
	%20 = bitcast %type.TypeNode* null to %type.TypeNode*
	store %type.TypeNode* %20, %type.TypeNode** %t
	br label %L.7
L.7:
	%21 = load %type.TypeNode** %t
	%22 = bitcast %type.TypeNode* %21 to %type.TypeNode*
	%23 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %22)
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	store %ast.AstNode* %24, %ast.AstNode** %rval
	%25 = load %ast.AstNode** %rval
	%26 = icmp ne %ast.AstNode* %25, null
	br i1 %26, label %L.11, label %L.10
L.11:
	%27 = load %type.TypeNode** %t
	%28 = icmp ne %type.TypeNode* %27, null
	br i1 %28, label %L.13, label %L.14
L.13:
	%29 = load %ast.AstNode** %rval
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	%31 = load %type.TypeNode** %t
	%32 = bitcast %type.TypeNode* %31 to %type.TypeNode*
	%33 = call %ast.AstNode* @expr_Actual(%ast.AstNode* %30, %type.TypeNode* %32)
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	store %ast.AstNode* %34, %ast.AstNode** %rval
	%35 = load %ast.AstNode** %tree
	%36 = bitcast %ast.AstNode* %35 to %ast.AstNode*
	%37 = load %ast.AstNode** %rval
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	%39 = call %ast.AstNode* @ast_Child(%ast.AstNode* %36, %ast.AstNode* %38)
	%40 = bitcast %ast.AstNode* %39 to %ast.AstNode*
	store %ast.AstNode* %40, %ast.AstNode** %tree
	%41 = load %type.TypeNode** %t
	%42 = getelementptr %type.TypeNode* %41, i32 0, i32 13
	%43 = load i8* %42
	%44 = icmp eq i8 %43, 4
	br i1 %44, label %L.16, label %L.17
L.16:
	%45 = load %type.TypeNode** %t
	%46 = getelementptr %type.TypeNode* %45, i32 0, i32 0
	%47 = load %type.TypeNode** %46
	%48 = bitcast %type.TypeNode* %47 to %type.TypeNode*
	%49 = load %ast.AstNode** %tree
	%50 = getelementptr %ast.AstNode* %49, i32 0, i32 11
	store %type.TypeNode* %48, %type.TypeNode** %50
	%51 = load %target.TargetT** @target_Target
	%52 = getelementptr %target.TargetT* %51, i32 0, i32 8
	%53 = getelementptr %target.SizeAlign* %52, i32 0, i32 0
	%54 = load i8* %53
	%55 = zext i8 %54 to i32
	%56 = load %ast.AstNode** %tree
	%57 = getelementptr %ast.AstNode* %56, i32 0, i32 6
	store i32 %55, i32* %57
	br label %L.15
L.17:
	%58 = load %type.TypeNode** %t
	%59 = getelementptr %type.TypeNode* %58, i32 0, i32 9
	%60 = load i32* %59
	%61 = load %ast.AstNode** %tree
	%62 = getelementptr %ast.AstNode* %61, i32 0, i32 6
	store i32 %60, i32* %62
	br label %L.15
L.15:
	br label %L.12
L.14:
	call void @lex_Error(i8 41)
	br label %L.12
L.12:
	br label %L.10
L.10:
	%63 = load %type.TypeListEntry** %tl
	%64 = icmp ne %type.TypeListEntry* %63, null
	br i1 %64, label %L.19, label %L.18
L.19:
	%65 = load %type.TypeListEntry** %tl
	%66 = getelementptr %type.TypeListEntry* %65, i32 0, i32 0
	%67 = load %type.TypeListEntry** %66
	%68 = bitcast %type.TypeListEntry* %67 to %type.TypeListEntry*
	store %type.TypeListEntry* %68, %type.TypeListEntry** %tl
	br label %L.18
L.18:
	%69 = load i8* @lex_Token
	store i8 %69, i8* %tok
	%70 = load i8* %tok
	%71 = icmp ne i8 %70, 5
	br i1 %71, label %L.5, label %L.20
L.20:
	%72 = call i8 @lex_Next()
	store i8 %72, i8* %tok
	br label %L.4
L.5:
	%73 = load %ast.AstNode** %tree
	%74 = getelementptr %ast.AstNode* %73, i32 0, i32 2
	%75 = load i16* %74
	%76 = icmp ne i16 %75, 0
	br i1 %76, label %L.22, label %L.21
L.22:
	%77 = load %ast.AstNode** %tree
	%78 = getelementptr %ast.AstNode* %77, i32 0, i32 13
	%79 = getelementptr [0 x %ast.AstNode*]* %78, i32 0, i32 0
	%80 = load %ast.AstNode** %79
	%81 = getelementptr %ast.AstNode* %80, i32 0, i32 11
	%82 = load %type.TypeNode** %81
	%83 = bitcast %type.TypeNode* %82 to %type.TypeNode*
	%84 = load %ast.AstNode** %tree
	%85 = getelementptr %ast.AstNode* %84, i32 0, i32 11
	store %type.TypeNode* %83, %type.TypeNode** %85
	%86 = load %ast.AstNode** %tree
	%87 = getelementptr %ast.AstNode* %86, i32 0, i32 13
	%88 = getelementptr [0 x %ast.AstNode*]* %87, i32 0, i32 0
	%89 = load %ast.AstNode** %88
	%90 = getelementptr %ast.AstNode* %89, i32 0, i32 1
	%91 = load i8* %90
	%92 = load %ast.AstNode** %tree
	%93 = getelementptr %ast.AstNode* %92, i32 0, i32 1
	store i8 %91, i8* %93
	%94 = load %ast.AstNode** %tree
	%95 = getelementptr %ast.AstNode* %94, i32 0, i32 13
	%96 = getelementptr [0 x %ast.AstNode*]* %95, i32 0, i32 0
	%97 = load %ast.AstNode** %96
	%98 = getelementptr %ast.AstNode* %97, i32 0, i32 6
	%99 = load i32* %98
	%100 = load %ast.AstNode** %tree
	%101 = getelementptr %ast.AstNode* %100, i32 0, i32 6
	store i32 %99, i32* %101
	br label %L.21
L.21:
	%102 = call i8 @lex_Expect(i8 4)
	%103 = load %ast.AstNode** %tree
	%104 = bitcast %ast.AstNode* %103 to %ast.AstNode*
	store %ast.AstNode* %104, %ast.AstNode** %rv.0
	br label %return
return:
	%105 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %105
}
define internal %ast.AstNode* @stmt_If() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%ctree = alloca %ast.AstNode*
	%stree = alloca %ast.AstNode*
	%vlo = alloca %ast.AstNode*
	%vhi = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	%s = alloca %symb.SymbNode*
	%tok = alloca i8
	%tok2 = alloca i8
	%op = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	store i8 67, i8* %op
	%2 = bitcast %type.TypeNode* null to %type.TypeNode*
	%3 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %2)
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	store %ast.AstNode* %4, %ast.AstNode** %ctree
	%5 = load %ast.AstNode** %ctree
	%6 = icmp ne %ast.AstNode* %5, null
	br i1 %6, label %L.2, label %L.1
L.2:
	%7 = load %ast.AstNode** %ctree
	%8 = getelementptr %ast.AstNode* %7, i32 0, i32 11
	%9 = load %type.TypeNode** %8
	%10 = bitcast %type.TypeNode* %9 to %type.TypeNode*
	store %type.TypeNode* %10, %type.TypeNode** %t
	%11 = load %type.TypeNode** %t
	%12 = bitcast %type.TypeNode* %11 to %type.TypeNode*
	%13 = load %type.TypeNode** @type_booltype
	%14 = bitcast %type.TypeNode* %13 to %type.TypeNode*
	%15 = call i8 @type_Compat(%type.TypeNode* %12, %type.TypeNode* %14)
	%16 = icmp ne i8 %15, 0
	br i1 %16, label %L.4, label %L.5
L.4:
	%17 = load %ast.AstNode** %ctree
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	%19 = call %ast.AstNode* @expr_ForceBoolean(%ast.AstNode* %18)
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	store %ast.AstNode* %20, %ast.AstNode** %ctree
	br label %L.3
L.5:
	store i8 68, i8* %op
	br label %L.3
L.3:
	%21 = load i8* %op
	%22 = bitcast %type.TypeNode* null to %type.TypeNode*
	%23 = call %ast.AstNode* @ast_New(i8 %21, %type.TypeNode* %22)
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	store %ast.AstNode* %24, %ast.AstNode** %tree
	%25 = load %ast.AstNode** %tree
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	%27 = load %ast.AstNode** %ctree
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	%29 = call %ast.AstNode* @ast_Child(%ast.AstNode* %26, %ast.AstNode* %28)
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	store %ast.AstNode* %30, %ast.AstNode** %tree
	br label %L.1
L.1:
	%31 = getelementptr [3 x i8]* @stmt_isthenlist
	%32 = bitcast [3 x i8]* %31 to [0 x i8]*
	%33 = call i8 @lex_Keyword([0 x i8]* %32)
	store i8 %33, i8* %tok
	%34 = load i8* %tok
	%35 = zext i8 %34 to i32
	switch i32 %35, label %L.6 [
		i32 50, label %L.8
		i32 48, label %L.9
	]
L.8:
	br label %L.10
L.10:
	%36 = bitcast %type.TypeNode* null to %type.TypeNode*
	%37 = call %ast.AstNode* @ast_New(i8 69, %type.TypeNode* %36)
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	store %ast.AstNode* %38, %ast.AstNode** %ctree
	br label %L.12
L.12:
	%39 = call i8 @lex_Next()
	store i8 %39, i8* %tok
	%40 = load %type.TypeNode** %t
	%41 = bitcast %type.TypeNode* %40 to %type.TypeNode*
	%42 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %41)
	%43 = bitcast %ast.AstNode* %42 to %ast.AstNode*
	store %ast.AstNode* %43, %ast.AstNode** %vlo
	%44 = load %ast.AstNode** %vlo
	%45 = icmp ne %ast.AstNode* %44, null
	br i1 %45, label %L.14, label %L.15
L.14:
	%46 = load %ast.AstNode** %vlo
	%47 = getelementptr %ast.AstNode* %46, i32 0, i32 0
	%48 = load i8* %47
	%49 = icmp ne i8 %48, 7
	br label %L.15
L.15:
	%50 = phi i1 [ false, %L.12 ], [ %49, %L.14 ]
	br i1 %50, label %L.17, label %L.16
L.17:
	call void @lex_Error(i8 68)
	br label %L.16
L.16:
	%51 = load i8* @lex_Token
	store i8 %51, i8* %tok
	%52 = load i8* %tok
	%53 = icmp eq i8 %52, 6
	br i1 %53, label %L.19, label %L.18
L.19:
	%54 = call i8 @lex_Next()
	store i8 %54, i8* %tok
	%55 = load %type.TypeNode** %t
	%56 = bitcast %type.TypeNode* %55 to %type.TypeNode*
	%57 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %56)
	%58 = bitcast %ast.AstNode* %57 to %ast.AstNode*
	store %ast.AstNode* %58, %ast.AstNode** %vhi
	%59 = load %ast.AstNode** %vhi
	%60 = icmp ne %ast.AstNode* %59, null
	br i1 %60, label %L.21, label %L.20
L.21:
	%61 = load %ast.AstNode** %vhi
	%62 = getelementptr %ast.AstNode* %61, i32 0, i32 0
	%63 = load i8* %62
	%64 = icmp ne i8 %63, 7
	br i1 %64, label %L.23, label %L.22
L.23:
	call void @lex_Error(i8 68)
	br label %L.22
L.22:
	%65 = load %ast.AstNode** %vlo
	%66 = icmp ne %ast.AstNode* %65, null
	br i1 %66, label %L.25, label %L.24
L.25:
	%67 = load %ast.AstNode** %vlo
	%68 = getelementptr %ast.AstNode* %67, i32 0, i32 11
	%69 = load %type.TypeNode** %68
	%70 = bitcast %type.TypeNode* %69 to %type.TypeNode*
	%71 = load %ast.AstNode** %vlo
	%72 = bitcast %ast.AstNode* %71 to %ast.AstNode*
	%73 = load %ast.AstNode** %vhi
	%74 = bitcast %ast.AstNode* %73 to %ast.AstNode*
	%75 = call %ast.AstNode* @ast_New2(i8 13, %type.TypeNode* %70, %ast.AstNode* %72, %ast.AstNode* %74)
	%76 = bitcast %ast.AstNode* %75 to %ast.AstNode*
	store %ast.AstNode* %76, %ast.AstNode** %vlo
	br label %L.24
L.24:
	br label %L.20
L.20:
	br label %L.18
L.18:
	%77 = load %ast.AstNode** %ctree
	%78 = bitcast %ast.AstNode* %77 to %ast.AstNode*
	%79 = load %ast.AstNode** %vlo
	%80 = bitcast %ast.AstNode* %79 to %ast.AstNode*
	%81 = call %ast.AstNode* @ast_Child(%ast.AstNode* %78, %ast.AstNode* %80)
	%82 = bitcast %ast.AstNode* %81 to %ast.AstNode*
	store %ast.AstNode* %82, %ast.AstNode** %ctree
	%83 = load i8* @lex_Token
	store i8 %83, i8* %tok
	%84 = load i8* %tok
	%85 = icmp ne i8 %84, 5
	br i1 %85, label %L.13, label %L.26
L.26:
	br label %L.12
L.13:
	%86 = load i8* %tok
	%87 = icmp eq i8 %86, 3
	br i1 %87, label %L.28, label %L.29
L.28:
	%88 = call i8 @lex_Next()
	store i8 %88, i8* %tok
	call void @lex_Error(i8 1)
	br label %L.27
L.29:
	%89 = getelementptr [2 x i8]* @stmt_thenlist
	%90 = bitcast [2 x i8]* %89 to [0 x i8]*
	%91 = call i8 @lex_Keyword([0 x i8]* %90)
	%92 = icmp eq i8 %91, 48
	br i1 %92, label %L.31, label %L.32
L.31:
	%93 = call i8 @lex_Next()
	store i8 %93, i8* %tok
	br label %L.30
L.32:
	call void @lex_ErrorT(i8 14, i8 48)
	br label %L.30
L.30:
	br label %L.27
L.27:
	%94 = call %ast.AstNode* @stmt_Statement()
	%95 = bitcast %ast.AstNode* %94 to %ast.AstNode*
	store %ast.AstNode* %95, %ast.AstNode** %stree
	%96 = load %ast.AstNode** %ctree
	%97 = bitcast %ast.AstNode* %96 to %ast.AstNode*
	%98 = load %ast.AstNode** %stree
	%99 = bitcast %ast.AstNode* %98 to %ast.AstNode*
	%100 = call %ast.AstNode* @ast_Child(%ast.AstNode* %97, %ast.AstNode* %99)
	%101 = bitcast %ast.AstNode* %100 to %ast.AstNode*
	store %ast.AstNode* %101, %ast.AstNode** %ctree
	%102 = load %ast.AstNode** %tree
	%103 = bitcast %ast.AstNode* %102 to %ast.AstNode*
	%104 = load %ast.AstNode** %ctree
	%105 = bitcast %ast.AstNode* %104 to %ast.AstNode*
	%106 = call %ast.AstNode* @ast_Child(%ast.AstNode* %103, %ast.AstNode* %105)
	%107 = bitcast %ast.AstNode* %106 to %ast.AstNode*
	store %ast.AstNode* %107, %ast.AstNode** %tree
	%108 = load i8* @lex_Token
	store i8 %108, i8* %tok
	%109 = load i8* %tok
	%110 = icmp eq i8 %109, 40
	br i1 %110, label %L.34, label %L.33
L.34:
	%111 = getelementptr [3 x i8]* @stmt_isthenlist
	%112 = bitcast [3 x i8]* %111 to [0 x i8]*
	%113 = call i8 @lex_Keyword([0 x i8]* %112)
	store i8 %113, i8* %tok
	br label %L.33
L.33:
	%114 = load i8* %tok
	%115 = icmp ne i8 %114, 50
	br i1 %115, label %L.11, label %L.35
L.35:
	br label %L.10
L.11:
	br label %L.7
L.9:
	%116 = load i8* %op
	%117 = icmp eq i8 %116, 68
	br i1 %117, label %L.37, label %L.36
L.37:
	call void @lex_Error(i8 45)
	br label %L.36
L.36:
	%118 = call i8 @lex_Next()
	store i8 %118, i8* %tok
	%119 = call %ast.AstNode* @stmt_Statement()
	%120 = bitcast %ast.AstNode* %119 to %ast.AstNode*
	store %ast.AstNode* %120, %ast.AstNode** %stree
	%121 = load %ast.AstNode** %tree
	%122 = bitcast %ast.AstNode* %121 to %ast.AstNode*
	%123 = load %ast.AstNode** %stree
	%124 = bitcast %ast.AstNode* %123 to %ast.AstNode*
	%125 = call %ast.AstNode* @ast_Child(%ast.AstNode* %122, %ast.AstNode* %124)
	%126 = bitcast %ast.AstNode* %125 to %ast.AstNode*
	store %ast.AstNode* %126, %ast.AstNode** %tree
	br label %L.7
L.6:
	call void @lex_Error(i8 51)
	br label %L.7
L.7:
	%127 = getelementptr [2 x i8]* @stmt_elselist
	%128 = bitcast [2 x i8]* %127 to [0 x i8]*
	%129 = call i8 @lex_Keyword([0 x i8]* %128)
	store i8 %129, i8* %tok
	%130 = load i8* %tok
	%131 = icmp eq i8 %130, 49
	br i1 %131, label %L.39, label %L.40
L.39:
	%132 = getelementptr [64 x i8]* @lex_Ident
	%133 = bitcast [64 x i8]* %132 to [0 x i8]*
	%134 = call %symb.SymbNode* @symb_FindTop([0 x i8]* %133)
	%135 = bitcast %symb.SymbNode* %134 to %symb.SymbNode*
	store %symb.SymbNode* %135, %symb.SymbNode** %s
	%136 = call i8 @lex_Next()
	store i8 %136, i8* %tok2
	%137 = load %symb.SymbNode** %s
	%138 = icmp ne %symb.SymbNode* %137, null
	br i1 %138, label %L.42, label %L.41
L.42:
	%139 = load i8* %tok2
	%140 = zext i8 %139 to i32
	switch i32 %140, label %L.43 [
		i32 9, label %L.45
		i32 10, label %L.45
		i32 11, label %L.45
		i32 34, label %L.45
		i32 2, label %L.45
		i32 7, label %L.45
		i32 32, label %L.45
	]
L.45:
	store i8 40, i8* %tok
	br label %L.44
L.43:
	br label %L.44
L.44:
	br label %L.41
L.41:
	%141 = load i8* %tok
	%142 = icmp eq i8 %141, 40
	br i1 %142, label %L.47, label %L.48
L.47:
	%143 = load %symb.SymbNode** %s
	%144 = bitcast %symb.SymbNode* %143 to %symb.SymbNode*
	%145 = call %ast.AstNode* @stmt_AssignOrCall(%symb.SymbNode* %144)
	%146 = bitcast %ast.AstNode* %145 to %ast.AstNode*
	store %ast.AstNode* %146, %ast.AstNode** %stree
	%147 = load %ast.AstNode** %tree
	%148 = bitcast %ast.AstNode* %147 to %ast.AstNode*
	%149 = bitcast %ast.AstNode* null to %ast.AstNode*
	%150 = call %ast.AstNode* @ast_Child(%ast.AstNode* %148, %ast.AstNode* %149)
	%151 = bitcast %ast.AstNode* %150 to %ast.AstNode*
	store %ast.AstNode* %151, %ast.AstNode** %tree
	%152 = load %ast.AstNode** %stree
	%153 = icmp ne %ast.AstNode* %152, null
	br i1 %153, label %L.50, label %L.49
L.50:
	%154 = bitcast %type.TypeNode* null to %type.TypeNode*
	%155 = load %ast.AstNode** %tree
	%156 = bitcast %ast.AstNode* %155 to %ast.AstNode*
	%157 = load %ast.AstNode** %stree
	%158 = bitcast %ast.AstNode* %157 to %ast.AstNode*
	%159 = call %ast.AstNode* @ast_New2(i8 64, %type.TypeNode* %154, %ast.AstNode* %156, %ast.AstNode* %158)
	%160 = bitcast %ast.AstNode* %159 to %ast.AstNode*
	store %ast.AstNode* %160, %ast.AstNode** %tree
	br label %L.49
L.49:
	br label %L.46
L.48:
	%161 = call %ast.AstNode* @stmt_Statement()
	%162 = bitcast %ast.AstNode* %161 to %ast.AstNode*
	store %ast.AstNode* %162, %ast.AstNode** %stree
	%163 = load %ast.AstNode** %tree
	%164 = bitcast %ast.AstNode* %163 to %ast.AstNode*
	%165 = load %ast.AstNode** %stree
	%166 = bitcast %ast.AstNode* %165 to %ast.AstNode*
	%167 = call %ast.AstNode* @ast_Child(%ast.AstNode* %164, %ast.AstNode* %166)
	%168 = bitcast %ast.AstNode* %167 to %ast.AstNode*
	store %ast.AstNode* %168, %ast.AstNode** %tree
	br label %L.46
L.46:
	br label %L.38
L.40:
	%169 = load %ast.AstNode** %tree
	%170 = bitcast %ast.AstNode* %169 to %ast.AstNode*
	%171 = bitcast %ast.AstNode* null to %ast.AstNode*
	%172 = call %ast.AstNode* @ast_Child(%ast.AstNode* %170, %ast.AstNode* %171)
	%173 = bitcast %ast.AstNode* %172 to %ast.AstNode*
	store %ast.AstNode* %173, %ast.AstNode** %tree
	br label %L.38
L.38:
	%174 = load %ast.AstNode** %tree
	%175 = bitcast %ast.AstNode* %174 to %ast.AstNode*
	store %ast.AstNode* %175, %ast.AstNode** %rv.0
	br label %return
return:
	%176 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %176
}
define internal %ast.AstNode* @stmt_For() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load %ast.AstNode** %tree
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	store %ast.AstNode* %3, %ast.AstNode** %rv.0
	br label %return
return:
	%4 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %4
}
define internal %ast.AstNode* @stmt_While() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%ctree = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = load i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = load %type.TypeNode** @type_booltype
	%2 = bitcast %type.TypeNode* %1 to %type.TypeNode*
	%3 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %2)
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	store %ast.AstNode* %4, %ast.AstNode** %ctree
	%5 = load %ast.AstNode** %ctree
	%6 = getelementptr %ast.AstNode* %5, i32 0, i32 11
	%7 = load %type.TypeNode** %6
	%8 = bitcast %type.TypeNode* %7 to %type.TypeNode*
	%9 = load %type.TypeNode** @type_booltype
	%10 = bitcast %type.TypeNode* %9 to %type.TypeNode*
	%11 = call i8 @type_Compat(%type.TypeNode* %8, %type.TypeNode* %10)
	%12 = icmp ne i8 %11, 0
	br i1 %12, label %L.2, label %L.3
L.2:
	%13 = load %ast.AstNode** %ctree
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	%15 = call %ast.AstNode* @expr_ForceBoolean(%ast.AstNode* %14)
	%16 = bitcast %ast.AstNode* %15 to %ast.AstNode*
	store %ast.AstNode* %16, %ast.AstNode** %ctree
	br label %L.1
L.3:
	call void @lex_Error(i8 45)
	br label %L.1
L.1:
	%17 = bitcast %type.TypeNode* null to %type.TypeNode*
	%18 = load %ast.AstNode** %ctree
	%19 = bitcast %ast.AstNode* %18 to %ast.AstNode*
	%20 = call %ast.AstNode* @ast_New1(i8 62, %type.TypeNode* %17, %ast.AstNode* %19)
	%21 = bitcast %ast.AstNode* %20 to %ast.AstNode*
	store %ast.AstNode* %21, %ast.AstNode** %ctree
	%22 = bitcast %type.TypeNode* null to %type.TypeNode*
	%23 = load %ast.AstNode** %ctree
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	%25 = call %ast.AstNode* @ast_New1(i8 66, %type.TypeNode* %22, %ast.AstNode* %24)
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	store %ast.AstNode* %26, %ast.AstNode** %ctree
	%27 = load i8* @stmt_LoopLevel
	%28 = add i8 %27, 1
	store i8 %28, i8* @stmt_LoopLevel
	%29 = getelementptr [2 x i8]* @stmt_dolist
	%30 = bitcast [2 x i8]* %29 to [0 x i8]*
	%31 = call i8 @lex_Keyword([0 x i8]* %30)
	store i8 %31, i8* %tok
	%32 = load i8* %tok
	%33 = icmp eq i8 %32, 53
	br i1 %33, label %L.5, label %L.6
L.5:
	%34 = call i8 @lex_Next()
	store i8 %34, i8* %tok
	br label %L.4
L.6:
	call void @lex_ErrorT(i8 14, i8 53)
	br label %L.4
L.4:
	%35 = call %ast.AstNode* @stmt_Statement()
	%36 = bitcast %ast.AstNode* %35 to %ast.AstNode*
	store %ast.AstNode* %36, %ast.AstNode** %tree
	%37 = bitcast %type.TypeNode* null to %type.TypeNode*
	%38 = load %ast.AstNode** %ctree
	%39 = bitcast %ast.AstNode* %38 to %ast.AstNode*
	%40 = load %ast.AstNode** %tree
	%41 = bitcast %ast.AstNode* %40 to %ast.AstNode*
	%42 = call %ast.AstNode* @ast_New2(i8 64, %type.TypeNode* %37, %ast.AstNode* %39, %ast.AstNode* %41)
	%43 = bitcast %ast.AstNode* %42 to %ast.AstNode*
	store %ast.AstNode* %43, %ast.AstNode** %tree
	%44 = bitcast %type.TypeNode* null to %type.TypeNode*
	%45 = load %ast.AstNode** %tree
	%46 = bitcast %ast.AstNode* %45 to %ast.AstNode*
	%47 = call %ast.AstNode* @ast_New1(i8 65, %type.TypeNode* %44, %ast.AstNode* %46)
	%48 = bitcast %ast.AstNode* %47 to %ast.AstNode*
	store %ast.AstNode* %48, %ast.AstNode** %tree
	%49 = load i8* @stmt_LoopLevel
	%50 = icmp ugt i8 %49, 0
	br i1 %50, label %L.8, label %L.7
L.8:
	%51 = load i8* @stmt_LoopLevel
	%52 = sub i8 %51, 1
	store i8 %52, i8* @stmt_LoopLevel
	br label %L.7
L.7:
	%53 = load %ast.AstNode** %tree
	%54 = bitcast %ast.AstNode* %53 to %ast.AstNode*
	store %ast.AstNode* %54, %ast.AstNode** %rv.0
	br label %return
return:
	%55 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %55
}
define internal %ast.AstNode* @stmt_Loop() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%stree = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* @stmt_LoopLevel
	%3 = add i8 %2, 1
	store i8 %3, i8* @stmt_LoopLevel
	%4 = bitcast %type.TypeNode* null to %type.TypeNode*
	%5 = call %ast.AstNode* @ast_New(i8 65, %type.TypeNode* %4)
	%6 = bitcast %ast.AstNode* %5 to %ast.AstNode*
	store %ast.AstNode* %6, %ast.AstNode** %tree
	%7 = call %ast.AstNode* @stmt_Statement()
	%8 = bitcast %ast.AstNode* %7 to %ast.AstNode*
	store %ast.AstNode* %8, %ast.AstNode** %stree
	%9 = load %ast.AstNode** %tree
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	%11 = load %ast.AstNode** %stree
	%12 = bitcast %ast.AstNode* %11 to %ast.AstNode*
	%13 = call %ast.AstNode* @ast_Child(%ast.AstNode* %10, %ast.AstNode* %12)
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	store %ast.AstNode* %14, %ast.AstNode** %tree
	%15 = load i8* @stmt_LoopLevel
	%16 = icmp ugt i8 %15, 0
	br i1 %16, label %L.2, label %L.1
L.2:
	%17 = load i8* @stmt_LoopLevel
	%18 = sub i8 %17, 1
	store i8 %18, i8* @stmt_LoopLevel
	br label %L.1
L.1:
	%19 = load %ast.AstNode** %tree
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	store %ast.AstNode* %20, %ast.AstNode** %rv.0
	br label %return
return:
	%21 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %21
}
define internal %ast.AstNode* @stmt_Exit() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%wtree = alloca %ast.AstNode*
	%ctree = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* @stmt_LoopLevel
	%3 = icmp eq i8 %2, 0
	br i1 %3, label %L.2, label %L.1
L.2:
	call void @lex_Error(i8 54)
	br label %L.1
L.1:
	%4 = bitcast %type.TypeNode* null to %type.TypeNode*
	%5 = call %ast.AstNode* @ast_New(i8 66, %type.TypeNode* %4)
	%6 = bitcast %ast.AstNode* %5 to %ast.AstNode*
	store %ast.AstNode* %6, %ast.AstNode** %tree
	%7 = load %type.TypeNode** @type_booltype
	%8 = bitcast %type.TypeNode* %7 to %type.TypeNode*
	%9 = call %ast.AstNode* @expr_Bool(%type.TypeNode* %8)
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	store %ast.AstNode* %10, %ast.AstNode** %ctree
	%11 = load %ast.AstNode** %ctree
	%12 = getelementptr %ast.AstNode* %11, i32 0, i32 11
	%13 = load %type.TypeNode** %12
	%14 = bitcast %type.TypeNode* %13 to %type.TypeNode*
	%15 = load %type.TypeNode** @type_booltype
	%16 = bitcast %type.TypeNode* %15 to %type.TypeNode*
	%17 = call i8 @type_Compat(%type.TypeNode* %14, %type.TypeNode* %16)
	%18 = icmp ne i8 %17, 0
	br i1 %18, label %L.4, label %L.5
L.4:
	%19 = load %ast.AstNode** %ctree
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	%21 = call %ast.AstNode* @expr_ForceBoolean(%ast.AstNode* %20)
	%22 = bitcast %ast.AstNode* %21 to %ast.AstNode*
	store %ast.AstNode* %22, %ast.AstNode** %ctree
	br label %L.3
L.5:
	call void @lex_Error(i8 45)
	br label %L.3
L.3:
	%23 = load %ast.AstNode** %tree
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	%25 = load %ast.AstNode** %ctree
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	%27 = call %ast.AstNode* @ast_Child(%ast.AstNode* %24, %ast.AstNode* %26)
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	store %ast.AstNode* %28, %ast.AstNode** %tree
	%29 = getelementptr [2 x i8]* @stmt_withlist
	%30 = bitcast [2 x i8]* %29 to [0 x i8]*
	%31 = call i8 @lex_Keyword([0 x i8]* %30)
	store i8 %31, i8* %tok
	%32 = load i8* %tok
	%33 = icmp eq i8 %32, 56
	br i1 %33, label %L.7, label %L.8
L.7:
	%34 = call i8 @lex_Next()
	store i8 %34, i8* %tok
	%35 = call %ast.AstNode* @stmt_Statement()
	%36 = bitcast %ast.AstNode* %35 to %ast.AstNode*
	store %ast.AstNode* %36, %ast.AstNode** %wtree
	%37 = load %ast.AstNode** %tree
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	%39 = load %ast.AstNode** %wtree
	%40 = bitcast %ast.AstNode* %39 to %ast.AstNode*
	%41 = call %ast.AstNode* @ast_Child(%ast.AstNode* %38, %ast.AstNode* %40)
	br label %L.6
L.8:
	%42 = call i8 @lex_Expect(i8 4)
	br label %L.6
L.6:
	%43 = load %ast.AstNode** %tree
	%44 = bitcast %ast.AstNode* %43 to %ast.AstNode*
	store %ast.AstNode* %44, %ast.AstNode** %rv.0
	br label %return
return:
	%45 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %45
}
define internal %ast.AstNode* @stmt_Alias() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%s = alloca %symb.SymbNode*
	%ns = alloca %symb.SymbNode*
	%tok = alloca i8
	%0 = load i8* @lex_Token
	store i8 %0, i8* %tok
	br label %L.1
L.1:
	%1 = load i8* %tok
	%2 = icmp eq i8 %1, 40
	br i1 %2, label %L.4, label %L.5
L.4:
	%3 = getelementptr [64 x i8]* @lex_Ident
	%4 = bitcast [64 x i8]* %3 to [0 x i8]*
	%5 = call %symb.SymbNode* @symb_Find([0 x i8]* %4)
	%6 = bitcast %symb.SymbNode* %5 to %symb.SymbNode*
	store %symb.SymbNode* %6, %symb.SymbNode** %s
	%7 = load %symb.SymbNode** %s
	%8 = icmp eq %symb.SymbNode* %7, null
	br i1 %8, label %L.7, label %L.6
L.7:
	%9 = getelementptr [64 x i8]* @lex_Ident
	%10 = bitcast [64 x i8]* %9 to [0 x i8]*
	call void @lex_ErrorI(i8 16, [0 x i8]* %10)
	br label %L.6
L.6:
	%11 = call i8 @lex_Next()
	store i8 %11, i8* %tok
	%12 = getelementptr [2 x i8]* @stmt_aslist
	%13 = bitcast [2 x i8]* %12 to [0 x i8]*
	%14 = call i8 @lex_Keyword([0 x i8]* %13)
	store i8 %14, i8* %tok
	%15 = load i8* %tok
	%16 = icmp eq i8 %15, 59
	br i1 %16, label %L.9, label %L.10
L.9:
	%17 = call i8 @lex_Next()
	store i8 %17, i8* %tok
	%18 = load i8* %tok
	%19 = icmp eq i8 %18, 40
	br i1 %19, label %L.12, label %L.13
L.12:
	%20 = getelementptr [64 x i8]* @lex_Ident
	%21 = bitcast [64 x i8]* %20 to [0 x i8]*
	%22 = call %symb.SymbNode* @symb_FindTop([0 x i8]* %21)
	%23 = bitcast %symb.SymbNode* %22 to %symb.SymbNode*
	store %symb.SymbNode* %23, %symb.SymbNode** %ns
	%24 = load %symb.SymbNode** %ns
	%25 = icmp eq %symb.SymbNode* %24, null
	br i1 %25, label %L.15, label %L.16
L.15:
	%26 = load %symb.SymbNode** %s
	%27 = bitcast %symb.SymbNode* %26 to %symb.SymbNode*
	%28 = getelementptr [64 x i8]* @lex_Ident
	%29 = bitcast [64 x i8]* %28 to [0 x i8]*
	%30 = call %symb.SymbNode* @symb_Clone(%symb.SymbNode* %27, [0 x i8]* %29)
	%31 = bitcast %symb.SymbNode* %30 to %symb.SymbNode*
	store %symb.SymbNode* %31, %symb.SymbNode** %s
	%32 = call i8 @lex_Next()
	store i8 %32, i8* %tok
	br label %L.14
L.16:
	%33 = call i8 @lex_Next()
	store i8 %33, i8* %tok
	%34 = load %symb.SymbNode** %ns
	%35 = getelementptr %symb.SymbNode* %34, i32 0, i32 12
	%36 = load i8* %35
	%37 = icmp eq i8 %36, 6
	br i1 %37, label %L.18, label %L.19
L.18:
	%38 = load i8* %tok
	%39 = icmp eq i8 %38, 2
	br i1 %39, label %L.21, label %L.22
L.21:
	%40 = call i8 @lex_Next()
	store i8 %40, i8* %tok
	%41 = load i8* %tok
	%42 = icmp eq i8 %41, 40
	br i1 %42, label %L.24, label %L.25
L.24:
	%43 = load %symb.SymbNode** %ns
	%44 = getelementptr %symb.SymbNode* %43, i32 0, i32 5
	%45 = load %symb.SymbNode** %44
	%46 = bitcast %symb.SymbNode* %45 to %symb.SymbNode*
	%47 = getelementptr [64 x i8]* @lex_Ident
	%48 = bitcast [64 x i8]* %47 to [0 x i8]*
	%49 = call %symb.SymbNode* @symb_FindLocal(%symb.SymbNode* %46, [0 x i8]* %48)
	%50 = bitcast %symb.SymbNode* %49 to %symb.SymbNode*
	store %symb.SymbNode* %50, %symb.SymbNode** %ns
	%51 = load %symb.SymbNode** %ns
	%52 = icmp ne %symb.SymbNode* %51, null
	br i1 %52, label %L.27, label %L.28
L.27:
	%53 = load %symb.SymbNode** %s
	%54 = getelementptr %symb.SymbNode* %53, i32 0, i32 12
	%55 = load i8* %54
	%56 = icmp eq i8 %55, 2
	br i1 %56, label %L.29, label %L.30
L.29:
	%57 = load %symb.SymbNode** %ns
	%58 = getelementptr %symb.SymbNode* %57, i32 0, i32 12
	%59 = load i8* %58
	%60 = icmp eq i8 %59, 2
	br label %L.30
L.30:
	%61 = phi i1 [ false, %L.27 ], [ %60, %L.29 ]
	br i1 %61, label %L.32, label %L.33
L.32:
	%62 = load %symb.SymbNode** %ns
	%63 = bitcast %symb.SymbNode* %62 to %symb.SymbNode*
	%64 = load %symb.SymbNode** %s
	%65 = getelementptr %symb.SymbNode* %64, i32 0, i32 1
	%66 = load %type.TypeNode** %65
	%67 = bitcast %type.TypeNode* %66 to %type.TypeNode*
	call void @type_FwdFix(%symb.SymbNode* %63, %type.TypeNode* %67)
	br label %L.31
L.33:
	call void @lex_Error(i8 23)
	br label %L.31
L.31:
	br label %L.26
L.28:
	%68 = getelementptr [64 x i8]* @lex_Ident
	%69 = bitcast [64 x i8]* %68 to [0 x i8]*
	call void @lex_ErrorI(i8 16, [0 x i8]* %69)
	br label %L.26
L.26:
	%70 = call i8 @lex_Next()
	store i8 %70, i8* %tok
	br label %L.23
L.25:
	call void @lex_Error(i8 15)
	br label %L.23
L.23:
	br label %L.20
L.22:
	%71 = getelementptr [64 x i8]* @lex_Ident
	%72 = bitcast [64 x i8]* %71 to [0 x i8]*
	call void @lex_ErrorI(i8 17, [0 x i8]* %72)
	br label %L.20
L.20:
	br label %L.17
L.19:
	%73 = getelementptr [64 x i8]* @lex_Ident
	%74 = bitcast [64 x i8]* %73 to [0 x i8]*
	call void @lex_ErrorI(i8 17, [0 x i8]* %74)
	br label %L.17
L.17:
	br label %L.14
L.14:
	br label %L.11
L.13:
	call void @lex_Error(i8 15)
	br label %L.11
L.11:
	br label %L.8
L.10:
	call void @lex_ErrorT(i8 14, i8 59)
	br label %L.8
L.8:
	br label %L.3
L.5:
	call void @lex_Error(i8 15)
	br label %L.3
L.3:
	%75 = load i8* %tok
	%76 = icmp ne i8 %75, 5
	br i1 %76, label %L.2, label %L.34
L.34:
	%77 = call i8 @lex_Next()
	store i8 %77, i8* %tok
	br label %L.1
L.2:
	%78 = call i8 @lex_Expect(i8 4)
	store i8 %78, i8* %tok
	%79 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %79, %ast.AstNode** %rv.0
	br label %return
return:
	%80 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %80
}
@stmt_stmtlist = internal constant [13 x i8] [ i8 41, i8 42, i8 43, i8 47, i8 51, i8 52, i8 54, i8 55, i8 46, i8 60, i8 61, i8 58, i8 0 ], align 1
define internal %ast.AstNode* @stmt_Statement() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%stree = alloca %ast.AstNode*
	%tok = alloca i8
	%tok2 = alloca i8
	%s = alloca %symb.SymbNode*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 36
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = call i8 @lex_Next()
	store i8 %4, i8* %tok
	%5 = bitcast %type.TypeNode* null to %type.TypeNode*
	%6 = call %ast.AstNode* @ast_New(i8 64, %type.TypeNode* %5)
	%7 = bitcast %ast.AstNode* %6 to %ast.AstNode*
	store %ast.AstNode* %7, %ast.AstNode** %tree
	br label %L.4
L.4:
	%8 = load i8* %tok
	%9 = icmp ne i8 %8, 37
	br i1 %9, label %L.7, label %L.8
L.7:
	%10 = load i8* %tok
	%11 = icmp ne i8 %10, 1
	br label %L.8
L.8:
	%12 = phi i1 [ false, %L.4 ], [ %11, %L.7 ]
	%13 = xor i1 %12, true
	br i1 %13, label %L.5, label %L.6
L.6:
	%14 = call %ast.AstNode* @stmt_Statement()
	%15 = bitcast %ast.AstNode* %14 to %ast.AstNode*
	store %ast.AstNode* %15, %ast.AstNode** %stree
	%16 = load %ast.AstNode** %stree
	%17 = icmp ne %ast.AstNode* %16, null
	br i1 %17, label %L.10, label %L.9
L.10:
	%18 = load %ast.AstNode** %tree
	%19 = bitcast %ast.AstNode* %18 to %ast.AstNode*
	%20 = load %ast.AstNode** %stree
	%21 = bitcast %ast.AstNode* %20 to %ast.AstNode*
	%22 = call %ast.AstNode* @ast_Child(%ast.AstNode* %19, %ast.AstNode* %21)
	%23 = bitcast %ast.AstNode* %22 to %ast.AstNode*
	store %ast.AstNode* %23, %ast.AstNode** %tree
	br label %L.9
L.9:
	%24 = load i8* @lex_Token
	store i8 %24, i8* %tok
	br label %L.4
L.5:
	%25 = call i8 @lex_Expect(i8 37)
	store i8 %25, i8* %tok
	br label %L.1
L.3:
	%26 = getelementptr [13 x i8]* @stmt_stmtlist
	%27 = bitcast [13 x i8]* %26 to [0 x i8]*
	%28 = call i8 @lex_Keyword([0 x i8]* %27)
	store i8 %28, i8* %tok
	%29 = getelementptr [64 x i8]* @lex_Ident
	%30 = bitcast [64 x i8]* %29 to [0 x i8]*
	%31 = call %symb.SymbNode* @symb_FindTop([0 x i8]* %30)
	%32 = bitcast %symb.SymbNode* %31 to %symb.SymbNode*
	store %symb.SymbNode* %32, %symb.SymbNode** %s
	%33 = call i8 @lex_Next()
	store i8 %33, i8* %tok2
	%34 = load i8* %tok
	%35 = icmp ugt i8 %34, 40
	br i1 %35, label %L.11, label %L.12
L.11:
	%36 = load %symb.SymbNode** %s
	%37 = icmp ne %symb.SymbNode* %36, null
	br label %L.12
L.12:
	%38 = phi i1 [ false, %L.3 ], [ %37, %L.11 ]
	br i1 %38, label %L.14, label %L.13
L.14:
	%39 = load i8* %tok2
	%40 = zext i8 %39 to i32
	switch i32 %40, label %L.15 [
		i32 9, label %L.17
		i32 10, label %L.17
		i32 11, label %L.17
		i32 34, label %L.17
		i32 2, label %L.17
		i32 7, label %L.17
		i32 32, label %L.17
		i32 5, label %L.17
	]
L.17:
	store i8 40, i8* %tok
	br label %L.16
L.15:
	br label %L.16
L.16:
	br label %L.13
L.13:
	%41 = load i8* %tok
	%42 = zext i8 %41 to i32
	switch i32 %42, label %L.18 [
		i32 40, label %L.20
		i32 41, label %L.21
		i32 42, label %L.22
		i32 43, label %L.23
		i32 47, label %L.24
		i32 51, label %L.25
		i32 52, label %L.26
		i32 54, label %L.27
		i32 55, label %L.28
		i32 46, label %L.29
		i32 61, label %L.30
		i32 60, label %L.31
		i32 58, label %L.32
		i32 4, label %L.33
	]
L.20:
	%43 = load %symb.SymbNode** %s
	%44 = icmp ne %symb.SymbNode* %43, null
	br i1 %44, label %L.35, label %L.36
L.35:
	%45 = load %symb.SymbNode** %s
	%46 = bitcast %symb.SymbNode* %45 to %symb.SymbNode*
	%47 = call %ast.AstNode* @stmt_AssignOrCall(%symb.SymbNode* %46)
	%48 = bitcast %ast.AstNode* %47 to %ast.AstNode*
	store %ast.AstNode* %48, %ast.AstNode** %tree
	br label %L.34
L.36:
	%49 = getelementptr [64 x i8]* @lex_Ident
	%50 = bitcast [64 x i8]* %49 to [0 x i8]*
	call void @lex_ErrorI(i8 31, [0 x i8]* %50)
	%51 = getelementptr [13 x i8]* @stmt_stmtlist
	%52 = bitcast [13 x i8]* %51 to [0 x i8]*
	%53 = call i8 @lex_Skip([0 x i8]* %52)
	store i8 %53, i8* %tok
	br label %L.34
L.34:
	br label %L.19
L.21:
	%54 = call %ast.AstNode* @stmt_TypeDecl()
	%55 = bitcast %ast.AstNode* %54 to %ast.AstNode*
	store %ast.AstNode* %55, %ast.AstNode** %tree
	br label %L.19
L.22:
	%56 = call %ast.AstNode* @stmt_VarDecl()
	%57 = bitcast %ast.AstNode* %56 to %ast.AstNode*
	store %ast.AstNode* %57, %ast.AstNode** %tree
	br label %L.19
L.23:
	%58 = call %ast.AstNode* @stmt_ConstDecl()
	%59 = bitcast %ast.AstNode* %58 to %ast.AstNode*
	store %ast.AstNode* %59, %ast.AstNode** %tree
	br label %L.19
L.24:
	%60 = call %ast.AstNode* @stmt_If()
	%61 = bitcast %ast.AstNode* %60 to %ast.AstNode*
	store %ast.AstNode* %61, %ast.AstNode** %tree
	br label %L.19
L.25:
	%62 = call %ast.AstNode* @stmt_For()
	%63 = bitcast %ast.AstNode* %62 to %ast.AstNode*
	store %ast.AstNode* %63, %ast.AstNode** %tree
	br label %L.19
L.26:
	%64 = call %ast.AstNode* @stmt_While()
	%65 = bitcast %ast.AstNode* %64 to %ast.AstNode*
	store %ast.AstNode* %65, %ast.AstNode** %tree
	br label %L.19
L.27:
	%66 = call %ast.AstNode* @stmt_Loop()
	%67 = bitcast %ast.AstNode* %66 to %ast.AstNode*
	store %ast.AstNode* %67, %ast.AstNode** %tree
	br label %L.19
L.28:
	%68 = call %ast.AstNode* @stmt_Exit()
	%69 = bitcast %ast.AstNode* %68 to %ast.AstNode*
	store %ast.AstNode* %69, %ast.AstNode** %tree
	br label %L.19
L.29:
	%70 = call %ast.AstNode* @stmt_Return()
	%71 = bitcast %ast.AstNode* %70 to %ast.AstNode*
	store %ast.AstNode* %71, %ast.AstNode** %tree
	br label %L.19
L.30:
	%72 = call %ast.AstNode* @stmt_Asm()
	%73 = bitcast %ast.AstNode* %72 to %ast.AstNode*
	store %ast.AstNode* %73, %ast.AstNode** %tree
	br label %L.19
L.31:
	%74 = call %ast.AstNode* @stmt_WhenStmt(i8 2)
	%75 = bitcast %ast.AstNode* %74 to %ast.AstNode*
	store %ast.AstNode* %75, %ast.AstNode** %tree
	br label %L.19
L.32:
	%76 = call %ast.AstNode* @stmt_Alias()
	%77 = bitcast %ast.AstNode* %76 to %ast.AstNode*
	store %ast.AstNode* %77, %ast.AstNode** %tree
	br label %L.19
L.33:
	br label %L.19
L.18:
	%78 = load i8* %tok
	call void @lex_ErrorT(i8 32, i8 %78)
	br label %L.19
L.19:
	br label %L.1
L.1:
	%79 = load %ast.AstNode** %tree
	%80 = bitcast %ast.AstNode* %79 to %ast.AstNode*
	store %ast.AstNode* %80, %ast.AstNode** %rv.0
	br label %return
return:
	%81 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %81
}
define internal %ast.AstNode* @stmt_Procedure() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%tok = alloca i8
	%t = alloca %type.TypeNode*
	%mt = alloca %type.TypeNode*
	%s = alloca %symb.SymbNode*
	%ms = alloca %symb.SymbNode*
	%fs = alloca %symb.SymbNode*
	%ft = alloca %type.TypeListEntry*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = bitcast %type.TypeNode* null to %type.TypeNode*
	store %type.TypeNode* %1, %type.TypeNode** %mt
	%2 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %2, %symb.SymbNode** %ms
	%3 = load i8* @lex_Token
	store i8 %3, i8* %tok
	%4 = load i8* %tok
	%5 = icmp eq i8 %4, 32
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = call i8 @lex_Next()
	store i8 %6, i8* %tok
	%7 = load i8* %tok
	%8 = icmp eq i8 %7, 40
	br i1 %8, label %L.4, label %L.5
L.4:
	%9 = getelementptr [64 x i8]* @lex_Ident
	%10 = bitcast [64 x i8]* %9 to [0 x i8]*
	%11 = call %symb.SymbNode* @symb_New(i8 3, [0 x i8]* %10, i8 2)
	%12 = bitcast %symb.SymbNode* %11 to %symb.SymbNode*
	store %symb.SymbNode* %12, %symb.SymbNode** %ms
	%13 = load %symb.SymbNode** %ms
	%14 = getelementptr %symb.SymbNode* %13, i32 0, i32 16
	store i8 1, i8* %14
	%15 = load %symb.SymbNode** %ms
	%16 = getelementptr %symb.SymbNode* %15, i32 0, i32 13
	store i8 0, i8* %16
	%17 = bitcast %type.TypeNode* null to %type.TypeNode*
	store %type.TypeNode* %17, %type.TypeNode** %t
	%18 = call i8 @lex_Next()
	store i8 %18, i8* %tok
	%19 = load i8* %tok
	%20 = icmp eq i8 %19, 3
	br i1 %20, label %L.7, label %L.8
L.7:
	%21 = call i8 @lex_Next()
	store i8 %21, i8* %tok
	%22 = load i8* %tok
	%23 = zext i8 %22 to i32
	switch i32 %23, label %L.9 [
		i32 7, label %L.11
		i32 40, label %L.12
	]
L.11:
	%24 = call %type.TypeNode* @type_Ref()
	%25 = bitcast %type.TypeNode* %24 to %type.TypeNode*
	store %type.TypeNode* %25, %type.TypeNode** %t
	%26 = load %type.TypeNode** %t
	%27 = getelementptr %type.TypeNode* %26, i32 0, i32 0
	%28 = load %type.TypeNode** %27
	%29 = bitcast %type.TypeNode* %28 to %type.TypeNode*
	store %type.TypeNode* %29, %type.TypeNode** %mt
	br label %L.10
L.12:
	%30 = call %symb.SymbNode* @type_Name()
	%31 = bitcast %symb.SymbNode* %30 to %symb.SymbNode*
	store %symb.SymbNode* %31, %symb.SymbNode** %s
	%32 = call i8 @lex_Next()
	store i8 %32, i8* %tok
	%33 = load %symb.SymbNode** %s
	%34 = icmp ne %symb.SymbNode* %33, null
	br i1 %34, label %L.14, label %L.15
L.14:
	%35 = load %symb.SymbNode** %s
	%36 = getelementptr %symb.SymbNode* %35, i32 0, i32 1
	%37 = load %type.TypeNode** %36
	%38 = bitcast %type.TypeNode* %37 to %type.TypeNode*
	store %type.TypeNode* %38, %type.TypeNode** %t
	%39 = load %type.TypeNode** %t
	%40 = bitcast %type.TypeNode* %39 to %type.TypeNode*
	store %type.TypeNode* %40, %type.TypeNode** %mt
	%41 = load %type.TypeNode** %t
	%42 = icmp ne %type.TypeNode* %41, null
	br i1 %42, label %L.16, label %L.17
L.16:
	%43 = load %type.TypeNode** %t
	%44 = getelementptr %type.TypeNode* %43, i32 0, i32 13
	%45 = load i8* %44
	%46 = icmp eq i8 %45, 4
	br label %L.17
L.17:
	%47 = phi i1 [ false, %L.14 ], [ %46, %L.16 ]
	br i1 %47, label %L.19, label %L.18
L.19:
	%48 = load %type.TypeNode** %t
	%49 = getelementptr %type.TypeNode* %48, i32 0, i32 0
	%50 = load %type.TypeNode** %49
	%51 = bitcast %type.TypeNode* %50 to %type.TypeNode*
	store %type.TypeNode* %51, %type.TypeNode** %mt
	br label %L.18
L.18:
	br label %L.13
L.15:
	call void @lex_Error(i8 23)
	br label %L.13
L.13:
	br label %L.10
L.9:
	call void @lex_ErrorT(i8 14, i8 40)
	br label %L.10
L.10:
	br label %L.6
L.8:
	call void @lex_ErrorT(i8 14, i8 3)
	br label %L.6
L.6:
	%52 = load %type.TypeNode** %t
	%53 = bitcast %type.TypeNode* %52 to %type.TypeNode*
	%54 = load %symb.SymbNode** %ms
	%55 = getelementptr %symb.SymbNode* %54, i32 0, i32 1
	store %type.TypeNode* %53, %type.TypeNode** %55
	br label %L.3
L.5:
	call void @lex_ErrorT(i8 14, i8 40)
	br label %L.3
L.3:
	%56 = call i8 @lex_Expect(i8 33)
	store i8 %56, i8* %tok
	br label %L.1
L.1:
	%57 = load i8* %tok
	%58 = icmp eq i8 %57, 40
	br i1 %58, label %L.21, label %L.22
L.21:
	%59 = load %type.TypeNode** %mt
	%60 = icmp ne %type.TypeNode* %59, null
	br i1 %60, label %L.24, label %L.25
L.24:
	%61 = load %type.TypeNode** %mt
	%62 = getelementptr %type.TypeNode* %61, i32 0, i32 5
	%63 = load %symb.SymbNode** %62
	%64 = bitcast %symb.SymbNode* %63 to %symb.SymbNode*
	%65 = getelementptr [64 x i8]* @lex_Ident
	%66 = bitcast [64 x i8]* %65 to [0 x i8]*
	%67 = call %symb.SymbNode* @symb_FindMethod(%symb.SymbNode* %64, [0 x i8]* %66)
	%68 = bitcast %symb.SymbNode* %67 to %symb.SymbNode*
	store %symb.SymbNode* %68, %symb.SymbNode** %s
	%69 = load %symb.SymbNode** %s
	%70 = icmp ne %symb.SymbNode* %69, null
	br i1 %70, label %L.27, label %L.28
L.27:
	%71 = load %symb.SymbNode** %s
	%72 = getelementptr %symb.SymbNode* %71, i32 0, i32 14
	%73 = load i8* %72
	%74 = icmp ne i8 %73, 0
	%75 = xor i1 %74, true
	br i1 %75, label %L.30, label %L.29
L.30:
	%76 = getelementptr [64 x i8]* @lex_Ident
	%77 = bitcast [64 x i8]* %76 to [0 x i8]*
	call void @lex_ErrorI(i8 17, [0 x i8]* %77)
	br label %L.29
L.29:
	br label %L.26
L.28:
	%78 = getelementptr [64 x i8]* @lex_Ident
	%79 = bitcast [64 x i8]* %78 to [0 x i8]*
	%80 = call %symb.SymbNode* @symb_New(i8 5, [0 x i8]* %79, i8 2)
	%81 = bitcast %symb.SymbNode* %80 to %symb.SymbNode*
	store %symb.SymbNode* %81, %symb.SymbNode** %s
	%82 = load %type.TypeNode** %mt
	%83 = getelementptr %type.TypeNode* %82, i32 0, i32 5
	%84 = load %symb.SymbNode** %83
	%85 = bitcast %symb.SymbNode* %84 to %symb.SymbNode*
	%86 = load %symb.SymbNode** %s
	%87 = getelementptr %symb.SymbNode* %86, i32 0, i32 6
	store %symb.SymbNode* %85, %symb.SymbNode** %87
	%88 = load %symb.SymbNode** %s
	%89 = bitcast %symb.SymbNode* %88 to %symb.SymbNode*
	%90 = load %type.TypeNode** %mt
	%91 = getelementptr %type.TypeNode* %90, i32 0, i32 5
	store %symb.SymbNode* %89, %symb.SymbNode** %91
	br label %L.26
L.26:
	br label %L.23
L.25:
	%92 = getelementptr [64 x i8]* @lex_Ident
	%93 = bitcast [64 x i8]* %92 to [0 x i8]*
	%94 = call %symb.SymbNode* @symb_New(i8 5, [0 x i8]* %93, i8 0)
	%95 = bitcast %symb.SymbNode* %94 to %symb.SymbNode*
	store %symb.SymbNode* %95, %symb.SymbNode** %s
	br label %L.23
L.23:
	%96 = call i8 @lex_Next()
	store i8 %96, i8* %tok
	%97 = load %symb.SymbNode** %s
	%98 = getelementptr %symb.SymbNode* %97, i32 0, i32 3
	%99 = load %symb.SymbNode** %98
	%100 = bitcast %symb.SymbNode* %99 to %symb.SymbNode*
	store %symb.SymbNode* %100, %symb.SymbNode** %fs
	%101 = load %symb.SymbNode** %s
	%102 = getelementptr %symb.SymbNode* %101, i32 0, i32 4
	%103 = load %type.TypeListEntry** %102
	%104 = bitcast %type.TypeListEntry* %103 to %type.TypeListEntry*
	store %type.TypeListEntry* %104, %type.TypeListEntry** %ft
	%105 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%106 = load %symb.SymbNode** %s
	%107 = getelementptr %symb.SymbNode* %106, i32 0, i32 3
	store %symb.SymbNode* %105, %symb.SymbNode** %107
	%108 = load %symb.SymbNode** %s
	%109 = bitcast %symb.SymbNode* %108 to %symb.SymbNode*
	%110 = load %symb.SymbNode** %ms
	%111 = bitcast %symb.SymbNode* %110 to %symb.SymbNode*
	call void @type_DefProc(%symb.SymbNode* %109, %symb.SymbNode* %111)
	%112 = load %symb.SymbNode** %s
	%113 = getelementptr %symb.SymbNode* %112, i32 0, i32 14
	%114 = load i8* %113
	%115 = icmp ne i8 %114, 0
	br i1 %115, label %L.32, label %L.31
L.32:
	%116 = load %symb.SymbNode** %fs
	%117 = bitcast %symb.SymbNode* %116 to %symb.SymbNode*
	%118 = load %symb.SymbNode** %s
	%119 = getelementptr %symb.SymbNode* %118, i32 0, i32 3
	%120 = load %symb.SymbNode** %119
	%121 = bitcast %symb.SymbNode* %120 to %symb.SymbNode*
	%122 = call i8 @type_SameSymbList(%symb.SymbNode* %117, %symb.SymbNode* %121)
	%123 = icmp ne i8 %122, 0
	%124 = xor i1 %123, true
	br i1 %124, label %L.34, label %L.33
L.34:
	%125 = load %symb.SymbNode** %s
	%126 = getelementptr %symb.SymbNode* %125, i32 0, i32 19
	%127 = getelementptr [0 x i8]* %126
	%128 = bitcast [0 x i8]* %127 to [0 x i8]*
	call void @lex_ErrorI(i8 43, [0 x i8]* %128)
	br label %L.33
L.33:
	%129 = load %type.TypeListEntry** %ft
	%130 = bitcast %type.TypeListEntry* %129 to %type.TypeListEntry*
	%131 = load %symb.SymbNode** %s
	%132 = getelementptr %symb.SymbNode* %131, i32 0, i32 4
	%133 = load %type.TypeListEntry** %132
	%134 = bitcast %type.TypeListEntry* %133 to %type.TypeListEntry*
	%135 = call i8 @type_SameTypeList(%type.TypeListEntry* %130, %type.TypeListEntry* %134)
	%136 = icmp ne i8 %135, 0
	%137 = xor i1 %136, true
	br i1 %137, label %L.36, label %L.35
L.36:
	%138 = load %symb.SymbNode** %s
	%139 = getelementptr %symb.SymbNode* %138, i32 0, i32 19
	%140 = getelementptr [0 x i8]* %139
	%141 = bitcast [0 x i8]* %140 to [0 x i8]*
	call void @lex_ErrorI(i8 44, [0 x i8]* %141)
	br label %L.35
L.35:
	br label %L.31
L.31:
	%142 = load i8* @lex_Token
	store i8 %142, i8* %tok
	%143 = load i8* %tok
	%144 = icmp eq i8 %143, 3
	br i1 %144, label %L.38, label %L.37
L.38:
	%145 = load %symb.SymbNode** %s
	%146 = bitcast %symb.SymbNode* %145 to %symb.SymbNode*
	call void @type_ProcAttributes(%symb.SymbNode* %146)
	%147 = load i8* @lex_Token
	store i8 %147, i8* %tok
	br label %L.37
L.37:
	%148 = load i8* %tok
	%149 = icmp ne i8 %148, 4
	br i1 %149, label %L.40, label %L.41
L.40:
	%150 = load %symb.SymbNode** %s
	%151 = getelementptr %symb.SymbNode* %150, i32 0, i32 14
	store i8 0, i8* %151
	%152 = load %symb.SymbNode** %s
	%153 = bitcast %symb.SymbNode* %152 to %symb.SymbNode*
	store %symb.SymbNode* %153, %symb.SymbNode** @symb_curproc
	%154 = load %symb.SymbNode** %s
	%155 = getelementptr %symb.SymbNode* %154, i32 0, i32 3
	%156 = load %symb.SymbNode** %155
	%157 = bitcast %symb.SymbNode* %156 to %symb.SymbNode*
	call void @symb_Push(%symb.SymbNode* %157)
	%158 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	call void @symb_Push(%symb.SymbNode* %158)
	store i8 0, i8* @stmt_LoopLevel
	%159 = call %ast.AstNode* @stmt_Statement()
	%160 = bitcast %ast.AstNode* %159 to %ast.AstNode*
	store %ast.AstNode* %160, %ast.AstNode** %tree
	%161 = getelementptr %A.2* @debug, i32 0, i32 0
	%162 = getelementptr %A.1* %161, i32 0, i32 3
	%163 = load i8* %162
	%164 = icmp ne i8 %163, 0
	br i1 %164, label %L.43, label %L.42
L.43:
	call void @symb_Dump(i8 2)
	br label %L.42
L.42:
	call void @symb_Pop()
	call void @symb_Pop()
	%165 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %165, %symb.SymbNode** @symb_curproc
	%166 = load %symb.SymbNode** %s
	%167 = getelementptr %symb.SymbNode* %166, i32 0, i32 1
	%168 = load %type.TypeNode** %167
	%169 = bitcast %type.TypeNode* %168 to %type.TypeNode*
	store %type.TypeNode* %169, %type.TypeNode** %t
	%170 = load %type.TypeNode** %t
	%171 = bitcast %type.TypeNode* %170 to %type.TypeNode*
	%172 = load %ast.AstNode** %tree
	%173 = bitcast %ast.AstNode* %172 to %ast.AstNode*
	%174 = call %ast.AstNode* @ast_New1(i8 71, %type.TypeNode* %171, %ast.AstNode* %173)
	%175 = bitcast %ast.AstNode* %174 to %ast.AstNode*
	store %ast.AstNode* %175, %ast.AstNode** %tree
	%176 = load %symb.SymbNode** %s
	%177 = bitcast %symb.SymbNode* %176 to %symb.SymbNode*
	%178 = load %ast.AstNode** %tree
	%179 = getelementptr %ast.AstNode* %178, i32 0, i32 12
	store %symb.SymbNode* %177, %symb.SymbNode** %179
	%180 = load %type.TypeNode** %t
	%181 = icmp ne %type.TypeNode* %180, null
	br i1 %181, label %L.44, label %L.45
L.44:
	%182 = load %type.TypeNode** %t
	%183 = getelementptr %type.TypeNode* %182, i32 0, i32 13
	%184 = load i8* %183
	%185 = icmp eq i8 %184, 4
	br label %L.45
L.45:
	%186 = phi i1 [ false, %L.42 ], [ %185, %L.44 ]
	br i1 %186, label %L.47, label %L.46
L.47:
	%187 = load %type.TypeNode** %t
	%188 = getelementptr %type.TypeNode* %187, i32 0, i32 0
	%189 = load %type.TypeNode** %188
	%190 = bitcast %type.TypeNode* %189 to %type.TypeNode*
	%191 = load %ast.AstNode** %tree
	%192 = getelementptr %ast.AstNode* %191, i32 0, i32 11
	store %type.TypeNode* %190, %type.TypeNode** %192
	%193 = load %target.TargetT** @target_Target
	%194 = getelementptr %target.TargetT* %193, i32 0, i32 8
	%195 = getelementptr %target.SizeAlign* %194, i32 0, i32 0
	%196 = load i8* %195
	%197 = zext i8 %196 to i32
	%198 = load %ast.AstNode** %tree
	%199 = getelementptr %ast.AstNode* %198, i32 0, i32 6
	store i32 %197, i32* %199
	br label %L.46
L.46:
	br label %L.39
L.41:
	%200 = call i8 @lex_Next()
	store i8 %200, i8* %tok
	%201 = load %symb.SymbNode** %s
	%202 = getelementptr %symb.SymbNode* %201, i32 0, i32 13
	%203 = load i8* %202
	%204 = zext i8 %203 to i32
	switch i32 %204, label %L.48 [
		i32 3, label %L.50
		i32 4, label %L.50
	]
L.50:
	%205 = load %symb.SymbNode** %s
	%206 = getelementptr %symb.SymbNode* %205, i32 0, i32 14
	store i8 0, i8* %206
	br label %L.49
L.48:
	%207 = load %symb.SymbNode** %s
	%208 = getelementptr %symb.SymbNode* %207, i32 0, i32 14
	store i8 1, i8* %208
	br label %L.49
L.49:
	br label %L.39
L.39:
	br label %L.20
L.22:
	call void @lex_ErrorT(i8 14, i8 40)
	br label %L.20
L.20:
	%209 = load %ast.AstNode** %tree
	%210 = bitcast %ast.AstNode* %209 to %ast.AstNode*
	store %ast.AstNode* %210, %ast.AstNode** %rv.0
	br label %return
return:
	%211 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %211
}
define internal %ast.AstNode* @stmt_Import() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = load i8* @lex_Token
	store i8 %0, i8* %tok
	%1 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %1, %ast.AstNode** %tree
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 40
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = getelementptr [64 x i8]* @lex_Ident
	%5 = bitcast [64 x i8]* %4 to [0 x i8]*
	%6 = call i8 @lex_FileCheck([0 x i8]* %5)
	%7 = icmp ne i8 %6, 0
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = getelementptr [64 x i8]* @lex_Ident
	%9 = bitcast [64 x i8]* %8 to [0 x i8]*
	%10 = call i8 @lex_FileOpen([0 x i8]* %9)
	%11 = icmp ne i8 %10, 0
	br i1 %11, label %L.6, label %L.7
L.6:
	%12 = getelementptr [64 x i8]* @lex_Ident
	%13 = bitcast [64 x i8]* %12 to [0 x i8]*
	%14 = call %ast.AstNode* @stmt_Program([0 x i8]* %13)
	%15 = bitcast %ast.AstNode* %14 to %ast.AstNode*
	store %ast.AstNode* %15, %ast.AstNode** %tree
	call void @lex_FileClose()
	br label %L.5
L.7:
	%16 = getelementptr [64 x i8]* @lex_Ident
	%17 = bitcast [64 x i8]* %16 to [0 x i8]*
	call void @lex_ErrorI(i8 69, [0 x i8]* %17)
	br label %L.5
L.5:
	br label %L.3
L.3:
	%18 = call i8 @lex_Next()
	store i8 %18, i8* %tok
	%19 = call i8 @lex_Expect(i8 4)
	store i8 %19, i8* %tok
	br label %L.1
L.1:
	%20 = load %ast.AstNode** %tree
	%21 = bitcast %ast.AstNode* %20 to %ast.AstNode*
	store %ast.AstNode* %21, %ast.AstNode** %rv.0
	br label %return
return:
	%22 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %22
}
@stmt_packlist = internal constant [9 x i8] [ i8 41, i8 42, i8 43, i8 44, i8 58, i8 45, i8 57, i8 60, i8 0 ], align 1
define internal %ast.AstNode* @stmt_PkgStmt() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = getelementptr [9 x i8]* @stmt_packlist
	%2 = bitcast [9 x i8]* %1 to [0 x i8]*
	%3 = call i8 @lex_Keyword([0 x i8]* %2)
	store i8 %3, i8* %tok
	%4 = load i8* %tok
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.1 [
		i32 58, label %L.3
		i32 41, label %L.4
		i32 42, label %L.5
		i32 43, label %L.6
		i32 44, label %L.7
		i32 45, label %L.8
		i32 57, label %L.9
		i32 60, label %L.10
	]
L.3:
	%6 = call i8 @lex_Next()
	store i8 %6, i8* %tok
	%7 = call %ast.AstNode* @stmt_Alias()
	%8 = bitcast %ast.AstNode* %7 to %ast.AstNode*
	store %ast.AstNode* %8, %ast.AstNode** %tree
	br label %L.2
L.4:
	%9 = call i8 @lex_Next()
	store i8 %9, i8* %tok
	%10 = call %ast.AstNode* @stmt_TypeDecl()
	%11 = bitcast %ast.AstNode* %10 to %ast.AstNode*
	store %ast.AstNode* %11, %ast.AstNode** %tree
	br label %L.2
L.5:
	%12 = call i8 @lex_Next()
	store i8 %12, i8* %tok
	%13 = call %ast.AstNode* @stmt_VarDecl()
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	store %ast.AstNode* %14, %ast.AstNode** %tree
	br label %L.2
L.6:
	%15 = call i8 @lex_Next()
	store i8 %15, i8* %tok
	%16 = call %ast.AstNode* @stmt_ConstDecl()
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	store %ast.AstNode* %17, %ast.AstNode** %tree
	br label %L.2
L.7:
	%18 = call i8 @lex_Next()
	store i8 %18, i8* %tok
	%19 = call %ast.AstNode* @stmt_Procedure()
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	store %ast.AstNode* %20, %ast.AstNode** %tree
	br label %L.2
L.8:
	%21 = call i8 @lex_Next()
	store i8 %21, i8* %tok
	%22 = call %ast.AstNode* @stmt_Package()
	%23 = bitcast %ast.AstNode* %22 to %ast.AstNode*
	store %ast.AstNode* %23, %ast.AstNode** %tree
	br label %L.2
L.9:
	%24 = call i8 @lex_Next()
	store i8 %24, i8* %tok
	%25 = call %ast.AstNode* @stmt_Import()
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	store %ast.AstNode* %26, %ast.AstNode** %tree
	br label %L.2
L.10:
	%27 = call i8 @lex_Next()
	store i8 %27, i8* %tok
	%28 = call %ast.AstNode* @stmt_WhenStmt(i8 1)
	%29 = bitcast %ast.AstNode* %28 to %ast.AstNode*
	store %ast.AstNode* %29, %ast.AstNode** %tree
	br label %L.2
L.1:
	%30 = load i8* %tok
	%31 = icmp eq i8 %30, 40
	br i1 %31, label %L.12, label %L.13
L.12:
	call void @lex_Error(i8 55)
	%32 = getelementptr [3 x i8]* @stmt_skiplist
	%33 = bitcast [3 x i8]* %32 to [0 x i8]*
	%34 = call i8 @lex_Skip([0 x i8]* %33)
	store i8 %34, i8* %tok
	br label %L.11
L.13:
	%35 = load i8* %tok
	%36 = icmp ne i8 %35, 4
	br i1 %36, label %L.15, label %L.14
L.15:
	%37 = load i8* %tok
	call void @lex_ErrorT(i8 32, i8 %37)
	br label %L.14
L.14:
	%38 = call i8 @lex_Next()
	store i8 %38, i8* %tok
	br label %L.11
L.11:
	br label %L.2
L.2:
	%39 = load %ast.AstNode** %tree
	%40 = bitcast %ast.AstNode* %39 to %ast.AstNode*
	store %ast.AstNode* %40, %ast.AstNode** %rv.0
	br label %return
return:
	%41 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %41
}
define internal %ast.AstNode* @stmt_Package() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%stree = alloca %ast.AstNode*
	%tok = alloca i8
	%s = alloca %symb.SymbNode*
	%pkgsave = alloca %symb.SymbNode*
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = load i8* @lex_Token
	store i8 %1, i8* %tok
	%2 = load i8* %tok
	%3 = icmp eq i8 %2, 40
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = getelementptr [64 x i8]* @lex_Ident
	%5 = bitcast [64 x i8]* %4 to [0 x i8]*
	%6 = call %symb.SymbNode* @symb_FindTop([0 x i8]* %5)
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	store %symb.SymbNode* %7, %symb.SymbNode** %s
	%8 = load %symb.SymbNode** %s
	%9 = icmp eq %symb.SymbNode* %8, null
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = getelementptr [64 x i8]* @lex_Ident
	%11 = bitcast [64 x i8]* %10 to [0 x i8]*
	%12 = call %symb.SymbNode* @symb_New(i8 6, [0 x i8]* %11, i8 0)
	%13 = bitcast %symb.SymbNode* %12 to %symb.SymbNode*
	store %symb.SymbNode* %13, %symb.SymbNode** %s
	br label %L.3
L.5:
	%14 = load %symb.SymbNode** %s
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 12
	%16 = load i8* %15
	%17 = icmp ne i8 %16, 6
	br i1 %17, label %L.7, label %L.6
L.7:
	%18 = getelementptr [64 x i8]* @lex_Ident
	%19 = bitcast [64 x i8]* %18 to [0 x i8]*
	call void @lex_ErrorI(i8 17, [0 x i8]* %19)
	br label %L.6
L.6:
	br label %L.3
L.3:
	%20 = call i8 @lex_Next()
	store i8 %20, i8* %tok
	%21 = load i8* %tok
	%22 = icmp eq i8 %21, 36
	br i1 %22, label %L.9, label %L.8
L.9:
	%23 = call i8 @lex_Next()
	store i8 %23, i8* %tok
	%24 = load %symb.SymbNode** @symb_curpack
	%25 = bitcast %symb.SymbNode* %24 to %symb.SymbNode*
	store %symb.SymbNode* %25, %symb.SymbNode** %pkgsave
	%26 = load %symb.SymbNode** %s
	%27 = bitcast %symb.SymbNode* %26 to %symb.SymbNode*
	store %symb.SymbNode* %27, %symb.SymbNode** @symb_curpack
	%28 = bitcast %type.TypeNode* null to %type.TypeNode*
	%29 = call %ast.AstNode* @ast_New(i8 64, %type.TypeNode* %28)
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	store %ast.AstNode* %30, %ast.AstNode** %tree
	%31 = load %symb.SymbNode** %s
	%32 = getelementptr %symb.SymbNode* %31, i32 0, i32 5
	%33 = load %symb.SymbNode** %32
	%34 = bitcast %symb.SymbNode* %33 to %symb.SymbNode*
	call void @symb_Push(%symb.SymbNode* %34)
	br label %L.10
L.10:
	%35 = load i8* %tok
	%36 = icmp ne i8 %35, 37
	br i1 %36, label %L.13, label %L.14
L.13:
	%37 = load i8* %tok
	%38 = icmp ne i8 %37, 1
	br label %L.14
L.14:
	%39 = phi i1 [ false, %L.10 ], [ %38, %L.13 ]
	%40 = xor i1 %39, true
	br i1 %40, label %L.11, label %L.12
L.12:
	%41 = call %ast.AstNode* @stmt_PkgStmt()
	%42 = bitcast %ast.AstNode* %41 to %ast.AstNode*
	store %ast.AstNode* %42, %ast.AstNode** %stree
	%43 = load %ast.AstNode** %stree
	%44 = icmp ne %ast.AstNode* %43, null
	br i1 %44, label %L.16, label %L.15
L.16:
	%45 = load %ast.AstNode** %tree
	%46 = bitcast %ast.AstNode* %45 to %ast.AstNode*
	%47 = load %ast.AstNode** %stree
	%48 = bitcast %ast.AstNode* %47 to %ast.AstNode*
	%49 = call %ast.AstNode* @ast_Child(%ast.AstNode* %46, %ast.AstNode* %48)
	%50 = bitcast %ast.AstNode* %49 to %ast.AstNode*
	store %ast.AstNode* %50, %ast.AstNode** %tree
	br label %L.15
L.15:
	%51 = load i8* @lex_Token
	store i8 %51, i8* %tok
	br label %L.10
L.11:
	%52 = bitcast %type.TypeNode* null to %type.TypeNode*
	%53 = load %ast.AstNode** %tree
	%54 = bitcast %ast.AstNode* %53 to %ast.AstNode*
	%55 = call %ast.AstNode* @ast_New1(i8 4, %type.TypeNode* %52, %ast.AstNode* %54)
	%56 = bitcast %ast.AstNode* %55 to %ast.AstNode*
	store %ast.AstNode* %56, %ast.AstNode** %tree
	%57 = load %symb.SymbNode** %s
	%58 = bitcast %symb.SymbNode* %57 to %symb.SymbNode*
	%59 = load %ast.AstNode** %tree
	%60 = getelementptr %ast.AstNode* %59, i32 0, i32 12
	store %symb.SymbNode* %58, %symb.SymbNode** %60
	br label %L.8
L.8:
	%61 = call i8 @lex_Expect(i8 37)
	store i8 %61, i8* %tok
	%62 = call %symb.SymbNode* @symb_Save()
	%63 = bitcast %symb.SymbNode* %62 to %symb.SymbNode*
	%64 = load %symb.SymbNode** %s
	%65 = getelementptr %symb.SymbNode* %64, i32 0, i32 5
	store %symb.SymbNode* %63, %symb.SymbNode** %65
	%66 = getelementptr %A.2* @debug, i32 0, i32 0
	%67 = getelementptr %A.1* %66, i32 0, i32 2
	%68 = load i8* %67
	%69 = icmp ne i8 %68, 0
	br i1 %69, label %L.18, label %L.17
L.18:
	call void @symb_Dump(i8 1)
	br label %L.17
L.17:
	call void @symb_Pop()
	%70 = load %symb.SymbNode** %pkgsave
	%71 = bitcast %symb.SymbNode* %70 to %symb.SymbNode*
	store %symb.SymbNode* %71, %symb.SymbNode** @symb_curpack
	br label %L.1
L.1:
	%72 = load %ast.AstNode** %tree
	%73 = bitcast %ast.AstNode* %72 to %ast.AstNode*
	store %ast.AstNode* %73, %ast.AstNode** %rv.0
	br label %return
return:
	%74 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %74
}
@stmt_proglist = internal constant [9 x i8] [ i8 57, i8 58, i8 45, i8 41, i8 42, i8 43, i8 44, i8 60, i8 0 ], align 1
define internal %ast.AstNode* @stmt_ProgStmt() nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%tok = alloca i8
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %tree
	%1 = getelementptr [9 x i8]* @stmt_proglist
	%2 = bitcast [9 x i8]* %1 to [0 x i8]*
	%3 = call i8 @lex_Keyword([0 x i8]* %2)
	store i8 %3, i8* %tok
	%4 = load i8* %tok
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.1 [
		i32 57, label %L.3
		i32 58, label %L.4
		i32 45, label %L.5
		i32 41, label %L.6
		i32 42, label %L.7
		i32 43, label %L.8
		i32 44, label %L.9
		i32 60, label %L.10
	]
L.3:
	%6 = call i8 @lex_Next()
	store i8 %6, i8* %tok
	%7 = call %ast.AstNode* @stmt_Import()
	%8 = bitcast %ast.AstNode* %7 to %ast.AstNode*
	store %ast.AstNode* %8, %ast.AstNode** %tree
	br label %L.2
L.4:
	%9 = call i8 @lex_Next()
	store i8 %9, i8* %tok
	%10 = call %ast.AstNode* @stmt_Alias()
	%11 = bitcast %ast.AstNode* %10 to %ast.AstNode*
	store %ast.AstNode* %11, %ast.AstNode** %tree
	br label %L.2
L.5:
	%12 = call i8 @lex_Next()
	store i8 %12, i8* %tok
	%13 = call %ast.AstNode* @stmt_Package()
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	store %ast.AstNode* %14, %ast.AstNode** %tree
	br label %L.2
L.6:
	%15 = call i8 @lex_Next()
	store i8 %15, i8* %tok
	%16 = call %ast.AstNode* @stmt_TypeDecl()
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	store %ast.AstNode* %17, %ast.AstNode** %tree
	br label %L.2
L.7:
	%18 = call i8 @lex_Next()
	store i8 %18, i8* %tok
	%19 = call %ast.AstNode* @stmt_VarDecl()
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	store %ast.AstNode* %20, %ast.AstNode** %tree
	br label %L.2
L.8:
	%21 = call i8 @lex_Next()
	store i8 %21, i8* %tok
	%22 = call %ast.AstNode* @stmt_ConstDecl()
	%23 = bitcast %ast.AstNode* %22 to %ast.AstNode*
	store %ast.AstNode* %23, %ast.AstNode** %tree
	br label %L.2
L.9:
	%24 = call i8 @lex_Next()
	store i8 %24, i8* %tok
	%25 = call %ast.AstNode* @stmt_Procedure()
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	store %ast.AstNode* %26, %ast.AstNode** %tree
	br label %L.2
L.10:
	%27 = call i8 @lex_Next()
	store i8 %27, i8* %tok
	%28 = call %ast.AstNode* @stmt_WhenStmt(i8 0)
	%29 = bitcast %ast.AstNode* %28 to %ast.AstNode*
	store %ast.AstNode* %29, %ast.AstNode** %tree
	br label %L.2
L.1:
	%30 = load i8* %tok
	%31 = icmp eq i8 %30, 4
	br i1 %31, label %L.12, label %L.13
L.12:
	%32 = call i8 @lex_Next()
	store i8 %32, i8* %tok
	br label %L.11
L.13:
	%33 = load i8* %tok
	%34 = icmp eq i8 %33, 40
	br i1 %34, label %L.15, label %L.16
L.15:
	%35 = getelementptr [64 x i8]* @lex_Ident
	%36 = bitcast [64 x i8]* %35 to [0 x i8]*
	call void @lex_ErrorI(i8 31, [0 x i8]* %36)
	br label %L.14
L.16:
	%37 = load i8* %tok
	call void @lex_ErrorT(i8 32, i8 %37)
	br label %L.14
L.14:
	%38 = getelementptr [3 x i8]* @stmt_skiplist
	%39 = bitcast [3 x i8]* %38 to [0 x i8]*
	%40 = call i8 @lex_Skip([0 x i8]* %39)
	store i8 %40, i8* %tok
	br label %L.11
L.11:
	br label %L.2
L.2:
	%41 = load %ast.AstNode** %tree
	%42 = bitcast %ast.AstNode* %41 to %ast.AstNode*
	store %ast.AstNode* %42, %ast.AstNode** %rv.0
	br label %return
return:
	%43 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %43
}
define internal %ast.AstNode* @stmt_Program([0 x i8]* %file.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%file = alloca [0 x i8]*
	store [0 x i8]* %file.arg, [0 x i8]** %file
	%tree = alloca %ast.AstNode*
	%stree = alloca %ast.AstNode*
	%tok = alloca i8
	%s = alloca %symb.SymbNode*
	%0 = load %lex.FileContext** @lex_f
	%1 = getelementptr %lex.FileContext* %0, i32 0, i32 7
	%2 = load %lex.SearchPathEntry** %1
	%3 = getelementptr %lex.SearchPathEntry* %2, i32 0, i32 1
	%4 = getelementptr [1024 x i8]* %3
	%5 = bitcast [1024 x i8]* %4 to [0 x i8]*
	%6 = load %lex.FileContext** @lex_f
	%7 = getelementptr %lex.FileContext* %6, i32 0, i32 8
	%8 = getelementptr [256 x i8]* %7
	%9 = bitcast [256 x i8]* %8 to [0 x i8]*
	%10 = call %symb.SymbNode* @symb_NewFile([0 x i8]* %5, [0 x i8]* %9)
	%11 = bitcast %symb.SymbNode* %10 to %symb.SymbNode*
	store %symb.SymbNode* %11, %symb.SymbNode** %s
	%12 = load %symb.SymbNode** @stmt_CurFile
	%13 = bitcast %symb.SymbNode* %12 to %symb.SymbNode*
	%14 = load %symb.SymbNode** %s
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 2
	store %symb.SymbNode* %13, %symb.SymbNode** %15
	%16 = load %symb.SymbNode** %s
	%17 = bitcast %symb.SymbNode* %16 to %symb.SymbNode*
	store %symb.SymbNode* %17, %symb.SymbNode** @stmt_CurFile
	%18 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %18, %symb.SymbNode** @symb_curpack
	%19 = bitcast %type.TypeNode* null to %type.TypeNode*
	%20 = call %ast.AstNode* @ast_New(i8 64, %type.TypeNode* %19)
	%21 = bitcast %ast.AstNode* %20 to %ast.AstNode*
	store %ast.AstNode* %21, %ast.AstNode** %tree
	%22 = call i8 @lex_Next()
	store i8 %22, i8* %tok
	br label %L.1
L.1:
	%23 = load i8* %tok
	%24 = icmp ne i8 %23, 1
	%25 = xor i1 %24, true
	br i1 %25, label %L.2, label %L.3
L.3:
	%26 = call %ast.AstNode* @stmt_ProgStmt()
	%27 = bitcast %ast.AstNode* %26 to %ast.AstNode*
	store %ast.AstNode* %27, %ast.AstNode** %stree
	%28 = load %ast.AstNode** %stree
	%29 = icmp ne %ast.AstNode* %28, null
	br i1 %29, label %L.5, label %L.4
L.5:
	%30 = load %ast.AstNode** %tree
	%31 = bitcast %ast.AstNode* %30 to %ast.AstNode*
	%32 = load %ast.AstNode** %stree
	%33 = bitcast %ast.AstNode* %32 to %ast.AstNode*
	%34 = call %ast.AstNode* @ast_Child(%ast.AstNode* %31, %ast.AstNode* %33)
	%35 = bitcast %ast.AstNode* %34 to %ast.AstNode*
	store %ast.AstNode* %35, %ast.AstNode** %tree
	br label %L.4
L.4:
	%36 = load i8* @lex_Token
	store i8 %36, i8* %tok
	br label %L.1
L.2:
	%37 = bitcast %type.TypeNode* null to %type.TypeNode*
	%38 = load %ast.AstNode** %tree
	%39 = bitcast %ast.AstNode* %38 to %ast.AstNode*
	%40 = call %ast.AstNode* @ast_New1(i8 3, %type.TypeNode* %37, %ast.AstNode* %39)
	%41 = bitcast %ast.AstNode* %40 to %ast.AstNode*
	store %ast.AstNode* %41, %ast.AstNode** %tree
	%42 = load %symb.SymbNode** %s
	%43 = bitcast %symb.SymbNode* %42 to %symb.SymbNode*
	%44 = load %ast.AstNode** %tree
	%45 = getelementptr %ast.AstNode* %44, i32 0, i32 12
	store %symb.SymbNode* %43, %symb.SymbNode** %45
	%46 = load %ast.AstNode** %tree
	%47 = bitcast %ast.AstNode* %46 to %ast.AstNode*
	store %ast.AstNode* %47, %ast.AstNode** %rv.0
	br label %return
return:
	%48 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %48
}
%bout.BufIO = type {[0 x i8]*, i16, i16, i32}
define internal %bout.BufIO* @bout_buffer(i32 %fd.arg, i32 %sz.arg) nounwind {
L.0:
	%rv.0 = alloca %bout.BufIO*
	%fd = alloca i32
	%sz = alloca i32
	store i32 %fd.arg, i32* %fd
	store i32 %sz.arg, i32* %sz
	%bo = alloca %bout.BufIO*
	%0 = load i32* %sz
	%1 = icmp ugt i32 %0, 32
	%2 = select i1 %1, i32 %0, i32 32
	store i32 %2, i32* %sz
	%3 = call [0 x i8]* @malloc(i32 12)
	%4 = bitcast [0 x i8]* %3 to %bout.BufIO*
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	store %bout.BufIO* %5, %bout.BufIO** %bo
	%6 = load %bout.BufIO** %bo
	%7 = icmp ne %bout.BufIO* %6, null
	br i1 %7, label %L.2, label %L.1
L.2:
	%8 = load i32* %sz
	%9 = call [0 x i8]* @malloc(i32 %8)
	%10 = bitcast [0 x i8]* %9 to [0 x i8]*
	%11 = load %bout.BufIO** %bo
	%12 = getelementptr %bout.BufIO* %11, i32 0, i32 0
	store [0 x i8]* %10, [0 x i8]** %12
	%13 = load %bout.BufIO** %bo
	%14 = getelementptr %bout.BufIO* %13, i32 0, i32 0
	%15 = load [0 x i8]** %14
	%16 = icmp ne [0 x i8]* %15, null
	br i1 %16, label %L.4, label %L.3
L.4:
	%17 = load i32* %sz
	%18 = trunc i32 %17 to i16
	%19 = load %bout.BufIO** %bo
	%20 = getelementptr %bout.BufIO* %19, i32 0, i32 1
	store i16 %18, i16* %20
	%21 = load i32* %sz
	%22 = trunc i32 %21 to i16
	%23 = load %bout.BufIO** %bo
	%24 = getelementptr %bout.BufIO* %23, i32 0, i32 2
	store i16 %22, i16* %24
	%25 = load i32* %fd
	%26 = load %bout.BufIO** %bo
	%27 = getelementptr %bout.BufIO* %26, i32 0, i32 3
	store i32 %25, i32* %27
	%28 = load %bout.BufIO** %bo
	%29 = bitcast %bout.BufIO* %28 to %bout.BufIO*
	store %bout.BufIO* %29, %bout.BufIO** %rv.0
	br label %return
L.3:
	br label %L.1
L.1:
	%30 = bitcast %bout.BufIO* null to %bout.BufIO*
	store %bout.BufIO* %30, %bout.BufIO** %rv.0
	br label %return
return:
	%31 = load %bout.BufIO** %rv.0
	ret %bout.BufIO* %31
}
define internal void @bout_flush(%bout.BufIO* %bo.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	%0 = load %bout.BufIO** %bo
	%1 = getelementptr %bout.BufIO* %0, i32 0, i32 3
	%2 = load i32* %1
	%3 = load %bout.BufIO** %bo
	%4 = getelementptr %bout.BufIO* %3, i32 0, i32 0
	%5 = load [0 x i8]** %4
	%6 = bitcast [0 x i8]* %5 to [0 x i8]*
	%7 = load %bout.BufIO** %bo
	%8 = getelementptr %bout.BufIO* %7, i32 0, i32 1
	%9 = load i16* %8
	%10 = load %bout.BufIO** %bo
	%11 = getelementptr %bout.BufIO* %10, i32 0, i32 2
	%12 = load i16* %11
	%13 = sub i16 %9, %12
	%14 = zext i16 %13 to i32
	%15 = call i32 @write(i32 %2, [0 x i8]* %6, i32 %14)
	%16 = load %bout.BufIO** %bo
	%17 = getelementptr %bout.BufIO* %16, i32 0, i32 1
	%18 = load i16* %17
	%19 = load %bout.BufIO** %bo
	%20 = getelementptr %bout.BufIO* %19, i32 0, i32 2
	store i16 %18, i16* %20
	br label %return
return:
	ret void
}
define internal [0 x i8]* @bout_need(%bout.BufIO* %bo.arg, i32 %n.arg) nounwind {
L.0:
	%rv.0 = alloca [0 x i8]*
	%bo = alloca %bout.BufIO*
	%n = alloca i32
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i32 %n.arg, i32* %n
	%k = alloca i32
	%0 = load i32* %n
	%1 = load %bout.BufIO** %bo
	%2 = getelementptr %bout.BufIO* %1, i32 0, i32 2
	%3 = load i16* %2
	%4 = zext i16 %3 to i32
	%5 = icmp ugt i32 %0, %4
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load %bout.BufIO** %bo
	%7 = bitcast %bout.BufIO* %6 to %bout.BufIO*
	call void @bout_flush(%bout.BufIO* %7)
	br label %L.1
L.1:
	%8 = load i32* %n
	%9 = load %bout.BufIO** %bo
	%10 = getelementptr %bout.BufIO* %9, i32 0, i32 1
	%11 = load i16* %10
	%12 = zext i16 %11 to i32
	%13 = icmp ugt i32 %8, %12
	br i1 %13, label %L.4, label %L.3
L.4:
	%14 = bitcast [0 x i8]* null to [0 x i8]*
	store [0 x i8]* %14, [0 x i8]** %rv.0
	br label %return
L.3:
	%15 = load %bout.BufIO** %bo
	%16 = getelementptr %bout.BufIO* %15, i32 0, i32 2
	%17 = load i16* %16
	%18 = zext i16 %17 to i32
	store i32 %18, i32* %k
	%19 = load i32* %k
	%20 = load i32* %n
	%21 = sub i32 %19, %20
	%22 = trunc i32 %21 to i16
	%23 = load %bout.BufIO** %bo
	%24 = getelementptr %bout.BufIO* %23, i32 0, i32 2
	store i16 %22, i16* %24
	%25 = load %bout.BufIO** %bo
	%26 = getelementptr %bout.BufIO* %25, i32 0, i32 0
	%27 = load [0 x i8]** %26
	%28 = load %bout.BufIO** %bo
	%29 = getelementptr %bout.BufIO* %28, i32 0, i32 1
	%30 = load i16* %29
	%31 = zext i16 %30 to i32
	%32 = load i32* %k
	%33 = sub i32 %31, %32
	%34 = getelementptr [0 x i8]* %27, i32 0, i32 %33
	%35 = bitcast i8* %34 to [0 x i8]*
	%36 = getelementptr [0 x i8]* %35
	%37 = bitcast [0 x i8]* %36 to [0 x i8]*
	store [0 x i8]* %37, [0 x i8]** %rv.0
	br label %return
return:
	%38 = load [0 x i8]** %rv.0
	ret [0 x i8]* %38
}
define internal void @bout_nl(%bout.BufIO* %bo.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	%bp = alloca [0 x i8]*
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = call [0 x i8]* @bout_need(%bout.BufIO* %1, i32 1)
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	store [0 x i8]* %3, [0 x i8]** %bp
	%4 = load [0 x i8]** %bp
	%5 = icmp ne [0 x i8]* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load [0 x i8]** %bp
	%7 = getelementptr [0 x i8]* %6, i32 0, i32 0
	store i8 10, i8* %7
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_chr(%bout.BufIO* %bo.arg, i8 zeroext %c.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%c = alloca i8
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i8 %c.arg, i8* %c
	%bp = alloca [0 x i8]*
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = call [0 x i8]* @bout_need(%bout.BufIO* %1, i32 1)
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	store [0 x i8]* %3, [0 x i8]** %bp
	%4 = load [0 x i8]** %bp
	%5 = icmp ne [0 x i8]* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load i8* %c
	%7 = load [0 x i8]** %bp
	%8 = getelementptr [0 x i8]* %7, i32 0, i32 0
	store i8 %6, i8* %8
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_str(%bout.BufIO* %bo.arg, [0 x i8]* %s.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%s = alloca [0 x i8]*
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store [0 x i8]* %s.arg, [0 x i8]** %s
	%n = alloca i32
	%bp = alloca [0 x i8]*
	%0 = load [0 x i8]** %s
	%1 = bitcast [0 x i8]* %0 to [0 x i8]*
	%2 = call i32 @zstr_len([0 x i8]* %1, i32 65535)
	store i32 %2, i32* %n
	%3 = load %bout.BufIO** %bo
	%4 = bitcast %bout.BufIO* %3 to %bout.BufIO*
	%5 = load i32* %n
	%6 = call [0 x i8]* @bout_need(%bout.BufIO* %4, i32 %5)
	%7 = bitcast [0 x i8]* %6 to [0 x i8]*
	store [0 x i8]* %7, [0 x i8]** %bp
	%8 = load [0 x i8]** %bp
	%9 = icmp eq [0 x i8]* %8, null
	br i1 %9, label %L.2, label %L.3
L.2:
	%10 = load %bout.BufIO** %bo
	%11 = getelementptr %bout.BufIO* %10, i32 0, i32 3
	%12 = load i32* %11
	%13 = load [0 x i8]** %s
	%14 = bitcast [0 x i8]* %13 to [0 x i8]*
	%15 = load i32* %n
	%16 = call i32 @write(i32 %12, [0 x i8]* %14, i32 %15)
	br label %L.1
L.3:
	%17 = load [0 x i8]** %bp
	%18 = getelementptr [0 x i8]* %17, i32 0, i32 0
	%19 = bitcast i8* %18 to [0 x i8]*
	%20 = bitcast [0 x i8]* %19 to i8*
	%21 = load [0 x i8]** %s
	%22 = getelementptr [0 x i8]* %21, i32 0, i32 0
	%23 = bitcast i8* %22 to [0 x i8]*
	%24 = bitcast [0 x i8]* %23 to i8*
	%25 = load i32* %n
	%26 = load i32* %n
	%27 = icmp ult i32 %25, %26
	%28 = select i1 %27, i32 %25, i32 %26
	call void @llvm.memcpy.p0i8.p0i8.i32(i8* %20, i8* %24, i32 %28, i32 1, i1 0)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@bout_hex = internal constant [16 x i8] [ i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70 ], align 1
define internal void @bout_hex8(%bout.BufIO* %bo.arg, i8 zeroext %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i8
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i8 %in.arg, i8* %in
	%bp = alloca [0 x i8]*
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = call [0 x i8]* @bout_need(%bout.BufIO* %1, i32 2)
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	store [0 x i8]* %3, [0 x i8]** %bp
	%4 = load [0 x i8]** %bp
	%5 = icmp ne [0 x i8]* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load i8* %in
	%7 = lshr i8 %6, 4
	%8 = and i8 %7, 15
	%9 = zext i8 %8 to i32
	%10 = getelementptr [16 x i8]* @bout_hex, i32 0, i32 %9
	%11 = load i8* %10
	%12 = load [0 x i8]** %bp
	%13 = getelementptr [0 x i8]* %12, i32 0, i32 0
	store i8 %11, i8* %13
	%14 = load i8* %in
	%15 = and i8 %14, 15
	%16 = zext i8 %15 to i32
	%17 = getelementptr [16 x i8]* @bout_hex, i32 0, i32 %16
	%18 = load i8* %17
	%19 = load [0 x i8]** %bp
	%20 = getelementptr [0 x i8]* %19, i32 0, i32 1
	store i8 %18, i8* %20
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_hex16(%bout.BufIO* %bo.arg, i16 zeroext %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i16
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i16 %in.arg, i16* %in
	%bp = alloca [0 x i8]*
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = call [0 x i8]* @bout_need(%bout.BufIO* %1, i32 4)
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	store [0 x i8]* %3, [0 x i8]** %bp
	%4 = load [0 x i8]** %bp
	%5 = icmp ne [0 x i8]* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load i16* %in
	%7 = lshr i16 %6, 12
	%8 = and i16 %7, 15
	%9 = zext i16 %8 to i32
	%10 = getelementptr [16 x i8]* @bout_hex, i32 0, i32 %9
	%11 = load i8* %10
	%12 = load [0 x i8]** %bp
	%13 = getelementptr [0 x i8]* %12, i32 0, i32 0
	store i8 %11, i8* %13
	%14 = load i16* %in
	%15 = lshr i16 %14, 8
	%16 = and i16 %15, 15
	%17 = zext i16 %16 to i32
	%18 = getelementptr [16 x i8]* @bout_hex, i32 0, i32 %17
	%19 = load i8* %18
	%20 = load [0 x i8]** %bp
	%21 = getelementptr [0 x i8]* %20, i32 0, i32 1
	store i8 %19, i8* %21
	%22 = load i16* %in
	%23 = lshr i16 %22, 4
	%24 = and i16 %23, 15
	%25 = zext i16 %24 to i32
	%26 = getelementptr [16 x i8]* @bout_hex, i32 0, i32 %25
	%27 = load i8* %26
	%28 = load [0 x i8]** %bp
	%29 = getelementptr [0 x i8]* %28, i32 0, i32 2
	store i8 %27, i8* %29
	%30 = load i16* %in
	%31 = and i16 %30, 15
	%32 = zext i16 %31 to i32
	%33 = getelementptr [16 x i8]* @bout_hex, i32 0, i32 %32
	%34 = load i8* %33
	%35 = load [0 x i8]** %bp
	%36 = getelementptr [0 x i8]* %35, i32 0, i32 3
	store i8 %34, i8* %36
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_hex32(%bout.BufIO* %bo.arg, i32 %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i32
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i32 %in.arg, i32* %in
	%bp = alloca [0 x i8]*
	%i = alloca i32
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = call [0 x i8]* @bout_need(%bout.BufIO* %1, i32 8)
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	store [0 x i8]* %3, [0 x i8]** %bp
	%4 = load [0 x i8]** %bp
	%5 = icmp ne [0 x i8]* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	store i32 7, i32* %i
	br label %L.3
L.3:
	%6 = load i32* %in
	%7 = and i32 %6, 15
	%8 = getelementptr [16 x i8]* @bout_hex, i32 0, i32 %7
	%9 = load i8* %8
	%10 = load [0 x i8]** %bp
	%11 = load i32* %i
	%12 = getelementptr [0 x i8]* %10, i32 0, i32 %11
	store i8 %9, i8* %12
	%13 = load i32* %i
	%14 = icmp eq i32 %13, 0
	br i1 %14, label %L.4, label %L.5
L.5:
	%15 = load i32* %i
	%16 = sub i32 %15, 1
	store i32 %16, i32* %i
	%17 = load i32* %in
	%18 = lshr i32 %17, 4
	store i32 %18, i32* %in
	br label %L.3
L.4:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_hex64(%bout.BufIO* %bo.arg, i64 %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i64
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i64 %in.arg, i64* %in
	%bp = alloca [0 x i8]*
	%i = alloca i32
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = call [0 x i8]* @bout_need(%bout.BufIO* %1, i32 16)
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	store [0 x i8]* %3, [0 x i8]** %bp
	%4 = load [0 x i8]** %bp
	%5 = icmp ne [0 x i8]* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	store i32 15, i32* %i
	br label %L.3
L.3:
	%6 = load i64* %in
	%7 = trunc i64 %6 to i32
	%8 = and i32 %7, 15
	%9 = getelementptr [16 x i8]* @bout_hex, i32 0, i32 %8
	%10 = load i8* %9
	%11 = load [0 x i8]** %bp
	%12 = load i32* %i
	%13 = getelementptr [0 x i8]* %11, i32 0, i32 %12
	store i8 %10, i8* %13
	%14 = load i32* %i
	%15 = icmp eq i32 %14, 0
	br i1 %15, label %L.4, label %L.5
L.5:
	%16 = load i32* %i
	%17 = sub i32 %16, 1
	store i32 %17, i32* %i
	%18 = load i64* %in
	%19 = lshr i64 %18, 4
	store i64 %19, i64* %in
	br label %L.3
L.4:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_uint64(%bout.BufIO* %bo.arg, i64 %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i64
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i64 %in.arg, i64* %in
	%bp = alloca [0 x i8]*
	%i = alloca i32
	%n = alloca i32
	%buf = alloca [20 x i8]
	store i32 20, i32* %i
	%0 = load i64* %in
	%1 = icmp eq i64 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load i32* %i
	%3 = sub i32 %2, 1
	store i32 %3, i32* %i
	%4 = load i32* %i
	%5 = getelementptr [20 x i8]* %buf, i32 0, i32 %4
	store i8 48, i8* %5
	br label %L.1
L.3:
	br label %L.4
L.4:
	%6 = load i64* %in
	%7 = icmp ne i64 %6, 0
	%8 = xor i1 %7, true
	br i1 %8, label %L.5, label %L.6
L.6:
	%9 = load i32* %i
	%10 = sub i32 %9, 1
	store i32 %10, i32* %i
	%11 = load i64* %in
	%12 = urem i64 %11, 10
	%13 = add i64 %12, 48
	%14 = trunc i64 %13 to i8
	%15 = load i32* %i
	%16 = getelementptr [20 x i8]* %buf, i32 0, i32 %15
	store i8 %14, i8* %16
	%17 = load i64* %in
	%18 = udiv i64 %17, 10
	store i64 %18, i64* %in
	br label %L.4
L.5:
	br label %L.1
L.1:
	%19 = load i32* %i
	%20 = sub i32 20, %19
	store i32 %20, i32* %n
	%21 = load %bout.BufIO** %bo
	%22 = bitcast %bout.BufIO* %21 to %bout.BufIO*
	%23 = load i32* %n
	%24 = call [0 x i8]* @bout_need(%bout.BufIO* %22, i32 %23)
	%25 = bitcast [0 x i8]* %24 to [0 x i8]*
	store [0 x i8]* %25, [0 x i8]** %bp
	%26 = load [0 x i8]** %bp
	%27 = icmp ne [0 x i8]* %26, null
	br i1 %27, label %L.8, label %L.7
L.8:
	%28 = load [0 x i8]** %bp
	%29 = getelementptr [0 x i8]* %28, i32 0, i32 0
	%30 = bitcast i8* %29 to [0 x i8]*
	%31 = bitcast [0 x i8]* %30 to i8*
	%32 = load i32* %i
	%33 = getelementptr [20 x i8]* %buf, i32 0, i32 %32
	%34 = bitcast i8* %33 to [20 x i8]*
	%35 = bitcast [20 x i8]* %34 to [0 x i8]*
	%36 = bitcast [0 x i8]* %35 to i8*
	%37 = load i32* %n
	%38 = load i32* %n
	%39 = icmp ult i32 %37, %38
	%40 = select i1 %39, i32 %37, i32 %38
	call void @llvm.memcpy.p0i8.p0i8.i32(i8* %31, i8* %36, i32 %40, i32 0, i1 0)
	br label %L.7
L.7:
	br label %return
return:
	ret void
}
define internal void @bout_uint32(%bout.BufIO* %bo.arg, i32 %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i32
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i32 %in.arg, i32* %in
	%bp = alloca [0 x i8]*
	%i = alloca i32
	%n = alloca i32
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = load i32* %in
	%3 = zext i32 %2 to i64
	call void @bout_uint64(%bout.BufIO* %1, i64 %3)
	br label %L.1
L.3:
	%buf = alloca [10 x i8]
	store i32 10, i32* %i
	%4 = load i32* %in
	%5 = icmp eq i32 %4, 0
	br i1 %5, label %L.5, label %L.6
L.5:
	%6 = load i32* %i
	%7 = sub i32 %6, 1
	store i32 %7, i32* %i
	%8 = load i32* %i
	%9 = getelementptr [10 x i8]* %buf, i32 0, i32 %8
	store i8 48, i8* %9
	br label %L.4
L.6:
	br label %L.7
L.7:
	%10 = load i32* %in
	%11 = icmp ne i32 %10, 0
	%12 = xor i1 %11, true
	br i1 %12, label %L.8, label %L.9
L.9:
	%13 = load i32* %i
	%14 = sub i32 %13, 1
	store i32 %14, i32* %i
	%15 = load i32* %in
	%16 = urem i32 %15, 10
	%17 = add i32 %16, 48
	%18 = trunc i32 %17 to i8
	%19 = load i32* %i
	%20 = getelementptr [10 x i8]* %buf, i32 0, i32 %19
	store i8 %18, i8* %20
	%21 = load i32* %in
	%22 = udiv i32 %21, 10
	store i32 %22, i32* %in
	br label %L.7
L.8:
	br label %L.4
L.4:
	%23 = load i32* %i
	%24 = sub i32 10, %23
	store i32 %24, i32* %n
	%25 = load %bout.BufIO** %bo
	%26 = bitcast %bout.BufIO* %25 to %bout.BufIO*
	%27 = load i32* %n
	%28 = call [0 x i8]* @bout_need(%bout.BufIO* %26, i32 %27)
	%29 = bitcast [0 x i8]* %28 to [0 x i8]*
	store [0 x i8]* %29, [0 x i8]** %bp
	%30 = load [0 x i8]** %bp
	%31 = icmp ne [0 x i8]* %30, null
	br i1 %31, label %L.11, label %L.10
L.11:
	%32 = load [0 x i8]** %bp
	%33 = getelementptr [0 x i8]* %32, i32 0, i32 0
	%34 = bitcast i8* %33 to [0 x i8]*
	%35 = bitcast [0 x i8]* %34 to i8*
	%36 = load i32* %i
	%37 = getelementptr [10 x i8]* %buf, i32 0, i32 %36
	%38 = bitcast i8* %37 to [10 x i8]*
	%39 = bitcast [10 x i8]* %38 to [0 x i8]*
	%40 = bitcast [0 x i8]* %39 to i8*
	%41 = load i32* %n
	%42 = load i32* %n
	%43 = icmp ult i32 %41, %42
	%44 = select i1 %43, i32 %41, i32 %42
	call void @llvm.memcpy.p0i8.p0i8.i32(i8* %35, i8* %40, i32 %44, i32 0, i1 0)
	br label %L.10
L.10:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_uint16(%bout.BufIO* %bo.arg, i16 zeroext %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i16
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i16 %in.arg, i16* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = load i16* %in
	%3 = zext i16 %2 to i64
	call void @bout_uint64(%bout.BufIO* %1, i64 %3)
	br label %L.1
L.3:
	%4 = load %bout.BufIO** %bo
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = load i16* %in
	%7 = zext i16 %6 to i32
	call void @bout_uint32(%bout.BufIO* %5, i32 %7)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_uint8(%bout.BufIO* %bo.arg, i8 zeroext %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i8
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i8 %in.arg, i8* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = load i8* %in
	%3 = zext i8 %2 to i64
	call void @bout_uint64(%bout.BufIO* %1, i64 %3)
	br label %L.1
L.3:
	%4 = load %bout.BufIO** %bo
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = load i8* %in
	%7 = zext i8 %6 to i32
	call void @bout_uint32(%bout.BufIO* %5, i32 %7)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define void @bout_uint(%bout.BufIO* %bo.arg, i32 %in.arg) alwaysinline nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i32
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i32 %in.arg, i32* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = load i32* %in
	%3 = zext i32 %2 to i64
	call void @bout_uint64(%bout.BufIO* %1, i64 %3)
	br label %L.1
L.3:
	%4 = load %bout.BufIO** %bo
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = load i32* %in
	call void @bout_uint32(%bout.BufIO* %5, i32 %6)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_int64(%bout.BufIO* %bo.arg, i64 %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i64
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i64 %in.arg, i64* %in
	%bp = alloca [0 x i8]*
	%ui = alloca i64
	%0 = load i64* %in
	%1 = icmp slt i64 %0, 0
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %bout.BufIO** %bo
	%3 = bitcast %bout.BufIO* %2 to %bout.BufIO*
	%4 = call [0 x i8]* @bout_need(%bout.BufIO* %3, i32 1)
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	store [0 x i8]* %5, [0 x i8]** %bp
	%6 = load [0 x i8]** %bp
	%7 = getelementptr [0 x i8]* %6, i32 0, i32 0
	store i8 45, i8* %7
	%8 = load i64* %in
	%9 = sub i64 0, %8
	store i64 %9, i64* %ui
	br label %L.1
L.3:
	%10 = load i64* %in
	store i64 %10, i64* %ui
	br label %L.1
L.1:
	%11 = load %bout.BufIO** %bo
	%12 = bitcast %bout.BufIO* %11 to %bout.BufIO*
	%13 = load i64* %ui
	call void @bout_uint64(%bout.BufIO* %12, i64 %13)
	br label %return
return:
	ret void
}
define internal void @bout_int32(%bout.BufIO* %bo.arg, i32 %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i32
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i32 %in.arg, i32* %in
	%bp = alloca [0 x i8]*
	%ui = alloca i32
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = load i32* %in
	%3 = sext i32 %2 to i64
	call void @bout_int64(%bout.BufIO* %1, i64 %3)
	br label %L.1
L.3:
	%4 = load i32* %in
	%5 = icmp slt i32 %4, 0
	br i1 %5, label %L.5, label %L.6
L.5:
	%6 = load %bout.BufIO** %bo
	%7 = bitcast %bout.BufIO* %6 to %bout.BufIO*
	%8 = call [0 x i8]* @bout_need(%bout.BufIO* %7, i32 1)
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	store [0 x i8]* %9, [0 x i8]** %bp
	%10 = load [0 x i8]** %bp
	%11 = getelementptr [0 x i8]* %10, i32 0, i32 0
	store i8 45, i8* %11
	%12 = load i32* %in
	%13 = sub i32 0, %12
	%14 = sext i32 %13 to i64
	%15 = trunc i64 %14 to i32
	store i32 %15, i32* %ui
	br label %L.4
L.6:
	%16 = load i32* %in
	%17 = sext i32 %16 to i64
	%18 = trunc i64 %17 to i32
	store i32 %18, i32* %ui
	br label %L.4
L.4:
	%19 = load %bout.BufIO** %bo
	%20 = bitcast %bout.BufIO* %19 to %bout.BufIO*
	%21 = load i32* %ui
	call void @bout_uint32(%bout.BufIO* %20, i32 %21)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_int16(%bout.BufIO* %bo.arg, i16 signext %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i16
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i16 %in.arg, i16* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = load i16* %in
	%3 = sext i16 %2 to i64
	call void @bout_int64(%bout.BufIO* %1, i64 %3)
	br label %L.1
L.3:
	%4 = load %bout.BufIO** %bo
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = load i16* %in
	%7 = sext i16 %6 to i32
	call void @bout_int32(%bout.BufIO* %5, i32 %7)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @bout_int8(%bout.BufIO* %bo.arg, i8 signext %in.arg) nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i8
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i8 %in.arg, i8* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = load i8* %in
	%3 = sext i8 %2 to i64
	call void @bout_int64(%bout.BufIO* %1, i64 %3)
	br label %L.1
L.3:
	%4 = load %bout.BufIO** %bo
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = load i8* %in
	%7 = sext i8 %6 to i32
	call void @bout_int32(%bout.BufIO* %5, i32 %7)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define void @bout_int(%bout.BufIO* %bo.arg, i32 %in.arg) alwaysinline nounwind {
L.0:
	%bo = alloca %bout.BufIO*
	%in = alloca i32
	store %bout.BufIO* %bo.arg, %bout.BufIO** %bo
	store i32 %in.arg, i32* %in
	br i1 0, label %L.2, label %L.3
L.2:
	%0 = load %bout.BufIO** %bo
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = load i32* %in
	%3 = sext i32 %2 to i64
	call void @bout_int64(%bout.BufIO* %1, i64 %3)
	br label %L.1
L.3:
	%4 = load %bout.BufIO** %bo
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = load i32* %in
	call void @bout_int32(%bout.BufIO* %5, i32 %6)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@llvm_anon_prefix = internal constant [3 x i8] c"A.\00", align 1
@llvm_scon_prefix = internal constant [3 x i8] c"S.\00", align 1
@llvm_f = internal global %bout.BufIO* zeroinitializer, align 4
@llvmdb_seqno = internal global i16 0, align 2
@llvmdb_unit = internal global i16 0, align 2
@llvmdb_file = internal global i16 0, align 2
@llvmdb_pakg = internal global i16 0, align 2
@llvmdb_subr = internal global i16 0, align 2
@llvmdb_blok = internal global i16 0, align 2
@llvmdb_gvhead = internal global %symb.SymbNode* zeroinitializer, align 4
@llvmdb_gvtail = internal global %symb.SymbNode* zeroinitializer, align 4
@llvmdb_lvhead = internal global %symb.SymbNode* zeroinitializer, align 4
@llvmdb_lvtail = internal global %symb.SymbNode* zeroinitializer, align 4
@llvmdb_sphead = internal global %symb.SymbNode* zeroinitializer, align 4
@llvmdb_sptail = internal global %symb.SymbNode* zeroinitializer, align 4
%llvmdb.LineT = type {%llvmdb.LineT*, i16, i16, i16}
@llvmdb_lnhead = internal global %llvmdb.LineT* zeroinitializer, align 4
@llvmdb_lntail = internal global %llvmdb.LineT* zeroinitializer, align 4
define internal zeroext i16 @llvmdb_GetContext() nounwind {
L.0:
	%rv.0 = alloca i16
	%0 = load i16* @llvmdb_blok
	%1 = icmp ne i16 %0, 0
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load i16* @llvmdb_blok
	store i16 %2, i16* %rv.0
	br label %return
L.1:
	%3 = load i16* @llvmdb_subr
	%4 = icmp ne i16 %3, 0
	br i1 %4, label %L.4, label %L.3
L.4:
	%5 = load i16* @llvmdb_subr
	store i16 %5, i16* %rv.0
	br label %return
L.3:
	%6 = load i16* @llvmdb_pakg
	%7 = icmp ne i16 %6, 0
	br i1 %7, label %L.6, label %L.5
L.6:
	%8 = load i16* @llvmdb_pakg
	store i16 %8, i16* %rv.0
	br label %return
L.5:
	%9 = load i16* @llvmdb_file
	store i16 %9, i16* %rv.0
	br label %return
return:
	%10 = load i16* %rv.0
	ret i16 %10
}
define internal void @llvmdb_PSeq(i16 zeroext %n.arg) nounwind {
L.0:
	%n = alloca i16
	store i16 %n.arg, i16* %n
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %1, i8 33)
	%2 = load %bout.BufIO** @llvm_f
	%3 = bitcast %bout.BufIO* %2 to %bout.BufIO*
	%4 = load i16* %n
	%5 = zext i16 %4 to i32
	call void @bout_uint(%bout.BufIO* %3, i32 %5)
	br label %return
return:
	ret void
}
@S.575 = internal constant [16 x i8] c" = metadata !{ \00"define internal void @llvmdb_PMetaSeq(i16 zeroext %n.arg) nounwind {
L.0:
	%n = alloca i16
	store i16 %n.arg, i16* %n
	%0 = load i16* %n
	call void @llvmdb_PSeq(i16 %0)
	%1 = load %bout.BufIO** @llvm_f
	%2 = bitcast %bout.BufIO* %1 to %bout.BufIO*
	%3 = getelementptr [16 x i8]* @S.575
	%4 = bitcast [16 x i8]* %3 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %2, [0 x i8]* %4)
	br label %return
return:
	ret void
}
@S.576 = internal constant [4 x i8] c" }\0A\00"@S.577 = internal constant [3 x i8] c", \00"@S.578 = internal constant [3 x i8] c" )\00"define internal void @llvmdb_PTerminator(i8 zeroext %term.arg) nounwind {
L.0:
	%term = alloca i8
	store i8 %term.arg, i8* %term
	%0 = load i8* %term
	%1 = zext i8 %0 to i32
	switch i32 %1, label %L.1 [
		i32 1, label %L.3
		i32 0, label %L.4
		i32 2, label %L.5
	]
L.3:
	%2 = load %bout.BufIO** @llvm_f
	%3 = bitcast %bout.BufIO* %2 to %bout.BufIO*
	%4 = getelementptr [4 x i8]* @S.576
	%5 = bitcast [4 x i8]* %4 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %3, [0 x i8]* %5)
	br label %L.2
L.4:
	%6 = load %bout.BufIO** @llvm_f
	%7 = bitcast %bout.BufIO* %6 to %bout.BufIO*
	%8 = getelementptr [3 x i8]* @S.577
	%9 = bitcast [3 x i8]* %8 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %7, [0 x i8]* %9)
	br label %L.2
L.5:
	%10 = load %bout.BufIO** @llvm_f
	%11 = bitcast %bout.BufIO* %10 to %bout.BufIO*
	%12 = getelementptr [3 x i8]* @S.578
	%13 = bitcast [3 x i8]* %12 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %11, [0 x i8]* %13)
	br label %L.2
L.1:
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
@S.579 = internal constant [5 x i8] c"null\00"define internal void @llvmdb_PNull(i8 zeroext %term.arg) nounwind {
L.0:
	%term = alloca i8
	store i8 %term.arg, i8* %term
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [5 x i8]* @S.579
	%3 = bitcast [5 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load i8* %term
	call void @llvmdb_PTerminator(i8 %4)
	br label %return
return:
	ret void
}
@S.580 = internal constant [11 x i8] c"metadata !\00"define internal void @llvmdb_PMetaRef(i16 zeroext %n.arg, i8 zeroext %term.arg) nounwind {
L.0:
	%n = alloca i16
	%term = alloca i8
	store i16 %n.arg, i16* %n
	store i8 %term.arg, i8* %term
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [11 x i8]* @S.580
	%3 = bitcast [11 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load %bout.BufIO** @llvm_f
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = load i16* %n
	%7 = zext i16 %6 to i32
	call void @bout_uint(%bout.BufIO* %5, i32 %7)
	%8 = load i8* %term
	call void @llvmdb_PTerminator(i8 %8)
	br label %return
return:
	ret void
}
@S.581 = internal constant [4 x i8] c"i1 \00"@S.582 = internal constant [5 x i8] c"true\00"@S.583 = internal constant [6 x i8] c"false\00"define internal void @llvmdb_PBoolean(i8 zeroext %b.arg, i8 zeroext %term.arg) nounwind {
L.0:
	%b = alloca i8
	%term = alloca i8
	store i8 %b.arg, i8* %b
	store i8 %term.arg, i8* %term
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [4 x i8]* @S.581
	%3 = bitcast [4 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load i8* %b
	%5 = icmp ne i8 %4, 0
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = load %bout.BufIO** @llvm_f
	%7 = bitcast %bout.BufIO* %6 to %bout.BufIO*
	%8 = getelementptr [5 x i8]* @S.582
	%9 = bitcast [5 x i8]* %8 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %7, [0 x i8]* %9)
	br label %L.1
L.3:
	%10 = load %bout.BufIO** @llvm_f
	%11 = bitcast %bout.BufIO* %10 to %bout.BufIO*
	%12 = getelementptr [6 x i8]* @S.583
	%13 = bitcast [6 x i8]* %12 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %11, [0 x i8]* %13)
	br label %L.1
L.1:
	%14 = load i8* %term
	call void @llvmdb_PTerminator(i8 %14)
	br label %return
return:
	ret void
}
@S.584 = internal constant [5 x i8] c"i32 \00"define internal void @llvmdb_P32(i32 %v.arg, i8 zeroext %term.arg) nounwind {
L.0:
	%v = alloca i32
	%term = alloca i8
	store i32 %v.arg, i32* %v
	store i8 %term.arg, i8* %term
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [5 x i8]* @S.584
	%3 = bitcast [5 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load %bout.BufIO** @llvm_f
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = load i32* %v
	call void @bout_uint32(%bout.BufIO* %5, i32 %6)
	%7 = load i8* %term
	call void @llvmdb_PTerminator(i8 %7)
	br label %return
return:
	ret void
}
@S.585 = internal constant [5 x i8] c"i64 \00"define internal void @llvmdb_P64(i64 %v.arg, i8 zeroext %term.arg) nounwind {
L.0:
	%v = alloca i64
	%term = alloca i8
	store i64 %v.arg, i64* %v
	store i8 %term.arg, i8* %term
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [5 x i8]* @S.585
	%3 = bitcast [5 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load %bout.BufIO** @llvm_f
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = load i64* %v
	call void @bout_uint64(%bout.BufIO* %5, i64 %6)
	%7 = load i8* %term
	call void @llvmdb_PTerminator(i8 %7)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PHeader(i16 zeroext %tag.arg, i16 zeroext %dwat.arg) nounwind {
L.0:
	%tag = alloca i16
	%dwat = alloca i16
	store i16 %tag.arg, i16* %tag
	store i16 %dwat.arg, i16* %dwat
	%0 = load i16* %tag
	call void @llvmdb_PMetaSeq(i16 %0)
	%1 = load i16* %dwat
	%2 = zext i16 %1 to i32
	%3 = add i32 %2, 589824
	call void @llvmdb_P32(i32 %3, i8 0)
	br label %return
return:
	ret void
}
@S.586 = internal constant [12 x i8] c"metadata !\22\00"define internal void @llvmdb_PString([0 x i8]* %s.arg, i8 zeroext %term.arg) nounwind {
L.0:
	%s = alloca [0 x i8]*
	%term = alloca i8
	store [0 x i8]* %s.arg, [0 x i8]** %s
	store i8 %term.arg, i8* %term
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [12 x i8]* @S.586
	%3 = bitcast [12 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load [0 x i8]** %s
	%5 = icmp ne [0 x i8]* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load %bout.BufIO** @llvm_f
	%7 = bitcast %bout.BufIO* %6 to %bout.BufIO*
	%8 = load [0 x i8]** %s
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %7, [0 x i8]* %9)
	br label %L.1
L.1:
	%10 = load %bout.BufIO** @llvm_f
	%11 = bitcast %bout.BufIO* %10 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %11, i8 34)
	%12 = load i8* %term
	call void @llvmdb_PTerminator(i8 %12)
	br label %return
return:
	ret void
}
@S.587 = internal constant [12 x i8] c"metadata !\22\00"define internal void @llvmdb_PString2([0 x i8]* %s1.arg, [0 x i8]* %s2.arg, i8 zeroext %delim.arg, i8 zeroext %term.arg) nounwind {
L.0:
	%s1 = alloca [0 x i8]*
	%s2 = alloca [0 x i8]*
	%delim = alloca i8
	%term = alloca i8
	store [0 x i8]* %s1.arg, [0 x i8]** %s1
	store [0 x i8]* %s2.arg, [0 x i8]** %s2
	store i8 %delim.arg, i8* %delim
	store i8 %term.arg, i8* %term
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [12 x i8]* @S.587
	%3 = bitcast [12 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load [0 x i8]** %s1
	%5 = icmp ne [0 x i8]* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load %bout.BufIO** @llvm_f
	%7 = bitcast %bout.BufIO* %6 to %bout.BufIO*
	%8 = load [0 x i8]** %s1
	%9 = bitcast [0 x i8]* %8 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %7, [0 x i8]* %9)
	%10 = load %bout.BufIO** @llvm_f
	%11 = bitcast %bout.BufIO* %10 to %bout.BufIO*
	%12 = load i8* %delim
	call void @bout_chr(%bout.BufIO* %11, i8 %12)
	br label %L.1
L.1:
	%13 = load [0 x i8]** %s2
	%14 = icmp ne [0 x i8]* %13, null
	br i1 %14, label %L.4, label %L.3
L.4:
	%15 = load %bout.BufIO** @llvm_f
	%16 = bitcast %bout.BufIO* %15 to %bout.BufIO*
	%17 = load [0 x i8]** %s2
	%18 = bitcast [0 x i8]* %17 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %16, [0 x i8]* %18)
	br label %L.3
L.3:
	%19 = load %bout.BufIO** @llvm_f
	%20 = bitcast %bout.BufIO* %19 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %20, i8 34)
	%21 = load i8* %term
	call void @llvmdb_PTerminator(i8 %21)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PSymbName(%symb.SymbNode* %s.arg, i8 zeroext %term.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	%term = alloca i8
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	store i8 %term.arg, i8* %term
	%0 = load %symb.SymbNode** %s
	%1 = icmp ne %symb.SymbNode* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %symb.SymbNode** %s
	%3 = getelementptr %symb.SymbNode* %2, i32 0, i32 19
	%4 = getelementptr [0 x i8]* %3
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	%6 = call i8 @symb_IsAnon([0 x i8]* %5)
	%7 = icmp ne i8 %6, 0
	%8 = xor i1 %7, true
	br label %L.2
L.2:
	%9 = phi i1 [ false, %L.0 ], [ %8, %L.1 ]
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load %symb.SymbNode** %s
	%11 = getelementptr %symb.SymbNode* %10, i32 0, i32 19
	%12 = getelementptr [0 x i8]* %11
	%13 = bitcast [0 x i8]* %12 to [0 x i8]*
	%14 = load i8* %term
	call void @llvmdb_PString([0 x i8]* %13, i8 %14)
	br label %L.3
L.5:
	%15 = bitcast [0 x i8]* null to [0 x i8]*
	%16 = load i8* %term
	call void @llvmdb_PString([0 x i8]* %15, i8 %16)
	br label %L.3
L.3:
	br label %return
return:
	ret void
}
define internal void @llvmdb_PDispName(%symb.SymbNode* %s.arg, i8 zeroext %term.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	%term = alloca i8
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	store i8 %term.arg, i8* %term
	%0 = load %symb.SymbNode** %s
	%1 = icmp ne %symb.SymbNode* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %symb.SymbNode** %s
	%3 = getelementptr %symb.SymbNode* %2, i32 0, i32 19
	%4 = getelementptr [0 x i8]* %3
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	%6 = call i8 @symb_IsAnon([0 x i8]* %5)
	%7 = icmp ne i8 %6, 0
	%8 = xor i1 %7, true
	br label %L.2
L.2:
	%9 = phi i1 [ false, %L.0 ], [ %8, %L.1 ]
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load %symb.SymbNode** %s
	%11 = getelementptr %symb.SymbNode* %10, i32 0, i32 2
	%12 = load %symb.SymbNode** %11
	%13 = icmp ne %symb.SymbNode* %12, null
	br i1 %13, label %L.7, label %L.8
L.7:
	%14 = load %symb.SymbNode** %s
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 2
	%16 = load %symb.SymbNode** %15
	%17 = getelementptr %symb.SymbNode* %16, i32 0, i32 19
	%18 = getelementptr [0 x i8]* %17
	%19 = bitcast [0 x i8]* %18 to [0 x i8]*
	%20 = load %symb.SymbNode** %s
	%21 = getelementptr %symb.SymbNode* %20, i32 0, i32 19
	%22 = getelementptr [0 x i8]* %21
	%23 = bitcast [0 x i8]* %22 to [0 x i8]*
	%24 = load i8* %term
	call void @llvmdb_PString2([0 x i8]* %19, [0 x i8]* %23, i8 46, i8 %24)
	br label %L.6
L.8:
	%25 = load %symb.SymbNode** %s
	%26 = getelementptr %symb.SymbNode* %25, i32 0, i32 19
	%27 = getelementptr [0 x i8]* %26
	%28 = bitcast [0 x i8]* %27 to [0 x i8]*
	%29 = load i8* %term
	call void @llvmdb_PString([0 x i8]* %28, i8 %29)
	br label %L.6
L.6:
	br label %L.3
L.5:
	%30 = bitcast [0 x i8]* null to [0 x i8]*
	%31 = load i8* %term
	call void @llvmdb_PString([0 x i8]* %30, i8 %31)
	br label %L.3
L.3:
	br label %return
return:
	ret void
}
define internal void @llvmdb_PLinkName(%symb.SymbNode* %s.arg, i8 zeroext %term.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	%term = alloca i8
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	store i8 %term.arg, i8* %term
	%0 = load %symb.SymbNode** %s
	%1 = icmp ne %symb.SymbNode* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %symb.SymbNode** %s
	%3 = getelementptr %symb.SymbNode* %2, i32 0, i32 19
	%4 = getelementptr [0 x i8]* %3
	%5 = bitcast [0 x i8]* %4 to [0 x i8]*
	%6 = call i8 @symb_IsAnon([0 x i8]* %5)
	%7 = icmp ne i8 %6, 0
	%8 = xor i1 %7, true
	br label %L.2
L.2:
	%9 = phi i1 [ false, %L.0 ], [ %8, %L.1 ]
	br i1 %9, label %L.4, label %L.5
L.4:
	%10 = load %symb.SymbNode** %s
	%11 = getelementptr %symb.SymbNode* %10, i32 0, i32 2
	%12 = load %symb.SymbNode** %11
	%13 = icmp ne %symb.SymbNode* %12, null
	br i1 %13, label %L.7, label %L.8
L.7:
	%14 = load %symb.SymbNode** %s
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 2
	%16 = load %symb.SymbNode** %15
	%17 = getelementptr %symb.SymbNode* %16, i32 0, i32 19
	%18 = getelementptr [0 x i8]* %17
	%19 = bitcast [0 x i8]* %18 to [0 x i8]*
	%20 = load %symb.SymbNode** %s
	%21 = getelementptr %symb.SymbNode* %20, i32 0, i32 19
	%22 = getelementptr [0 x i8]* %21
	%23 = bitcast [0 x i8]* %22 to [0 x i8]*
	%24 = load i8* %term
	call void @llvmdb_PString2([0 x i8]* %19, [0 x i8]* %23, i8 95, i8 %24)
	br label %L.6
L.8:
	%25 = load %symb.SymbNode** %s
	%26 = getelementptr %symb.SymbNode* %25, i32 0, i32 19
	%27 = getelementptr [0 x i8]* %26
	%28 = bitcast [0 x i8]* %27 to [0 x i8]*
	%29 = load i8* %term
	call void @llvmdb_PString([0 x i8]* %28, i8 %29)
	br label %L.6
L.6:
	br label %L.3
L.5:
	%30 = bitcast [0 x i8]* null to [0 x i8]*
	%31 = load i8* %term
	call void @llvmdb_PString([0 x i8]* %30, i8 %31)
	br label %L.3
L.3:
	br label %return
return:
	ret void
}
define internal void @llvmdb_PContext(i8 zeroext %term.arg) nounwind {
L.0:
	%term = alloca i8
	store i8 %term.arg, i8* %term
	%tag = alloca i16
	%0 = load i16* @llvmdb_file
	store i16 %0, i16* %tag
	%1 = load i16* @llvmdb_pakg
	%2 = icmp ne i16 %1, 0
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = load i16* @llvmdb_pakg
	store i16 %3, i16* %tag
	br label %L.1
L.1:
	%4 = load i16* %tag
	%5 = load i8* %term
	call void @llvmdb_PMetaRef(i16 %4, i8 %5)
	br label %return
return:
	ret void
}
@S.588 = internal constant [4 x i8] c"ESL\00"define internal void @llvmdb_CompileUnit([0 x i8]* %name.arg, i8 zeroext %opt.arg) nounwind {
L.0:
	%name = alloca [0 x i8]*
	%opt = alloca i8
	store [0 x i8]* %name.arg, [0 x i8]** %name
	store i8 %opt.arg, i8* %opt
	store i16 1, i16* @llvmdb_seqno
	%0 = load i16* @llvmdb_seqno
	store i16 %0, i16* @llvmdb_unit
	%1 = load i16* @llvmdb_unit
	call void @llvmdb_PHeader(i16 %1, i16 17)
	call void @llvmdb_P32(i32 0, i8 0)
	call void @llvmdb_P32(i32 4, i8 0)
	%2 = load [0 x i8]** %name
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %3, i8 0)
	%4 = bitcast [0 x i8]* null to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %4, i8 0)
	%5 = getelementptr [4 x i8]* @S.588
	%6 = bitcast [4 x i8]* %5 to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %6, i8 0)
	call void @llvmdb_PBoolean(i8 1, i8 0)
	%7 = load i8* %opt
	call void @llvmdb_PBoolean(i8 %7, i8 0)
	%8 = bitcast [0 x i8]* null to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %8, i8 0)
	call void @llvmdb_P32(i32 0, i8 1)
	br label %return
return:
	ret void
}
@S.589 = internal constant [1 x i8] c"\00"define internal void @llvmdb_FileStart(%symb.SymbNode* %fs.arg) nounwind {
L.0:
	%fs = alloca %symb.SymbNode*
	store %symb.SymbNode* %fs.arg, %symb.SymbNode** %fs
	%i = alloca i32
	%name = alloca [0 x i8]*
	%0 = load %symb.SymbNode** %fs
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 19
	%2 = getelementptr [0 x i8]* %1
	%3 = bitcast [0 x i8]* %2 to [0 x i8]*
	store [0 x i8]* %3, [0 x i8]** %name
	%4 = load i16* @llvmdb_unit
	%5 = icmp eq i16 %4, 0
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load [0 x i8]** %name
	%7 = bitcast [0 x i8]* %6 to [0 x i8]*
	call void @llvmdb_CompileUnit([0 x i8]* %7, i8 0)
	br label %L.1
L.1:
	%8 = load i16* @llvmdb_seqno
	%9 = add i16 %8, 1
	store i16 %9, i16* @llvmdb_seqno
	%10 = load i16* @llvmdb_seqno
	store i16 %10, i16* @llvmdb_file
	%11 = load i16* @llvmdb_file
	%12 = load %symb.SymbNode** %fs
	%13 = getelementptr %symb.SymbNode* %12, i32 0, i32 11
	store i16 %11, i16* %13
	%14 = load i16* @llvmdb_file
	call void @llvmdb_PHeader(i16 %14, i16 41)
	%15 = load [0 x i8]** %name
	%16 = bitcast [0 x i8]* %15 to [0 x i8]*
	%17 = call i32 @zstr_rfind([0 x i8]* %16, i8 47, i32 1024)
	store i32 %17, i32* %i
	%18 = load i32* %i
	%19 = icmp eq i32 %18, 1024
	br i1 %19, label %L.4, label %L.5
L.4:
	%20 = load [0 x i8]** %name
	%21 = bitcast [0 x i8]* %20 to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %21, i8 0)
	%22 = getelementptr [1 x i8]* @S.589
	%23 = bitcast [1 x i8]* %22 to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %23, i8 0)
	br label %L.3
L.5:
	%24 = load [0 x i8]** %name
	%25 = load i32* %i
	%26 = getelementptr [0 x i8]* %24, i32 0, i32 %25
	store i8 0, i8* %26
	%27 = load [0 x i8]** %name
	%28 = load i32* %i
	%29 = add i32 %28, 1
	%30 = getelementptr [0 x i8]* %27, i32 0, i32 %29
	%31 = bitcast i8* %30 to [0 x i8]*
	%32 = getelementptr [0 x i8]* %31
	%33 = bitcast [0 x i8]* %32 to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %33, i8 0)
	%34 = load [0 x i8]** %name
	%35 = bitcast [0 x i8]* %34 to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %35, i8 0)
	br label %L.3
L.3:
	%36 = load i16* @llvmdb_unit
	call void @llvmdb_PMetaRef(i16 %36, i8 1)
	br label %return
return:
	ret void
}
define internal void @llvmdb_FileFinish(%symb.SymbNode* %fs.arg) nounwind {
L.0:
	%fs = alloca %symb.SymbNode*
	store %symb.SymbNode* %fs.arg, %symb.SymbNode** %fs
	%ps = alloca %symb.SymbNode*
	%0 = load %symb.SymbNode** %fs
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 2
	%2 = load %symb.SymbNode** %1
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %ps
	%4 = load %symb.SymbNode** %ps
	%5 = icmp ne %symb.SymbNode* %4, null
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = load %symb.SymbNode** %ps
	%7 = getelementptr %symb.SymbNode* %6, i32 0, i32 11
	%8 = load i16* %7
	store i16 %8, i16* @llvmdb_file
	br label %L.1
L.3:
	store i16 0, i16* @llvmdb_file
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @llvmdb_PackageStart([0 x i8]* %name.arg) nounwind {
L.0:
	%name = alloca [0 x i8]*
	store [0 x i8]* %name.arg, [0 x i8]** %name
	%0 = load i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16* @llvmdb_seqno
	store i16 %2, i16* @llvmdb_pakg
	%3 = load i16* @llvmdb_pakg
	call void @llvmdb_PHeader(i16 %3, i16 57)
	%4 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %4, i8 0)
	%5 = load [0 x i8]** %name
	%6 = bitcast [0 x i8]* %5 to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %6, i8 0)
	%7 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %7, i8 1)
	br label %return
return:
	ret void
}
define internal void @llvmdb_PackageEnd() nounwind {
L.0:
	store i16 0, i16* @llvmdb_pakg
	br label %return
return:
	ret void
}
define internal i32 @llvmdb_DefFormals(%symb.SymbNode* %ps.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%ps = alloca %symb.SymbNode*
	store %symb.SymbNode* %ps.arg, %symb.SymbNode** %ps
	%fs = alloca %symb.SymbNode*
	%term = alloca i8
	%n = alloca i32
	store i32 0, i32* %n
	%0 = load %symb.SymbNode** %ps
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 3
	%2 = load %symb.SymbNode** %1
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %fs
	br label %L.1
L.1:
	%4 = load %symb.SymbNode** %fs
	%5 = icmp ne %symb.SymbNode* %4, null
	%6 = xor i1 %5, true
	br i1 %6, label %L.2, label %L.3
L.3:
	%7 = load i32* %n
	%8 = add i32 %7, 1
	store i32 %8, i32* %n
	%9 = load %symb.SymbNode** %fs
	%10 = getelementptr %symb.SymbNode* %9, i32 0, i32 1
	%11 = load %type.TypeNode** %10
	%12 = bitcast %type.TypeNode* %11 to %type.TypeNode*
	%13 = call i16 @llvmdb_DefType(%type.TypeNode* %12)
	%14 = load %symb.SymbNode** %fs
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 0
	%16 = load %symb.SymbNode** %15
	%17 = bitcast %symb.SymbNode* %16 to %symb.SymbNode*
	store %symb.SymbNode* %17, %symb.SymbNode** %fs
	br label %L.1
L.2:
	%18 = load i32* %n
	store i32 %18, i32* %rv.0
	br label %return
return:
	%19 = load i32* %rv.0
	ret i32 %19
}
define internal zeroext i16 @llvmdb_DefRetvs(%symb.SymbNode* %ps.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%ps = alloca %symb.SymbNode*
	store %symb.SymbNode* %ps.arg, %symb.SymbNode** %ps
	%retvs = alloca i16
	%tag = alloca i16
	%tl = alloca %type.TypeListEntry*
	%term = alloca i8
	%0 = load %symb.SymbNode** %ps
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 4
	%2 = load %type.TypeListEntry** %1
	%3 = bitcast %type.TypeListEntry* %2 to %type.TypeListEntry*
	store %type.TypeListEntry* %3, %type.TypeListEntry** %tl
	%4 = load %type.TypeListEntry** %tl
	%5 = icmp eq %type.TypeListEntry* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	store i16 0, i16* %rv.0
	br label %return
L.1:
	br label %L.3
L.3:
	%6 = load %type.TypeListEntry** %tl
	%7 = icmp ne %type.TypeListEntry* %6, null
	%8 = xor i1 %7, true
	br i1 %8, label %L.4, label %L.5
L.5:
	%9 = load %type.TypeListEntry** %tl
	%10 = getelementptr %type.TypeListEntry* %9, i32 0, i32 1
	%11 = load %type.TypeNode** %10
	%12 = bitcast %type.TypeNode* %11 to %type.TypeNode*
	%13 = call i16 @llvmdb_DefType(%type.TypeNode* %12)
	%14 = load %type.TypeListEntry** %tl
	%15 = getelementptr %type.TypeListEntry* %14, i32 0, i32 0
	%16 = load %type.TypeListEntry** %15
	%17 = bitcast %type.TypeListEntry* %16 to %type.TypeListEntry*
	store %type.TypeListEntry* %17, %type.TypeListEntry** %tl
	br label %L.3
L.4:
	%18 = load %symb.SymbNode** %ps
	%19 = getelementptr %symb.SymbNode* %18, i32 0, i32 4
	%20 = load %type.TypeListEntry** %19
	%21 = bitcast %type.TypeListEntry* %20 to %type.TypeListEntry*
	store %type.TypeListEntry* %21, %type.TypeListEntry** %tl
	%22 = load %type.TypeListEntry** %tl
	%23 = getelementptr %type.TypeListEntry* %22, i32 0, i32 0
	%24 = load %type.TypeListEntry** %23
	%25 = icmp eq %type.TypeListEntry* %24, null
	br i1 %25, label %L.7, label %L.8
L.7:
	%26 = load %type.TypeListEntry** %tl
	%27 = getelementptr %type.TypeListEntry* %26, i32 0, i32 1
	%28 = load %type.TypeNode** %27
	%29 = getelementptr %type.TypeNode* %28, i32 0, i32 11
	%30 = load i16* %29
	store i16 %30, i16* %retvs
	br label %L.6
L.8:
	%31 = load i16* @llvmdb_seqno
	%32 = add i16 %31, 1
	store i16 %32, i16* @llvmdb_seqno
	%33 = load i16* @llvmdb_seqno
	store i16 %33, i16* %retvs
	%34 = load i16* %retvs
	call void @llvmdb_PMetaSeq(i16 %34)
	store i8 0, i8* %term
	br label %L.9
L.9:
	%35 = load %type.TypeListEntry** %tl
	%36 = icmp ne %type.TypeListEntry* %35, null
	%37 = xor i1 %36, true
	br i1 %37, label %L.10, label %L.11
L.11:
	%38 = load %type.TypeListEntry** %tl
	%39 = getelementptr %type.TypeListEntry* %38, i32 0, i32 1
	%40 = load %type.TypeNode** %39
	%41 = getelementptr %type.TypeNode* %40, i32 0, i32 11
	%42 = load i16* %41
	store i16 %42, i16* %tag
	%43 = load %type.TypeListEntry** %tl
	%44 = getelementptr %type.TypeListEntry* %43, i32 0, i32 0
	%45 = load %type.TypeListEntry** %44
	%46 = bitcast %type.TypeListEntry* %45 to %type.TypeListEntry*
	store %type.TypeListEntry* %46, %type.TypeListEntry** %tl
	%47 = load %type.TypeListEntry** %tl
	%48 = icmp eq %type.TypeListEntry* %47, null
	br i1 %48, label %L.13, label %L.12
L.13:
	store i8 1, i8* %term
	br label %L.12
L.12:
	%49 = load i16* %tag
	%50 = load i8* %term
	call void @llvmdb_PMetaRef(i16 %49, i8 %50)
	br label %L.9
L.10:
	br label %L.6
L.6:
	%51 = load i16* %retvs
	store i16 %51, i16* %rv.0
	br label %return
return:
	%52 = load i16* %rv.0
	ret i16 %52
}
define internal zeroext i16 @llvmdb_DefSubroutine(%symb.SymbNode* %ps.arg, i8 zeroext %formals.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%ps = alloca %symb.SymbNode*
	%formals = alloca i8
	store %symb.SymbNode* %ps.arg, %symb.SymbNode** %ps
	store i8 %formals.arg, i8* %formals
	%tag = alloca i16
	%list = alloca i16
	%s = alloca %symb.SymbNode*
	%tl = alloca %type.TypeListEntry*
	%term = alloca i8
	%0 = load %symb.SymbNode** %ps
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 4
	%2 = load %type.TypeListEntry** %1
	%3 = bitcast %type.TypeListEntry* %2 to %type.TypeListEntry*
	store %type.TypeListEntry* %3, %type.TypeListEntry** %tl
	br label %L.1
L.1:
	%4 = load %type.TypeListEntry** %tl
	%5 = icmp ne %type.TypeListEntry* %4, null
	%6 = xor i1 %5, true
	br i1 %6, label %L.2, label %L.3
L.3:
	%7 = load %type.TypeListEntry** %tl
	%8 = getelementptr %type.TypeListEntry* %7, i32 0, i32 1
	%9 = load %type.TypeNode** %8
	%10 = bitcast %type.TypeNode* %9 to %type.TypeNode*
	%11 = call i16 @llvmdb_DefType(%type.TypeNode* %10)
	%12 = load %type.TypeListEntry** %tl
	%13 = getelementptr %type.TypeListEntry* %12, i32 0, i32 0
	%14 = load %type.TypeListEntry** %13
	%15 = bitcast %type.TypeListEntry* %14 to %type.TypeListEntry*
	store %type.TypeListEntry* %15, %type.TypeListEntry** %tl
	br label %L.1
L.2:
	%16 = load i8* %formals
	%17 = icmp ne i8 %16, 0
	br i1 %17, label %L.5, label %L.4
L.5:
	%18 = load %symb.SymbNode** %ps
	%19 = getelementptr %symb.SymbNode* %18, i32 0, i32 3
	%20 = load %symb.SymbNode** %19
	%21 = bitcast %symb.SymbNode* %20 to %symb.SymbNode*
	store %symb.SymbNode* %21, %symb.SymbNode** %s
	br label %L.6
L.6:
	%22 = load %symb.SymbNode** %s
	%23 = icmp ne %symb.SymbNode* %22, null
	%24 = xor i1 %23, true
	br i1 %24, label %L.7, label %L.8
L.8:
	%25 = load %symb.SymbNode** %s
	%26 = getelementptr %symb.SymbNode* %25, i32 0, i32 1
	%27 = load %type.TypeNode** %26
	%28 = bitcast %type.TypeNode* %27 to %type.TypeNode*
	%29 = call i16 @llvmdb_DefType(%type.TypeNode* %28)
	%30 = load %symb.SymbNode** %s
	%31 = getelementptr %symb.SymbNode* %30, i32 0, i32 0
	%32 = load %symb.SymbNode** %31
	%33 = bitcast %symb.SymbNode* %32 to %symb.SymbNode*
	store %symb.SymbNode* %33, %symb.SymbNode** %s
	br label %L.6
L.7:
	br label %L.4
L.4:
	%34 = load i16* @llvmdb_seqno
	%35 = add i16 %34, 1
	store i16 %35, i16* @llvmdb_seqno
	%36 = load i16* @llvmdb_seqno
	store i16 %36, i16* %list
	%37 = load i16* %list
	call void @llvmdb_PMetaSeq(i16 %37)
	%38 = load %symb.SymbNode** %ps
	%39 = getelementptr %symb.SymbNode* %38, i32 0, i32 4
	%40 = load %type.TypeListEntry** %39
	%41 = bitcast %type.TypeListEntry* %40 to %type.TypeListEntry*
	store %type.TypeListEntry* %41, %type.TypeListEntry** %tl
	%42 = load i8* %formals
	%43 = icmp ne i8 %42, 0
	br i1 %43, label %L.10, label %L.11
L.10:
	%44 = load %symb.SymbNode** %ps
	%45 = getelementptr %symb.SymbNode* %44, i32 0, i32 3
	%46 = load %symb.SymbNode** %45
	%47 = bitcast %symb.SymbNode* %46 to %symb.SymbNode*
	store %symb.SymbNode* %47, %symb.SymbNode** %s
	br label %L.9
L.11:
	%48 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %48, %symb.SymbNode** %s
	br label %L.9
L.9:
	%49 = load %symb.SymbNode** %s
	%50 = icmp eq %symb.SymbNode* %49, null
	br i1 %50, label %L.13, label %L.14
L.13:
	store i8 1, i8* %term
	br label %L.12
L.14:
	store i8 0, i8* %term
	br label %L.12
L.12:
	%51 = load %type.TypeListEntry** %tl
	%52 = icmp eq %type.TypeListEntry* %51, null
	br i1 %52, label %L.16, label %L.17
L.16:
	%53 = load i8* %term
	call void @llvmdb_PNull(i8 %53)
	br label %L.15
L.17:
	br label %L.18
L.18:
	%54 = load %type.TypeListEntry** %tl
	%55 = icmp ne %type.TypeListEntry* %54, null
	%56 = xor i1 %55, true
	br i1 %56, label %L.19, label %L.20
L.20:
	%57 = load %type.TypeListEntry** %tl
	%58 = getelementptr %type.TypeListEntry* %57, i32 0, i32 1
	%59 = load %type.TypeNode** %58
	%60 = getelementptr %type.TypeNode* %59, i32 0, i32 11
	%61 = load i16* %60
	store i16 %61, i16* %tag
	%62 = load %type.TypeListEntry** %tl
	%63 = getelementptr %type.TypeListEntry* %62, i32 0, i32 0
	%64 = load %type.TypeListEntry** %63
	%65 = bitcast %type.TypeListEntry* %64 to %type.TypeListEntry*
	store %type.TypeListEntry* %65, %type.TypeListEntry** %tl
	%66 = load %type.TypeListEntry** %tl
	%67 = icmp eq %type.TypeListEntry* %66, null
	br i1 %67, label %L.21, label %L.22
L.21:
	%68 = load %symb.SymbNode** %s
	%69 = icmp eq %symb.SymbNode* %68, null
	br label %L.22
L.22:
	%70 = phi i1 [ false, %L.20 ], [ %69, %L.21 ]
	br i1 %70, label %L.24, label %L.23
L.24:
	store i8 1, i8* %term
	br label %L.23
L.23:
	%71 = load i16* %tag
	%72 = load i8* %term
	call void @llvmdb_PMetaRef(i16 %71, i8 %72)
	br label %L.18
L.19:
	br label %L.15
L.15:
	store i8 0, i8* %term
	br label %L.25
L.25:
	%73 = load %symb.SymbNode** %s
	%74 = icmp ne %symb.SymbNode* %73, null
	%75 = xor i1 %74, true
	br i1 %75, label %L.26, label %L.27
L.27:
	%76 = load %symb.SymbNode** %s
	%77 = getelementptr %symb.SymbNode* %76, i32 0, i32 1
	%78 = load %type.TypeNode** %77
	%79 = getelementptr %type.TypeNode* %78, i32 0, i32 11
	%80 = load i16* %79
	store i16 %80, i16* %tag
	%81 = load %symb.SymbNode** %s
	%82 = getelementptr %symb.SymbNode* %81, i32 0, i32 0
	%83 = load %symb.SymbNode** %82
	%84 = bitcast %symb.SymbNode* %83 to %symb.SymbNode*
	store %symb.SymbNode* %84, %symb.SymbNode** %s
	%85 = load %symb.SymbNode** %s
	%86 = icmp eq %symb.SymbNode* %85, null
	br i1 %86, label %L.29, label %L.28
L.29:
	store i8 1, i8* %term
	br label %L.28
L.28:
	%87 = load i16* %tag
	%88 = load i8* %term
	call void @llvmdb_PMetaRef(i16 %87, i8 %88)
	br label %L.25
L.26:
	%89 = load i16* @llvmdb_seqno
	%90 = add i16 %89, 1
	store i16 %90, i16* @llvmdb_seqno
	%91 = load i16* @llvmdb_seqno
	call void @llvmdb_PHeader(i16 %91, i16 21)
	%92 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %92, i8 0)
	%93 = bitcast [0 x i8]* null to [0 x i8]*
	call void @llvmdb_PString([0 x i8]* %93, i8 0)
	%94 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %94, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	call void @llvmdb_P64(i64 0, i8 0)
	call void @llvmdb_P64(i64 0, i8 0)
	call void @llvmdb_P64(i64 0, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	call void @llvmdb_PNull(i8 0)
	%95 = load i16* %list
	call void @llvmdb_PMetaRef(i16 %95, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	call void @llvmdb_PNull(i8 1)
	%96 = load i16* @llvmdb_seqno
	store i16 %96, i16* %rv.0
	br label %return
return:
	%97 = load i16* %rv.0
	ret i16 %97
}
define internal zeroext i16 @llvmdb_DefBasicType(i8 zeroext %dwtype.arg, %type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%dwtype = alloca i8
	%t = alloca %type.TypeNode*
	store i8 %dwtype.arg, i8* %dwtype
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%0 = load i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16* @llvmdb_seqno
	call void @llvmdb_PHeader(i16 %2, i16 36)
	%3 = load i16* @llvmdb_unit
	call void @llvmdb_PMetaRef(i16 %3, i8 0)
	%4 = load %type.TypeNode** %t
	%5 = getelementptr %type.TypeNode* %4, i32 0, i32 3
	%6 = load %symb.SymbNode** %5
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	call void @llvmdb_PSymbName(%symb.SymbNode* %7, i8 0)
	%8 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %8, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	%9 = load %type.TypeNode** %t
	%10 = getelementptr %type.TypeNode* %9, i32 0, i32 9
	%11 = load i32* %10
	%12 = zext i32 %11 to i64
	call void @llvmdb_P64(i64 %12, i8 0)
	%13 = load %type.TypeNode** %t
	%14 = getelementptr %type.TypeNode* %13, i32 0, i32 10
	%15 = load i32* %14
	%16 = zext i32 %15 to i64
	call void @llvmdb_P64(i64 %16, i8 0)
	call void @llvmdb_P64(i64 0, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	%17 = load i8* %dwtype
	%18 = zext i8 %17 to i32
	call void @llvmdb_P32(i32 %18, i8 1)
	%19 = load i16* @llvmdb_seqno
	store i16 %19, i16* %rv.0
	br label %return
return:
	%20 = load i16* %rv.0
	ret i16 %20
}
define internal void @llvmdb_PTypeHeader(i16 zeroext %tag.arg, i16 zeroext %dwat.arg, %type.TypeNode* %t.arg) nounwind {
L.0:
	%tag = alloca i16
	%dwat = alloca i16
	%t = alloca %type.TypeNode*
	store i16 %tag.arg, i16* %tag
	store i16 %dwat.arg, i16* %dwat
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%0 = load i16* %tag
	%1 = load i16* %dwat
	call void @llvmdb_PHeader(i16 %0, i16 %1)
	%2 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %2, i8 0)
	%3 = load %type.TypeNode** %t
	%4 = getelementptr %type.TypeNode* %3, i32 0, i32 3
	%5 = load %symb.SymbNode** %4
	%6 = bitcast %symb.SymbNode* %5 to %symb.SymbNode*
	call void @llvmdb_PSymbName(%symb.SymbNode* %6, i8 0)
	%7 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %7, i8 0)
	%8 = load %type.TypeNode** %t
	%9 = getelementptr %type.TypeNode* %8, i32 0, i32 3
	%10 = load %symb.SymbNode** %9
	%11 = icmp ne %symb.SymbNode* %10, null
	br i1 %11, label %L.2, label %L.3
L.2:
	%12 = load %type.TypeNode** %t
	%13 = getelementptr %type.TypeNode* %12, i32 0, i32 3
	%14 = load %symb.SymbNode** %13
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 10
	%16 = load i16* %15
	%17 = zext i16 %16 to i32
	call void @llvmdb_P32(i32 %17, i8 0)
	br label %L.1
L.3:
	call void @llvmdb_P32(i32 0, i8 0)
	br label %L.1
L.1:
	%18 = load %type.TypeNode** %t
	%19 = getelementptr %type.TypeNode* %18, i32 0, i32 9
	%20 = load i32* %19
	%21 = zext i32 %20 to i64
	call void @llvmdb_P64(i64 %21, i8 0)
	%22 = load %type.TypeNode** %t
	%23 = getelementptr %type.TypeNode* %22, i32 0, i32 10
	%24 = load i32* %23
	%25 = zext i32 %24 to i64
	call void @llvmdb_P64(i64 %25, i8 0)
	call void @llvmdb_P64(i64 0, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	br label %return
return:
	ret void
}
define internal zeroext i16 @llvmdb_DefRefType(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tag = alloca i16
	%0 = load %type.TypeNode** %t
	%1 = getelementptr %type.TypeNode* %0, i32 0, i32 13
	%2 = load i8* %1
	%3 = icmp eq i8 %2, 7
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %type.TypeNode** %t
	%5 = getelementptr %type.TypeNode* %4, i32 0, i32 4
	%6 = load %symb.SymbNode** %5
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	%8 = call i16 @llvmdb_DefSubroutine(%symb.SymbNode* %7, i8 1)
	store i16 %8, i16* %tag
	br label %L.1
L.3:
	%9 = load %type.TypeNode** %t
	%10 = getelementptr %type.TypeNode* %9, i32 0, i32 0
	%11 = load %type.TypeNode** %10
	%12 = bitcast %type.TypeNode* %11 to %type.TypeNode*
	%13 = call i16 @llvmdb_DefType(%type.TypeNode* %12)
	store i16 %13, i16* %tag
	br label %L.1
L.1:
	%14 = load i16* @llvmdb_seqno
	%15 = add i16 %14, 1
	store i16 %15, i16* @llvmdb_seqno
	%16 = load i16* @llvmdb_seqno
	%17 = load %type.TypeNode** %t
	%18 = bitcast %type.TypeNode* %17 to %type.TypeNode*
	call void @llvmdb_PTypeHeader(i16 %16, i16 15, %type.TypeNode* %18)
	%19 = load i16* %tag
	call void @llvmdb_PMetaRef(i16 %19, i8 1)
	%20 = load i16* @llvmdb_seqno
	store i16 %20, i16* %rv.0
	br label %return
return:
	%21 = load i16* %rv.0
	ret i16 %21
}
define internal zeroext i16 @llvmdb_DefRange(i64 %lo.arg, i64 %hi.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%lo = alloca i64
	%hi = alloca i64
	store i64 %lo.arg, i64* %lo
	store i64 %hi.arg, i64* %hi
	%0 = load i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16* @llvmdb_seqno
	call void @llvmdb_PHeader(i16 %2, i16 33)
	%3 = load i64* %lo
	call void @llvmdb_P64(i64 %3, i8 0)
	%4 = load i64* %hi
	call void @llvmdb_P64(i64 %4, i8 1)
	%5 = load i16* @llvmdb_seqno
	store i16 %5, i16* %rv.0
	br label %return
return:
	%6 = load i16* %rv.0
	ret i16 %6
}
define internal zeroext i16 @llvmdb_DefEnumConst(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%0 = load i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16* @llvmdb_seqno
	call void @llvmdb_PHeader(i16 %2, i16 40)
	%3 = load %symb.SymbNode** %s
	%4 = bitcast %symb.SymbNode* %3 to %symb.SymbNode*
	call void @llvmdb_PSymbName(%symb.SymbNode* %4, i8 0)
	%5 = load %symb.SymbNode** %s
	%6 = getelementptr %symb.SymbNode* %5, i32 0, i32 7
	%7 = load i64* %6
	call void @llvmdb_P64(i64 %7, i8 1)
	%8 = load i16* @llvmdb_seqno
	store i16 %8, i16* %rv.0
	br label %return
return:
	%9 = load i16* %rv.0
	ret i16 %9
}
define internal zeroext i16 @llvmdb_DefEnumerationType(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tag = alloca i16
	%list = alloca i16
	%s = alloca %symb.SymbNode*
	%term = alloca i8
	%0 = load %type.TypeNode** %t
	%1 = getelementptr %type.TypeNode* %0, i32 0, i32 4
	%2 = load %symb.SymbNode** %1
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %s
	br label %L.1
L.1:
	%4 = load %symb.SymbNode** %s
	%5 = icmp ne %symb.SymbNode* %4, null
	%6 = xor i1 %5, true
	br i1 %6, label %L.2, label %L.3
L.3:
	%7 = load %symb.SymbNode** %s
	%8 = getelementptr %symb.SymbNode* %7, i32 0, i32 11
	%9 = load i16* %8
	%10 = icmp eq i16 %9, 0
	br i1 %10, label %L.5, label %L.4
L.5:
	%11 = load %symb.SymbNode** %s
	%12 = bitcast %symb.SymbNode* %11 to %symb.SymbNode*
	%13 = call i16 @llvmdb_DefEnumConst(%symb.SymbNode* %12)
	%14 = load %symb.SymbNode** %s
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 11
	store i16 %13, i16* %15
	br label %L.4
L.4:
	%16 = load %symb.SymbNode** %s
	%17 = getelementptr %symb.SymbNode* %16, i32 0, i32 0
	%18 = load %symb.SymbNode** %17
	%19 = bitcast %symb.SymbNode* %18 to %symb.SymbNode*
	store %symb.SymbNode* %19, %symb.SymbNode** %s
	br label %L.1
L.2:
	%20 = load i16* @llvmdb_seqno
	%21 = add i16 %20, 1
	store i16 %21, i16* @llvmdb_seqno
	%22 = load i16* @llvmdb_seqno
	store i16 %22, i16* %list
	%23 = load i16* %list
	call void @llvmdb_PMetaSeq(i16 %23)
	store i8 0, i8* %term
	%24 = load %type.TypeNode** %t
	%25 = getelementptr %type.TypeNode* %24, i32 0, i32 4
	%26 = load %symb.SymbNode** %25
	%27 = bitcast %symb.SymbNode* %26 to %symb.SymbNode*
	store %symb.SymbNode* %27, %symb.SymbNode** %s
	br label %L.6
L.6:
	%28 = load %symb.SymbNode** %s
	%29 = icmp ne %symb.SymbNode* %28, null
	%30 = xor i1 %29, true
	br i1 %30, label %L.7, label %L.8
L.8:
	%31 = load %symb.SymbNode** %s
	%32 = getelementptr %symb.SymbNode* %31, i32 0, i32 11
	%33 = load i16* %32
	store i16 %33, i16* %tag
	%34 = load %symb.SymbNode** %s
	%35 = getelementptr %symb.SymbNode* %34, i32 0, i32 0
	%36 = load %symb.SymbNode** %35
	%37 = bitcast %symb.SymbNode* %36 to %symb.SymbNode*
	store %symb.SymbNode* %37, %symb.SymbNode** %s
	%38 = load %symb.SymbNode** %s
	%39 = icmp eq %symb.SymbNode* %38, null
	br i1 %39, label %L.10, label %L.9
L.10:
	store i8 1, i8* %term
	br label %L.9
L.9:
	%40 = load i16* %tag
	%41 = load i8* %term
	call void @llvmdb_PMetaRef(i16 %40, i8 %41)
	br label %L.6
L.7:
	%42 = load i16* @llvmdb_seqno
	%43 = add i16 %42, 1
	store i16 %43, i16* @llvmdb_seqno
	%44 = load i16* @llvmdb_seqno
	%45 = load %type.TypeNode** %t
	%46 = bitcast %type.TypeNode* %45 to %type.TypeNode*
	call void @llvmdb_PTypeHeader(i16 %44, i16 4, %type.TypeNode* %46)
	call void @llvmdb_PNull(i8 0)
	%47 = load i16* %list
	call void @llvmdb_PMetaRef(i16 %47, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	call void @llvmdb_PNull(i8 1)
	%48 = load i16* @llvmdb_seqno
	store i16 %48, i16* %rv.0
	br label %return
return:
	%49 = load i16* %rv.0
	ret i16 %49
}
define internal zeroext i16 @llvmdb_DefArrayType(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tagb = alloca i16
	%tagi = alloca i16
	%0 = load %type.TypeNode** %t
	%1 = getelementptr %type.TypeNode* %0, i32 0, i32 0
	%2 = load %type.TypeNode** %1
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	%4 = call i16 @llvmdb_DefType(%type.TypeNode* %3)
	store i16 %4, i16* %tagb
	%5 = load %type.TypeNode** %t
	%6 = getelementptr %type.TypeNode* %5, i32 0, i32 18
	%7 = load i8* %6
	%8 = icmp ne i8 %7, 0
	br i1 %8, label %L.2, label %L.3
L.2:
	%9 = call i16 @llvmdb_DefRange(i64 0, i64 0)
	store i16 %9, i16* %tagi
	br label %L.1
L.3:
	%10 = load %type.TypeNode** %t
	%11 = getelementptr %type.TypeNode* %10, i32 0, i32 2
	%12 = load %type.TypeNode** %11
	%13 = icmp ne %type.TypeNode* %12, null
	br i1 %13, label %L.4, label %L.5
L.4:
	%14 = load %type.TypeNode** %t
	%15 = getelementptr %type.TypeNode* %14, i32 0, i32 2
	%16 = load %type.TypeNode** %15
	%17 = getelementptr %type.TypeNode* %16, i32 0, i32 13
	%18 = load i8* %17
	%19 = icmp eq i8 %18, 1
	br label %L.5
L.5:
	%20 = phi i1 [ false, %L.3 ], [ %19, %L.4 ]
	br i1 %20, label %L.7, label %L.8
L.7:
	%21 = load %type.TypeNode** %t
	%22 = getelementptr %type.TypeNode* %21, i32 0, i32 2
	%23 = load %type.TypeNode** %22
	%24 = bitcast %type.TypeNode* %23 to %type.TypeNode*
	%25 = call i16 @llvmdb_DefEnumerationType(%type.TypeNode* %24)
	store i16 %25, i16* %tagi
	br label %L.6
L.8:
	%26 = load %type.TypeNode** %t
	%27 = getelementptr %type.TypeNode* %26, i32 0, i32 6
	%28 = load i64* %27
	%29 = load %type.TypeNode** %t
	%30 = getelementptr %type.TypeNode* %29, i32 0, i32 7
	%31 = load i64* %30
	%32 = sub i64 %31, 1
	%33 = call i16 @llvmdb_DefRange(i64 %28, i64 %32)
	store i16 %33, i16* %tagi
	br label %L.6
L.6:
	br label %L.1
L.1:
	%34 = load i16* @llvmdb_seqno
	%35 = add i16 %34, 1
	store i16 %35, i16* @llvmdb_seqno
	%36 = load i16* @llvmdb_seqno
	%37 = load %type.TypeNode** %t
	%38 = bitcast %type.TypeNode* %37 to %type.TypeNode*
	call void @llvmdb_PTypeHeader(i16 %36, i16 1, %type.TypeNode* %38)
	%39 = load i16* %tagb
	call void @llvmdb_PMetaRef(i16 %39, i8 0)
	%40 = load i16* %tagi
	call void @llvmdb_PMetaRef(i16 %40, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	call void @llvmdb_PNull(i8 1)
	%41 = load i16* @llvmdb_seqno
	store i16 %41, i16* %rv.0
	br label %return
return:
	%42 = load i16* %rv.0
	ret i16 %42
}
define internal zeroext i16 @llvmdb_DefField(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%tag = alloca i16
	%t = alloca %type.TypeNode*
	%0 = load %symb.SymbNode** %s
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 1
	%2 = load %type.TypeNode** %1
	%3 = bitcast %type.TypeNode* %2 to %type.TypeNode*
	store %type.TypeNode* %3, %type.TypeNode** %t
	%4 = load %symb.SymbNode** %s
	%5 = getelementptr %symb.SymbNode* %4, i32 0, i32 1
	%6 = load %type.TypeNode** %5
	%7 = bitcast %type.TypeNode* %6 to %type.TypeNode*
	%8 = call i16 @llvmdb_DefType(%type.TypeNode* %7)
	store i16 %8, i16* %tag
	%9 = load i16* @llvmdb_seqno
	%10 = add i16 %9, 1
	store i16 %10, i16* @llvmdb_seqno
	%11 = load i16* @llvmdb_seqno
	call void @llvmdb_PHeader(i16 %11, i16 13)
	%12 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %12, i8 0)
	%13 = load %symb.SymbNode** %s
	%14 = bitcast %symb.SymbNode* %13 to %symb.SymbNode*
	call void @llvmdb_PSymbName(%symb.SymbNode* %14, i8 0)
	%15 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %15, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	%16 = load %type.TypeNode** %t
	%17 = getelementptr %type.TypeNode* %16, i32 0, i32 9
	%18 = load i32* %17
	%19 = zext i32 %18 to i64
	call void @llvmdb_P64(i64 %19, i8 0)
	%20 = load %type.TypeNode** %t
	%21 = getelementptr %type.TypeNode* %20, i32 0, i32 10
	%22 = load i32* %21
	%23 = zext i32 %22 to i64
	call void @llvmdb_P64(i64 %23, i8 0)
	%24 = load %symb.SymbNode** %s
	%25 = getelementptr %symb.SymbNode* %24, i32 0, i32 9
	%26 = load i16* %25
	%27 = zext i16 %26 to i64
	call void @llvmdb_P64(i64 %27, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	%28 = load i16* %tag
	call void @llvmdb_PMetaRef(i16 %28, i8 1)
	%29 = load i16* @llvmdb_seqno
	store i16 %29, i16* %rv.0
	br label %return
return:
	%30 = load i16* %rv.0
	ret i16 %30
}
define internal zeroext i16 @llvmdb_DefRecordType(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tag = alloca i16
	%list = alloca i16
	%rec = alloca i16
	%s = alloca %symb.SymbNode*
	%term = alloca i8
	%0 = load i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16* @llvmdb_seqno
	store i16 %2, i16* %rec
	%3 = load i16* %rec
	%4 = load %type.TypeNode** %t
	%5 = getelementptr %type.TypeNode* %4, i32 0, i32 11
	store i16 %3, i16* %5
	%6 = load i16* @llvmdb_seqno
	%7 = add i16 %6, 1
	store i16 %7, i16* @llvmdb_seqno
	%8 = load i16* @llvmdb_seqno
	store i16 %8, i16* %list
	%9 = load i16* %rec
	%10 = load %type.TypeNode** %t
	%11 = bitcast %type.TypeNode* %10 to %type.TypeNode*
	call void @llvmdb_PTypeHeader(i16 %9, i16 19, %type.TypeNode* %11)
	call void @llvmdb_PNull(i8 0)
	%12 = load i16* %list
	call void @llvmdb_PMetaRef(i16 %12, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	call void @llvmdb_PNull(i8 1)
	%13 = load %type.TypeNode** %t
	%14 = getelementptr %type.TypeNode* %13, i32 0, i32 4
	%15 = load %symb.SymbNode** %14
	%16 = bitcast %symb.SymbNode* %15 to %symb.SymbNode*
	store %symb.SymbNode* %16, %symb.SymbNode** %s
	br label %L.1
L.1:
	%17 = load %symb.SymbNode** %s
	%18 = icmp ne %symb.SymbNode* %17, null
	%19 = xor i1 %18, true
	br i1 %19, label %L.2, label %L.3
L.3:
	%20 = load %symb.SymbNode** %s
	%21 = getelementptr %symb.SymbNode* %20, i32 0, i32 11
	%22 = load i16* %21
	%23 = icmp eq i16 %22, 0
	br i1 %23, label %L.5, label %L.4
L.5:
	%24 = load %symb.SymbNode** %s
	%25 = bitcast %symb.SymbNode* %24 to %symb.SymbNode*
	%26 = call i16 @llvmdb_DefField(%symb.SymbNode* %25)
	%27 = load %symb.SymbNode** %s
	%28 = getelementptr %symb.SymbNode* %27, i32 0, i32 11
	store i16 %26, i16* %28
	br label %L.4
L.4:
	%29 = load %symb.SymbNode** %s
	%30 = getelementptr %symb.SymbNode* %29, i32 0, i32 0
	%31 = load %symb.SymbNode** %30
	%32 = bitcast %symb.SymbNode* %31 to %symb.SymbNode*
	store %symb.SymbNode* %32, %symb.SymbNode** %s
	br label %L.1
L.2:
	%33 = load i16* %list
	call void @llvmdb_PMetaSeq(i16 %33)
	store i8 0, i8* %term
	%34 = load %type.TypeNode** %t
	%35 = getelementptr %type.TypeNode* %34, i32 0, i32 4
	%36 = load %symb.SymbNode** %35
	%37 = bitcast %symb.SymbNode* %36 to %symb.SymbNode*
	store %symb.SymbNode* %37, %symb.SymbNode** %s
	br label %L.6
L.6:
	%38 = load %symb.SymbNode** %s
	%39 = icmp ne %symb.SymbNode* %38, null
	%40 = xor i1 %39, true
	br i1 %40, label %L.7, label %L.8
L.8:
	%41 = load %symb.SymbNode** %s
	%42 = getelementptr %symb.SymbNode* %41, i32 0, i32 11
	%43 = load i16* %42
	store i16 %43, i16* %tag
	%44 = load %symb.SymbNode** %s
	%45 = getelementptr %symb.SymbNode* %44, i32 0, i32 0
	%46 = load %symb.SymbNode** %45
	%47 = bitcast %symb.SymbNode* %46 to %symb.SymbNode*
	store %symb.SymbNode* %47, %symb.SymbNode** %s
	%48 = load %symb.SymbNode** %s
	%49 = icmp eq %symb.SymbNode* %48, null
	br i1 %49, label %L.10, label %L.9
L.10:
	store i8 1, i8* %term
	br label %L.9
L.9:
	%50 = load i16* %tag
	%51 = load i8* %term
	call void @llvmdb_PMetaRef(i16 %50, i8 %51)
	br label %L.6
L.7:
	%52 = load i16* %rec
	store i16 %52, i16* %rv.0
	br label %return
return:
	%53 = load i16* %rv.0
	ret i16 %53
}
define internal zeroext i16 @llvmdb_DefType(%type.TypeNode* %t.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%tag = alloca i16
	%0 = load %type.TypeNode** %t
	%1 = icmp eq %type.TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	store i16 0, i16* %rv.0
	br label %return
L.1:
	%2 = load %type.TypeNode** %t
	%3 = getelementptr %type.TypeNode* %2, i32 0, i32 11
	%4 = load i16* %3
	store i16 %4, i16* %tag
	%5 = load i16* %tag
	%6 = icmp eq i16 %5, 0
	br i1 %6, label %L.4, label %L.3
L.4:
	%7 = load %type.TypeNode** %t
	%8 = getelementptr %type.TypeNode* %7, i32 0, i32 13
	%9 = load i8* %8
	%10 = zext i8 %9 to i32
	switch i32 %10, label %L.5 [
		i32 1, label %L.7
		i32 2, label %L.8
		i32 3, label %L.9
		i32 4, label %L.10
		i32 7, label %L.10
		i32 5, label %L.11
		i32 6, label %L.12
	]
L.7:
	%11 = load %type.TypeNode** %t
	%12 = load %type.TypeNode** @type_booltype
	%13 = icmp eq %type.TypeNode* %11, %12
	br i1 %13, label %L.14, label %L.15
L.14:
	%14 = load %type.TypeNode** %t
	%15 = bitcast %type.TypeNode* %14 to %type.TypeNode*
	%16 = call i16 @llvmdb_DefBasicType(i8 2, %type.TypeNode* %15)
	store i16 %16, i16* %tag
	br label %L.13
L.15:
	%17 = load %type.TypeNode** %t
	%18 = bitcast %type.TypeNode* %17 to %type.TypeNode*
	%19 = call i16 @llvmdb_DefEnumerationType(%type.TypeNode* %18)
	store i16 %19, i16* %tag
	br label %L.13
L.13:
	br label %L.6
L.8:
	%20 = load %type.TypeNode** %t
	%21 = load %type.TypeNode** @type_bytetype
	%22 = icmp eq %type.TypeNode* %20, %21
	br i1 %22, label %L.17, label %L.18
L.17:
	%23 = load %type.TypeNode** %t
	%24 = bitcast %type.TypeNode* %23 to %type.TypeNode*
	%25 = call i16 @llvmdb_DefBasicType(i8 8, %type.TypeNode* %24)
	store i16 %25, i16* %tag
	br label %L.16
L.18:
	%26 = load %type.TypeNode** %t
	%27 = load %type.TypeNode** @type_wordtype
	%28 = icmp eq %type.TypeNode* %26, %27
	br i1 %28, label %L.26, label %L.25
L.25:
	%29 = load %type.TypeNode** %t
	%30 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 0
	%31 = load %type.TypeNode** %30
	%32 = icmp eq %type.TypeNode* %29, %31
	br label %L.26
L.26:
	%33 = phi i1 [ true, %L.18 ], [ %32, %L.25 ]
	br i1 %33, label %L.24, label %L.23
L.23:
	%34 = load %type.TypeNode** %t
	%35 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 1
	%36 = load %type.TypeNode** %35
	%37 = icmp eq %type.TypeNode* %34, %36
	br label %L.24
L.24:
	%38 = phi i1 [ true, %L.26 ], [ %37, %L.23 ]
	br i1 %38, label %L.22, label %L.21
L.21:
	%39 = load %type.TypeNode** %t
	%40 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 2
	%41 = load %type.TypeNode** %40
	%42 = icmp eq %type.TypeNode* %39, %41
	br label %L.22
L.22:
	%43 = phi i1 [ true, %L.24 ], [ %42, %L.21 ]
	br i1 %43, label %L.20, label %L.19
L.19:
	%44 = load %type.TypeNode** %t
	%45 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 3
	%46 = load %type.TypeNode** %45
	%47 = icmp eq %type.TypeNode* %44, %46
	br label %L.20
L.20:
	%48 = phi i1 [ true, %L.22 ], [ %47, %L.19 ]
	br i1 %48, label %L.28, label %L.29
L.28:
	%49 = load %type.TypeNode** %t
	%50 = bitcast %type.TypeNode* %49 to %type.TypeNode*
	%51 = call i16 @llvmdb_DefBasicType(i8 7, %type.TypeNode* %50)
	store i16 %51, i16* %tag
	br label %L.27
L.29:
	%52 = load %type.TypeNode** %t
	%53 = getelementptr %type.TypeNode* %52, i32 0, i32 6
	%54 = load i64* %53
	%55 = load %type.TypeNode** %t
	%56 = getelementptr %type.TypeNode* %55, i32 0, i32 7
	%57 = load i64* %56
	%58 = call i16 @llvmdb_DefRange(i64 %54, i64 %57)
	store i16 %58, i16* %tag
	br label %L.27
L.27:
	br label %L.16
L.16:
	br label %L.6
L.9:
	%59 = load %type.TypeNode** %t
	%60 = load %type.TypeNode** @type_swordtype
	%61 = icmp eq %type.TypeNode* %59, %60
	br i1 %61, label %L.37, label %L.36
L.36:
	%62 = load %type.TypeNode** %t
	%63 = getelementptr [4 x %type.TypeNode*]* @type_inttypes, i32 0, i32 0
	%64 = load %type.TypeNode** %63
	%65 = icmp eq %type.TypeNode* %62, %64
	br label %L.37
L.37:
	%66 = phi i1 [ true, %L.9 ], [ %65, %L.36 ]
	br i1 %66, label %L.35, label %L.34
L.34:
	%67 = load %type.TypeNode** %t
	%68 = getelementptr [4 x %type.TypeNode*]* @type_inttypes, i32 0, i32 1
	%69 = load %type.TypeNode** %68
	%70 = icmp eq %type.TypeNode* %67, %69
	br label %L.35
L.35:
	%71 = phi i1 [ true, %L.37 ], [ %70, %L.34 ]
	br i1 %71, label %L.33, label %L.32
L.32:
	%72 = load %type.TypeNode** %t
	%73 = getelementptr [4 x %type.TypeNode*]* @type_inttypes, i32 0, i32 2
	%74 = load %type.TypeNode** %73
	%75 = icmp eq %type.TypeNode* %72, %74
	br label %L.33
L.33:
	%76 = phi i1 [ true, %L.35 ], [ %75, %L.32 ]
	br i1 %76, label %L.31, label %L.30
L.30:
	%77 = load %type.TypeNode** %t
	%78 = getelementptr [4 x %type.TypeNode*]* @type_inttypes, i32 0, i32 3
	%79 = load %type.TypeNode** %78
	%80 = icmp eq %type.TypeNode* %77, %79
	br label %L.31
L.31:
	%81 = phi i1 [ true, %L.33 ], [ %80, %L.30 ]
	br i1 %81, label %L.39, label %L.40
L.39:
	%82 = load %type.TypeNode** %t
	%83 = bitcast %type.TypeNode* %82 to %type.TypeNode*
	%84 = call i16 @llvmdb_DefBasicType(i8 5, %type.TypeNode* %83)
	store i16 %84, i16* %tag
	br label %L.38
L.40:
	%85 = load %type.TypeNode** %t
	%86 = getelementptr %type.TypeNode* %85, i32 0, i32 6
	%87 = load i64* %86
	%88 = load %type.TypeNode** %t
	%89 = getelementptr %type.TypeNode* %88, i32 0, i32 7
	%90 = load i64* %89
	%91 = call i16 @llvmdb_DefRange(i64 %87, i64 %90)
	store i16 %91, i16* %tag
	br label %L.38
L.38:
	br label %L.6
L.10:
	%92 = load %type.TypeNode** %t
	%93 = bitcast %type.TypeNode* %92 to %type.TypeNode*
	%94 = call i16 @llvmdb_DefRefType(%type.TypeNode* %93)
	store i16 %94, i16* %tag
	br label %L.6
L.11:
	%95 = load %type.TypeNode** %t
	%96 = bitcast %type.TypeNode* %95 to %type.TypeNode*
	%97 = call i16 @llvmdb_DefArrayType(%type.TypeNode* %96)
	store i16 %97, i16* %tag
	br label %L.6
L.12:
	%98 = load %type.TypeNode** %t
	%99 = bitcast %type.TypeNode* %98 to %type.TypeNode*
	%100 = call i16 @llvmdb_DefRecordType(%type.TypeNode* %99)
	store i16 %100, i16* %tag
	br label %L.6
L.5:
	br label %L.6
L.6:
	%101 = load i16* %tag
	%102 = load %type.TypeNode** %t
	%103 = getelementptr %type.TypeNode* %102, i32 0, i32 11
	store i16 %101, i16* %103
	br label %L.3
L.3:
	%104 = load i16* %tag
	store i16 %104, i16* %rv.0
	br label %return
return:
	%105 = load i16* %rv.0
	ret i16 %105
}
define internal void @llvmdb_DefLines() nounwind {
L.0:
	%ln = alloca %llvmdb.LineT*
	%0 = load %llvmdb.LineT** @llvmdb_lnhead
	%1 = bitcast %llvmdb.LineT* %0 to %llvmdb.LineT*
	store %llvmdb.LineT* %1, %llvmdb.LineT** %ln
	br label %L.1
L.1:
	%2 = load %llvmdb.LineT** %ln
	%3 = icmp ne %llvmdb.LineT* %2, null
	%4 = xor i1 %3, true
	br i1 %4, label %L.2, label %L.3
L.3:
	%5 = load %llvmdb.LineT** %ln
	%6 = getelementptr %llvmdb.LineT* %5, i32 0, i32 1
	%7 = load i16* %6
	call void @llvmdb_PMetaSeq(i16 %7)
	%8 = load %llvmdb.LineT** %ln
	%9 = getelementptr %llvmdb.LineT* %8, i32 0, i32 2
	%10 = load i16* %9
	%11 = zext i16 %10 to i32
	call void @llvmdb_P32(i32 %11, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	%12 = load %llvmdb.LineT** %ln
	%13 = getelementptr %llvmdb.LineT* %12, i32 0, i32 3
	%14 = load i16* %13
	call void @llvmdb_PMetaRef(i16 %14, i8 0)
	call void @llvmdb_PNull(i8 1)
	%15 = load %llvmdb.LineT** %ln
	%16 = getelementptr %llvmdb.LineT* %15, i32 0, i32 0
	%17 = load %llvmdb.LineT** %16
	%18 = bitcast %llvmdb.LineT* %17 to %llvmdb.LineT*
	store %llvmdb.LineT* %18, %llvmdb.LineT** %ln
	br label %L.1
L.2:
	%19 = bitcast %llvmdb.LineT* null to %llvmdb.LineT*
	store %llvmdb.LineT* %19, %llvmdb.LineT** @llvmdb_lnhead
	%20 = bitcast %llvmdb.LineT* null to %llvmdb.LineT*
	store %llvmdb.LineT* %20, %llvmdb.LineT** @llvmdb_lntail
	br label %return
return:
	ret void
}
@S.590 = internal constant [8 x i8] c", !dbg \00"define internal void @llvmdb_PLine(i16 zeroext %lineno.arg) nounwind {
L.0:
	%lineno = alloca i16
	store i16 %lineno.arg, i16* %lineno
	%tag = alloca i16
	%ln = alloca %llvmdb.LineT*
	%0 = load %llvmdb.LineT** @llvmdb_lntail
	%1 = icmp ne %llvmdb.LineT* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %llvmdb.LineT** @llvmdb_lntail
	%3 = getelementptr %llvmdb.LineT* %2, i32 0, i32 2
	%4 = load i16* %3
	%5 = load i16* %lineno
	%6 = icmp eq i16 %4, %5
	br label %L.2
L.2:
	%7 = phi i1 [ false, %L.0 ], [ %6, %L.1 ]
	br i1 %7, label %L.4, label %L.5
L.4:
	%8 = load %llvmdb.LineT** @llvmdb_lntail
	%9 = getelementptr %llvmdb.LineT* %8, i32 0, i32 1
	%10 = load i16* %9
	store i16 %10, i16* %tag
	br label %L.3
L.5:
	%11 = load i16* @llvmdb_seqno
	%12 = add i16 %11, 1
	store i16 %12, i16* @llvmdb_seqno
	%13 = load i16* @llvmdb_seqno
	store i16 %13, i16* %tag
	%14 = call [0 x i8]* @sys_zalloc(i32 12)
	%15 = bitcast [0 x i8]* %14 to %llvmdb.LineT*
	%16 = bitcast %llvmdb.LineT* %15 to %llvmdb.LineT*
	store %llvmdb.LineT* %16, %llvmdb.LineT** %ln
	%17 = load i16* %tag
	%18 = load %llvmdb.LineT** %ln
	%19 = getelementptr %llvmdb.LineT* %18, i32 0, i32 1
	store i16 %17, i16* %19
	%20 = load i16* %lineno
	%21 = load %llvmdb.LineT** %ln
	%22 = getelementptr %llvmdb.LineT* %21, i32 0, i32 2
	store i16 %20, i16* %22
	%23 = call i16 @llvmdb_GetContext()
	%24 = load %llvmdb.LineT** %ln
	%25 = getelementptr %llvmdb.LineT* %24, i32 0, i32 3
	store i16 %23, i16* %25
	%26 = load %llvmdb.LineT** @llvmdb_lntail
	%27 = icmp eq %llvmdb.LineT* %26, null
	br i1 %27, label %L.7, label %L.8
L.7:
	%28 = load %llvmdb.LineT** %ln
	%29 = bitcast %llvmdb.LineT* %28 to %llvmdb.LineT*
	store %llvmdb.LineT* %29, %llvmdb.LineT** @llvmdb_lnhead
	br label %L.6
L.8:
	%30 = load %llvmdb.LineT** %ln
	%31 = bitcast %llvmdb.LineT* %30 to %llvmdb.LineT*
	%32 = load %llvmdb.LineT** @llvmdb_lntail
	%33 = getelementptr %llvmdb.LineT* %32, i32 0, i32 0
	store %llvmdb.LineT* %31, %llvmdb.LineT** %33
	br label %L.6
L.6:
	%34 = load %llvmdb.LineT** %ln
	%35 = bitcast %llvmdb.LineT* %34 to %llvmdb.LineT*
	store %llvmdb.LineT* %35, %llvmdb.LineT** @llvmdb_lntail
	br label %L.3
L.3:
	%36 = load %bout.BufIO** @llvm_f
	%37 = bitcast %bout.BufIO* %36 to %bout.BufIO*
	%38 = getelementptr [8 x i8]* @S.590
	%39 = bitcast [8 x i8]* %38 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %37, [0 x i8]* %39)
	%40 = load i16* %tag
	call void @llvmdb_PSeq(i16 %40)
	br label %return
return:
	ret void
}
@S.591 = internal constant [41 x i8] c"\09call void @llvm.dbg.declare(metadata !{\00"@S.592 = internal constant [3 x i8] c"* \00"@S.593 = internal constant [4 x i8] c"}, \00"@S.594 = internal constant [11 x i8] c"metadata !\00"@S.595 = internal constant [3 x i8] c"* \00"define internal zeroext i16 @llvmdb_DefVar(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%rv.0 = alloca i16
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%tag = alloca i16
	%0 = load i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16* @llvmdb_seqno
	%3 = load %symb.SymbNode** %s
	%4 = getelementptr %symb.SymbNode* %3, i32 0, i32 11
	store i16 %2, i16* %4
	%5 = load %symb.SymbNode** %s
	%6 = getelementptr %symb.SymbNode* %5, i32 0, i32 13
	%7 = load i8* %6
	%8 = icmp eq i8 %7, 0
	br i1 %8, label %L.2, label %L.3
L.2:
	%9 = load %bout.BufIO** @llvm_f
	%10 = bitcast %bout.BufIO* %9 to %bout.BufIO*
	%11 = getelementptr [41 x i8]* @S.591
	%12 = bitcast [41 x i8]* %11 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %10, [0 x i8]* %12)
	%13 = load %symb.SymbNode** %s
	%14 = getelementptr %symb.SymbNode* %13, i32 0, i32 1
	%15 = load %type.TypeNode** %14
	%16 = bitcast %type.TypeNode* %15 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %16)
	%17 = load %bout.BufIO** @llvm_f
	%18 = bitcast %bout.BufIO* %17 to %bout.BufIO*
	%19 = getelementptr [3 x i8]* @S.592
	%20 = bitcast [3 x i8]* %19 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %18, [0 x i8]* %20)
	%21 = load %symb.SymbNode** %s
	%22 = bitcast %symb.SymbNode* %21 to %symb.SymbNode*
	call void @llvm_PName(%symb.SymbNode* %22)
	%23 = load %bout.BufIO** @llvm_f
	%24 = bitcast %bout.BufIO* %23 to %bout.BufIO*
	%25 = getelementptr [4 x i8]* @S.593
	%26 = bitcast [4 x i8]* %25 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %24, [0 x i8]* %26)
	%27 = load %bout.BufIO** @llvm_f
	%28 = bitcast %bout.BufIO* %27 to %bout.BufIO*
	%29 = getelementptr [11 x i8]* @S.594
	%30 = bitcast [11 x i8]* %29 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %28, [0 x i8]* %30)
	%31 = load %bout.BufIO** @llvm_f
	%32 = bitcast %bout.BufIO* %31 to %bout.BufIO*
	%33 = load i16* @llvmdb_seqno
	%34 = zext i16 %33 to i32
	call void @bout_uint(%bout.BufIO* %32, i32 %34)
	%35 = load %bout.BufIO** @llvm_f
	%36 = bitcast %bout.BufIO* %35 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %36, i8 41)
	%37 = load %bout.BufIO** @llvm_f
	%38 = bitcast %bout.BufIO* %37 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %38)
	%39 = load %symb.SymbNode** %s
	%40 = getelementptr %symb.SymbNode* %39, i32 0, i32 16
	%41 = load i8* %40
	%42 = icmp ne i8 %41, 0
	%43 = xor i1 %42, true
	br i1 %43, label %L.5, label %L.4
L.5:
	%44 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%45 = load %symb.SymbNode** %s
	%46 = getelementptr %symb.SymbNode* %45, i32 0, i32 0
	store %symb.SymbNode* %44, %symb.SymbNode** %46
	%47 = load %symb.SymbNode** @llvmdb_lvtail
	%48 = icmp eq %symb.SymbNode* %47, null
	br i1 %48, label %L.7, label %L.8
L.7:
	%49 = load %symb.SymbNode** %s
	%50 = bitcast %symb.SymbNode* %49 to %symb.SymbNode*
	store %symb.SymbNode* %50, %symb.SymbNode** @llvmdb_lvhead
	br label %L.6
L.8:
	%51 = load %symb.SymbNode** %s
	%52 = bitcast %symb.SymbNode* %51 to %symb.SymbNode*
	%53 = load %symb.SymbNode** @llvmdb_lvtail
	%54 = getelementptr %symb.SymbNode* %53, i32 0, i32 0
	store %symb.SymbNode* %52, %symb.SymbNode** %54
	br label %L.6
L.6:
	%55 = load %symb.SymbNode** %s
	%56 = bitcast %symb.SymbNode* %55 to %symb.SymbNode*
	store %symb.SymbNode* %56, %symb.SymbNode** @llvmdb_lvtail
	br label %L.4
L.4:
	br label %L.1
L.3:
	%57 = load %symb.SymbNode** %s
	%58 = getelementptr %symb.SymbNode* %57, i32 0, i32 1
	%59 = load %type.TypeNode** %58
	%60 = bitcast %type.TypeNode* %59 to %type.TypeNode*
	%61 = call i16 @llvmdb_DefType(%type.TypeNode* %60)
	store i16 %61, i16* %tag
	%62 = load %symb.SymbNode** %s
	%63 = getelementptr %symb.SymbNode* %62, i32 0, i32 11
	%64 = load i16* %63
	call void @llvmdb_PHeader(i16 %64, i16 52)
	call void @llvmdb_P32(i32 0, i8 0)
	call void @llvmdb_PContext(i8 0)
	%65 = load %symb.SymbNode** %s
	%66 = bitcast %symb.SymbNode* %65 to %symb.SymbNode*
	call void @llvmdb_PSymbName(%symb.SymbNode* %66, i8 0)
	%67 = load %symb.SymbNode** %s
	%68 = bitcast %symb.SymbNode* %67 to %symb.SymbNode*
	call void @llvmdb_PDispName(%symb.SymbNode* %68, i8 0)
	%69 = load %symb.SymbNode** %s
	%70 = bitcast %symb.SymbNode* %69 to %symb.SymbNode*
	call void @llvmdb_PLinkName(%symb.SymbNode* %70, i8 0)
	%71 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %71, i8 0)
	%72 = load %symb.SymbNode** %s
	%73 = getelementptr %symb.SymbNode* %72, i32 0, i32 10
	%74 = load i16* %73
	%75 = zext i16 %74 to i32
	call void @llvmdb_P32(i32 %75, i8 0)
	%76 = load i16* %tag
	call void @llvmdb_PMetaRef(i16 %76, i8 0)
	%77 = load %symb.SymbNode** %s
	%78 = getelementptr %symb.SymbNode* %77, i32 0, i32 13
	%79 = load i8* %78
	%80 = icmp eq i8 %79, 0
	%81 = zext i1 %80 to i8
	call void @llvmdb_PBoolean(i8 %81, i8 0)
	%82 = load %symb.SymbNode** %s
	%83 = getelementptr %symb.SymbNode* %82, i32 0, i32 13
	%84 = load i8* %83
	%85 = icmp ne i8 %84, 3
	%86 = zext i1 %85 to i8
	call void @llvmdb_PBoolean(i8 %86, i8 0)
	%87 = load %symb.SymbNode** %s
	%88 = getelementptr %symb.SymbNode* %87, i32 0, i32 1
	%89 = load %type.TypeNode** %88
	%90 = bitcast %type.TypeNode* %89 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %90)
	%91 = load %bout.BufIO** @llvm_f
	%92 = bitcast %bout.BufIO* %91 to %bout.BufIO*
	%93 = getelementptr [3 x i8]* @S.595
	%94 = bitcast [3 x i8]* %93 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %92, [0 x i8]* %94)
	%95 = load %symb.SymbNode** %s
	%96 = bitcast %symb.SymbNode* %95 to %symb.SymbNode*
	call void @llvm_PName(%symb.SymbNode* %96)
	call void @llvmdb_PTerminator(i8 1)
	%97 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%98 = load %symb.SymbNode** %s
	%99 = getelementptr %symb.SymbNode* %98, i32 0, i32 0
	store %symb.SymbNode* %97, %symb.SymbNode** %99
	%100 = load %symb.SymbNode** @llvmdb_gvtail
	%101 = icmp eq %symb.SymbNode* %100, null
	br i1 %101, label %L.10, label %L.11
L.10:
	%102 = load %symb.SymbNode** %s
	%103 = bitcast %symb.SymbNode* %102 to %symb.SymbNode*
	store %symb.SymbNode* %103, %symb.SymbNode** @llvmdb_gvhead
	%104 = load %symb.SymbNode** %s
	%105 = bitcast %symb.SymbNode* %104 to %symb.SymbNode*
	store %symb.SymbNode* %105, %symb.SymbNode** @llvmdb_gvtail
	br label %L.9
L.11:
	%106 = load %symb.SymbNode** %s
	%107 = bitcast %symb.SymbNode* %106 to %symb.SymbNode*
	%108 = load %symb.SymbNode** @llvmdb_gvtail
	%109 = getelementptr %symb.SymbNode* %108, i32 0, i32 0
	store %symb.SymbNode* %107, %symb.SymbNode** %109
	%110 = load %symb.SymbNode** %s
	%111 = bitcast %symb.SymbNode* %110 to %symb.SymbNode*
	store %symb.SymbNode* %111, %symb.SymbNode** @llvmdb_gvtail
	br label %L.9
L.9:
	br label %L.1
L.1:
	%112 = load i16* @llvmdb_seqno
	store i16 %112, i16* %rv.0
	br label %return
return:
	%113 = load i16* %rv.0
	ret i16 %113
}
define internal void @llvmdb_ProcStart(%symb.SymbNode* %ps.arg) nounwind {
L.0:
	%ps = alloca %symb.SymbNode*
	store %symb.SymbNode* %ps.arg, %symb.SymbNode** %ps
	%0 = load i16* @llvmdb_seqno
	%1 = add i16 %0, 1
	store i16 %1, i16* @llvmdb_seqno
	%2 = load i16* @llvmdb_seqno
	store i16 %2, i16* @llvmdb_subr
	%3 = load i16* @llvmdb_seqno
	%4 = add i16 %3, 1
	store i16 %4, i16* @llvmdb_seqno
	%5 = load i16* @llvmdb_seqno
	store i16 %5, i16* @llvmdb_blok
	br label %return
return:
	ret void
}
@S.596 = internal constant [3 x i8] c" (\00"@S.597 = internal constant [3 x i8] c", \00"@S.598 = internal constant [4 x i8] c")* \00"define internal void @llvmdb_ProcFinish(%symb.SymbNode* %ps.arg) nounwind {
L.0:
	%ps = alloca %symb.SymbNode*
	store %symb.SymbNode* %ps.arg, %symb.SymbNode** %ps
	%s = alloca %symb.SymbNode*
	%retvs = alloca i16
	%stag = alloca i16
	%ttag = alloca i16
	%formals = alloca i32
	call void @llvmdb_DefLines()
	%0 = load %symb.SymbNode** %ps
	%1 = bitcast %symb.SymbNode* %0 to %symb.SymbNode*
	%2 = call i32 @llvmdb_DefFormals(%symb.SymbNode* %1)
	store i32 %2, i32* %formals
	%3 = load %symb.SymbNode** %ps
	%4 = bitcast %symb.SymbNode* %3 to %symb.SymbNode*
	%5 = call i16 @llvmdb_DefRetvs(%symb.SymbNode* %4)
	store i16 %5, i16* %retvs
	%6 = load i16* @llvmdb_subr
	call void @llvmdb_PHeader(i16 %6, i16 46)
	call void @llvmdb_P32(i32 0, i8 0)
	call void @llvmdb_PContext(i8 0)
	%7 = load %symb.SymbNode** %ps
	%8 = bitcast %symb.SymbNode* %7 to %symb.SymbNode*
	call void @llvmdb_PSymbName(%symb.SymbNode* %8, i8 0)
	%9 = load %symb.SymbNode** %ps
	%10 = bitcast %symb.SymbNode* %9 to %symb.SymbNode*
	call void @llvmdb_PDispName(%symb.SymbNode* %10, i8 0)
	%11 = load %symb.SymbNode** %ps
	%12 = bitcast %symb.SymbNode* %11 to %symb.SymbNode*
	call void @llvmdb_PLinkName(%symb.SymbNode* %12, i8 0)
	%13 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %13, i8 0)
	%14 = load %symb.SymbNode** %ps
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 10
	%16 = load i16* %15
	%17 = zext i16 %16 to i32
	call void @llvmdb_P32(i32 %17, i8 0)
	%18 = load i16* %retvs
	%19 = icmp eq i16 %18, 0
	br i1 %19, label %L.2, label %L.3
L.2:
	call void @llvmdb_PNull(i8 0)
	br label %L.1
L.3:
	%20 = load i16* %retvs
	call void @llvmdb_PMetaRef(i16 %20, i8 0)
	br label %L.1
L.1:
	call void @llvmdb_PBoolean(i8 0, i8 0)
	%21 = load %symb.SymbNode** %ps
	%22 = getelementptr %symb.SymbNode* %21, i32 0, i32 13
	%23 = load i8* %22
	%24 = icmp ne i8 %23, 3
	%25 = zext i1 %24 to i8
	call void @llvmdb_PBoolean(i8 %25, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	call void @llvmdb_PNull(i8 0)
	call void @llvmdb_P32(i32 256, i8 0)
	call void @llvmdb_PBoolean(i8 0, i8 0)
	%26 = load %symb.SymbNode** %ps
	%27 = getelementptr %symb.SymbNode* %26, i32 0, i32 4
	%28 = load %type.TypeListEntry** %27
	%29 = bitcast %type.TypeListEntry* %28 to %type.TypeListEntry*
	call void @llvm_PRetvType(%type.TypeListEntry* %29, i8 0)
	%30 = load %bout.BufIO** @llvm_f
	%31 = bitcast %bout.BufIO* %30 to %bout.BufIO*
	%32 = getelementptr [3 x i8]* @S.596
	%33 = bitcast [3 x i8]* %32 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %31, [0 x i8]* %33)
	%34 = load %symb.SymbNode** %ps
	%35 = getelementptr %symb.SymbNode* %34, i32 0, i32 3
	%36 = load %symb.SymbNode** %35
	%37 = bitcast %symb.SymbNode* %36 to %symb.SymbNode*
	store %symb.SymbNode* %37, %symb.SymbNode** %s
	br label %L.4
L.4:
	%38 = load %symb.SymbNode** %s
	%39 = icmp ne %symb.SymbNode* %38, null
	%40 = xor i1 %39, true
	br i1 %40, label %L.5, label %L.6
L.6:
	%41 = load %symb.SymbNode** %s
	%42 = getelementptr %symb.SymbNode* %41, i32 0, i32 1
	%43 = load %type.TypeNode** %42
	%44 = bitcast %type.TypeNode* %43 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %44)
	%45 = load %symb.SymbNode** %s
	%46 = getelementptr %symb.SymbNode* %45, i32 0, i32 0
	%47 = load %symb.SymbNode** %46
	%48 = bitcast %symb.SymbNode* %47 to %symb.SymbNode*
	store %symb.SymbNode* %48, %symb.SymbNode** %s
	%49 = load %symb.SymbNode** %s
	%50 = icmp ne %symb.SymbNode* %49, null
	br i1 %50, label %L.8, label %L.7
L.8:
	%51 = load %bout.BufIO** @llvm_f
	%52 = bitcast %bout.BufIO* %51 to %bout.BufIO*
	%53 = getelementptr [3 x i8]* @S.597
	%54 = bitcast [3 x i8]* %53 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %52, [0 x i8]* %54)
	br label %L.7
L.7:
	br label %L.4
L.5:
	%55 = load %bout.BufIO** @llvm_f
	%56 = bitcast %bout.BufIO* %55 to %bout.BufIO*
	%57 = getelementptr [4 x i8]* @S.598
	%58 = bitcast [4 x i8]* %57 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %56, [0 x i8]* %58)
	%59 = load %symb.SymbNode** %ps
	%60 = bitcast %symb.SymbNode* %59 to %symb.SymbNode*
	call void @llvm_PName(%symb.SymbNode* %60)
	call void @llvmdb_PTerminator(i8 1)
	%61 = load i16* @llvmdb_subr
	%62 = load %symb.SymbNode** %ps
	%63 = getelementptr %symb.SymbNode* %62, i32 0, i32 11
	store i16 %61, i16* %63
	%64 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	%65 = load %symb.SymbNode** %ps
	%66 = getelementptr %symb.SymbNode* %65, i32 0, i32 0
	store %symb.SymbNode* %64, %symb.SymbNode** %66
	%67 = load %symb.SymbNode** @llvmdb_sptail
	%68 = icmp eq %symb.SymbNode* %67, null
	br i1 %68, label %L.10, label %L.11
L.10:
	%69 = load %symb.SymbNode** %ps
	%70 = bitcast %symb.SymbNode* %69 to %symb.SymbNode*
	store %symb.SymbNode* %70, %symb.SymbNode** @llvmdb_sphead
	br label %L.9
L.11:
	%71 = load %symb.SymbNode** %ps
	%72 = bitcast %symb.SymbNode* %71 to %symb.SymbNode*
	%73 = load %symb.SymbNode** @llvmdb_sptail
	%74 = getelementptr %symb.SymbNode* %73, i32 0, i32 0
	store %symb.SymbNode* %72, %symb.SymbNode** %74
	br label %L.9
L.9:
	%75 = load %symb.SymbNode** %ps
	%76 = bitcast %symb.SymbNode* %75 to %symb.SymbNode*
	store %symb.SymbNode* %76, %symb.SymbNode** @llvmdb_sptail
	%77 = load %symb.SymbNode** %ps
	%78 = getelementptr %symb.SymbNode* %77, i32 0, i32 3
	%79 = load %symb.SymbNode** %78
	%80 = bitcast %symb.SymbNode* %79 to %symb.SymbNode*
	store %symb.SymbNode* %80, %symb.SymbNode** %s
	br label %L.12
L.12:
	%81 = load %symb.SymbNode** %s
	%82 = icmp ne %symb.SymbNode* %81, null
	%83 = xor i1 %82, true
	br i1 %83, label %L.13, label %L.14
L.14:
	%84 = load %symb.SymbNode** %s
	%85 = getelementptr %symb.SymbNode* %84, i32 0, i32 1
	%86 = load %type.TypeNode** %85
	%87 = bitcast %type.TypeNode* %86 to %type.TypeNode*
	%88 = call i16 @llvmdb_DefType(%type.TypeNode* %87)
	store i16 %88, i16* %ttag
	%89 = load %symb.SymbNode** %s
	%90 = getelementptr %symb.SymbNode* %89, i32 0, i32 11
	%91 = load i16* %90
	store i16 %91, i16* %stag
	%92 = load i16* %stag
	%93 = icmp eq i16 %92, 0
	br i1 %93, label %L.16, label %L.15
L.16:
	%94 = load i16* @llvmdb_seqno
	%95 = add i16 %94, 1
	store i16 %95, i16* @llvmdb_seqno
	%96 = load i16* @llvmdb_seqno
	store i16 %96, i16* %stag
	br label %L.15
L.15:
	%97 = load i16* %stag
	call void @llvmdb_PHeader(i16 %97, i16 257)
	%98 = load i16* @llvmdb_subr
	call void @llvmdb_PMetaRef(i16 %98, i8 0)
	%99 = load %symb.SymbNode** %s
	%100 = bitcast %symb.SymbNode* %99 to %symb.SymbNode*
	call void @llvmdb_PSymbName(%symb.SymbNode* %100, i8 0)
	%101 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %101, i8 0)
	%102 = load %symb.SymbNode** %s
	%103 = getelementptr %symb.SymbNode* %102, i32 0, i32 10
	%104 = load i16* %103
	%105 = zext i16 %104 to i32
	call void @llvmdb_P32(i32 %105, i8 0)
	%106 = load i16* %ttag
	call void @llvmdb_PMetaRef(i16 %106, i8 0)
	call void @llvmdb_P32(i32 0, i8 1)
	%107 = load %symb.SymbNode** %s
	%108 = getelementptr %symb.SymbNode* %107, i32 0, i32 0
	%109 = load %symb.SymbNode** %108
	%110 = bitcast %symb.SymbNode* %109 to %symb.SymbNode*
	store %symb.SymbNode* %110, %symb.SymbNode** %s
	br label %L.12
L.13:
	%111 = load i16* @llvmdb_blok
	call void @llvmdb_PHeader(i16 %111, i16 11)
	%112 = load i16* @llvmdb_subr
	call void @llvmdb_PMetaRef(i16 %112, i8 0)
	%113 = load %symb.SymbNode** %ps
	%114 = getelementptr %symb.SymbNode* %113, i32 0, i32 10
	%115 = load i16* %114
	%116 = zext i16 %115 to i32
	call void @llvmdb_P32(i32 %116, i8 0)
	call void @llvmdb_P32(i32 0, i8 0)
	%117 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %117, i8 0)
	call void @llvmdb_P32(i32 0, i8 1)
	%118 = load %symb.SymbNode** @llvmdb_lvhead
	%119 = bitcast %symb.SymbNode* %118 to %symb.SymbNode*
	store %symb.SymbNode* %119, %symb.SymbNode** %s
	br label %L.17
L.17:
	%120 = load %symb.SymbNode** %s
	%121 = icmp ne %symb.SymbNode* %120, null
	%122 = xor i1 %121, true
	br i1 %122, label %L.18, label %L.19
L.19:
	%123 = load %symb.SymbNode** %s
	%124 = getelementptr %symb.SymbNode* %123, i32 0, i32 1
	%125 = load %type.TypeNode** %124
	%126 = bitcast %type.TypeNode* %125 to %type.TypeNode*
	%127 = call i16 @llvmdb_DefType(%type.TypeNode* %126)
	store i16 %127, i16* %ttag
	%128 = load %symb.SymbNode** %s
	%129 = getelementptr %symb.SymbNode* %128, i32 0, i32 11
	%130 = load i16* %129
	store i16 %130, i16* %stag
	%131 = load i16* %stag
	call void @llvmdb_PHeader(i16 %131, i16 256)
	%132 = load i16* @llvmdb_blok
	call void @llvmdb_PMetaRef(i16 %132, i8 0)
	%133 = load %symb.SymbNode** %s
	%134 = bitcast %symb.SymbNode* %133 to %symb.SymbNode*
	call void @llvmdb_PSymbName(%symb.SymbNode* %134, i8 0)
	%135 = load i16* @llvmdb_file
	call void @llvmdb_PMetaRef(i16 %135, i8 0)
	%136 = load %symb.SymbNode** %s
	%137 = getelementptr %symb.SymbNode* %136, i32 0, i32 10
	%138 = load i16* %137
	%139 = zext i16 %138 to i32
	call void @llvmdb_P32(i32 %139, i8 0)
	%140 = load i16* %ttag
	call void @llvmdb_PMetaRef(i16 %140, i8 1)
	%141 = load %symb.SymbNode** %s
	%142 = getelementptr %symb.SymbNode* %141, i32 0, i32 0
	%143 = load %symb.SymbNode** %142
	%144 = bitcast %symb.SymbNode* %143 to %symb.SymbNode*
	store %symb.SymbNode* %144, %symb.SymbNode** %s
	br label %L.17
L.18:
	%145 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %145, %symb.SymbNode** @llvmdb_lvhead
	%146 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	store %symb.SymbNode* %146, %symb.SymbNode** @llvmdb_lvtail
	store i16 0, i16* @llvmdb_subr
	store i16 0, i16* @llvmdb_blok
	br label %return
return:
	ret void
}
@S.599 = internal constant [19 x i8] c"!llvm.dbg.gv = !{ \00"@S.600 = internal constant [4 x i8] c" }\0A\00"@S.601 = internal constant [3 x i8] c", \00"@S.602 = internal constant [19 x i8] c"!llvm.dbg.sp = !{ \00"@S.603 = internal constant [4 x i8] c" }\0A\00"@S.604 = internal constant [3 x i8] c", \00"@S.605 = internal constant [70 x i8] c"declare void @llvm.dbg.declare(metadata, metadata) nounwind readnone\0A\00"define internal void @llvmdb_ProgFinish() nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	%tag = alloca i16
	%0 = load %symb.SymbNode** @llvmdb_gvhead
	%1 = bitcast %symb.SymbNode* %0 to %symb.SymbNode*
	store %symb.SymbNode* %1, %symb.SymbNode** %s
	%2 = load %symb.SymbNode** %s
	%3 = icmp ne %symb.SymbNode* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %bout.BufIO** @llvm_f
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = getelementptr [19 x i8]* @S.599
	%7 = bitcast [19 x i8]* %6 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %5, [0 x i8]* %7)
	br label %L.3
L.3:
	%8 = load %symb.SymbNode** %s
	%9 = icmp ne %symb.SymbNode* %8, null
	%10 = xor i1 %9, true
	br i1 %10, label %L.4, label %L.5
L.5:
	%11 = load %symb.SymbNode** %s
	%12 = getelementptr %symb.SymbNode* %11, i32 0, i32 11
	%13 = load i16* %12
	store i16 %13, i16* %tag
	%14 = load %symb.SymbNode** %s
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 0
	%16 = load %symb.SymbNode** %15
	%17 = bitcast %symb.SymbNode* %16 to %symb.SymbNode*
	store %symb.SymbNode* %17, %symb.SymbNode** %s
	%18 = load i16* %tag
	call void @llvmdb_PSeq(i16 %18)
	%19 = load %symb.SymbNode** %s
	%20 = icmp eq %symb.SymbNode* %19, null
	br i1 %20, label %L.7, label %L.8
L.7:
	%21 = load %bout.BufIO** @llvm_f
	%22 = bitcast %bout.BufIO* %21 to %bout.BufIO*
	%23 = getelementptr [4 x i8]* @S.600
	%24 = bitcast [4 x i8]* %23 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %22, [0 x i8]* %24)
	br label %L.6
L.8:
	%25 = load %bout.BufIO** @llvm_f
	%26 = bitcast %bout.BufIO* %25 to %bout.BufIO*
	%27 = getelementptr [3 x i8]* @S.601
	%28 = bitcast [3 x i8]* %27 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %26, [0 x i8]* %28)
	br label %L.6
L.6:
	br label %L.3
L.4:
	br label %L.1
L.1:
	%29 = load %symb.SymbNode** @llvmdb_sphead
	%30 = bitcast %symb.SymbNode* %29 to %symb.SymbNode*
	store %symb.SymbNode* %30, %symb.SymbNode** %s
	%31 = load %symb.SymbNode** %s
	%32 = icmp ne %symb.SymbNode* %31, null
	br i1 %32, label %L.10, label %L.9
L.10:
	%33 = load %bout.BufIO** @llvm_f
	%34 = bitcast %bout.BufIO* %33 to %bout.BufIO*
	%35 = getelementptr [19 x i8]* @S.602
	%36 = bitcast [19 x i8]* %35 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %34, [0 x i8]* %36)
	br label %L.11
L.11:
	%37 = load %symb.SymbNode** %s
	%38 = icmp ne %symb.SymbNode* %37, null
	%39 = xor i1 %38, true
	br i1 %39, label %L.12, label %L.13
L.13:
	%40 = load %symb.SymbNode** %s
	%41 = getelementptr %symb.SymbNode* %40, i32 0, i32 11
	%42 = load i16* %41
	store i16 %42, i16* %tag
	%43 = load %symb.SymbNode** %s
	%44 = getelementptr %symb.SymbNode* %43, i32 0, i32 0
	%45 = load %symb.SymbNode** %44
	%46 = bitcast %symb.SymbNode* %45 to %symb.SymbNode*
	store %symb.SymbNode* %46, %symb.SymbNode** %s
	%47 = load i16* %tag
	call void @llvmdb_PSeq(i16 %47)
	%48 = load %symb.SymbNode** %s
	%49 = icmp eq %symb.SymbNode* %48, null
	br i1 %49, label %L.15, label %L.16
L.15:
	%50 = load %bout.BufIO** @llvm_f
	%51 = bitcast %bout.BufIO* %50 to %bout.BufIO*
	%52 = getelementptr [4 x i8]* @S.603
	%53 = bitcast [4 x i8]* %52 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %51, [0 x i8]* %53)
	br label %L.14
L.16:
	%54 = load %bout.BufIO** @llvm_f
	%55 = bitcast %bout.BufIO* %54 to %bout.BufIO*
	%56 = getelementptr [3 x i8]* @S.604
	%57 = bitcast [3 x i8]* %56 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %55, [0 x i8]* %57)
	br label %L.14
L.14:
	br label %L.11
L.12:
	br label %L.9
L.9:
	%58 = load %bout.BufIO** @llvm_f
	%59 = bitcast %bout.BufIO* %58 to %bout.BufIO*
	%60 = getelementptr [70 x i8]* @S.605
	%61 = bitcast [70 x i8]* %60 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %59, [0 x i8]* %61)
	br label %return
return:
	ret void
}
@llvm_pbytetype = internal global %type.TypeNode* zeroinitializer, align 4
@llvm_puinttype = internal global [4 x %type.TypeNode*] zeroinitializer, align 4
@llvm_Tseqno = internal global i16 0, align 2
@llvm_Pseqno = internal global i16 0, align 2
@llvm_Lseqno = internal global i16 0, align 2
@llvm_Aseqno = internal global i16 0, align 2
@llvm_labthis = internal global i16 0, align 2
@llvm_loopexit = internal global i16 0, align 2
@llvm_UseIntrinsic = internal global [10 x i8] zeroinitializer, align 1
define internal void @llvm_PEndLine(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%0 = getelementptr %A.3* @feature, i32 0, i32 3
	%1 = load i8* %0
	%2 = icmp ne i8 %1, 0
	br i1 %2, label %L.2, label %L.1
L.2:
	%3 = load %ast.AstNode** %node
	%4 = getelementptr %ast.AstNode* %3, i32 0, i32 8
	%5 = load i16* %4
	call void @llvmdb_PLine(i16 %5)
	br label %L.1
L.1:
	%6 = load %bout.BufIO** @llvm_f
	%7 = bitcast %bout.BufIO* %6 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %7)
	br label %return
return:
	ret void
}
@S.606 = internal constant [2 x i8] c"%\00"@S.607 = internal constant [2 x i8] c".\00"define internal void @llvm_PTypeName(%type.TypeNode* %t.arg) nounwind {
L.0:
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%s = alloca %symb.SymbNode*
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [2 x i8]* @S.606
	%3 = bitcast [2 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load %type.TypeNode** %t
	%5 = getelementptr %type.TypeNode* %4, i32 0, i32 3
	%6 = load %symb.SymbNode** %5
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	store %symb.SymbNode* %7, %symb.SymbNode** %s
	%8 = load %symb.SymbNode** %s
	%9 = icmp ne %symb.SymbNode* %8, null
	br i1 %9, label %L.2, label %L.3
L.2:
	%10 = load %symb.SymbNode** %s
	%11 = getelementptr %symb.SymbNode* %10, i32 0, i32 2
	%12 = load %symb.SymbNode** %11
	%13 = icmp ne %symb.SymbNode* %12, null
	br i1 %13, label %L.5, label %L.4
L.5:
	%14 = load %bout.BufIO** @llvm_f
	%15 = bitcast %bout.BufIO* %14 to %bout.BufIO*
	%16 = load %symb.SymbNode** %s
	%17 = getelementptr %symb.SymbNode* %16, i32 0, i32 2
	%18 = load %symb.SymbNode** %17
	%19 = getelementptr %symb.SymbNode* %18, i32 0, i32 19
	%20 = getelementptr [0 x i8]* %19
	%21 = bitcast [0 x i8]* %20 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %15, [0 x i8]* %21)
	%22 = load %bout.BufIO** @llvm_f
	%23 = bitcast %bout.BufIO* %22 to %bout.BufIO*
	%24 = getelementptr [2 x i8]* @S.607
	%25 = bitcast [2 x i8]* %24 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %23, [0 x i8]* %25)
	br label %L.4
L.4:
	%26 = load %bout.BufIO** @llvm_f
	%27 = bitcast %bout.BufIO* %26 to %bout.BufIO*
	%28 = load %symb.SymbNode** %s
	%29 = getelementptr %symb.SymbNode* %28, i32 0, i32 19
	%30 = getelementptr [0 x i8]* %29
	%31 = bitcast [0 x i8]* %30 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %27, [0 x i8]* %31)
	br label %L.1
L.3:
	%32 = load %bout.BufIO** @llvm_f
	%33 = bitcast %bout.BufIO* %32 to %bout.BufIO*
	%34 = getelementptr [3 x i8]* @llvm_anon_prefix
	%35 = bitcast [3 x i8]* %34 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %33, [0 x i8]* %35)
	%36 = load %type.TypeNode** %t
	%37 = getelementptr %type.TypeNode* %36, i32 0, i32 12
	%38 = load i16* %37
	%39 = icmp eq i16 %38, 0
	br i1 %39, label %L.7, label %L.6
L.7:
	%40 = load i16* @llvm_Aseqno
	%41 = add i16 %40, 1
	store i16 %41, i16* @llvm_Aseqno
	%42 = load i16* @llvm_Aseqno
	%43 = load %type.TypeNode** %t
	%44 = getelementptr %type.TypeNode* %43, i32 0, i32 12
	store i16 %42, i16* %44
	br label %L.6
L.6:
	%45 = load %bout.BufIO** @llvm_f
	%46 = bitcast %bout.BufIO* %45 to %bout.BufIO*
	%47 = load %type.TypeNode** %t
	%48 = getelementptr %type.TypeNode* %47, i32 0, i32 12
	%49 = load i16* %48
	call void @bout_uint16(%bout.BufIO* %46, i16 %49)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.608 = internal constant [2 x i8] c"i\00"@S.609 = internal constant [2 x i8] c"*\00"@S.610 = internal constant [2 x i8] c"i\00"@S.611 = internal constant [2 x i8] c"i\00"@S.612 = internal constant [4 x i8] c" x \00"define internal void @llvm_PType(%type.TypeNode* %t.arg) nounwind {
L.0:
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%size = alloca i32
	%0 = load %type.TypeNode** %t
	%1 = icmp ne %type.TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %type.TypeNode** %t
	%3 = getelementptr %type.TypeNode* %2, i32 0, i32 13
	%4 = load i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.3 [
		i32 1, label %L.5
		i32 2, label %L.5
		i32 3, label %L.5
		i32 4, label %L.6
		i32 6, label %L.7
		i32 5, label %L.8
		i32 7, label %L.9
	]
L.5:
	%6 = load %type.TypeNode** %t
	%7 = getelementptr %type.TypeNode* %6, i32 0, i32 8
	%8 = load i32* %7
	%9 = call i32 @target_isize(i32 %8)
	store i32 %9, i32* %size
	%10 = load %bout.BufIO** @llvm_f
	%11 = bitcast %bout.BufIO* %10 to %bout.BufIO*
	%12 = getelementptr [2 x i8]* @S.608
	%13 = bitcast [2 x i8]* %12 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %11, [0 x i8]* %13)
	%14 = load %bout.BufIO** @llvm_f
	%15 = bitcast %bout.BufIO* %14 to %bout.BufIO*
	%16 = load i32* %size
	call void @bout_uint(%bout.BufIO* %15, i32 %16)
	br label %L.4
L.6:
	%17 = load %type.TypeNode** %t
	%18 = getelementptr %type.TypeNode* %17, i32 0, i32 0
	%19 = load %type.TypeNode** %18
	%20 = bitcast %type.TypeNode* %19 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %20)
	%21 = load %bout.BufIO** @llvm_f
	%22 = bitcast %bout.BufIO* %21 to %bout.BufIO*
	%23 = getelementptr [2 x i8]* @S.609
	%24 = bitcast [2 x i8]* %23 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %22, [0 x i8]* %24)
	br label %L.4
L.7:
	%25 = load %type.TypeNode** %t
	%26 = getelementptr %type.TypeNode* %25, i32 0, i32 14
	%27 = load i8* %26
	%28 = icmp eq i8 %27, 2
	br i1 %28, label %L.11, label %L.12
L.11:
	%29 = load %type.TypeNode** %t
	%30 = getelementptr %type.TypeNode* %29, i32 0, i32 8
	%31 = load i32* %30
	%32 = call i32 @target_isize(i32 %31)
	store i32 %32, i32* %size
	%33 = load %bout.BufIO** @llvm_f
	%34 = bitcast %bout.BufIO* %33 to %bout.BufIO*
	%35 = getelementptr [2 x i8]* @S.610
	%36 = bitcast [2 x i8]* %35 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %34, [0 x i8]* %36)
	%37 = load %bout.BufIO** @llvm_f
	%38 = bitcast %bout.BufIO* %37 to %bout.BufIO*
	%39 = load i32* %size
	call void @bout_uint(%bout.BufIO* %38, i32 %39)
	br label %L.10
L.12:
	%40 = load %type.TypeNode** %t
	%41 = getelementptr %type.TypeNode* %40, i32 0, i32 21
	%42 = load i8* %41
	%43 = icmp ne i8 %42, 0
	br i1 %43, label %L.14, label %L.13
L.14:
	%44 = load %type.TypeNode** %t
	%45 = bitcast %type.TypeNode* %44 to %type.TypeNode*
	call void @llvm_PTypeName(%type.TypeNode* %45)
	br label %L.13
L.13:
	br label %L.10
L.10:
	br label %L.4
L.8:
	%46 = load %type.TypeNode** %t
	%47 = getelementptr %type.TypeNode* %46, i32 0, i32 14
	%48 = load i8* %47
	%49 = icmp eq i8 %48, 2
	br i1 %49, label %L.16, label %L.17
L.16:
	%50 = load %type.TypeNode** %t
	%51 = getelementptr %type.TypeNode* %50, i32 0, i32 8
	%52 = load i32* %51
	%53 = call i32 @target_isize(i32 %52)
	store i32 %53, i32* %size
	%54 = load %bout.BufIO** @llvm_f
	%55 = bitcast %bout.BufIO* %54 to %bout.BufIO*
	%56 = getelementptr [2 x i8]* @S.611
	%57 = bitcast [2 x i8]* %56 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %55, [0 x i8]* %57)
	%58 = load %bout.BufIO** @llvm_f
	%59 = bitcast %bout.BufIO* %58 to %bout.BufIO*
	%60 = load i32* %size
	call void @bout_uint(%bout.BufIO* %59, i32 %60)
	br label %L.15
L.17:
	%61 = load %bout.BufIO** @llvm_f
	%62 = bitcast %bout.BufIO* %61 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %62, i8 91)
	%63 = load %bout.BufIO** @llvm_f
	%64 = bitcast %bout.BufIO* %63 to %bout.BufIO*
	%65 = load %type.TypeNode** %t
	%66 = getelementptr %type.TypeNode* %65, i32 0, i32 7
	%67 = load i64* %66
	%68 = trunc i64 %67 to i32
	call void @bout_uint32(%bout.BufIO* %64, i32 %68)
	%69 = load %bout.BufIO** @llvm_f
	%70 = bitcast %bout.BufIO* %69 to %bout.BufIO*
	%71 = getelementptr [4 x i8]* @S.612
	%72 = bitcast [4 x i8]* %71 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %70, [0 x i8]* %72)
	%73 = load %type.TypeNode** %t
	%74 = getelementptr %type.TypeNode* %73, i32 0, i32 0
	%75 = load %type.TypeNode** %74
	%76 = bitcast %type.TypeNode* %75 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %76)
	%77 = load %bout.BufIO** @llvm_f
	%78 = bitcast %bout.BufIO* %77 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %78, i8 93)
	br label %L.15
L.15:
	br label %L.4
L.9:
	%79 = load %type.TypeNode** %t
	%80 = getelementptr %type.TypeNode* %79, i32 0, i32 4
	%81 = load %symb.SymbNode** %80
	%82 = getelementptr %symb.SymbNode* %81, i32 0, i32 4
	%83 = load %type.TypeListEntry** %82
	%84 = bitcast %type.TypeListEntry* %83 to %type.TypeListEntry*
	call void @llvm_PRetvType(%type.TypeListEntry* %84, i8 0)
	%85 = load %bout.BufIO** @llvm_f
	%86 = bitcast %bout.BufIO* %85 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %86, i8 32)
	%87 = load %type.TypeNode** %t
	%88 = getelementptr %type.TypeNode* %87, i32 0, i32 4
	%89 = load %symb.SymbNode** %88
	%90 = getelementptr %symb.SymbNode* %89, i32 0, i32 3
	%91 = load %symb.SymbNode** %90
	%92 = bitcast %symb.SymbNode* %91 to %symb.SymbNode*
	call void @llvm_PParmTypes(%symb.SymbNode* %92)
	%93 = load %bout.BufIO** @llvm_f
	%94 = bitcast %bout.BufIO* %93 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %94, i8 42)
	br label %L.4
L.3:
	br label %L.4
L.4:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.613 = internal constant [9 x i8] c" signext\00"@S.614 = internal constant [9 x i8] c" zeroext\00"define internal void @llvm_PExtend(%type.TypeNode* %t.arg) nounwind {
L.0:
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%0 = load %type.TypeNode** %t
	%1 = icmp ne %type.TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %type.TypeNode** %t
	%3 = getelementptr %type.TypeNode* %2, i32 0, i32 13
	%4 = load i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.3 [
		i32 1, label %L.5
		i32 2, label %L.5
		i32 3, label %L.5
	]
L.5:
	%size = alloca i32
	%6 = load %type.TypeNode** %t
	%7 = getelementptr %type.TypeNode* %6, i32 0, i32 8
	%8 = load i32* %7
	%9 = call i32 @target_isize(i32 %8)
	store i32 %9, i32* %size
	%10 = load i32* %size
	%11 = load %type.TypeNode** @type_wordtype
	%12 = getelementptr %type.TypeNode* %11, i32 0, i32 8
	%13 = load i32* %12
	%14 = icmp ult i32 %10, %13
	br i1 %14, label %L.7, label %L.6
L.7:
	%15 = load %type.TypeNode** %t
	%16 = getelementptr %type.TypeNode* %15, i32 0, i32 13
	%17 = load i8* %16
	%18 = icmp eq i8 %17, 3
	br i1 %18, label %L.9, label %L.10
L.9:
	%19 = load %bout.BufIO** @llvm_f
	%20 = bitcast %bout.BufIO* %19 to %bout.BufIO*
	%21 = getelementptr [9 x i8]* @S.613
	%22 = bitcast [9 x i8]* %21 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %20, [0 x i8]* %22)
	br label %L.8
L.10:
	%23 = load %bout.BufIO** @llvm_f
	%24 = bitcast %bout.BufIO* %23 to %bout.BufIO*
	%25 = getelementptr [9 x i8]* @S.614
	%26 = bitcast [9 x i8]* %25 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %24, [0 x i8]* %26)
	br label %L.8
L.8:
	br label %L.6
L.6:
	br label %L.4
L.3:
	br label %L.4
L.4:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.615 = internal constant [4 x i8] c" { \00"@S.616 = internal constant [3 x i8] c", \00"@S.617 = internal constant [3 x i8] c" }\00"@S.618 = internal constant [6 x i8] c" void\00"define internal void @llvm_PRetvType(%type.TypeListEntry* %tl.arg, i8 zeroext %extend.arg) nounwind {
L.0:
	%tl = alloca %type.TypeListEntry*
	%extend = alloca i8
	store %type.TypeListEntry* %tl.arg, %type.TypeListEntry** %tl
	store i8 %extend.arg, i8* %extend
	%t = alloca %type.TypeNode*
	%0 = load %type.TypeListEntry** %tl
	%1 = icmp ne %type.TypeListEntry* %0, null
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %type.TypeListEntry** %tl
	%3 = getelementptr %type.TypeListEntry* %2, i32 0, i32 0
	%4 = load %type.TypeListEntry** %3
	%5 = icmp ne %type.TypeListEntry* %4, null
	br i1 %5, label %L.5, label %L.6
L.5:
	%6 = load %bout.BufIO** @llvm_f
	%7 = bitcast %bout.BufIO* %6 to %bout.BufIO*
	%8 = getelementptr [4 x i8]* @S.615
	%9 = bitcast [4 x i8]* %8 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %7, [0 x i8]* %9)
	br label %L.7
L.7:
	%10 = load %type.TypeListEntry** %tl
	%11 = getelementptr %type.TypeListEntry* %10, i32 0, i32 1
	%12 = load %type.TypeNode** %11
	%13 = bitcast %type.TypeNode* %12 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %13)
	%14 = load %type.TypeListEntry** %tl
	%15 = getelementptr %type.TypeListEntry* %14, i32 0, i32 0
	%16 = load %type.TypeListEntry** %15
	%17 = bitcast %type.TypeListEntry* %16 to %type.TypeListEntry*
	store %type.TypeListEntry* %17, %type.TypeListEntry** %tl
	%18 = load %type.TypeListEntry** %tl
	%19 = icmp eq %type.TypeListEntry* %18, null
	br i1 %19, label %L.8, label %L.9
L.9:
	%20 = load %bout.BufIO** @llvm_f
	%21 = bitcast %bout.BufIO* %20 to %bout.BufIO*
	%22 = getelementptr [3 x i8]* @S.616
	%23 = bitcast [3 x i8]* %22 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %21, [0 x i8]* %23)
	br label %L.7
L.8:
	%24 = load %bout.BufIO** @llvm_f
	%25 = bitcast %bout.BufIO* %24 to %bout.BufIO*
	%26 = getelementptr [3 x i8]* @S.617
	%27 = bitcast [3 x i8]* %26 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %25, [0 x i8]* %27)
	br label %L.4
L.6:
	%28 = load %type.TypeListEntry** %tl
	%29 = getelementptr %type.TypeListEntry* %28, i32 0, i32 1
	%30 = load %type.TypeNode** %29
	%31 = bitcast %type.TypeNode* %30 to %type.TypeNode*
	store %type.TypeNode* %31, %type.TypeNode** %t
	%32 = load i8* %extend
	%33 = icmp ne i8 %32, 0
	br i1 %33, label %L.11, label %L.10
L.11:
	%34 = load %type.TypeNode** %t
	%35 = bitcast %type.TypeNode* %34 to %type.TypeNode*
	call void @llvm_PExtend(%type.TypeNode* %35)
	br label %L.10
L.10:
	%36 = load %bout.BufIO** @llvm_f
	%37 = bitcast %bout.BufIO* %36 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %37, i8 32)
	%38 = load %type.TypeNode** %t
	%39 = bitcast %type.TypeNode* %38 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %39)
	br label %L.4
L.4:
	br label %L.1
L.3:
	%40 = load %bout.BufIO** @llvm_f
	%41 = bitcast %bout.BufIO* %40 to %bout.BufIO*
	%42 = getelementptr [6 x i8]* @S.618
	%43 = bitcast [6 x i8]* %42 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %41, [0 x i8]* %43)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.619 = internal constant [3 x i8] c", \00"define internal void @llvm_PParmTypes(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %1, i8 40)
	br label %L.1
L.1:
	%2 = load %symb.SymbNode** %s
	%3 = icmp ne %symb.SymbNode* %2, null
	%4 = xor i1 %3, true
	br i1 %4, label %L.2, label %L.3
L.3:
	%5 = load %symb.SymbNode** %s
	%6 = getelementptr %symb.SymbNode* %5, i32 0, i32 1
	%7 = load %type.TypeNode** %6
	%8 = bitcast %type.TypeNode* %7 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %8)
	%9 = load %symb.SymbNode** %s
	%10 = getelementptr %symb.SymbNode* %9, i32 0, i32 0
	%11 = load %symb.SymbNode** %10
	%12 = bitcast %symb.SymbNode* %11 to %symb.SymbNode*
	store %symb.SymbNode* %12, %symb.SymbNode** %s
	%13 = load %symb.SymbNode** %s
	%14 = icmp eq %symb.SymbNode* %13, null
	br i1 %14, label %L.2, label %L.4
L.4:
	%15 = load %bout.BufIO** @llvm_f
	%16 = bitcast %bout.BufIO* %15 to %bout.BufIO*
	%17 = getelementptr [3 x i8]* @S.619
	%18 = bitcast [3 x i8]* %17 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %16, [0 x i8]* %18)
	br label %L.1
L.2:
	%19 = load %bout.BufIO** @llvm_f
	%20 = bitcast %bout.BufIO* %19 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %20, i8 41)
	br label %return
return:
	ret void
}
@S.620 = internal constant [5 x i8] c"null\00"@S.621 = internal constant [10 x i8] c"inttoptr(\00"@S.622 = internal constant [5 x i8] c" to \00"define internal void @llvm_ConstantRef(%type.TypeNode* %t.arg, %ast.AstNode* %node.arg) nounwind {
L.0:
	%t = alloca %type.TypeNode*
	%node = alloca %ast.AstNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%v = alloca i64
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 10
	%2 = load i64* %1
	store i64 %2, i64* %v
	%3 = load i64* %v
	%4 = icmp eq i64 %3, 0
	br i1 %4, label %L.2, label %L.3
L.2:
	%5 = load %bout.BufIO** @llvm_f
	%6 = bitcast %bout.BufIO* %5 to %bout.BufIO*
	%7 = getelementptr [5 x i8]* @S.620
	%8 = bitcast [5 x i8]* %7 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %6, [0 x i8]* %8)
	br label %L.1
L.3:
	%9 = load %bout.BufIO** @llvm_f
	%10 = bitcast %bout.BufIO* %9 to %bout.BufIO*
	%11 = getelementptr [10 x i8]* @S.621
	%12 = bitcast [10 x i8]* %11 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %10, [0 x i8]* %12)
	%13 = load %type.TypeNode** @type_wordtype
	%14 = bitcast %type.TypeNode* %13 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %14)
	%15 = load %bout.BufIO** @llvm_f
	%16 = bitcast %bout.BufIO* %15 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %16, i8 32)
	%17 = load %bout.BufIO** @llvm_f
	%18 = bitcast %bout.BufIO* %17 to %bout.BufIO*
	%19 = load i64* %v
	call void @bout_uint64(%bout.BufIO* %18, i64 %19)
	%20 = load %bout.BufIO** @llvm_f
	%21 = bitcast %bout.BufIO* %20 to %bout.BufIO*
	%22 = getelementptr [5 x i8]* @S.622
	%23 = bitcast [5 x i8]* %22 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %21, [0 x i8]* %23)
	%24 = load %type.TypeNode** %t
	%25 = icmp eq %type.TypeNode* %24, null
	br i1 %25, label %L.5, label %L.6
L.5:
	%26 = load %ast.AstNode** %node
	%27 = getelementptr %ast.AstNode* %26, i32 0, i32 11
	%28 = load %type.TypeNode** %27
	%29 = bitcast %type.TypeNode* %28 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %29)
	%30 = load %bout.BufIO** @llvm_f
	%31 = bitcast %bout.BufIO* %30 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %31, i8 42)
	br label %L.4
L.6:
	%32 = load %type.TypeNode** %t
	%33 = bitcast %type.TypeNode* %32 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %33)
	br label %L.4
L.4:
	%34 = load %bout.BufIO** @llvm_f
	%35 = bitcast %bout.BufIO* %34 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %35, i8 41)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.623 = internal constant [5 x i8] c"void\00"@S.624 = internal constant [2 x i8] c"*\00"@S.625 = internal constant [2 x i8] c"i\00"define internal void @llvm_NodeType(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 1
	%2 = load i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 0, label %L.3
		i32 4, label %L.4
		i32 5, label %L.5
		i32 6, label %L.5
		i32 7, label %L.5
	]
L.3:
	%4 = load %bout.BufIO** @llvm_f
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = getelementptr [5 x i8]* @S.623
	%7 = bitcast [5 x i8]* %6 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %5, [0 x i8]* %7)
	br label %L.2
L.4:
	%8 = load %ast.AstNode** %node
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 11
	%10 = load %type.TypeNode** %9
	%11 = bitcast %type.TypeNode* %10 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %11)
	%12 = load %bout.BufIO** @llvm_f
	%13 = bitcast %bout.BufIO* %12 to %bout.BufIO*
	%14 = getelementptr [2 x i8]* @S.624
	%15 = bitcast [2 x i8]* %14 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %13, [0 x i8]* %15)
	br label %L.2
L.5:
	%16 = load %ast.AstNode** %node
	%17 = getelementptr %ast.AstNode* %16, i32 0, i32 11
	%18 = load %type.TypeNode** %17
	%19 = bitcast %type.TypeNode* %18 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %19)
	br label %L.2
L.1:
	%20 = load %bout.BufIO** @llvm_f
	%21 = bitcast %bout.BufIO* %20 to %bout.BufIO*
	%22 = getelementptr [2 x i8]* @S.625
	%23 = bitcast [2 x i8]* %22 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %21, [0 x i8]* %23)
	%24 = load %bout.BufIO** @llvm_f
	%25 = bitcast %bout.BufIO* %24 to %bout.BufIO*
	%26 = load %ast.AstNode** %node
	%27 = getelementptr %ast.AstNode* %26, i32 0, i32 6
	%28 = load i32* %27
	call void @bout_uint(%bout.BufIO* %25, i32 %28)
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
define internal void @llvm_PPkgPfx(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%0 = load %symb.SymbNode** %s
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 2
	%2 = load %symb.SymbNode** %1
	%3 = icmp ne %symb.SymbNode* %2, null
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %symb.SymbNode** %s
	%5 = getelementptr %symb.SymbNode* %4, i32 0, i32 2
	%6 = load %symb.SymbNode** %5
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	call void @llvm_PPkgPfx(%symb.SymbNode* %7)
	br label %L.1
L.1:
	%8 = load %bout.BufIO** @llvm_f
	%9 = bitcast %bout.BufIO* %8 to %bout.BufIO*
	%10 = load %symb.SymbNode** %s
	%11 = getelementptr %symb.SymbNode* %10, i32 0, i32 19
	%12 = getelementptr [0 x i8]* %11
	%13 = bitcast [0 x i8]* %12 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %9, [0 x i8]* %13)
	%14 = load %bout.BufIO** @llvm_f
	%15 = bitcast %bout.BufIO* %14 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %15, i8 95)
	br label %return
return:
	ret void
}
@S.626 = internal constant [10 x i8] c"inttoptr(\00"@S.627 = internal constant [5 x i8] c" to \00"@S.628 = internal constant [3 x i8] c"*)\00"define internal void @llvm_PName(%symb.SymbNode* %s.arg) nounwind {
L.0:
	%s = alloca %symb.SymbNode*
	store %symb.SymbNode* %s.arg, %symb.SymbNode** %s
	%0 = load %symb.SymbNode** %s
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 13
	%2 = load i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 0, label %L.3
		i32 1, label %L.4
		i32 5, label %L.4
		i32 2, label %L.5
		i32 3, label %L.5
		i32 4, label %L.6
	]
L.3:
	%4 = load %bout.BufIO** @llvm_f
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %5, i8 37)
	%6 = load %bout.BufIO** @llvm_f
	%7 = bitcast %bout.BufIO* %6 to %bout.BufIO*
	%8 = load %symb.SymbNode** %s
	%9 = getelementptr %symb.SymbNode* %8, i32 0, i32 19
	%10 = getelementptr [0 x i8]* %9
	%11 = bitcast [0 x i8]* %10 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %7, [0 x i8]* %11)
	br label %L.2
L.4:
	%12 = load %bout.BufIO** @llvm_f
	%13 = bitcast %bout.BufIO* %12 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %13, i8 64)
	%14 = load %symb.SymbNode** %s
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 2
	%16 = load %symb.SymbNode** %15
	%17 = icmp ne %symb.SymbNode* %16, null
	br i1 %17, label %L.8, label %L.7
L.8:
	%18 = load %symb.SymbNode** %s
	%19 = getelementptr %symb.SymbNode* %18, i32 0, i32 2
	%20 = load %symb.SymbNode** %19
	%21 = bitcast %symb.SymbNode* %20 to %symb.SymbNode*
	call void @llvm_PPkgPfx(%symb.SymbNode* %21)
	br label %L.7
L.7:
	%22 = load %bout.BufIO** @llvm_f
	%23 = bitcast %bout.BufIO* %22 to %bout.BufIO*
	%24 = load %symb.SymbNode** %s
	%25 = getelementptr %symb.SymbNode* %24, i32 0, i32 19
	%26 = getelementptr [0 x i8]* %25
	%27 = bitcast [0 x i8]* %26 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %23, [0 x i8]* %27)
	br label %L.2
L.5:
	%28 = load %bout.BufIO** @llvm_f
	%29 = bitcast %bout.BufIO* %28 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %29, i8 64)
	%30 = load %bout.BufIO** @llvm_f
	%31 = bitcast %bout.BufIO* %30 to %bout.BufIO*
	%32 = load %symb.SymbNode** %s
	%33 = getelementptr %symb.SymbNode* %32, i32 0, i32 19
	%34 = getelementptr [0 x i8]* %33
	%35 = bitcast [0 x i8]* %34 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %31, [0 x i8]* %35)
	br label %L.2
L.6:
	%36 = load %bout.BufIO** @llvm_f
	%37 = bitcast %bout.BufIO* %36 to %bout.BufIO*
	%38 = getelementptr [10 x i8]* @S.626
	%39 = bitcast [10 x i8]* %38 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %37, [0 x i8]* %39)
	%40 = load %type.TypeNode** @type_wordtype
	%41 = bitcast %type.TypeNode* %40 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %41)
	%42 = load %bout.BufIO** @llvm_f
	%43 = bitcast %bout.BufIO* %42 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %43, i8 32)
	%44 = load %bout.BufIO** @llvm_f
	%45 = bitcast %bout.BufIO* %44 to %bout.BufIO*
	%46 = load %symb.SymbNode** %s
	%47 = getelementptr %symb.SymbNode* %46, i32 0, i32 8
	%48 = load i64* %47
	call void @bout_uint64(%bout.BufIO* %45, i64 %48)
	%49 = load %bout.BufIO** @llvm_f
	%50 = bitcast %bout.BufIO* %49 to %bout.BufIO*
	%51 = getelementptr [5 x i8]* @S.627
	%52 = bitcast [5 x i8]* %51 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %50, [0 x i8]* %52)
	%53 = load %symb.SymbNode** %s
	%54 = getelementptr %symb.SymbNode* %53, i32 0, i32 12
	%55 = load i8* %54
	%56 = icmp eq i8 %55, 5
	br i1 %56, label %L.10, label %L.11
L.10:
	%57 = load %symb.SymbNode** %s
	%58 = getelementptr %symb.SymbNode* %57, i32 0, i32 4
	%59 = load %type.TypeListEntry** %58
	%60 = bitcast %type.TypeListEntry* %59 to %type.TypeListEntry*
	call void @llvm_PRetvType(%type.TypeListEntry* %60, i8 1)
	%61 = load %symb.SymbNode** %s
	%62 = getelementptr %symb.SymbNode* %61, i32 0, i32 3
	%63 = load %symb.SymbNode** %62
	%64 = bitcast %symb.SymbNode* %63 to %symb.SymbNode*
	call void @llvm_PParmTypes(%symb.SymbNode* %64)
	br label %L.9
L.11:
	%65 = load %symb.SymbNode** %s
	%66 = getelementptr %symb.SymbNode* %65, i32 0, i32 1
	%67 = load %type.TypeNode** %66
	%68 = bitcast %type.TypeNode* %67 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %68)
	br label %L.9
L.9:
	%69 = load %bout.BufIO** @llvm_f
	%70 = bitcast %bout.BufIO* %69 to %bout.BufIO*
	%71 = getelementptr [3 x i8]* @S.628
	%72 = bitcast [3 x i8]* %71 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %70, [0 x i8]* %72)
	br label %L.2
L.1:
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
define internal void @llvm_PTempName(i16 zeroext %n.arg) nounwind {
L.0:
	%n = alloca i16
	store i16 %n.arg, i16* %n
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %1, i8 37)
	%2 = load %bout.BufIO** @llvm_f
	%3 = bitcast %bout.BufIO* %2 to %bout.BufIO*
	%4 = load i16* %n
	%5 = sub i16 %4, 1
	%6 = zext i16 %5 to i32
	call void @bout_uint(%bout.BufIO* %3, i32 %6)
	br label %return
return:
	ret void
}
@S.629 = internal constant [11 x i8] c"__NoName__\00"define internal void @llvm_NodeName(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%s = alloca %symb.SymbNode*
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 12
	%2 = load %symb.SymbNode** %1
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %s
	%4 = load %symb.SymbNode** %s
	%5 = icmp ne %symb.SymbNode* %4, null
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = load %symb.SymbNode** %s
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	call void @llvm_PName(%symb.SymbNode* %7)
	br label %L.1
L.3:
	%8 = load %bout.BufIO** @llvm_f
	%9 = bitcast %bout.BufIO* %8 to %bout.BufIO*
	%10 = getelementptr [11 x i8]* @S.629
	%11 = bitcast [11 x i8]* %10 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %9, [0 x i8]* %11)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
define internal void @llvm_NodeDst(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 0
	%2 = load i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 7, label %L.3
		i32 9, label %L.4
		i32 5, label %L.4
	]
L.3:
	call void @lex_Error(i8 72)
	br label %L.2
L.4:
	%4 = load %ast.AstNode** %node
	%5 = bitcast %ast.AstNode* %4 to %ast.AstNode*
	call void @llvm_NodeName(%ast.AstNode* %5)
	br label %L.2
L.1:
	%6 = load %ast.AstNode** %node
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 9
	%8 = load i16* %7
	call void @llvm_PTempName(i16 %8)
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
define internal void @llvm_NodeSrc(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 0
	%2 = load i8* %1
	%3 = zext i8 %2 to i32
	switch i32 %3, label %L.1 [
		i32 7, label %L.3
		i32 9, label %L.4
	]
L.3:
	%4 = load %ast.AstNode** %node
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 1
	%6 = load i8* %5
	%7 = zext i8 %6 to i32
	switch i32 %7, label %L.5 [
		i32 1, label %L.7
		i32 2, label %L.7
		i32 3, label %L.8
		i32 4, label %L.9
		i32 7, label %L.9
		i32 5, label %L.10
		i32 6, label %L.10
	]
L.7:
	%8 = load %bout.BufIO** @llvm_f
	%9 = bitcast %bout.BufIO* %8 to %bout.BufIO*
	%10 = load %ast.AstNode** %node
	%11 = getelementptr %ast.AstNode* %10, i32 0, i32 10
	%12 = load i64* %11
	call void @bout_uint64(%bout.BufIO* %9, i64 %12)
	br label %L.6
L.8:
	%13 = load %bout.BufIO** @llvm_f
	%14 = bitcast %bout.BufIO* %13 to %bout.BufIO*
	%15 = load %ast.AstNode** %node
	%16 = getelementptr %ast.AstNode* %15, i32 0, i32 10
	%17 = load i64* %16
	call void @bout_int64(%bout.BufIO* %14, i64 %17)
	br label %L.6
L.9:
	%18 = bitcast %type.TypeNode* null to %type.TypeNode*
	%19 = load %ast.AstNode** %node
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	call void @llvm_ConstantRef(%type.TypeNode* %18, %ast.AstNode* %20)
	br label %L.6
L.10:
	%21 = load %bout.BufIO** @llvm_f
	%22 = bitcast %bout.BufIO* %21 to %bout.BufIO*
	%23 = load %ast.AstNode** %node
	%24 = getelementptr %ast.AstNode* %23, i32 0, i32 10
	%25 = load i64* %24
	call void @bout_uint64(%bout.BufIO* %22, i64 %25)
	br label %L.6
L.5:
	br label %L.6
L.6:
	br label %L.2
L.4:
	%26 = load %ast.AstNode** %node
	%27 = bitcast %ast.AstNode* %26 to %ast.AstNode*
	call void @llvm_NodeName(%ast.AstNode* %27)
	br label %L.2
L.1:
	%28 = load %ast.AstNode** %node
	%29 = getelementptr %ast.AstNode* %28, i32 0, i32 9
	%30 = load i16* %29
	call void @llvm_PTempName(i16 %30)
	br label %L.2
L.2:
	br label %return
return:
	ret void
}
define internal void @llvm_Print([0 x i8]* %fmt.arg, %ast.AstNode* %anode.arg) nounwind {
L.0:
	%fmt = alloca [0 x i8]*
	%anode = alloca %ast.AstNode*
	store [0 x i8]* %fmt.arg, [0 x i8]** %fmt
	store %ast.AstNode* %anode.arg, %ast.AstNode** %anode
	%i = alloca i32
	%c = alloca i8
	%n = alloca i16
	%node = alloca %ast.AstNode*
	store i32 0, i32* %i
	br label %L.1
L.1:
	%0 = load [0 x i8]** %fmt
	%1 = load i32* %i
	%2 = getelementptr [0 x i8]* %0, i32 0, i32 %1
	%3 = load i8* %2
	store i8 %3, i8* %c
	%4 = load i8* %c
	%5 = icmp eq i8 %4, 0
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load i8* %c
	%7 = icmp eq i8 %6, 37
	br i1 %7, label %L.5, label %L.6
L.5:
	%8 = load i32* %i
	%9 = add i32 %8, 1
	store i32 %9, i32* %i
	%10 = load [0 x i8]** %fmt
	%11 = load i32* %i
	%12 = getelementptr [0 x i8]* %10, i32 0, i32 %11
	%13 = load i8* %12
	store i8 %13, i8* %c
	%14 = load %ast.AstNode** %anode
	%15 = bitcast %ast.AstNode* %14 to %ast.AstNode*
	store %ast.AstNode* %15, %ast.AstNode** %node
	%16 = load i8* %c
	%17 = zext i8 %16 to i32
	switch i32 %17, label %L.7 [
		i32 48, label %L.9
		i32 49, label %L.9
		i32 50, label %L.9
		i32 51, label %L.9
		i32 52, label %L.9
		i32 53, label %L.9
		i32 54, label %L.9
		i32 55, label %L.9
		i32 56, label %L.9
		i32 57, label %L.9
	]
L.9:
	store i16 0, i16* %n
	br label %L.10
L.10:
	%18 = load i16* %n
	%19 = mul i16 %18, 10
	%20 = load i8* %c
	%21 = sub i8 %20, 48
	%22 = zext i8 %21 to i16
	%23 = add i16 %19, %22
	store i16 %23, i16* %n
	%24 = load i32* %i
	%25 = add i32 %24, 1
	store i32 %25, i32* %i
	%26 = load [0 x i8]** %fmt
	%27 = load i32* %i
	%28 = getelementptr [0 x i8]* %26, i32 0, i32 %27
	%29 = load i8* %28
	store i8 %29, i8* %c
	%30 = load i8* %c
	%31 = icmp ult i8 %30, 48
	br i1 %31, label %L.14, label %L.13
L.13:
	%32 = load i8* %c
	%33 = icmp ugt i8 %32, 57
	br label %L.14
L.14:
	%34 = phi i1 [ true, %L.10 ], [ %33, %L.13 ]
	br i1 %34, label %L.11, label %L.12
L.12:
	br label %L.10
L.11:
	%35 = load %ast.AstNode** %anode
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 13
	%37 = load i16* %n
	%38 = zext i16 %37 to i32
	%39 = getelementptr [0 x %ast.AstNode*]* %36, i32 0, i32 %38
	%40 = load %ast.AstNode** %39
	%41 = bitcast %ast.AstNode* %40 to %ast.AstNode*
	store %ast.AstNode* %41, %ast.AstNode** %node
	br label %L.8
L.7:
	br label %L.8
L.8:
	%42 = load i8* %c
	%43 = zext i8 %42 to i32
	switch i32 %43, label %L.15 [
		i32 66, label %L.17
		i32 65, label %L.18
		i32 84, label %L.19
		i32 73, label %L.20
		i32 78, label %L.21
		i32 68, label %L.22
		i32 87, label %L.23
		i32 83, label %L.24
		i32 37, label %L.25
	]
L.17:
	%44 = load %ast.AstNode** %node
	%45 = getelementptr %ast.AstNode* %44, i32 0, i32 11
	%46 = load %type.TypeNode** %45
	%47 = bitcast %type.TypeNode* %46 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %47)
	br label %L.16
L.18:
	%48 = load %ast.AstNode** %node
	%49 = getelementptr %ast.AstNode* %48, i32 0, i32 11
	%50 = load %type.TypeNode** %49
	%51 = getelementptr %type.TypeNode* %50, i32 0, i32 0
	%52 = load %type.TypeNode** %51
	%53 = bitcast %type.TypeNode* %52 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %53)
	br label %L.16
L.19:
	%54 = load %ast.AstNode** %node
	%55 = bitcast %ast.AstNode* %54 to %ast.AstNode*
	call void @llvm_NodeType(%ast.AstNode* %55)
	br label %L.16
L.20:
	%56 = load %ast.AstNode** %node
	%57 = bitcast %ast.AstNode* %56 to %ast.AstNode*
	call void @llvm_NodeName(%ast.AstNode* %57)
	br label %L.16
L.21:
	%58 = load %ast.AstNode** %node
	%59 = bitcast %ast.AstNode* %58 to %ast.AstNode*
	call void @llvm_NodeSrc(%ast.AstNode* %59)
	br label %L.16
L.22:
	%60 = load %ast.AstNode** %node
	%61 = bitcast %ast.AstNode* %60 to %ast.AstNode*
	call void @llvm_NodeDst(%ast.AstNode* %61)
	br label %L.16
L.23:
	%62 = load %type.TypeNode** @type_wordtype
	%63 = bitcast %type.TypeNode* %62 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %63)
	br label %L.16
L.24:
	%64 = load %bout.BufIO** @llvm_f
	%65 = bitcast %bout.BufIO* %64 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %65, i8 64)
	%66 = load %bout.BufIO** @llvm_f
	%67 = bitcast %bout.BufIO* %66 to %bout.BufIO*
	%68 = getelementptr [3 x i8]* @llvm_scon_prefix
	%69 = bitcast [3 x i8]* %68 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %67, [0 x i8]* %69)
	%70 = load %bout.BufIO** @llvm_f
	%71 = bitcast %bout.BufIO* %70 to %bout.BufIO*
	%72 = load %ast.AstNode** %node
	%73 = getelementptr %ast.AstNode* %72, i32 0, i32 10
	%74 = load i64* %73
	%75 = trunc i64 %74 to i32
	call void @bout_uint32(%bout.BufIO* %71, i32 %75)
	br label %L.16
L.25:
	%76 = load %bout.BufIO** @llvm_f
	%77 = bitcast %bout.BufIO* %76 to %bout.BufIO*
	%78 = load i8* %c
	call void @bout_chr(%bout.BufIO* %77, i8 %78)
	br label %L.16
L.15:
	br label %L.16
L.16:
	br label %L.4
L.6:
	%79 = load %bout.BufIO** @llvm_f
	%80 = bitcast %bout.BufIO* %79 to %bout.BufIO*
	%81 = load i8* %c
	call void @bout_chr(%bout.BufIO* %80, i8 %81)
	br label %L.4
L.4:
	%82 = load i32* %i
	%83 = add i32 %82, 1
	store i32 %83, i32* %i
	br label %L.1
L.2:
	br label %return
return:
	ret void
}
@S.630 = internal constant [5 x i8] c"%rv.\00"define internal void @llvm_PRetValName(i16 zeroext %n.arg) nounwind {
L.0:
	%n = alloca i16
	store i16 %n.arg, i16* %n
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [5 x i8]* @S.630
	%3 = bitcast [5 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load %bout.BufIO** @llvm_f
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = load i16* %n
	%7 = zext i16 %6 to i32
	call void @bout_uint(%bout.BufIO* %5, i32 %7)
	br label %return
return:
	ret void
}
@S.631 = internal constant [9 x i8] c" = type \00"@S.632 = internal constant [2 x i8] c"i\00"@S.633 = internal constant [2 x i8] c"<\00"@S.634 = internal constant [2 x i8] c"{\00"@S.635 = internal constant [3 x i8] c", \00"@S.636 = internal constant [2 x i8] c"}\00"@S.637 = internal constant [2 x i8] c">\00"define internal void @llvm_DclType(%type.TypeNode* %t.arg) nounwind {
L.0:
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%s = alloca %symb.SymbNode*
	%size = alloca i32
	%0 = load %type.TypeNode** %t
	%1 = icmp ne %type.TypeNode* %0, null
	br i1 %1, label %L.1, label %L.2
L.1:
	%2 = load %type.TypeNode** %t
	%3 = getelementptr %type.TypeNode* %2, i32 0, i32 21
	%4 = load i8* %3
	%5 = icmp ne i8 %4, 0
	%6 = xor i1 %5, true
	br label %L.2
L.2:
	%7 = phi i1 [ false, %L.0 ], [ %6, %L.1 ]
	br i1 %7, label %L.4, label %L.3
L.4:
	%8 = load %type.TypeNode** %t
	%9 = getelementptr %type.TypeNode* %8, i32 0, i32 13
	%10 = load i8* %9
	%11 = zext i8 %10 to i32
	switch i32 %11, label %L.5 [
		i32 4, label %L.7
		i32 5, label %L.7
		i32 7, label %L.8
		i32 6, label %L.9
	]
L.7:
	%12 = load %type.TypeNode** %t
	%13 = getelementptr %type.TypeNode* %12, i32 0, i32 0
	%14 = load %type.TypeNode** %13
	%15 = bitcast %type.TypeNode* %14 to %type.TypeNode*
	call void @llvm_DclType(%type.TypeNode* %15)
	br label %L.6
L.8:
	%16 = load %type.TypeNode** %t
	%17 = getelementptr %type.TypeNode* %16, i32 0, i32 4
	%18 = load %symb.SymbNode** %17
	%19 = getelementptr %symb.SymbNode* %18, i32 0, i32 3
	%20 = load %symb.SymbNode** %19
	%21 = bitcast %symb.SymbNode* %20 to %symb.SymbNode*
	store %symb.SymbNode* %21, %symb.SymbNode** %s
	br label %L.10
L.10:
	%22 = load %symb.SymbNode** %s
	%23 = icmp ne %symb.SymbNode* %22, null
	%24 = xor i1 %23, true
	br i1 %24, label %L.11, label %L.12
L.12:
	%25 = load %symb.SymbNode** %s
	%26 = getelementptr %symb.SymbNode* %25, i32 0, i32 1
	%27 = load %type.TypeNode** %26
	%28 = bitcast %type.TypeNode* %27 to %type.TypeNode*
	call void @llvm_DclType(%type.TypeNode* %28)
	%29 = load %symb.SymbNode** %s
	%30 = getelementptr %symb.SymbNode* %29, i32 0, i32 0
	%31 = load %symb.SymbNode** %30
	%32 = bitcast %symb.SymbNode* %31 to %symb.SymbNode*
	store %symb.SymbNode* %32, %symb.SymbNode** %s
	br label %L.10
L.11:
	br label %L.6
L.9:
	%33 = load %type.TypeNode** %t
	%34 = getelementptr %type.TypeNode* %33, i32 0, i32 21
	store i8 1, i8* %34
	%35 = load %type.TypeNode** %t
	%36 = getelementptr %type.TypeNode* %35, i32 0, i32 4
	%37 = load %symb.SymbNode** %36
	%38 = bitcast %symb.SymbNode* %37 to %symb.SymbNode*
	store %symb.SymbNode* %38, %symb.SymbNode** %s
	br label %L.13
L.13:
	%39 = load %symb.SymbNode** %s
	%40 = icmp ne %symb.SymbNode* %39, null
	%41 = xor i1 %40, true
	br i1 %41, label %L.14, label %L.15
L.15:
	%42 = load %symb.SymbNode** %s
	%43 = getelementptr %symb.SymbNode* %42, i32 0, i32 1
	%44 = load %type.TypeNode** %43
	%45 = bitcast %type.TypeNode* %44 to %type.TypeNode*
	call void @llvm_DclType(%type.TypeNode* %45)
	%46 = load %symb.SymbNode** %s
	%47 = getelementptr %symb.SymbNode* %46, i32 0, i32 0
	%48 = load %symb.SymbNode** %47
	%49 = bitcast %symb.SymbNode* %48 to %symb.SymbNode*
	store %symb.SymbNode* %49, %symb.SymbNode** %s
	br label %L.13
L.14:
	%50 = load %type.TypeNode** %t
	%51 = bitcast %type.TypeNode* %50 to %type.TypeNode*
	call void @llvm_PTypeName(%type.TypeNode* %51)
	%52 = load %bout.BufIO** @llvm_f
	%53 = bitcast %bout.BufIO* %52 to %bout.BufIO*
	%54 = getelementptr [9 x i8]* @S.631
	%55 = bitcast [9 x i8]* %54 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %53, [0 x i8]* %55)
	%56 = load %type.TypeNode** %t
	%57 = getelementptr %type.TypeNode* %56, i32 0, i32 14
	%58 = load i8* %57
	%59 = icmp eq i8 %58, 2
	br i1 %59, label %L.17, label %L.18
L.17:
	%60 = load %type.TypeNode** %t
	%61 = getelementptr %type.TypeNode* %60, i32 0, i32 8
	%62 = load i32* %61
	%63 = call i32 @target_isize(i32 %62)
	store i32 %63, i32* %size
	%64 = load %bout.BufIO** @llvm_f
	%65 = bitcast %bout.BufIO* %64 to %bout.BufIO*
	%66 = getelementptr [2 x i8]* @S.632
	%67 = bitcast [2 x i8]* %66 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %65, [0 x i8]* %67)
	%68 = load %bout.BufIO** @llvm_f
	%69 = bitcast %bout.BufIO* %68 to %bout.BufIO*
	%70 = load i32* %size
	call void @bout_uint(%bout.BufIO* %69, i32 %70)
	br label %L.16
L.18:
	%71 = load %type.TypeNode** %t
	%72 = getelementptr %type.TypeNode* %71, i32 0, i32 14
	%73 = load i8* %72
	%74 = icmp eq i8 %73, 1
	br i1 %74, label %L.20, label %L.19
L.20:
	%75 = load %bout.BufIO** @llvm_f
	%76 = bitcast %bout.BufIO* %75 to %bout.BufIO*
	%77 = getelementptr [2 x i8]* @S.633
	%78 = bitcast [2 x i8]* %77 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %76, [0 x i8]* %78)
	br label %L.19
L.19:
	%79 = load %bout.BufIO** @llvm_f
	%80 = bitcast %bout.BufIO* %79 to %bout.BufIO*
	%81 = getelementptr [2 x i8]* @S.634
	%82 = bitcast [2 x i8]* %81 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %80, [0 x i8]* %82)
	%83 = load %type.TypeNode** %t
	%84 = getelementptr %type.TypeNode* %83, i32 0, i32 4
	%85 = load %symb.SymbNode** %84
	%86 = bitcast %symb.SymbNode* %85 to %symb.SymbNode*
	store %symb.SymbNode* %86, %symb.SymbNode** %s
	br label %L.21
L.21:
	%87 = load %symb.SymbNode** %s
	%88 = icmp ne %symb.SymbNode* %87, null
	%89 = xor i1 %88, true
	br i1 %89, label %L.22, label %L.23
L.23:
	%90 = load %symb.SymbNode** %s
	%91 = getelementptr %symb.SymbNode* %90, i32 0, i32 1
	%92 = load %type.TypeNode** %91
	%93 = bitcast %type.TypeNode* %92 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %93)
	%94 = load %symb.SymbNode** %s
	%95 = getelementptr %symb.SymbNode* %94, i32 0, i32 0
	%96 = load %symb.SymbNode** %95
	%97 = bitcast %symb.SymbNode* %96 to %symb.SymbNode*
	store %symb.SymbNode* %97, %symb.SymbNode** %s
	%98 = load %symb.SymbNode** %s
	%99 = icmp eq %symb.SymbNode* %98, null
	br i1 %99, label %L.22, label %L.24
L.24:
	%100 = load %bout.BufIO** @llvm_f
	%101 = bitcast %bout.BufIO* %100 to %bout.BufIO*
	%102 = getelementptr [3 x i8]* @S.635
	%103 = bitcast [3 x i8]* %102 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %101, [0 x i8]* %103)
	br label %L.21
L.22:
	%104 = load %bout.BufIO** @llvm_f
	%105 = bitcast %bout.BufIO* %104 to %bout.BufIO*
	%106 = getelementptr [2 x i8]* @S.636
	%107 = bitcast [2 x i8]* %106 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %105, [0 x i8]* %107)
	%108 = load %type.TypeNode** %t
	%109 = getelementptr %type.TypeNode* %108, i32 0, i32 14
	%110 = load i8* %109
	%111 = icmp eq i8 %110, 1
	br i1 %111, label %L.26, label %L.25
L.26:
	%112 = load %bout.BufIO** @llvm_f
	%113 = bitcast %bout.BufIO* %112 to %bout.BufIO*
	%114 = getelementptr [2 x i8]* @S.637
	%115 = bitcast [2 x i8]* %114 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %113, [0 x i8]* %115)
	br label %L.25
L.25:
	br label %L.16
L.16:
	%116 = load %bout.BufIO** @llvm_f
	%117 = bitcast %bout.BufIO* %116 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %117)
	br label %L.6
L.5:
	br label %L.6
L.6:
	br label %L.3
L.3:
	br label %return
return:
	ret void
}
@S.638 = internal constant [7 x i8] c"define\00"@S.639 = internal constant [8 x i8] c"declare\00"@S.640 = internal constant [10 x i8] c" internal\00"@S.641 = internal constant [10 x i8] c" external\00"@S.642 = internal constant [5 x i8] c" %I(\00"@S.643 = internal constant [3 x i8] c" %\00"@S.644 = internal constant [5 x i8] c".arg\00"@S.645 = internal constant [3 x i8] c", \00"@S.646 = internal constant [2 x i8] c")\00"define internal void @llvm_DclProc(%ast.AstNode* %node.arg, i8 zeroext %isdefine.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	%isdefine = alloca i8
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	store i8 %isdefine.arg, i8* %isdefine
	%s = alloca %symb.SymbNode*
	%ps = alloca %symb.SymbNode*
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 12
	%2 = load %symb.SymbNode** %1
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %ps
	%4 = load i8* %isdefine
	%5 = icmp ne i8 %4, 0
	br i1 %5, label %L.2, label %L.3
L.2:
	%6 = load %bout.BufIO** @llvm_f
	%7 = bitcast %bout.BufIO* %6 to %bout.BufIO*
	%8 = getelementptr [7 x i8]* @S.638
	%9 = bitcast [7 x i8]* %8 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %7, [0 x i8]* %9)
	br label %L.1
L.3:
	%10 = load %bout.BufIO** @llvm_f
	%11 = bitcast %bout.BufIO* %10 to %bout.BufIO*
	%12 = getelementptr [8 x i8]* @S.639
	%13 = bitcast [8 x i8]* %12 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %11, [0 x i8]* %13)
	br label %L.1
L.1:
	%14 = load %symb.SymbNode** %ps
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 13
	%16 = load i8* %15
	%17 = zext i8 %16 to i32
	switch i32 %17, label %L.4 [
		i32 1, label %L.6
		i32 3, label %L.7
	]
L.6:
	%18 = load %bout.BufIO** @llvm_f
	%19 = bitcast %bout.BufIO* %18 to %bout.BufIO*
	%20 = getelementptr [10 x i8]* @S.640
	%21 = bitcast [10 x i8]* %20 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %19, [0 x i8]* %21)
	br label %L.5
L.7:
	%22 = load %bout.BufIO** @llvm_f
	%23 = bitcast %bout.BufIO* %22 to %bout.BufIO*
	%24 = getelementptr [10 x i8]* @S.641
	%25 = bitcast [10 x i8]* %24 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %23, [0 x i8]* %25)
	br label %L.5
L.4:
	br label %L.5
L.5:
	%26 = load %symb.SymbNode** %ps
	%27 = getelementptr %symb.SymbNode* %26, i32 0, i32 4
	%28 = load %type.TypeListEntry** %27
	%29 = bitcast %type.TypeListEntry* %28 to %type.TypeListEntry*
	call void @llvm_PRetvType(%type.TypeListEntry* %29, i8 1)
	%30 = getelementptr [5 x i8]* @S.642
	%31 = bitcast [5 x i8]* %30 to [0 x i8]*
	%32 = load %ast.AstNode** %node
	%33 = bitcast %ast.AstNode* %32 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %31, %ast.AstNode* %33)
	%34 = load %symb.SymbNode** %ps
	%35 = getelementptr %symb.SymbNode* %34, i32 0, i32 3
	%36 = load %symb.SymbNode** %35
	%37 = bitcast %symb.SymbNode* %36 to %symb.SymbNode*
	store %symb.SymbNode* %37, %symb.SymbNode** %s
	br label %L.8
L.8:
	%38 = load %symb.SymbNode** %s
	%39 = icmp ne %symb.SymbNode* %38, null
	%40 = xor i1 %39, true
	br i1 %40, label %L.9, label %L.10
L.10:
	%41 = load %symb.SymbNode** %s
	%42 = getelementptr %symb.SymbNode* %41, i32 0, i32 1
	%43 = load %type.TypeNode** %42
	%44 = bitcast %type.TypeNode* %43 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %44)
	%45 = load %symb.SymbNode** %s
	%46 = getelementptr %symb.SymbNode* %45, i32 0, i32 1
	%47 = load %type.TypeNode** %46
	%48 = bitcast %type.TypeNode* %47 to %type.TypeNode*
	call void @llvm_PExtend(%type.TypeNode* %48)
	%49 = load i8* %isdefine
	%50 = icmp ne i8 %49, 0
	br i1 %50, label %L.12, label %L.11
L.12:
	%51 = load %bout.BufIO** @llvm_f
	%52 = bitcast %bout.BufIO* %51 to %bout.BufIO*
	%53 = getelementptr [3 x i8]* @S.643
	%54 = bitcast [3 x i8]* %53 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %52, [0 x i8]* %54)
	%55 = load %bout.BufIO** @llvm_f
	%56 = bitcast %bout.BufIO* %55 to %bout.BufIO*
	%57 = load %symb.SymbNode** %s
	%58 = getelementptr %symb.SymbNode* %57, i32 0, i32 19
	%59 = getelementptr [0 x i8]* %58
	%60 = bitcast [0 x i8]* %59 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %56, [0 x i8]* %60)
	%61 = load %bout.BufIO** @llvm_f
	%62 = bitcast %bout.BufIO* %61 to %bout.BufIO*
	%63 = getelementptr [5 x i8]* @S.644
	%64 = bitcast [5 x i8]* %63 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %62, [0 x i8]* %64)
	br label %L.11
L.11:
	%65 = load %symb.SymbNode** %s
	%66 = getelementptr %symb.SymbNode* %65, i32 0, i32 0
	%67 = load %symb.SymbNode** %66
	%68 = bitcast %symb.SymbNode* %67 to %symb.SymbNode*
	store %symb.SymbNode* %68, %symb.SymbNode** %s
	%69 = load %symb.SymbNode** %s
	%70 = icmp eq %symb.SymbNode* %69, null
	br i1 %70, label %L.9, label %L.13
L.13:
	%71 = load %bout.BufIO** @llvm_f
	%72 = bitcast %bout.BufIO* %71 to %bout.BufIO*
	%73 = getelementptr [3 x i8]* @S.645
	%74 = bitcast [3 x i8]* %73 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %72, [0 x i8]* %74)
	br label %L.8
L.9:
	%75 = load %bout.BufIO** @llvm_f
	%76 = bitcast %bout.BufIO* %75 to %bout.BufIO*
	%77 = getelementptr [2 x i8]* @S.646
	%78 = bitcast [2 x i8]* %77 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %76, [0 x i8]* %78)
	br label %return
return:
	ret void
}
define internal void @llvm_PString([0 x i8]* %s.arg, i16 zeroext %n.arg, i8 zeroext %prefix.arg) nounwind {
L.0:
	%s = alloca [0 x i8]*
	%n = alloca i16
	%prefix = alloca i8
	store [0 x i8]* %s.arg, [0 x i8]** %s
	store i16 %n.arg, i16* %n
	store i8 %prefix.arg, i8* %prefix
	%i = alloca i16
	%c = alloca i8
	%0 = load i8* %prefix
	%1 = icmp ne i8 %0, 0
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %bout.BufIO** @llvm_f
	%3 = bitcast %bout.BufIO* %2 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %3, i8 99)
	br label %L.1
L.1:
	%4 = load %bout.BufIO** @llvm_f
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %5, i8 34)
	store i16 0, i16* %i
	br label %L.3
L.3:
	%6 = load i16* %i
	%7 = load i16* %n
	%8 = icmp ult i16 %6, %7
	%9 = xor i1 %8, true
	br i1 %9, label %L.4, label %L.5
L.5:
	%10 = load [0 x i8]** %s
	%11 = load i16* %i
	%12 = zext i16 %11 to i32
	%13 = getelementptr [0 x i8]* %10, i32 0, i32 %12
	%14 = load i8* %13
	store i8 %14, i8* %c
	%15 = load i8* %c
	%16 = icmp ult i8 %15, 32
	br i1 %16, label %L.11, label %L.10
L.10:
	%17 = load i8* %c
	%18 = icmp uge i8 %17, 127
	br label %L.11
L.11:
	%19 = phi i1 [ true, %L.5 ], [ %18, %L.10 ]
	br i1 %19, label %L.9, label %L.8
L.8:
	%20 = load i8* %c
	%21 = icmp eq i8 %20, 34
	br label %L.9
L.9:
	%22 = phi i1 [ true, %L.11 ], [ %21, %L.8 ]
	br i1 %22, label %L.7, label %L.6
L.6:
	%23 = load i8* %c
	%24 = icmp eq i8 %23, 92
	br label %L.7
L.7:
	%25 = phi i1 [ true, %L.9 ], [ %24, %L.6 ]
	br i1 %25, label %L.13, label %L.14
L.13:
	%26 = load %bout.BufIO** @llvm_f
	%27 = bitcast %bout.BufIO* %26 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %27, i8 92)
	%28 = load %bout.BufIO** @llvm_f
	%29 = bitcast %bout.BufIO* %28 to %bout.BufIO*
	%30 = load i8* %c
	call void @bout_hex8(%bout.BufIO* %29, i8 %30)
	br label %L.12
L.14:
	%31 = load %bout.BufIO** @llvm_f
	%32 = bitcast %bout.BufIO* %31 to %bout.BufIO*
	%33 = load i8* %c
	call void @bout_chr(%bout.BufIO* %32, i8 %33)
	br label %L.12
L.12:
	%34 = load i16* %i
	%35 = add i16 %34, 1
	store i16 %35, i16* %i
	br label %L.3
L.4:
	%36 = load %bout.BufIO** @llvm_f
	%37 = bitcast %bout.BufIO* %36 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %37, i8 34)
	br label %return
return:
	ret void
}
@S.647 = internal constant [16 x i8] c"zeroinitializer\00"@S.648 = internal constant [3 x i8] c"{ \00"@S.649 = internal constant [2 x i8] c" \00"@S.650 = internal constant [3 x i8] c", \00"@S.651 = internal constant [3 x i8] c" }\00"@S.652 = internal constant [16 x i8] c"zeroinitializer\00"@S.653 = internal constant [3 x i8] c"[ \00"@S.654 = internal constant [2 x i8] c" \00"@S.655 = internal constant [3 x i8] c", \00"@S.656 = internal constant [3 x i8] c" ]\00"@S.657 = internal constant [3 x i8] c"* \00"@S.658 = internal constant [13 x i8] c"bitcast( %T \00"@S.659 = internal constant [24 x i8] c"getelementptr( %T %S ) \00"@S.660 = internal constant [9 x i8] c" to %T )\00"@S.661 = internal constant [16 x i8] c"zeroinitializer\00"@S.662 = internal constant [5 x i8] c"null\00"define internal void @llvm_Constant(%ast.AstNode* %node.arg, %type.TypeNode* %t.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	%t = alloca %type.TypeNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%i = alloca i16
	%0 = load %type.TypeNode** %t
	%1 = icmp ne %type.TypeNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %type.TypeNode** %t
	%3 = getelementptr %type.TypeNode* %2, i32 0, i32 13
	%4 = load i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.3 [
		i32 1, label %L.5
		i32 2, label %L.5
		i32 3, label %L.6
		i32 4, label %L.7
		i32 6, label %L.8
		i32 5, label %L.9
		i32 7, label %L.10
	]
L.5:
	%6 = load %ast.AstNode** %node
	%7 = icmp ne %ast.AstNode* %6, null
	br i1 %7, label %L.12, label %L.13
L.12:
	%8 = load %bout.BufIO** @llvm_f
	%9 = bitcast %bout.BufIO* %8 to %bout.BufIO*
	%10 = load %ast.AstNode** %node
	%11 = getelementptr %ast.AstNode* %10, i32 0, i32 10
	%12 = load i64* %11
	call void @bout_uint64(%bout.BufIO* %9, i64 %12)
	br label %L.11
L.13:
	%13 = load %bout.BufIO** @llvm_f
	%14 = bitcast %bout.BufIO* %13 to %bout.BufIO*
	call void @bout_uint(%bout.BufIO* %14, i32 0)
	br label %L.11
L.11:
	br label %L.4
L.6:
	%15 = load %ast.AstNode** %node
	%16 = icmp ne %ast.AstNode* %15, null
	br i1 %16, label %L.15, label %L.16
L.15:
	%17 = load %bout.BufIO** @llvm_f
	%18 = bitcast %bout.BufIO* %17 to %bout.BufIO*
	%19 = load %ast.AstNode** %node
	%20 = getelementptr %ast.AstNode* %19, i32 0, i32 10
	%21 = load i64* %20
	call void @bout_int64(%bout.BufIO* %18, i64 %21)
	br label %L.14
L.16:
	%22 = load %bout.BufIO** @llvm_f
	%23 = bitcast %bout.BufIO* %22 to %bout.BufIO*
	call void @bout_uint(%bout.BufIO* %23, i32 0)
	br label %L.14
L.14:
	br label %L.4
L.7:
	%24 = load %ast.AstNode** %node
	%25 = icmp eq %ast.AstNode* %24, null
	br i1 %25, label %L.18, label %L.17
L.17:
	%26 = load %ast.AstNode** %node
	%27 = getelementptr %ast.AstNode* %26, i32 0, i32 10
	%28 = load i64* %27
	%29 = icmp eq i64 %28, 0
	br label %L.18
L.18:
	%30 = phi i1 [ true, %L.7 ], [ %29, %L.17 ]
	br i1 %30, label %L.20, label %L.21
L.20:
	%31 = load %bout.BufIO** @llvm_f
	%32 = bitcast %bout.BufIO* %31 to %bout.BufIO*
	%33 = getelementptr [16 x i8]* @S.647
	%34 = bitcast [16 x i8]* %33 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %32, [0 x i8]* %34)
	br label %L.19
L.21:
	%35 = load %type.TypeNode** %t
	%36 = bitcast %type.TypeNode* %35 to %type.TypeNode*
	%37 = load %ast.AstNode** %node
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	call void @llvm_ConstantRef(%type.TypeNode* %36, %ast.AstNode* %38)
	br label %L.19
L.19:
	br label %L.4
L.8:
	%39 = load %ast.AstNode** %node
	%40 = icmp ne %ast.AstNode* %39, null
	br i1 %40, label %L.23, label %L.24
L.23:
	%41 = load %type.TypeNode** %t
	%42 = getelementptr %type.TypeNode* %41, i32 0, i32 14
	%43 = load i8* %42
	%44 = icmp eq i8 %43, 2
	br i1 %44, label %L.26, label %L.27
L.26:
	%45 = load %bout.BufIO** @llvm_f
	%46 = bitcast %bout.BufIO* %45 to %bout.BufIO*
	%47 = load %ast.AstNode** %node
	%48 = getelementptr %ast.AstNode* %47, i32 0, i32 10
	%49 = load i64* %48
	call void @bout_uint64(%bout.BufIO* %46, i64 %49)
	br label %L.25
L.27:
	%50 = load %bout.BufIO** @llvm_f
	%51 = bitcast %bout.BufIO* %50 to %bout.BufIO*
	%52 = getelementptr [3 x i8]* @S.648
	%53 = bitcast [3 x i8]* %52 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %51, [0 x i8]* %53)
	store i16 0, i16* %i
	br label %L.28
L.28:
	%54 = load %ast.AstNode** %node
	%55 = getelementptr %ast.AstNode* %54, i32 0, i32 13
	%56 = load i16* %i
	%57 = zext i16 %56 to i32
	%58 = getelementptr [0 x %ast.AstNode*]* %55, i32 0, i32 %57
	%59 = load %ast.AstNode** %58
	%60 = getelementptr %ast.AstNode* %59, i32 0, i32 11
	%61 = load %type.TypeNode** %60
	%62 = bitcast %type.TypeNode* %61 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %62)
	%63 = load %bout.BufIO** @llvm_f
	%64 = bitcast %bout.BufIO* %63 to %bout.BufIO*
	%65 = getelementptr [2 x i8]* @S.649
	%66 = bitcast [2 x i8]* %65 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %64, [0 x i8]* %66)
	%67 = load %ast.AstNode** %node
	%68 = getelementptr %ast.AstNode* %67, i32 0, i32 13
	%69 = load i16* %i
	%70 = zext i16 %69 to i32
	%71 = getelementptr [0 x %ast.AstNode*]* %68, i32 0, i32 %70
	%72 = load %ast.AstNode** %71
	%73 = bitcast %ast.AstNode* %72 to %ast.AstNode*
	%74 = load %ast.AstNode** %node
	%75 = getelementptr %ast.AstNode* %74, i32 0, i32 13
	%76 = load i16* %i
	%77 = zext i16 %76 to i32
	%78 = getelementptr [0 x %ast.AstNode*]* %75, i32 0, i32 %77
	%79 = load %ast.AstNode** %78
	%80 = getelementptr %ast.AstNode* %79, i32 0, i32 11
	%81 = load %type.TypeNode** %80
	%82 = bitcast %type.TypeNode* %81 to %type.TypeNode*
	call void @llvm_Constant(%ast.AstNode* %73, %type.TypeNode* %82)
	%83 = load i16* %i
	%84 = add i16 %83, 1
	store i16 %84, i16* %i
	%85 = load i16* %i
	%86 = load %ast.AstNode** %node
	%87 = getelementptr %ast.AstNode* %86, i32 0, i32 2
	%88 = load i16* %87
	%89 = icmp uge i16 %85, %88
	br i1 %89, label %L.29, label %L.30
L.30:
	%90 = load %bout.BufIO** @llvm_f
	%91 = bitcast %bout.BufIO* %90 to %bout.BufIO*
	%92 = getelementptr [3 x i8]* @S.650
	%93 = bitcast [3 x i8]* %92 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %91, [0 x i8]* %93)
	br label %L.28
L.29:
	%94 = load %bout.BufIO** @llvm_f
	%95 = bitcast %bout.BufIO* %94 to %bout.BufIO*
	%96 = getelementptr [3 x i8]* @S.651
	%97 = bitcast [3 x i8]* %96 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %95, [0 x i8]* %97)
	br label %L.25
L.25:
	br label %L.22
L.24:
	%98 = load %bout.BufIO** @llvm_f
	%99 = bitcast %bout.BufIO* %98 to %bout.BufIO*
	%100 = getelementptr [16 x i8]* @S.652
	%101 = bitcast [16 x i8]* %100 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %99, [0 x i8]* %101)
	br label %L.22
L.22:
	br label %L.4
L.9:
	%102 = load %ast.AstNode** %node
	%103 = icmp ne %ast.AstNode* %102, null
	br i1 %103, label %L.32, label %L.33
L.32:
	%104 = load %type.TypeNode** %t
	%105 = getelementptr %type.TypeNode* %104, i32 0, i32 14
	%106 = load i8* %105
	%107 = icmp eq i8 %106, 2
	br i1 %107, label %L.35, label %L.36
L.35:
	%108 = load %bout.BufIO** @llvm_f
	%109 = bitcast %bout.BufIO* %108 to %bout.BufIO*
	%110 = load %ast.AstNode** %node
	%111 = getelementptr %ast.AstNode* %110, i32 0, i32 10
	%112 = load i64* %111
	call void @bout_uint64(%bout.BufIO* %109, i64 %112)
	br label %L.34
L.36:
	%113 = load %ast.AstNode** %node
	%114 = getelementptr %ast.AstNode* %113, i32 0, i32 0
	%115 = load i8* %114
	%116 = zext i8 %115 to i32
	switch i32 %116, label %L.37 [
		i32 14, label %L.39
		i32 19, label %L.40
		i32 8, label %L.41
	]
L.39:
	%117 = load %bout.BufIO** @llvm_f
	%118 = bitcast %bout.BufIO* %117 to %bout.BufIO*
	%119 = getelementptr [3 x i8]* @S.653
	%120 = bitcast [3 x i8]* %119 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %118, [0 x i8]* %120)
	store i16 0, i16* %i
	br label %L.42
L.42:
	%121 = load %ast.AstNode** %node
	%122 = getelementptr %ast.AstNode* %121, i32 0, i32 13
	%123 = load i16* %i
	%124 = zext i16 %123 to i32
	%125 = getelementptr [0 x %ast.AstNode*]* %122, i32 0, i32 %124
	%126 = load %ast.AstNode** %125
	%127 = getelementptr %ast.AstNode* %126, i32 0, i32 11
	%128 = load %type.TypeNode** %127
	%129 = bitcast %type.TypeNode* %128 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %129)
	%130 = load %bout.BufIO** @llvm_f
	%131 = bitcast %bout.BufIO* %130 to %bout.BufIO*
	%132 = getelementptr [2 x i8]* @S.654
	%133 = bitcast [2 x i8]* %132 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %131, [0 x i8]* %133)
	%134 = load %ast.AstNode** %node
	%135 = getelementptr %ast.AstNode* %134, i32 0, i32 13
	%136 = load i16* %i
	%137 = zext i16 %136 to i32
	%138 = getelementptr [0 x %ast.AstNode*]* %135, i32 0, i32 %137
	%139 = load %ast.AstNode** %138
	%140 = bitcast %ast.AstNode* %139 to %ast.AstNode*
	%141 = load %ast.AstNode** %node
	%142 = getelementptr %ast.AstNode* %141, i32 0, i32 13
	%143 = load i16* %i
	%144 = zext i16 %143 to i32
	%145 = getelementptr [0 x %ast.AstNode*]* %142, i32 0, i32 %144
	%146 = load %ast.AstNode** %145
	%147 = getelementptr %ast.AstNode* %146, i32 0, i32 11
	%148 = load %type.TypeNode** %147
	%149 = bitcast %type.TypeNode* %148 to %type.TypeNode*
	call void @llvm_Constant(%ast.AstNode* %140, %type.TypeNode* %149)
	%150 = load i16* %i
	%151 = add i16 %150, 1
	store i16 %151, i16* %i
	%152 = load i16* %i
	%153 = load %ast.AstNode** %node
	%154 = getelementptr %ast.AstNode* %153, i32 0, i32 2
	%155 = load i16* %154
	%156 = icmp uge i16 %152, %155
	br i1 %156, label %L.43, label %L.44
L.44:
	%157 = load %bout.BufIO** @llvm_f
	%158 = bitcast %bout.BufIO* %157 to %bout.BufIO*
	%159 = getelementptr [3 x i8]* @S.655
	%160 = bitcast [3 x i8]* %159 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %158, [0 x i8]* %160)
	br label %L.42
L.43:
	%161 = load %bout.BufIO** @llvm_f
	%162 = bitcast %bout.BufIO* %161 to %bout.BufIO*
	%163 = getelementptr [3 x i8]* @S.656
	%164 = bitcast [3 x i8]* %163 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %162, [0 x i8]* %164)
	br label %L.38
L.40:
	%165 = load %ast.AstNode** %node
	%166 = getelementptr %ast.AstNode* %165, i32 0, i32 13
	%167 = getelementptr [0 x %ast.AstNode*]* %166, i32 0, i32 0
	%168 = load %ast.AstNode** %167
	%169 = getelementptr %ast.AstNode* %168, i32 0, i32 0
	%170 = load i8* %169
	%171 = icmp eq i8 %170, 8
	br i1 %171, label %L.46, label %L.45
L.46:
	%172 = load %bout.BufIO** @llvm_f
	%173 = bitcast %bout.BufIO* %172 to %bout.BufIO*
	%174 = getelementptr [3 x i8]* @S.657
	%175 = bitcast [3 x i8]* %174 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %173, [0 x i8]* %175)
	%176 = load %type.TypeNode** %t
	%177 = getelementptr %type.TypeNode* %176, i32 0, i32 18
	%178 = load i8* %177
	%179 = icmp ne i8 %178, 0
	br i1 %179, label %L.48, label %L.47
L.48:
	%180 = getelementptr [13 x i8]* @S.658
	%181 = bitcast [13 x i8]* %180 to [0 x i8]*
	%182 = load %ast.AstNode** %node
	%183 = getelementptr %ast.AstNode* %182, i32 0, i32 13
	%184 = getelementptr [0 x %ast.AstNode*]* %183, i32 0, i32 0
	%185 = load %ast.AstNode** %184
	%186 = bitcast %ast.AstNode* %185 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %181, %ast.AstNode* %186)
	br label %L.47
L.47:
	%187 = getelementptr [24 x i8]* @S.659
	%188 = bitcast [24 x i8]* %187 to [0 x i8]*
	%189 = load %ast.AstNode** %node
	%190 = getelementptr %ast.AstNode* %189, i32 0, i32 13
	%191 = getelementptr [0 x %ast.AstNode*]* %190, i32 0, i32 0
	%192 = load %ast.AstNode** %191
	%193 = bitcast %ast.AstNode* %192 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %188, %ast.AstNode* %193)
	%194 = load %type.TypeNode** %t
	%195 = getelementptr %type.TypeNode* %194, i32 0, i32 18
	%196 = load i8* %195
	%197 = icmp ne i8 %196, 0
	br i1 %197, label %L.50, label %L.49
L.50:
	%198 = getelementptr [9 x i8]* @S.660
	%199 = bitcast [9 x i8]* %198 to [0 x i8]*
	%200 = load %ast.AstNode** %node
	%201 = bitcast %ast.AstNode* %200 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %199, %ast.AstNode* %201)
	br label %L.49
L.49:
	br label %L.45
L.45:
	br label %L.38
L.41:
	%n = alloca i16
	%202 = load %type.TypeNode** %t
	%203 = getelementptr %type.TypeNode* %202, i32 0, i32 18
	%204 = load i8* %203
	%205 = icmp ne i8 %204, 0
	br i1 %205, label %L.52, label %L.53
L.52:
	%206 = load %ast.AstNode** %node
	%207 = getelementptr %ast.AstNode* %206, i32 0, i32 11
	%208 = load %type.TypeNode** %207
	%209 = getelementptr %type.TypeNode* %208, i32 0, i32 7
	%210 = load i64* %209
	%211 = trunc i64 %210 to i16
	store i16 %211, i16* %n
	br label %L.51
L.53:
	%212 = load %type.TypeNode** %t
	%213 = getelementptr %type.TypeNode* %212, i32 0, i32 7
	%214 = load i64* %213
	%215 = trunc i64 %214 to i16
	store i16 %215, i16* %n
	br label %L.51
L.51:
	%216 = load %ast.AstNode** %node
	%217 = getelementptr %ast.AstNode* %216, i32 0, i32 12
	%218 = load %symb.SymbNode** %217
	%219 = bitcast %symb.SymbNode* %218 to [0 x i8]*
	%220 = bitcast [0 x i8]* %219 to [0 x i8]*
	%221 = load i16* %n
	call void @llvm_PString([0 x i8]* %220, i16 %221, i8 1)
	br label %L.38
L.37:
	br label %L.38
L.38:
	br label %L.34
L.34:
	br label %L.31
L.33:
	%222 = load %bout.BufIO** @llvm_f
	%223 = bitcast %bout.BufIO* %222 to %bout.BufIO*
	%224 = getelementptr [16 x i8]* @S.661
	%225 = bitcast [16 x i8]* %224 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %223, [0 x i8]* %225)
	br label %L.31
L.31:
	br label %L.4
L.10:
	%226 = load %bout.BufIO** @llvm_f
	%227 = bitcast %bout.BufIO* %226 to %bout.BufIO*
	%228 = getelementptr [5 x i8]* @S.662
	%229 = bitcast [5 x i8]* %228 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %227, [0 x i8]* %229)
	br label %L.4
L.3:
	br label %L.4
L.4:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.663 = internal constant [9 x i8] c", align \00"define internal void @llvm_Alignment(%type.TypeNode* %t.arg) nounwind {
L.0:
	%t = alloca %type.TypeNode*
	store %type.TypeNode* %t.arg, %type.TypeNode** %t
	%n = alloca i32
	%0 = load %type.TypeNode** %t
	%1 = getelementptr %type.TypeNode* %0, i32 0, i32 10
	%2 = load i32* %1
	store i32 %2, i32* %n
	%3 = load i32* %n
	%4 = load %target.TargetT** @target_Target
	%5 = getelementptr %target.TargetT* %4, i32 0, i32 3
	%6 = load i8* %5
	%7 = zext i8 %6 to i32
	%8 = icmp uge i32 %3, %7
	br i1 %8, label %L.2, label %L.1
L.2:
	%9 = load %bout.BufIO** @llvm_f
	%10 = bitcast %bout.BufIO* %9 to %bout.BufIO*
	%11 = getelementptr [9 x i8]* @S.663
	%12 = bitcast [9 x i8]* %11 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %10, [0 x i8]* %12)
	%13 = load %bout.BufIO** @llvm_f
	%14 = bitcast %bout.BufIO* %13 to %bout.BufIO*
	%15 = load i32* %n
	%16 = load %target.TargetT** @target_Target
	%17 = getelementptr %target.TargetT* %16, i32 0, i32 3
	%18 = load i8* %17
	%19 = zext i8 %18 to i32
	%20 = udiv i32 %15, %19
	call void @bout_uint(%bout.BufIO* %14, i32 %20)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.664 = internal constant [16 x i8] c"\09%I = alloca %B\00"@S.665 = internal constant [7 x i8] c"store \00"@S.666 = internal constant [3 x i8] c", \00"@S.667 = internal constant [29 x i8] c"initialized local composites\00"@S.668 = internal constant [25 x i8] c"%I = internal global %B \00"@S.669 = internal constant [16 x i8] c"%I = global %B \00"@S.670 = internal constant [24 x i8] c"%I = external global %B\00"define internal void @llvm_DclVar(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%s = alloca %symb.SymbNode*
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 12
	%2 = load %symb.SymbNode** %1
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %s
	%4 = load %symb.SymbNode** %s
	%5 = icmp ne %symb.SymbNode* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load %symb.SymbNode** %s
	%7 = getelementptr %symb.SymbNode* %6, i32 0, i32 1
	%8 = load %type.TypeNode** %7
	%9 = bitcast %type.TypeNode* %8 to %type.TypeNode*
	call void @llvm_DclType(%type.TypeNode* %9)
	%10 = load %symb.SymbNode** %s
	%11 = getelementptr %symb.SymbNode* %10, i32 0, i32 13
	%12 = load i8* %11
	%13 = zext i8 %12 to i32
	switch i32 %13, label %L.3 [
		i32 0, label %L.5
		i32 1, label %L.6
		i32 2, label %L.7
		i32 3, label %L.8
	]
L.5:
	%14 = getelementptr [16 x i8]* @S.664
	%15 = bitcast [16 x i8]* %14 to [0 x i8]*
	%16 = load %ast.AstNode** %node
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %15, %ast.AstNode* %17)
	%18 = load %ast.AstNode** %node
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 13
	%20 = getelementptr [0 x %ast.AstNode*]* %19, i32 0, i32 0
	%21 = load %ast.AstNode** %20
	%22 = icmp ne %ast.AstNode* %21, null
	br i1 %22, label %L.10, label %L.9
L.10:
	%23 = load %ast.AstNode** %node
	%24 = getelementptr %ast.AstNode* %23, i32 0, i32 11
	%25 = load %type.TypeNode** %24
	%26 = getelementptr %type.TypeNode* %25, i32 0, i32 13
	%27 = load i8* %26
	%28 = icmp ule i8 %27, 4
	br i1 %28, label %L.12, label %L.13
L.12:
	%29 = load %bout.BufIO** @llvm_f
	%30 = bitcast %bout.BufIO* %29 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %30)
	%31 = load %bout.BufIO** @llvm_f
	%32 = bitcast %bout.BufIO* %31 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %32, i8 9)
	%33 = load %bout.BufIO** @llvm_f
	%34 = bitcast %bout.BufIO* %33 to %bout.BufIO*
	%35 = getelementptr [7 x i8]* @S.665
	%36 = bitcast [7 x i8]* %35 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %34, [0 x i8]* %36)
	%37 = load %ast.AstNode** %node
	%38 = getelementptr %ast.AstNode* %37, i32 0, i32 13
	%39 = getelementptr [0 x %ast.AstNode*]* %38, i32 0, i32 0
	%40 = load %ast.AstNode** %39
	%41 = bitcast %ast.AstNode* %40 to %ast.AstNode*
	call void @llvm_NodeType(%ast.AstNode* %41)
	%42 = load %bout.BufIO** @llvm_f
	%43 = bitcast %bout.BufIO* %42 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %43, i8 32)
	%44 = load %ast.AstNode** %node
	%45 = getelementptr %ast.AstNode* %44, i32 0, i32 13
	%46 = getelementptr [0 x %ast.AstNode*]* %45, i32 0, i32 0
	%47 = load %ast.AstNode** %46
	%48 = bitcast %ast.AstNode* %47 to %ast.AstNode*
	call void @llvm_NodeSrc(%ast.AstNode* %48)
	%49 = load %bout.BufIO** @llvm_f
	%50 = bitcast %bout.BufIO* %49 to %bout.BufIO*
	%51 = getelementptr [3 x i8]* @S.666
	%52 = bitcast [3 x i8]* %51 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %50, [0 x i8]* %52)
	%53 = load %ast.AstNode** %node
	%54 = bitcast %ast.AstNode* %53 to %ast.AstNode*
	call void @llvm_NodeType(%ast.AstNode* %54)
	%55 = load %bout.BufIO** @llvm_f
	%56 = bitcast %bout.BufIO* %55 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %56, i8 32)
	%57 = load %ast.AstNode** %node
	%58 = bitcast %ast.AstNode* %57 to %ast.AstNode*
	call void @llvm_NodeDst(%ast.AstNode* %58)
	br label %L.11
L.13:
	%59 = getelementptr [29 x i8]* @S.667
	%60 = bitcast [29 x i8]* %59 to [0 x i8]*
	call void @lex_ErrorS(i8 0, [0 x i8]* %60)
	br label %L.11
L.11:
	br label %L.9
L.9:
	br label %L.4
L.6:
	%61 = getelementptr [25 x i8]* @S.668
	%62 = bitcast [25 x i8]* %61 to [0 x i8]*
	%63 = load %ast.AstNode** %node
	%64 = bitcast %ast.AstNode* %63 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %62, %ast.AstNode* %64)
	%65 = load %ast.AstNode** %node
	%66 = getelementptr %ast.AstNode* %65, i32 0, i32 13
	%67 = getelementptr [0 x %ast.AstNode*]* %66, i32 0, i32 0
	%68 = load %ast.AstNode** %67
	%69 = bitcast %ast.AstNode* %68 to %ast.AstNode*
	%70 = load %ast.AstNode** %node
	%71 = getelementptr %ast.AstNode* %70, i32 0, i32 11
	%72 = load %type.TypeNode** %71
	%73 = bitcast %type.TypeNode* %72 to %type.TypeNode*
	call void @llvm_Constant(%ast.AstNode* %69, %type.TypeNode* %73)
	%74 = load %symb.SymbNode** %s
	%75 = getelementptr %symb.SymbNode* %74, i32 0, i32 1
	%76 = load %type.TypeNode** %75
	%77 = bitcast %type.TypeNode* %76 to %type.TypeNode*
	call void @llvm_Alignment(%type.TypeNode* %77)
	br label %L.4
L.7:
	%78 = getelementptr [16 x i8]* @S.669
	%79 = bitcast [16 x i8]* %78 to [0 x i8]*
	%80 = load %ast.AstNode** %node
	%81 = bitcast %ast.AstNode* %80 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %79, %ast.AstNode* %81)
	%82 = load %ast.AstNode** %node
	%83 = getelementptr %ast.AstNode* %82, i32 0, i32 13
	%84 = getelementptr [0 x %ast.AstNode*]* %83, i32 0, i32 0
	%85 = load %ast.AstNode** %84
	%86 = bitcast %ast.AstNode* %85 to %ast.AstNode*
	%87 = load %ast.AstNode** %node
	%88 = getelementptr %ast.AstNode* %87, i32 0, i32 11
	%89 = load %type.TypeNode** %88
	%90 = bitcast %type.TypeNode* %89 to %type.TypeNode*
	call void @llvm_Constant(%ast.AstNode* %86, %type.TypeNode* %90)
	%91 = load %symb.SymbNode** %s
	%92 = getelementptr %symb.SymbNode* %91, i32 0, i32 1
	%93 = load %type.TypeNode** %92
	%94 = bitcast %type.TypeNode* %93 to %type.TypeNode*
	call void @llvm_Alignment(%type.TypeNode* %94)
	br label %L.4
L.8:
	%95 = getelementptr [24 x i8]* @S.670
	%96 = bitcast [24 x i8]* %95 to [0 x i8]*
	%97 = load %ast.AstNode** %node
	%98 = bitcast %ast.AstNode* %97 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %96, %ast.AstNode* %98)
	br label %L.4
L.3:
	br label %L.4
L.4:
	%99 = load %bout.BufIO** @llvm_f
	%100 = bitcast %bout.BufIO* %99 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %100)
	%101 = getelementptr %A.3* @feature, i32 0, i32 3
	%102 = load i8* %101
	%103 = icmp ne i8 %102, 0
	br i1 %103, label %L.15, label %L.14
L.15:
	%104 = load %symb.SymbNode** %s
	%105 = bitcast %symb.SymbNode* %104 to %symb.SymbNode*
	%106 = call i16 @llvmdb_DefVar(%symb.SymbNode* %105)
	br label %L.14
L.14:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.671 = internal constant [27 x i8] c"%S = internal constant %B \00"define internal void @llvm_DclString(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%n = alloca i16
	%0 = getelementptr [27 x i8]* @S.671
	%1 = bitcast [27 x i8]* %0 to [0 x i8]*
	%2 = load %ast.AstNode** %node
	%3 = bitcast %ast.AstNode* %2 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %1, %ast.AstNode* %3)
	%4 = load %ast.AstNode** %node
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 11
	%6 = load %type.TypeNode** %5
	%7 = getelementptr %type.TypeNode* %6, i32 0, i32 7
	%8 = load i64* %7
	%9 = trunc i64 %8 to i16
	store i16 %9, i16* %n
	%10 = load %ast.AstNode** %node
	%11 = getelementptr %ast.AstNode* %10, i32 0, i32 12
	%12 = load %symb.SymbNode** %11
	%13 = bitcast %symb.SymbNode* %12 to [0 x i8]*
	%14 = bitcast [0 x i8]* %13 to [0 x i8]*
	%15 = load i16* %n
	call void @llvm_PString([0 x i8]* %14, i16 %15, i8 1)
	br label %return
return:
	ret void
}
@S.672 = internal constant [3 x i8] c";\0A\00"define internal void @llvm_ConstScan(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%i = alloca i16
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 0
	%2 = load i8* %1
	%3 = icmp eq i8 %2, 19
	br i1 %3, label %L.1, label %L.2
L.1:
	%4 = load %ast.AstNode** %node
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 13
	%6 = getelementptr [0 x %ast.AstNode*]* %5, i32 0, i32 0
	%7 = load %ast.AstNode** %6
	%8 = getelementptr %ast.AstNode* %7, i32 0, i32 0
	%9 = load i8* %8
	%10 = icmp eq i8 %9, 8
	br label %L.2
L.2:
	%11 = phi i1 [ false, %L.0 ], [ %10, %L.1 ]
	br i1 %11, label %L.4, label %L.5
L.4:
	%12 = load %ast.AstNode** %node
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 13
	%14 = getelementptr [0 x %ast.AstNode*]* %13, i32 0, i32 0
	%15 = load %ast.AstNode** %14
	%16 = bitcast %ast.AstNode* %15 to %ast.AstNode*
	call void @llvm_DclString(%ast.AstNode* %16)
	%17 = load %bout.BufIO** @llvm_f
	%18 = bitcast %bout.BufIO* %17 to %bout.BufIO*
	%19 = getelementptr [3 x i8]* @S.672
	%20 = bitcast [3 x i8]* %19 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %18, [0 x i8]* %20)
	br label %L.3
L.5:
	store i16 0, i16* %i
	br label %L.6
L.6:
	%21 = load i16* %i
	%22 = load %ast.AstNode** %node
	%23 = getelementptr %ast.AstNode* %22, i32 0, i32 2
	%24 = load i16* %23
	%25 = icmp ult i16 %21, %24
	%26 = xor i1 %25, true
	br i1 %26, label %L.7, label %L.8
L.8:
	%27 = load %ast.AstNode** %node
	%28 = getelementptr %ast.AstNode* %27, i32 0, i32 13
	%29 = load i16* %i
	%30 = zext i16 %29 to i32
	%31 = getelementptr [0 x %ast.AstNode*]* %28, i32 0, i32 %30
	%32 = load %ast.AstNode** %31
	%33 = bitcast %ast.AstNode* %32 to %ast.AstNode*
	call void @llvm_ConstScan(%ast.AstNode* %33)
	%34 = load i16* %i
	%35 = add i16 %34, 1
	store i16 %35, i16* %i
	br label %L.6
L.7:
	br label %L.3
L.3:
	br label %return
return:
	ret void
}
@S.673 = internal constant [27 x i8] c"%I = internal constant %B \00"@S.674 = internal constant [18 x i8] c"%I = constant %B \00"define internal void @llvm_DclCon(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%s = alloca %symb.SymbNode*
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 12
	%2 = load %symb.SymbNode** %1
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %s
	%4 = load %symb.SymbNode** %s
	%5 = icmp ne %symb.SymbNode* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load %symb.SymbNode** %s
	%7 = getelementptr %symb.SymbNode* %6, i32 0, i32 1
	%8 = load %type.TypeNode** %7
	%9 = bitcast %type.TypeNode* %8 to %type.TypeNode*
	call void @llvm_DclType(%type.TypeNode* %9)
	%10 = load %ast.AstNode** %node
	%11 = bitcast %ast.AstNode* %10 to %ast.AstNode*
	call void @llvm_ConstScan(%ast.AstNode* %11)
	%12 = load %symb.SymbNode** %s
	%13 = getelementptr %symb.SymbNode* %12, i32 0, i32 13
	%14 = load i8* %13
	%15 = zext i8 %14 to i32
	switch i32 %15, label %L.3 [
		i32 1, label %L.5
		i32 2, label %L.6
	]
L.5:
	%16 = getelementptr [27 x i8]* @S.673
	%17 = bitcast [27 x i8]* %16 to [0 x i8]*
	%18 = load %ast.AstNode** %node
	%19 = bitcast %ast.AstNode* %18 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %17, %ast.AstNode* %19)
	br label %L.4
L.6:
	%20 = getelementptr [18 x i8]* @S.674
	%21 = bitcast [18 x i8]* %20 to [0 x i8]*
	%22 = load %ast.AstNode** %node
	%23 = bitcast %ast.AstNode* %22 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %21, %ast.AstNode* %23)
	br label %L.4
L.3:
	br label %L.4
L.4:
	%24 = load %ast.AstNode** %node
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 13
	%26 = getelementptr [0 x %ast.AstNode*]* %25, i32 0, i32 0
	%27 = load %ast.AstNode** %26
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	%29 = load %ast.AstNode** %node
	%30 = getelementptr %ast.AstNode* %29, i32 0, i32 11
	%31 = load %type.TypeNode** %30
	%32 = bitcast %type.TypeNode* %31 to %type.TypeNode*
	call void @llvm_Constant(%ast.AstNode* %28, %type.TypeNode* %32)
	%33 = load %symb.SymbNode** %s
	%34 = getelementptr %symb.SymbNode* %33, i32 0, i32 1
	%35 = load %type.TypeNode** %34
	%36 = bitcast %type.TypeNode* %35 to %type.TypeNode*
	call void @llvm_Alignment(%type.TypeNode* %36)
	br label %L.1
L.1:
	%37 = load %bout.BufIO** @llvm_f
	%38 = bitcast %bout.BufIO* %37 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %38)
	br label %return
return:
	ret void
}
@S.675 = internal constant [27 x i8] c"%S = internal constant %B \00"define internal void @llvm_DclAggregate(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%0 = load %ast.AstNode** %node
	%1 = bitcast %ast.AstNode* %0 to %ast.AstNode*
	call void @llvm_ConstScan(%ast.AstNode* %1)
	%2 = getelementptr [27 x i8]* @S.675
	%3 = bitcast [27 x i8]* %2 to [0 x i8]*
	%4 = load %ast.AstNode** %node
	%5 = bitcast %ast.AstNode* %4 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %3, %ast.AstNode* %5)
	%6 = load %ast.AstNode** %node
	%7 = bitcast %ast.AstNode* %6 to %ast.AstNode*
	%8 = load %ast.AstNode** %node
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 11
	%10 = load %type.TypeNode** %9
	%11 = bitcast %type.TypeNode* %10 to %type.TypeNode*
	call void @llvm_Constant(%ast.AstNode* %7, %type.TypeNode* %11)
	br label %return
return:
	ret void
}
@S.676 = internal constant [72 x i8] c"declare void @llvm.memcpy.p0i8.p0i8.%W(i8*, i8*, %W, i32, i1) nounwind\0A\00"@S.677 = internal constant [58 x i8] c"declare void @llvm.memcpy.%W(i8*, i8*, %W, i32) nounwind\0A\00"@S.678 = internal constant [34 x i8] c"declare i16 @llvm.bswap.i16(i16)\0A\00"@S.679 = internal constant [34 x i8] c"declare i32 @llvm.bswap.i32(i32)\0A\00"@S.680 = internal constant [34 x i8] c"declare i64 @llvm.bswap.i64(i64)\0A\00"@S.681 = internal constant [46 x i8] c"declare i1 @_builtin.memcmp.i8(i8*, i8*, %W)\0A\00"@S.682 = internal constant [49 x i8] c"declare i1 @_builtin.memcmp.i16(i16*, i16*, %W)\0A\00"@S.683 = internal constant [49 x i8] c"declare i1 @_builtin.memcmp.i32(i32*, i32*, %W)\0A\00"@S.684 = internal constant [49 x i8] c"declare i1 @_builtin.memcmp.i64(i64*, i64*, %W)\0A\00"define internal void @llvm_Declare() nounwind {
L.0:
	%i = alloca i8
	store i8 0, i8* %i
	br label %L.1
L.1:
	%0 = load i8* %i
	%1 = icmp ult i8 %0, 9
	%2 = xor i1 %1, true
	br i1 %2, label %L.2, label %L.3
L.3:
	%3 = load i8* %i
	%4 = zext i8 %3 to i32
	%5 = getelementptr [10 x i8]* @llvm_UseIntrinsic, i32 0, i32 %4
	%6 = load i8* %5
	%7 = icmp ne i8 %6, 0
	br i1 %7, label %L.5, label %L.4
L.5:
	%8 = load i8* %i
	%9 = zext i8 %8 to i32
	switch i32 %9, label %L.6 [
		i32 0, label %L.8
		i32 2, label %L.9
		i32 3, label %L.10
		i32 4, label %L.11
		i32 5, label %L.12
		i32 6, label %L.13
		i32 7, label %L.14
		i32 8, label %L.15
	]
L.8:
	%10 = icmp ne i8 1, 0
	br i1 %10, label %L.17, label %L.18
L.17:
	%11 = getelementptr [72 x i8]* @S.676
	%12 = bitcast [72 x i8]* %11 to [0 x i8]*
	%13 = bitcast %ast.AstNode* null to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %12, %ast.AstNode* %13)
	br label %L.16
L.18:
	%14 = getelementptr [58 x i8]* @S.677
	%15 = bitcast [58 x i8]* %14 to [0 x i8]*
	%16 = bitcast %ast.AstNode* null to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %15, %ast.AstNode* %16)
	br label %L.16
L.16:
	br label %L.7
L.9:
	%17 = getelementptr [34 x i8]* @S.678
	%18 = bitcast [34 x i8]* %17 to [0 x i8]*
	%19 = bitcast %ast.AstNode* null to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %18, %ast.AstNode* %19)
	br label %L.7
L.10:
	%20 = getelementptr [34 x i8]* @S.679
	%21 = bitcast [34 x i8]* %20 to [0 x i8]*
	%22 = bitcast %ast.AstNode* null to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %21, %ast.AstNode* %22)
	br label %L.7
L.11:
	%23 = getelementptr [34 x i8]* @S.680
	%24 = bitcast [34 x i8]* %23 to [0 x i8]*
	%25 = bitcast %ast.AstNode* null to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %24, %ast.AstNode* %25)
	br label %L.7
L.12:
	%26 = getelementptr [46 x i8]* @S.681
	%27 = bitcast [46 x i8]* %26 to [0 x i8]*
	%28 = bitcast %ast.AstNode* null to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %27, %ast.AstNode* %28)
	br label %L.7
L.13:
	%29 = getelementptr [49 x i8]* @S.682
	%30 = bitcast [49 x i8]* %29 to [0 x i8]*
	%31 = bitcast %ast.AstNode* null to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %30, %ast.AstNode* %31)
	br label %L.7
L.14:
	%32 = getelementptr [49 x i8]* @S.683
	%33 = bitcast [49 x i8]* %32 to [0 x i8]*
	%34 = bitcast %ast.AstNode* null to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %33, %ast.AstNode* %34)
	br label %L.7
L.15:
	%35 = getelementptr [49 x i8]* @S.684
	%36 = bitcast [49 x i8]* %35 to [0 x i8]*
	%37 = bitcast %ast.AstNode* null to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %36, %ast.AstNode* %37)
	br label %L.7
L.6:
	br label %L.7
L.7:
	br label %L.4
L.4:
	%38 = load i8* %i
	%39 = add i8 %38, 1
	store i8 %39, i8* %i
	br label %L.1
L.2:
	br label %return
return:
	ret void
}
@S.685 = internal constant [3 x i8] c"L.\00"define internal void @llvm_PLabel(i16 zeroext %n.arg) nounwind {
L.0:
	%n = alloca i16
	store i16 %n.arg, i16* %n
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [3 x i8]* @S.685
	%3 = bitcast [3 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load %bout.BufIO** @llvm_f
	%5 = bitcast %bout.BufIO* %4 to %bout.BufIO*
	%6 = load i16* %n
	%7 = zext i16 %6 to i32
	call void @bout_uint(%bout.BufIO* %5, i32 %7)
	br label %return
return:
	ret void
}
@S.686 = internal constant [3 x i8] c":\0A\00"define internal void @llvm_Label(i16 zeroext %n.arg) nounwind {
L.0:
	%n = alloca i16
	store i16 %n.arg, i16* %n
	%0 = load i16* %n
	call void @llvm_PLabel(i16 %0)
	%1 = load %bout.BufIO** @llvm_f
	%2 = bitcast %bout.BufIO* %1 to %bout.BufIO*
	%3 = getelementptr [3 x i8]* @S.686
	%4 = bitcast [3 x i8]* %3 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %2, [0 x i8]* %4)
	%5 = load i16* %n
	store i16 %5, i16* @llvm_labthis
	br label %return
return:
	ret void
}
@S.687 = internal constant [8 x i8] c"label %\00"define internal void @llvm_RefLabel(i16 zeroext %n.arg) nounwind {
L.0:
	%n = alloca i16
	store i16 %n.arg, i16* %n
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [8 x i8]* @S.687
	%3 = bitcast [8 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load i16* %n
	call void @llvm_PLabel(i16 %4)
	br label %return
return:
	ret void
}
@S.688 = internal constant [5 x i8] c"\09br \00"define internal void @llvm_Branch(i16 zeroext %n.arg) nounwind {
L.0:
	%n = alloca i16
	store i16 %n.arg, i16* %n
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [5 x i8]* @S.688
	%3 = bitcast [5 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load i16* %n
	call void @llvm_RefLabel(i16 %4)
	%5 = load %bout.BufIO** @llvm_f
	%6 = bitcast %bout.BufIO* %5 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %6)
	br label %return
return:
	ret void
}
@S.689 = internal constant [8 x i8] c"\09br i1 \00"@S.690 = internal constant [3 x i8] c", \00"@S.691 = internal constant [3 x i8] c", \00"define internal void @llvm_BranchConditional(%ast.AstNode* %node.arg, i16 zeroext %ntrue.arg, i16 zeroext %nfalse.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	%ntrue = alloca i16
	%nfalse = alloca i16
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	store i16 %ntrue.arg, i16* %ntrue
	store i16 %nfalse.arg, i16* %nfalse
	%0 = load %bout.BufIO** @llvm_f
	%1 = bitcast %bout.BufIO* %0 to %bout.BufIO*
	%2 = getelementptr [8 x i8]* @S.689
	%3 = bitcast [8 x i8]* %2 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %1, [0 x i8]* %3)
	%4 = load %ast.AstNode** %node
	%5 = bitcast %ast.AstNode* %4 to %ast.AstNode*
	call void @llvm_NodeSrc(%ast.AstNode* %5)
	%6 = load %bout.BufIO** @llvm_f
	%7 = bitcast %bout.BufIO* %6 to %bout.BufIO*
	%8 = getelementptr [3 x i8]* @S.690
	%9 = bitcast [3 x i8]* %8 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %7, [0 x i8]* %9)
	%10 = load i16* %ntrue
	call void @llvm_RefLabel(i16 %10)
	%11 = load %bout.BufIO** @llvm_f
	%12 = bitcast %bout.BufIO* %11 to %bout.BufIO*
	%13 = getelementptr [3 x i8]* @S.691
	%14 = bitcast [3 x i8]* %13 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %12, [0 x i8]* %14)
	%15 = load i16* %nfalse
	call void @llvm_RefLabel(i16 %15)
	%16 = load %bout.BufIO** @llvm_f
	%17 = bitcast %bout.BufIO* %16 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %17)
	br label %return
return:
	ret void
}
define internal zeroext i8 @llvm_If(%ast.AstNode* %node.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%labend = alloca i16
	%labtrue = alloca i16
	%labfalse = alloca i16
	%term = alloca i8
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 13
	%2 = getelementptr [0 x %ast.AstNode*]* %1, i32 0, i32 0
	%3 = load %ast.AstNode** %2
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	%5 = call i8 @llvm_GenSub(%ast.AstNode* %4)
	%6 = load i16* @llvm_Lseqno
	store i16 %6, i16* %labend
	%7 = load i16* @llvm_Lseqno
	%8 = add i16 %7, 1
	store i16 %8, i16* @llvm_Lseqno
	%9 = load i16* @llvm_Lseqno
	store i16 %9, i16* %labtrue
	%10 = load i16* @llvm_Lseqno
	%11 = add i16 %10, 1
	store i16 %11, i16* @llvm_Lseqno
	%12 = load %ast.AstNode** %node
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 13
	%14 = getelementptr [0 x %ast.AstNode*]* %13, i32 0, i32 2
	%15 = load %ast.AstNode** %14
	%16 = icmp ne %ast.AstNode* %15, null
	br i1 %16, label %L.2, label %L.3
L.2:
	%17 = load i16* @llvm_Lseqno
	store i16 %17, i16* %labfalse
	%18 = load i16* @llvm_Lseqno
	%19 = add i16 %18, 1
	store i16 %19, i16* @llvm_Lseqno
	br label %L.1
L.3:
	%20 = load i16* %labend
	store i16 %20, i16* %labfalse
	br label %L.1
L.1:
	%21 = load %ast.AstNode** %node
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 13
	%23 = getelementptr [0 x %ast.AstNode*]* %22, i32 0, i32 0
	%24 = load %ast.AstNode** %23
	%25 = bitcast %ast.AstNode* %24 to %ast.AstNode*
	%26 = load i16* %labtrue
	%27 = load i16* %labfalse
	call void @llvm_BranchConditional(%ast.AstNode* %25, i16 %26, i16 %27)
	%28 = load i16* %labtrue
	call void @llvm_Label(i16 %28)
	%29 = load %ast.AstNode** %node
	%30 = getelementptr %ast.AstNode* %29, i32 0, i32 13
	%31 = getelementptr [0 x %ast.AstNode*]* %30, i32 0, i32 1
	%32 = load %ast.AstNode** %31
	%33 = bitcast %ast.AstNode* %32 to %ast.AstNode*
	%34 = call i8 @llvm_GenSub(%ast.AstNode* %33)
	store i8 %34, i8* %term
	%35 = load i8* %term
	%36 = icmp ne i8 %35, 0
	%37 = xor i1 %36, true
	br i1 %37, label %L.5, label %L.4
L.5:
	%38 = load i16* %labend
	call void @llvm_Branch(i16 %38)
	br label %L.4
L.4:
	%39 = load %ast.AstNode** %node
	%40 = getelementptr %ast.AstNode* %39, i32 0, i32 13
	%41 = getelementptr [0 x %ast.AstNode*]* %40, i32 0, i32 2
	%42 = load %ast.AstNode** %41
	%43 = icmp ne %ast.AstNode* %42, null
	br i1 %43, label %L.7, label %L.6
L.7:
	%44 = load i16* %labfalse
	call void @llvm_Label(i16 %44)
	%45 = load %ast.AstNode** %node
	%46 = getelementptr %ast.AstNode* %45, i32 0, i32 13
	%47 = getelementptr [0 x %ast.AstNode*]* %46, i32 0, i32 2
	%48 = load %ast.AstNode** %47
	%49 = bitcast %ast.AstNode* %48 to %ast.AstNode*
	%50 = call i8 @llvm_GenSub(%ast.AstNode* %49)
	store i8 %50, i8* %term
	%51 = load i8* %term
	%52 = icmp ne i8 %51, 0
	%53 = xor i1 %52, true
	br i1 %53, label %L.9, label %L.8
L.9:
	%54 = load i16* %labend
	call void @llvm_Branch(i16 %54)
	br label %L.8
L.8:
	br label %L.6
L.6:
	%55 = load i16* %labend
	call void @llvm_Label(i16 %55)
	store i8 0, i8* %rv.0
	br label %return
return:
	%56 = load i8* %rv.0
	ret i8 %56
}
@S.692 = internal constant [16 x i8] c"\09switch %T %N, \00"@S.693 = internal constant [4 x i8] c" [\0A\00"@S.694 = internal constant [7 x i8] c"\09\09%0T \00"@S.695 = internal constant [3 x i8] c", \00"@S.696 = internal constant [4 x i8] c"\09]\0A\00"define internal zeroext i8 @llvm_Select(%ast.AstNode* %node.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%i = alloca i16
	%j = alloca i16
	%isnode = alloca %ast.AstNode*
	%selnode = alloca %ast.AstNode*
	%labend = alloca i16
	%labelse = alloca i16
	%lo = alloca i64
	%hi = alloca i64
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 13
	%2 = getelementptr [0 x %ast.AstNode*]* %1, i32 0, i32 0
	%3 = load %ast.AstNode** %2
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	%5 = load %type.TypeNode** @type_wordtype
	%6 = bitcast %type.TypeNode* %5 to %type.TypeNode*
	%7 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %4, %type.TypeNode* %6)
	%8 = bitcast %ast.AstNode* %7 to %ast.AstNode*
	%9 = load %ast.AstNode** %node
	%10 = getelementptr %ast.AstNode* %9, i32 0, i32 13
	%11 = getelementptr [0 x %ast.AstNode*]* %10, i32 0, i32 0
	store %ast.AstNode* %8, %ast.AstNode** %11
	%12 = load %ast.AstNode** %node
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 13
	%14 = getelementptr [0 x %ast.AstNode*]* %13, i32 0, i32 0
	%15 = load %ast.AstNode** %14
	%16 = bitcast %ast.AstNode* %15 to %ast.AstNode*
	%17 = call i8 @llvm_GenSub(%ast.AstNode* %16)
	%18 = load i16* @llvm_Lseqno
	store i16 %18, i16* %labelse
	%19 = load i16* @llvm_Lseqno
	%20 = add i16 %19, 1
	store i16 %20, i16* @llvm_Lseqno
	%21 = load i16* @llvm_Lseqno
	store i16 %21, i16* %labend
	%22 = load i16* @llvm_Lseqno
	%23 = add i16 %22, 1
	store i16 %23, i16* @llvm_Lseqno
	%24 = getelementptr [16 x i8]* @S.692
	%25 = bitcast [16 x i8]* %24 to [0 x i8]*
	%26 = load %ast.AstNode** %node
	%27 = getelementptr %ast.AstNode* %26, i32 0, i32 13
	%28 = getelementptr [0 x %ast.AstNode*]* %27, i32 0, i32 0
	%29 = load %ast.AstNode** %28
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %25, %ast.AstNode* %30)
	%31 = load i16* %labelse
	call void @llvm_RefLabel(i16 %31)
	%32 = load %bout.BufIO** @llvm_f
	%33 = bitcast %bout.BufIO* %32 to %bout.BufIO*
	%34 = getelementptr [4 x i8]* @S.693
	%35 = bitcast [4 x i8]* %34 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %33, [0 x i8]* %35)
	store i16 1, i16* %i
	br label %L.1
L.1:
	%36 = load i16* %i
	%37 = load %ast.AstNode** %node
	%38 = getelementptr %ast.AstNode* %37, i32 0, i32 2
	%39 = load i16* %38
	%40 = sub i16 %39, 1
	%41 = icmp ult i16 %36, %40
	%42 = xor i1 %41, true
	br i1 %42, label %L.2, label %L.3
L.3:
	%43 = load %ast.AstNode** %node
	%44 = getelementptr %ast.AstNode* %43, i32 0, i32 13
	%45 = load i16* %i
	%46 = zext i16 %45 to i32
	%47 = getelementptr [0 x %ast.AstNode*]* %44, i32 0, i32 %46
	%48 = load %ast.AstNode** %47
	%49 = bitcast %ast.AstNode* %48 to %ast.AstNode*
	store %ast.AstNode* %49, %ast.AstNode** %isnode
	%50 = load %ast.AstNode** %isnode
	%51 = getelementptr %ast.AstNode* %50, i32 0, i32 0
	%52 = load i8* %51
	%53 = icmp eq i8 %52, 69
	br i1 %53, label %L.5, label %L.4
L.5:
	%54 = load i16* @llvm_Lseqno
	%55 = load %ast.AstNode** %isnode
	%56 = getelementptr %ast.AstNode* %55, i32 0, i32 9
	store i16 %54, i16* %56
	%57 = load i16* @llvm_Lseqno
	%58 = add i16 %57, 1
	store i16 %58, i16* @llvm_Lseqno
	store i16 0, i16* %j
	br label %L.6
L.6:
	%59 = load i16* %j
	%60 = load %ast.AstNode** %isnode
	%61 = getelementptr %ast.AstNode* %60, i32 0, i32 2
	%62 = load i16* %61
	%63 = sub i16 %62, 1
	%64 = icmp ult i16 %59, %63
	%65 = xor i1 %64, true
	br i1 %65, label %L.7, label %L.8
L.8:
	%66 = load %ast.AstNode** %isnode
	%67 = getelementptr %ast.AstNode* %66, i32 0, i32 13
	%68 = load i16* %j
	%69 = zext i16 %68 to i32
	%70 = getelementptr [0 x %ast.AstNode*]* %67, i32 0, i32 %69
	%71 = load %ast.AstNode** %70
	%72 = bitcast %ast.AstNode* %71 to %ast.AstNode*
	store %ast.AstNode* %72, %ast.AstNode** %selnode
	store i64 0, i64* %lo
	store i64 0, i64* %hi
	%73 = load %ast.AstNode** %selnode
	%74 = getelementptr %ast.AstNode* %73, i32 0, i32 0
	%75 = load i8* %74
	%76 = zext i8 %75 to i32
	switch i32 %76, label %L.9 [
		i32 7, label %L.11
		i32 13, label %L.12
	]
L.11:
	%77 = load %ast.AstNode** %selnode
	%78 = getelementptr %ast.AstNode* %77, i32 0, i32 10
	%79 = load i64* %78
	store i64 %79, i64* %lo
	%80 = load i64* %lo
	store i64 %80, i64* %hi
	br label %L.10
L.12:
	%81 = load %ast.AstNode** %selnode
	%82 = getelementptr %ast.AstNode* %81, i32 0, i32 13
	%83 = getelementptr [0 x %ast.AstNode*]* %82, i32 0, i32 0
	%84 = load %ast.AstNode** %83
	%85 = getelementptr %ast.AstNode* %84, i32 0, i32 0
	%86 = load i8* %85
	%87 = icmp eq i8 %86, 7
	br i1 %87, label %L.13, label %L.14
L.13:
	%88 = load %ast.AstNode** %selnode
	%89 = getelementptr %ast.AstNode* %88, i32 0, i32 13
	%90 = getelementptr [0 x %ast.AstNode*]* %89, i32 0, i32 1
	%91 = load %ast.AstNode** %90
	%92 = getelementptr %ast.AstNode* %91, i32 0, i32 0
	%93 = load i8* %92
	%94 = icmp eq i8 %93, 7
	br label %L.14
L.14:
	%95 = phi i1 [ false, %L.12 ], [ %94, %L.13 ]
	br i1 %95, label %L.16, label %L.15
L.16:
	%96 = load %ast.AstNode** %selnode
	%97 = getelementptr %ast.AstNode* %96, i32 0, i32 13
	%98 = getelementptr [0 x %ast.AstNode*]* %97, i32 0, i32 0
	%99 = load %ast.AstNode** %98
	%100 = getelementptr %ast.AstNode* %99, i32 0, i32 10
	%101 = load i64* %100
	store i64 %101, i64* %lo
	%102 = load %ast.AstNode** %selnode
	%103 = getelementptr %ast.AstNode* %102, i32 0, i32 13
	%104 = getelementptr [0 x %ast.AstNode*]* %103, i32 0, i32 1
	%105 = load %ast.AstNode** %104
	%106 = getelementptr %ast.AstNode* %105, i32 0, i32 10
	%107 = load i64* %106
	store i64 %107, i64* %hi
	br label %L.15
L.15:
	br label %L.10
L.9:
	br label %L.10
L.10:
	br label %L.17
L.17:
	%108 = load i64* %lo
	%109 = load i64* %hi
	%110 = icmp ule i64 %108, %109
	%111 = xor i1 %110, true
	br i1 %111, label %L.18, label %L.19
L.19:
	%112 = getelementptr [7 x i8]* @S.694
	%113 = bitcast [7 x i8]* %112 to [0 x i8]*
	%114 = load %ast.AstNode** %node
	%115 = bitcast %ast.AstNode* %114 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %113, %ast.AstNode* %115)
	%116 = load %bout.BufIO** @llvm_f
	%117 = bitcast %bout.BufIO* %116 to %bout.BufIO*
	%118 = load i64* %lo
	%119 = trunc i64 %118 to i32
	call void @bout_uint32(%bout.BufIO* %117, i32 %119)
	%120 = load %bout.BufIO** @llvm_f
	%121 = bitcast %bout.BufIO* %120 to %bout.BufIO*
	%122 = getelementptr [3 x i8]* @S.695
	%123 = bitcast [3 x i8]* %122 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %121, [0 x i8]* %123)
	%124 = load %ast.AstNode** %isnode
	%125 = getelementptr %ast.AstNode* %124, i32 0, i32 9
	%126 = load i16* %125
	call void @llvm_RefLabel(i16 %126)
	%127 = load %bout.BufIO** @llvm_f
	%128 = bitcast %bout.BufIO* %127 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %128)
	%129 = load i64* %lo
	%130 = add i64 %129, 1
	store i64 %130, i64* %lo
	br label %L.17
L.18:
	%131 = load i16* %j
	%132 = add i16 %131, 1
	store i16 %132, i16* %j
	br label %L.6
L.7:
	br label %L.4
L.4:
	%133 = load i16* %i
	%134 = add i16 %133, 1
	store i16 %134, i16* %i
	br label %L.1
L.2:
	%135 = load %bout.BufIO** @llvm_f
	%136 = bitcast %bout.BufIO* %135 to %bout.BufIO*
	%137 = getelementptr [4 x i8]* @S.696
	%138 = bitcast [4 x i8]* %137 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %136, [0 x i8]* %138)
	store i16 1, i16* %i
	br label %L.20
L.20:
	%139 = load i16* %i
	%140 = load %ast.AstNode** %node
	%141 = getelementptr %ast.AstNode* %140, i32 0, i32 2
	%142 = load i16* %141
	%143 = sub i16 %142, 1
	%144 = icmp ult i16 %139, %143
	%145 = xor i1 %144, true
	br i1 %145, label %L.21, label %L.22
L.22:
	%146 = load %ast.AstNode** %node
	%147 = getelementptr %ast.AstNode* %146, i32 0, i32 13
	%148 = load i16* %i
	%149 = zext i16 %148 to i32
	%150 = getelementptr [0 x %ast.AstNode*]* %147, i32 0, i32 %149
	%151 = load %ast.AstNode** %150
	%152 = bitcast %ast.AstNode* %151 to %ast.AstNode*
	store %ast.AstNode* %152, %ast.AstNode** %isnode
	%153 = load %ast.AstNode** %isnode
	%154 = getelementptr %ast.AstNode* %153, i32 0, i32 9
	%155 = load i16* %154
	call void @llvm_Label(i16 %155)
	%156 = load %ast.AstNode** %isnode
	%157 = getelementptr %ast.AstNode* %156, i32 0, i32 13
	%158 = load %ast.AstNode** %isnode
	%159 = getelementptr %ast.AstNode* %158, i32 0, i32 2
	%160 = load i16* %159
	%161 = sub i16 %160, 1
	%162 = zext i16 %161 to i32
	%163 = getelementptr [0 x %ast.AstNode*]* %157, i32 0, i32 %162
	%164 = load %ast.AstNode** %163
	%165 = bitcast %ast.AstNode* %164 to %ast.AstNode*
	%166 = call i8 @llvm_GenSub(%ast.AstNode* %165)
	%167 = icmp ne i8 %166, 0
	%168 = xor i1 %167, true
	br i1 %168, label %L.24, label %L.23
L.24:
	%169 = load i16* %labend
	call void @llvm_Branch(i16 %169)
	br label %L.23
L.23:
	%170 = load i16* %i
	%171 = add i16 %170, 1
	store i16 %171, i16* %i
	br label %L.20
L.21:
	%172 = load i16* %labelse
	call void @llvm_Label(i16 %172)
	%173 = load %ast.AstNode** %node
	%174 = getelementptr %ast.AstNode* %173, i32 0, i32 13
	%175 = load %ast.AstNode** %node
	%176 = getelementptr %ast.AstNode* %175, i32 0, i32 2
	%177 = load i16* %176
	%178 = sub i16 %177, 1
	%179 = zext i16 %178 to i32
	%180 = getelementptr [0 x %ast.AstNode*]* %174, i32 0, i32 %179
	%181 = load %ast.AstNode** %180
	%182 = bitcast %ast.AstNode* %181 to %ast.AstNode*
	%183 = call i8 @llvm_GenSub(%ast.AstNode* %182)
	%184 = icmp ne i8 %183, 0
	%185 = xor i1 %184, true
	br i1 %185, label %L.26, label %L.25
L.26:
	%186 = load i16* %labend
	call void @llvm_Branch(i16 %186)
	br label %L.25
L.25:
	%187 = load i16* %labend
	call void @llvm_Label(i16 %187)
	store i8 0, i8* %rv.0
	br label %return
return:
	%188 = load i8* %rv.0
	ret i8 %188
}
define internal zeroext i8 @llvm_Loop(%ast.AstNode* %node.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%loopcont = alloca i16
	%saveexit = alloca i16
	%0 = load i16* @llvm_loopexit
	store i16 %0, i16* %saveexit
	%1 = load i16* @llvm_Lseqno
	store i16 %1, i16* %loopcont
	%2 = load i16* @llvm_Lseqno
	%3 = add i16 %2, 1
	store i16 %3, i16* @llvm_Lseqno
	%4 = load i16* @llvm_Lseqno
	store i16 %4, i16* @llvm_loopexit
	%5 = load i16* @llvm_Lseqno
	%6 = add i16 %5, 1
	store i16 %6, i16* @llvm_Lseqno
	%7 = load i16* %loopcont
	call void @llvm_Branch(i16 %7)
	%8 = load i16* %loopcont
	call void @llvm_Label(i16 %8)
	%9 = load %ast.AstNode** %node
	%10 = getelementptr %ast.AstNode* %9, i32 0, i32 13
	%11 = getelementptr [0 x %ast.AstNode*]* %10, i32 0, i32 0
	%12 = load %ast.AstNode** %11
	%13 = bitcast %ast.AstNode* %12 to %ast.AstNode*
	%14 = call i8 @llvm_GenSub(%ast.AstNode* %13)
	%15 = load i16* %loopcont
	call void @llvm_Branch(i16 %15)
	%16 = load i16* @llvm_loopexit
	call void @llvm_Label(i16 %16)
	%17 = load i16* %saveexit
	store i16 %17, i16* @llvm_loopexit
	store i8 0, i8* %rv.0
	br label %return
return:
	%18 = load i8* %rv.0
	ret i8 %18
}
define internal zeroext i8 @llvm_Exit(%ast.AstNode* %node.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%labtrue = alloca i16
	%labfalse = alloca i16
	%term = alloca i8
	%0 = load i16* @llvm_Lseqno
	store i16 %0, i16* %labfalse
	%1 = load i16* @llvm_Lseqno
	%2 = add i16 %1, 1
	store i16 %2, i16* @llvm_Lseqno
	%3 = load %ast.AstNode** %node
	%4 = getelementptr %ast.AstNode* %3, i32 0, i32 13
	%5 = getelementptr [0 x %ast.AstNode*]* %4, i32 0, i32 0
	%6 = load %ast.AstNode** %5
	%7 = bitcast %ast.AstNode* %6 to %ast.AstNode*
	%8 = call i8 @llvm_GenSub(%ast.AstNode* %7)
	%9 = load %ast.AstNode** %node
	%10 = getelementptr %ast.AstNode* %9, i32 0, i32 13
	%11 = getelementptr [0 x %ast.AstNode*]* %10, i32 0, i32 1
	%12 = load %ast.AstNode** %11
	%13 = icmp ne %ast.AstNode* %12, null
	br i1 %13, label %L.2, label %L.3
L.2:
	%14 = load i16* @llvm_Lseqno
	store i16 %14, i16* %labtrue
	%15 = load i16* @llvm_Lseqno
	%16 = add i16 %15, 1
	store i16 %16, i16* @llvm_Lseqno
	%17 = load %ast.AstNode** %node
	%18 = getelementptr %ast.AstNode* %17, i32 0, i32 13
	%19 = getelementptr [0 x %ast.AstNode*]* %18, i32 0, i32 0
	%20 = load %ast.AstNode** %19
	%21 = bitcast %ast.AstNode* %20 to %ast.AstNode*
	%22 = load i16* %labtrue
	%23 = load i16* %labfalse
	call void @llvm_BranchConditional(%ast.AstNode* %21, i16 %22, i16 %23)
	%24 = load i16* %labtrue
	call void @llvm_Label(i16 %24)
	%25 = load %ast.AstNode** %node
	%26 = getelementptr %ast.AstNode* %25, i32 0, i32 13
	%27 = getelementptr [0 x %ast.AstNode*]* %26, i32 0, i32 1
	%28 = load %ast.AstNode** %27
	%29 = bitcast %ast.AstNode* %28 to %ast.AstNode*
	%30 = call i8 @llvm_GenSub(%ast.AstNode* %29)
	store i8 %30, i8* %term
	%31 = load i8* %term
	%32 = icmp ne i8 %31, 0
	%33 = xor i1 %32, true
	br i1 %33, label %L.5, label %L.4
L.5:
	%34 = load i16* @llvm_loopexit
	call void @llvm_Branch(i16 %34)
	br label %L.4
L.4:
	br label %L.1
L.3:
	%35 = load %ast.AstNode** %node
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 13
	%37 = getelementptr [0 x %ast.AstNode*]* %36, i32 0, i32 0
	%38 = load %ast.AstNode** %37
	%39 = bitcast %ast.AstNode* %38 to %ast.AstNode*
	%40 = load i16* @llvm_loopexit
	%41 = load i16* %labfalse
	call void @llvm_BranchConditional(%ast.AstNode* %39, i16 %40, i16 %41)
	br label %L.1
L.1:
	%42 = load i16* %labfalse
	call void @llvm_Label(i16 %42)
	store i8 0, i8* %rv.0
	br label %return
return:
	%43 = load i8* %rv.0
	ret i8 %43
}
@S.697 = internal constant [16 x i8] c"\09%N = phi i1 [ \00"@S.698 = internal constant [6 x i8] c"false\00"@S.699 = internal constant [5 x i8] c"true\00"@S.700 = internal constant [4 x i8] c", %\00"@S.701 = internal constant [7 x i8] c" ], [ \00"@S.702 = internal constant [4 x i8] c", %\00"@S.703 = internal constant [4 x i8] c" ]\0A\00"define internal zeroext i8 @llvm_Conditional(%ast.AstNode* %node.arg, i8 zeroext %isand.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast.AstNode*
	%isand = alloca i8
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	store i8 %isand.arg, i8* %isand
	%lablhs = alloca i16
	%labrhs = alloca i16
	%labend = alloca i16
	%0 = load i16* @llvm_Lseqno
	store i16 %0, i16* %labrhs
	%1 = load i16* @llvm_Lseqno
	%2 = add i16 %1, 1
	store i16 %2, i16* @llvm_Lseqno
	%3 = load i16* @llvm_Lseqno
	store i16 %3, i16* %labend
	%4 = load i16* @llvm_Lseqno
	%5 = add i16 %4, 1
	store i16 %5, i16* @llvm_Lseqno
	%6 = load %ast.AstNode** %node
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 13
	%8 = getelementptr [0 x %ast.AstNode*]* %7, i32 0, i32 0
	%9 = load %ast.AstNode** %8
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	%11 = call i8 @llvm_GenSub(%ast.AstNode* %10)
	%12 = load i8* %isand
	%13 = icmp ne i8 %12, 0
	br i1 %13, label %L.2, label %L.3
L.2:
	%14 = load %ast.AstNode** %node
	%15 = getelementptr %ast.AstNode* %14, i32 0, i32 13
	%16 = getelementptr [0 x %ast.AstNode*]* %15, i32 0, i32 0
	%17 = load %ast.AstNode** %16
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	%19 = load i16* %labrhs
	%20 = load i16* %labend
	call void @llvm_BranchConditional(%ast.AstNode* %18, i16 %19, i16 %20)
	br label %L.1
L.3:
	%21 = load %ast.AstNode** %node
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 13
	%23 = getelementptr [0 x %ast.AstNode*]* %22, i32 0, i32 0
	%24 = load %ast.AstNode** %23
	%25 = bitcast %ast.AstNode* %24 to %ast.AstNode*
	%26 = load i16* %labend
	%27 = load i16* %labrhs
	call void @llvm_BranchConditional(%ast.AstNode* %25, i16 %26, i16 %27)
	br label %L.1
L.1:
	%28 = load i16* @llvm_labthis
	store i16 %28, i16* %lablhs
	%29 = load i16* %labrhs
	call void @llvm_Label(i16 %29)
	%30 = load %ast.AstNode** %node
	%31 = getelementptr %ast.AstNode* %30, i32 0, i32 13
	%32 = getelementptr [0 x %ast.AstNode*]* %31, i32 0, i32 1
	%33 = load %ast.AstNode** %32
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	%35 = call i8 @llvm_GenSub(%ast.AstNode* %34)
	%36 = load i16* @llvm_labthis
	store i16 %36, i16* %labrhs
	%37 = load i16* %labend
	call void @llvm_Branch(i16 %37)
	%38 = load i16* %labend
	call void @llvm_Label(i16 %38)
	%39 = load i16* @llvm_Tseqno
	%40 = load %ast.AstNode** %node
	%41 = getelementptr %ast.AstNode* %40, i32 0, i32 9
	store i16 %39, i16* %41
	%42 = load i16* @llvm_Tseqno
	%43 = add i16 %42, 1
	store i16 %43, i16* @llvm_Tseqno
	%44 = getelementptr [16 x i8]* @S.697
	%45 = bitcast [16 x i8]* %44 to [0 x i8]*
	%46 = load %ast.AstNode** %node
	%47 = bitcast %ast.AstNode* %46 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %45, %ast.AstNode* %47)
	%48 = load i8* %isand
	%49 = icmp ne i8 %48, 0
	br i1 %49, label %L.5, label %L.6
L.5:
	%50 = load %bout.BufIO** @llvm_f
	%51 = bitcast %bout.BufIO* %50 to %bout.BufIO*
	%52 = getelementptr [6 x i8]* @S.698
	%53 = bitcast [6 x i8]* %52 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %51, [0 x i8]* %53)
	br label %L.4
L.6:
	%54 = load %bout.BufIO** @llvm_f
	%55 = bitcast %bout.BufIO* %54 to %bout.BufIO*
	%56 = getelementptr [5 x i8]* @S.699
	%57 = bitcast [5 x i8]* %56 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %55, [0 x i8]* %57)
	br label %L.4
L.4:
	%58 = load %bout.BufIO** @llvm_f
	%59 = bitcast %bout.BufIO* %58 to %bout.BufIO*
	%60 = getelementptr [4 x i8]* @S.700
	%61 = bitcast [4 x i8]* %60 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %59, [0 x i8]* %61)
	%62 = load i16* %lablhs
	call void @llvm_PLabel(i16 %62)
	%63 = load %bout.BufIO** @llvm_f
	%64 = bitcast %bout.BufIO* %63 to %bout.BufIO*
	%65 = getelementptr [7 x i8]* @S.701
	%66 = bitcast [7 x i8]* %65 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %64, [0 x i8]* %66)
	%67 = load %ast.AstNode** %node
	%68 = getelementptr %ast.AstNode* %67, i32 0, i32 13
	%69 = getelementptr [0 x %ast.AstNode*]* %68, i32 0, i32 1
	%70 = load %ast.AstNode** %69
	%71 = getelementptr %ast.AstNode* %70, i32 0, i32 9
	%72 = load i16* %71
	call void @llvm_PTempName(i16 %72)
	%73 = load %bout.BufIO** @llvm_f
	%74 = bitcast %bout.BufIO* %73 to %bout.BufIO*
	%75 = getelementptr [4 x i8]* @S.702
	%76 = bitcast [4 x i8]* %75 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %74, [0 x i8]* %76)
	%77 = load i16* %labrhs
	call void @llvm_PLabel(i16 %77)
	%78 = load %bout.BufIO** @llvm_f
	%79 = bitcast %bout.BufIO* %78 to %bout.BufIO*
	%80 = getelementptr [4 x i8]* @S.703
	%81 = bitcast [4 x i8]* %80 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %79, [0 x i8]* %81)
	store i8 0, i8* %rv.0
	br label %return
return:
	%82 = load i8* %rv.0
	ret i8 %82
}
@S.704 = internal constant [81 x i8] c"\09call void @llvm.memcpy.p0i8.p0i8.%2T(i8* %0N, i8* %1N, %2T %2N, i32 %3N, i1 0)\0A\00"@S.705 = internal constant [65 x i8] c"\09call void @llvm.memcpy.%2T(i8* %0N, i8* %1N, %2T %2N, i32 %3N)\0A\00"define internal void @llvm_Copy(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 13
	%2 = getelementptr [0 x %ast.AstNode*]* %1, i32 0, i32 0
	%3 = load %ast.AstNode** %2
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	%5 = load %type.TypeNode** @llvm_pbytetype
	%6 = bitcast %type.TypeNode* %5 to %type.TypeNode*
	%7 = call %ast.AstNode* @expr_Cast(%ast.AstNode* %4, %type.TypeNode* %6)
	%8 = bitcast %ast.AstNode* %7 to %ast.AstNode*
	%9 = load %ast.AstNode** %node
	%10 = getelementptr %ast.AstNode* %9, i32 0, i32 13
	%11 = getelementptr [0 x %ast.AstNode*]* %10, i32 0, i32 0
	store %ast.AstNode* %8, %ast.AstNode** %11
	%12 = load %ast.AstNode** %node
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 13
	%14 = getelementptr [0 x %ast.AstNode*]* %13, i32 0, i32 1
	%15 = load %ast.AstNode** %14
	%16 = bitcast %ast.AstNode* %15 to %ast.AstNode*
	%17 = load %type.TypeNode** @llvm_pbytetype
	%18 = bitcast %type.TypeNode* %17 to %type.TypeNode*
	%19 = call %ast.AstNode* @expr_Cast(%ast.AstNode* %16, %type.TypeNode* %18)
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	%21 = load %ast.AstNode** %node
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 13
	%23 = getelementptr [0 x %ast.AstNode*]* %22, i32 0, i32 1
	store %ast.AstNode* %20, %ast.AstNode** %23
	%24 = load %ast.AstNode** %node
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 13
	%26 = getelementptr [0 x %ast.AstNode*]* %25, i32 0, i32 0
	%27 = load %ast.AstNode** %26
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	%29 = call i8 @llvm_GenSub(%ast.AstNode* %28)
	%30 = load %ast.AstNode** %node
	%31 = getelementptr %ast.AstNode* %30, i32 0, i32 13
	%32 = getelementptr [0 x %ast.AstNode*]* %31, i32 0, i32 1
	%33 = load %ast.AstNode** %32
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	%35 = call i8 @llvm_GenSub(%ast.AstNode* %34)
	%36 = load %ast.AstNode** %node
	%37 = getelementptr %ast.AstNode* %36, i32 0, i32 13
	%38 = getelementptr [0 x %ast.AstNode*]* %37, i32 0, i32 2
	%39 = load %ast.AstNode** %38
	%40 = bitcast %ast.AstNode* %39 to %ast.AstNode*
	%41 = load %type.TypeNode** @type_wordtype
	%42 = bitcast %type.TypeNode* %41 to %type.TypeNode*
	%43 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %40, %type.TypeNode* %42)
	%44 = bitcast %ast.AstNode* %43 to %ast.AstNode*
	%45 = load %ast.AstNode** %node
	%46 = getelementptr %ast.AstNode* %45, i32 0, i32 13
	%47 = getelementptr [0 x %ast.AstNode*]* %46, i32 0, i32 2
	store %ast.AstNode* %44, %ast.AstNode** %47
	%48 = load %ast.AstNode** %node
	%49 = getelementptr %ast.AstNode* %48, i32 0, i32 13
	%50 = getelementptr [0 x %ast.AstNode*]* %49, i32 0, i32 2
	%51 = load %ast.AstNode** %50
	%52 = bitcast %ast.AstNode* %51 to %ast.AstNode*
	%53 = call i8 @llvm_GenSub(%ast.AstNode* %52)
	%54 = icmp ne i8 1, 0
	br i1 %54, label %L.2, label %L.3
L.2:
	%55 = getelementptr [81 x i8]* @S.704
	%56 = bitcast [81 x i8]* %55 to [0 x i8]*
	%57 = load %ast.AstNode** %node
	%58 = bitcast %ast.AstNode* %57 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %56, %ast.AstNode* %58)
	br label %L.1
L.3:
	%59 = getelementptr [65 x i8]* @S.705
	%60 = bitcast [65 x i8]* %59 to [0 x i8]*
	%61 = load %ast.AstNode** %node
	%62 = bitcast %ast.AstNode* %61 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %60, %ast.AstNode* %62)
	br label %L.1
L.1:
	%63 = getelementptr [10 x i8]* @llvm_UseIntrinsic, i32 0, i32 0
	store i8 1, i8* %63
	br label %return
return:
	ret void
}
define internal zeroext i8 @llvm_GetChunkSize(i32 %size.arg, i32 %align.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%size = alloca i32
	%align = alloca i32
	store i32 %size.arg, i32* %size
	store i32 %align.arg, i32* %align
	%is = alloca i8
	%ia = alloca i8
	store i8 0, i8* %ia
	%0 = load i32* %align
	%1 = icmp ugt i32 %0, 0
	br i1 %1, label %L.2, label %L.1
L.2:
	br label %L.3
L.3:
	%2 = load i8* %ia
	%3 = load %target.TargetT** @target_Target
	%4 = getelementptr %target.TargetT* %3, i32 0, i32 7
	%5 = load i8* %4
	%6 = sub i8 %5, 1
	%7 = icmp ult i8 %2, %6
	br i1 %7, label %L.6, label %L.7
L.6:
	%8 = load i32* %align
	%9 = load %target.TargetT** @target_Target
	%10 = getelementptr %target.TargetT* %9, i32 0, i32 9
	%11 = load i8* %ia
	%12 = zext i8 %11 to i32
	%13 = getelementptr [8 x %target.SizeAlign]* %10, i32 0, i32 %12
	%14 = getelementptr %target.SizeAlign* %13, i32 0, i32 1
	%15 = load i8* %14
	%16 = load %target.TargetT** @target_Target
	%17 = getelementptr %target.TargetT* %16, i32 0, i32 3
	%18 = load i8* %17
	%19 = udiv i8 %15, %18
	%20 = zext i8 %19 to i32
	%21 = icmp ugt i32 %8, %20
	br label %L.7
L.7:
	%22 = phi i1 [ false, %L.3 ], [ %21, %L.6 ]
	%23 = xor i1 %22, true
	br i1 %23, label %L.4, label %L.5
L.5:
	%24 = load i8* %ia
	%25 = add i8 %24, 1
	store i8 %25, i8* %ia
	br label %L.3
L.4:
	br label %L.1
L.1:
	%26 = load i8* %ia
	store i8 %26, i8* %is
	%27 = load i32* %size
	%28 = icmp ugt i32 %27, 0
	br i1 %28, label %L.9, label %L.8
L.9:
	store i8 0, i8* %is
	br label %L.10
L.10:
	%29 = load i8* %is
	%30 = load %target.TargetT** @target_Target
	%31 = getelementptr %target.TargetT* %30, i32 0, i32 7
	%32 = load i8* %31
	%33 = sub i8 %32, 1
	%34 = icmp ult i8 %29, %33
	br i1 %34, label %L.13, label %L.14
L.13:
	%35 = load i32* %size
	%36 = load %target.TargetT** @target_Target
	%37 = getelementptr %target.TargetT* %36, i32 0, i32 9
	%38 = load i8* %is
	%39 = zext i8 %38 to i32
	%40 = getelementptr [8 x %target.SizeAlign]* %37, i32 0, i32 %39
	%41 = getelementptr %target.SizeAlign* %40, i32 0, i32 0
	%42 = load i8* %41
	%43 = load %target.TargetT** @target_Target
	%44 = getelementptr %target.TargetT* %43, i32 0, i32 3
	%45 = load i8* %44
	%46 = udiv i8 %42, %45
	%47 = zext i8 %46 to i32
	%48 = icmp ugt i32 %35, %47
	br label %L.14
L.14:
	%49 = phi i1 [ false, %L.10 ], [ %48, %L.13 ]
	%50 = xor i1 %49, true
	br i1 %50, label %L.11, label %L.12
L.12:
	%51 = load i8* %is
	%52 = add i8 %51, 1
	store i8 %52, i8* %is
	br label %L.10
L.11:
	br label %L.8
L.8:
	%53 = load i8* %ia
	%54 = load i8* %is
	%55 = icmp ult i8 %53, %54
	br i1 %55, label %L.16, label %L.15
L.16:
	%56 = load i8* %ia
	store i8 %56, i8* %is
	br label %L.15
L.15:
	%57 = load i8* %is
	store i8 %57, i8* %rv.0
	br label %return
return:
	%58 = load i8* %rv.0
	ret i8 %58
}
@S.706 = internal constant [23 x i8] c"Array compare: length=\00"@S.707 = internal constant [9 x i8] c"variable\00"@S.708 = internal constant [7 x i8] c" size=\00"@S.709 = internal constant [8 x i8] c" align=\00"@S.710 = internal constant [9 x i8] c" mask=0x\00"@S.711 = internal constant [28 x i8] c"\09%N = icmp eq %0T %0N, %1N\0A\00"@S.712 = internal constant [28 x i8] c"\09%N = icmp ne %0T %0N, %1N\0A\00"@S.713 = internal constant [32 x i8] c"\09%N = call i1 @_builtin.memcmp.\00"@S.714 = internal constant [29 x i8] c"(%0T %0N, %1T %1N, %2T %2N)\0A\00"define internal zeroext i8 @llvm_ArrayCompare(%ast.AstNode* %node.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%length = alloca i32
	%align = alloca i32
	%size = alloca i32
	%i = alloca i8
	store i32 0, i32* %length
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 13
	%2 = getelementptr [0 x %ast.AstNode*]* %1, i32 0, i32 2
	%3 = load %ast.AstNode** %2
	%4 = getelementptr %ast.AstNode* %3, i32 0, i32 0
	%5 = load i8* %4
	%6 = icmp eq i8 %5, 7
	br i1 %6, label %L.2, label %L.1
L.2:
	%7 = load %ast.AstNode** %node
	%8 = getelementptr %ast.AstNode* %7, i32 0, i32 13
	%9 = getelementptr [0 x %ast.AstNode*]* %8, i32 0, i32 2
	%10 = load %ast.AstNode** %9
	%11 = getelementptr %ast.AstNode* %10, i32 0, i32 10
	%12 = load i64* %11
	%13 = trunc i64 %12 to i32
	%14 = load %ast.AstNode** %node
	%15 = getelementptr %ast.AstNode* %14, i32 0, i32 13
	%16 = getelementptr [0 x %ast.AstNode*]* %15, i32 0, i32 0
	%17 = load %ast.AstNode** %16
	%18 = getelementptr %ast.AstNode* %17, i32 0, i32 11
	%19 = load %type.TypeNode** %18
	%20 = getelementptr %type.TypeNode* %19, i32 0, i32 0
	%21 = load %type.TypeNode** %20
	%22 = getelementptr %type.TypeNode* %21, i32 0, i32 9
	%23 = load i32* %22
	%24 = load %target.TargetT** @target_Target
	%25 = getelementptr %target.TargetT* %24, i32 0, i32 3
	%26 = load i8* %25
	%27 = zext i8 %26 to i32
	%28 = udiv i32 %23, %27
	%29 = mul i32 %13, %28
	store i32 %29, i32* %length
	br label %L.1
L.1:
	%30 = load %ast.AstNode** %node
	%31 = getelementptr %ast.AstNode* %30, i32 0, i32 13
	%32 = getelementptr [0 x %ast.AstNode*]* %31, i32 0, i32 3
	%33 = load %ast.AstNode** %32
	%34 = getelementptr %ast.AstNode* %33, i32 0, i32 10
	%35 = load i64* %34
	%36 = trunc i64 %35 to i32
	store i32 %36, i32* %align
	%37 = load i32* %length
	%38 = load i32* %align
	%39 = call i8 @llvm_GetChunkSize(i32 %37, i32 %38)
	store i8 %39, i8* %i
	%40 = load %target.TargetT** @target_Target
	%41 = getelementptr %target.TargetT* %40, i32 0, i32 9
	%42 = load i8* %i
	%43 = zext i8 %42 to i32
	%44 = getelementptr [8 x %target.SizeAlign]* %41, i32 0, i32 %43
	%45 = getelementptr %target.SizeAlign* %44, i32 0, i32 0
	%46 = load i8* %45
	%47 = load %target.TargetT** @target_Target
	%48 = getelementptr %target.TargetT* %47, i32 0, i32 3
	%49 = load i8* %48
	%50 = udiv i8 %46, %49
	%51 = zext i8 %50 to i32
	store i32 %51, i32* %size
	%52 = load %target.TargetT** @target_Target
	%53 = getelementptr %target.TargetT* %52, i32 0, i32 9
	%54 = load i8* %i
	%55 = zext i8 %54 to i32
	%56 = getelementptr [8 x %target.SizeAlign]* %53, i32 0, i32 %55
	%57 = getelementptr %target.SizeAlign* %56, i32 0, i32 1
	%58 = load i8* %57
	%59 = load %target.TargetT** @target_Target
	%60 = getelementptr %target.TargetT* %59, i32 0, i32 3
	%61 = load i8* %60
	%62 = udiv i8 %58, %61
	%63 = zext i8 %62 to i32
	store i32 %63, i32* %align
	%64 = getelementptr %A.2* @debug, i32 0, i32 3
	%65 = load i8* %64
	%66 = icmp ne i8 %65, 0
	br i1 %66, label %L.4, label %L.3
L.4:
	%67 = getelementptr [23 x i8]* @S.706
	%68 = bitcast [23 x i8]* %67 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %68)
	%69 = load i32* %length
	%70 = icmp eq i32 %69, 0
	br i1 %70, label %L.6, label %L.7
L.6:
	%71 = getelementptr [9 x i8]* @S.707
	%72 = bitcast [9 x i8]* %71 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %72)
	br label %L.5
L.7:
	%73 = load i32* %length
	call void @out_uint(i32 2, i32 %73)
	br label %L.5
L.5:
	%74 = getelementptr [7 x i8]* @S.708
	%75 = bitcast [7 x i8]* %74 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %75)
	%76 = load i32* %size
	call void @out_uint(i32 2, i32 %76)
	%77 = getelementptr [8 x i8]* @S.709
	%78 = bitcast [8 x i8]* %77 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %78)
	%79 = load i32* %align
	call void @out_uint(i32 2, i32 %79)
	br label %L.3
L.3:
	%80 = load i32* %length
	%81 = icmp ne i32 %80, 0
	br i1 %81, label %L.8, label %L.9
L.8:
	%82 = load i32* %length
	%83 = load i32* %size
	%84 = icmp ule i32 %82, %83
	br label %L.9
L.9:
	%85 = phi i1 [ false, %L.3 ], [ %84, %L.8 ]
	br i1 %85, label %L.11, label %L.12
L.11:
	%86 = load %ast.AstNode** %node
	%87 = getelementptr %ast.AstNode* %86, i32 0, i32 13
	%88 = getelementptr [0 x %ast.AstNode*]* %87, i32 0, i32 0
	%89 = load %ast.AstNode** %88
	%90 = bitcast %ast.AstNode* %89 to %ast.AstNode*
	%91 = load i8* %i
	%92 = zext i8 %91 to i32
	%93 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %92
	%94 = load %type.TypeNode** %93
	%95 = bitcast %type.TypeNode* %94 to %type.TypeNode*
	%96 = call %ast.AstNode* @expr_Cast(%ast.AstNode* %90, %type.TypeNode* %95)
	%97 = bitcast %ast.AstNode* %96 to %ast.AstNode*
	%98 = load %ast.AstNode** %node
	%99 = getelementptr %ast.AstNode* %98, i32 0, i32 13
	%100 = getelementptr [0 x %ast.AstNode*]* %99, i32 0, i32 0
	store %ast.AstNode* %97, %ast.AstNode** %100
	%101 = load i8* %i
	%102 = zext i8 %101 to i32
	%103 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %102
	%104 = load %type.TypeNode** %103
	%105 = getelementptr %type.TypeNode* %104, i32 0, i32 0
	%106 = load %type.TypeNode** %105
	%107 = getelementptr %type.TypeNode* %106, i32 0, i32 9
	%108 = load i32* %107
	%109 = load %ast.AstNode** %node
	%110 = getelementptr %ast.AstNode* %109, i32 0, i32 13
	%111 = getelementptr [0 x %ast.AstNode*]* %110, i32 0, i32 0
	%112 = load %ast.AstNode** %111
	%113 = getelementptr %ast.AstNode* %112, i32 0, i32 6
	store i32 %108, i32* %113
	%114 = load i8* %i
	%115 = zext i8 %114 to i32
	%116 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %115
	%117 = load %type.TypeNode** %116
	%118 = getelementptr %type.TypeNode* %117, i32 0, i32 0
	%119 = load %type.TypeNode** %118
	%120 = bitcast %type.TypeNode* %119 to %type.TypeNode*
	%121 = load %ast.AstNode** %node
	%122 = getelementptr %ast.AstNode* %121, i32 0, i32 13
	%123 = getelementptr [0 x %ast.AstNode*]* %122, i32 0, i32 0
	%124 = load %ast.AstNode** %123
	%125 = bitcast %ast.AstNode* %124 to %ast.AstNode*
	%126 = call %ast.AstNode* @ast_New1(i8 25, %type.TypeNode* %120, %ast.AstNode* %125)
	%127 = bitcast %ast.AstNode* %126 to %ast.AstNode*
	%128 = load %ast.AstNode** %node
	%129 = getelementptr %ast.AstNode* %128, i32 0, i32 13
	%130 = getelementptr [0 x %ast.AstNode*]* %129, i32 0, i32 0
	store %ast.AstNode* %127, %ast.AstNode** %130
	%131 = load i8* %i
	%132 = zext i8 %131 to i32
	%133 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %132
	%134 = load %type.TypeNode** %133
	%135 = getelementptr %type.TypeNode* %134, i32 0, i32 0
	%136 = load %type.TypeNode** %135
	%137 = getelementptr %type.TypeNode* %136, i32 0, i32 13
	%138 = load i8* %137
	%139 = load %ast.AstNode** %node
	%140 = getelementptr %ast.AstNode* %139, i32 0, i32 13
	%141 = getelementptr [0 x %ast.AstNode*]* %140, i32 0, i32 0
	%142 = load %ast.AstNode** %141
	%143 = getelementptr %ast.AstNode* %142, i32 0, i32 1
	store i8 %138, i8* %143
	%144 = load %ast.AstNode** %node
	%145 = getelementptr %ast.AstNode* %144, i32 0, i32 13
	%146 = getelementptr [0 x %ast.AstNode*]* %145, i32 0, i32 1
	%147 = load %ast.AstNode** %146
	%148 = bitcast %ast.AstNode* %147 to %ast.AstNode*
	%149 = load i8* %i
	%150 = zext i8 %149 to i32
	%151 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %150
	%152 = load %type.TypeNode** %151
	%153 = bitcast %type.TypeNode* %152 to %type.TypeNode*
	%154 = call %ast.AstNode* @expr_Cast(%ast.AstNode* %148, %type.TypeNode* %153)
	%155 = bitcast %ast.AstNode* %154 to %ast.AstNode*
	%156 = load %ast.AstNode** %node
	%157 = getelementptr %ast.AstNode* %156, i32 0, i32 13
	%158 = getelementptr [0 x %ast.AstNode*]* %157, i32 0, i32 1
	store %ast.AstNode* %155, %ast.AstNode** %158
	%159 = load i8* %i
	%160 = zext i8 %159 to i32
	%161 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %160
	%162 = load %type.TypeNode** %161
	%163 = getelementptr %type.TypeNode* %162, i32 0, i32 0
	%164 = load %type.TypeNode** %163
	%165 = getelementptr %type.TypeNode* %164, i32 0, i32 9
	%166 = load i32* %165
	%167 = load %ast.AstNode** %node
	%168 = getelementptr %ast.AstNode* %167, i32 0, i32 13
	%169 = getelementptr [0 x %ast.AstNode*]* %168, i32 0, i32 1
	%170 = load %ast.AstNode** %169
	%171 = getelementptr %ast.AstNode* %170, i32 0, i32 6
	store i32 %166, i32* %171
	%172 = load i8* %i
	%173 = zext i8 %172 to i32
	%174 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %173
	%175 = load %type.TypeNode** %174
	%176 = getelementptr %type.TypeNode* %175, i32 0, i32 0
	%177 = load %type.TypeNode** %176
	%178 = bitcast %type.TypeNode* %177 to %type.TypeNode*
	%179 = load %ast.AstNode** %node
	%180 = getelementptr %ast.AstNode* %179, i32 0, i32 13
	%181 = getelementptr [0 x %ast.AstNode*]* %180, i32 0, i32 1
	%182 = load %ast.AstNode** %181
	%183 = bitcast %ast.AstNode* %182 to %ast.AstNode*
	%184 = call %ast.AstNode* @ast_New1(i8 25, %type.TypeNode* %178, %ast.AstNode* %183)
	%185 = bitcast %ast.AstNode* %184 to %ast.AstNode*
	%186 = load %ast.AstNode** %node
	%187 = getelementptr %ast.AstNode* %186, i32 0, i32 13
	%188 = getelementptr [0 x %ast.AstNode*]* %187, i32 0, i32 1
	store %ast.AstNode* %185, %ast.AstNode** %188
	%189 = load i8* %i
	%190 = zext i8 %189 to i32
	%191 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %190
	%192 = load %type.TypeNode** %191
	%193 = getelementptr %type.TypeNode* %192, i32 0, i32 0
	%194 = load %type.TypeNode** %193
	%195 = getelementptr %type.TypeNode* %194, i32 0, i32 13
	%196 = load i8* %195
	%197 = load %ast.AstNode** %node
	%198 = getelementptr %ast.AstNode* %197, i32 0, i32 13
	%199 = getelementptr [0 x %ast.AstNode*]* %198, i32 0, i32 1
	%200 = load %ast.AstNode** %199
	%201 = getelementptr %ast.AstNode* %200, i32 0, i32 1
	store i8 %196, i8* %201
	%202 = load i32* %length
	%203 = load i32* %size
	%204 = icmp ult i32 %202, %203
	br i1 %204, label %L.14, label %L.13
L.14:
	%mask = alloca i64
	%205 = load %target.TargetT** @target_Target
	%206 = getelementptr %target.TargetT* %205, i32 0, i32 2
	%207 = load i8* %206
	%208 = icmp eq i8 %207, 1
	br i1 %208, label %L.16, label %L.17
L.16:
	%209 = load i32* %size
	%210 = load i32* %length
	%211 = sub i32 %209, %210
	%212 = mul i32 %211, 8
	%213 = zext i32 %212 to i64
	%214 = shl i64 1, %213
	%215 = sub i64 %214, 1
	%216 = xor i64 %215, -1
	store i64 %216, i64* %mask
	br label %L.15
L.17:
	%217 = load i32* %length
	%218 = mul i32 %217, 8
	%219 = zext i32 %218 to i64
	%220 = shl i64 1, %219
	%221 = sub i64 %220, 1
	store i64 %221, i64* %mask
	br label %L.15
L.15:
	%222 = getelementptr %A.2* @debug, i32 0, i32 3
	%223 = load i8* %222
	%224 = icmp ne i8 %223, 0
	br i1 %224, label %L.19, label %L.18
L.19:
	%225 = getelementptr [9 x i8]* @S.710
	%226 = bitcast [9 x i8]* %225 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %226)
	%227 = load i64* %mask
	call void @out_hex64(i32 2, i64 %227)
	br label %L.18
L.18:
	%228 = load i8* %i
	%229 = zext i8 %228 to i32
	%230 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %229
	%231 = load %type.TypeNode** %230
	%232 = getelementptr %type.TypeNode* %231, i32 0, i32 0
	%233 = load %type.TypeNode** %232
	%234 = bitcast %type.TypeNode* %233 to %type.TypeNode*
	%235 = load %ast.AstNode** %node
	%236 = getelementptr %ast.AstNode* %235, i32 0, i32 13
	%237 = getelementptr [0 x %ast.AstNode*]* %236, i32 0, i32 0
	%238 = load %ast.AstNode** %237
	%239 = bitcast %ast.AstNode* %238 to %ast.AstNode*
	%240 = load %ast.AstNode** %node
	%241 = getelementptr %ast.AstNode* %240, i32 0, i32 13
	%242 = getelementptr [0 x %ast.AstNode*]* %241, i32 0, i32 1
	%243 = load %ast.AstNode** %242
	%244 = bitcast %ast.AstNode* %243 to %ast.AstNode*
	%245 = call %ast.AstNode* @ast_New2(i8 59, %type.TypeNode* %234, %ast.AstNode* %239, %ast.AstNode* %244)
	%246 = bitcast %ast.AstNode* %245 to %ast.AstNode*
	%247 = load %ast.AstNode** %node
	%248 = getelementptr %ast.AstNode* %247, i32 0, i32 13
	%249 = getelementptr [0 x %ast.AstNode*]* %248, i32 0, i32 0
	store %ast.AstNode* %246, %ast.AstNode** %249
	%250 = load i8* %i
	%251 = zext i8 %250 to i32
	%252 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %251
	%253 = load %type.TypeNode** %252
	%254 = getelementptr %type.TypeNode* %253, i32 0, i32 0
	%255 = load %type.TypeNode** %254
	%256 = bitcast %type.TypeNode* %255 to %type.TypeNode*
	%257 = load %ast.AstNode** %node
	%258 = getelementptr %ast.AstNode* %257, i32 0, i32 13
	%259 = getelementptr [0 x %ast.AstNode*]* %258, i32 0, i32 0
	%260 = load %ast.AstNode** %259
	%261 = bitcast %ast.AstNode* %260 to %ast.AstNode*
	%262 = load i8* %i
	%263 = zext i8 %262 to i32
	%264 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %263
	%265 = load %type.TypeNode** %264
	%266 = getelementptr %type.TypeNode* %265, i32 0, i32 0
	%267 = load %type.TypeNode** %266
	%268 = bitcast %type.TypeNode* %267 to %type.TypeNode*
	%269 = load i64* %mask
	%270 = call %ast.AstNode* @ast_Const(%type.TypeNode* %268, i64 %269)
	%271 = bitcast %ast.AstNode* %270 to %ast.AstNode*
	%272 = call %ast.AstNode* @ast_New2(i8 57, %type.TypeNode* %256, %ast.AstNode* %261, %ast.AstNode* %271)
	%273 = bitcast %ast.AstNode* %272 to %ast.AstNode*
	%274 = load %ast.AstNode** %node
	%275 = getelementptr %ast.AstNode* %274, i32 0, i32 13
	%276 = getelementptr [0 x %ast.AstNode*]* %275, i32 0, i32 0
	store %ast.AstNode* %273, %ast.AstNode** %276
	%277 = load i8* %i
	%278 = zext i8 %277 to i32
	%279 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %278
	%280 = load %type.TypeNode** %279
	%281 = getelementptr %type.TypeNode* %280, i32 0, i32 0
	%282 = load %type.TypeNode** %281
	%283 = bitcast %type.TypeNode* %282 to %type.TypeNode*
	%284 = call %ast.AstNode* @ast_Const(%type.TypeNode* %283, i64 0)
	%285 = bitcast %ast.AstNode* %284 to %ast.AstNode*
	%286 = load %ast.AstNode** %node
	%287 = getelementptr %ast.AstNode* %286, i32 0, i32 13
	%288 = getelementptr [0 x %ast.AstNode*]* %287, i32 0, i32 1
	store %ast.AstNode* %285, %ast.AstNode** %288
	br label %L.13
L.13:
	%289 = load %ast.AstNode** %node
	%290 = getelementptr %ast.AstNode* %289, i32 0, i32 13
	%291 = getelementptr [0 x %ast.AstNode*]* %290, i32 0, i32 0
	%292 = load %ast.AstNode** %291
	%293 = bitcast %ast.AstNode* %292 to %ast.AstNode*
	%294 = call i8 @llvm_GenSub(%ast.AstNode* %293)
	%295 = load %ast.AstNode** %node
	%296 = getelementptr %ast.AstNode* %295, i32 0, i32 13
	%297 = getelementptr [0 x %ast.AstNode*]* %296, i32 0, i32 1
	%298 = load %ast.AstNode** %297
	%299 = bitcast %ast.AstNode* %298 to %ast.AstNode*
	%300 = call i8 @llvm_GenSub(%ast.AstNode* %299)
	%301 = load i16* @llvm_Tseqno
	%302 = load %ast.AstNode** %node
	%303 = getelementptr %ast.AstNode* %302, i32 0, i32 9
	store i16 %301, i16* %303
	%304 = load i16* @llvm_Tseqno
	%305 = add i16 %304, 1
	store i16 %305, i16* @llvm_Tseqno
	%306 = load %ast.AstNode** %node
	%307 = getelementptr %ast.AstNode* %306, i32 0, i32 1
	store i8 1, i8* %307
	%308 = load %ast.AstNode** %node
	%309 = getelementptr %ast.AstNode* %308, i32 0, i32 6
	store i32 1, i32* %309
	%310 = load %ast.AstNode** %node
	%311 = getelementptr %ast.AstNode* %310, i32 0, i32 0
	%312 = load i8* %311
	%313 = icmp eq i8 %312, 22
	br i1 %313, label %L.21, label %L.22
L.21:
	%314 = getelementptr [28 x i8]* @S.711
	%315 = bitcast [28 x i8]* %314 to [0 x i8]*
	%316 = load %ast.AstNode** %node
	%317 = bitcast %ast.AstNode* %316 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %315, %ast.AstNode* %317)
	br label %L.20
L.22:
	%318 = getelementptr [28 x i8]* @S.712
	%319 = bitcast [28 x i8]* %318 to [0 x i8]*
	%320 = load %ast.AstNode** %node
	%321 = bitcast %ast.AstNode* %320 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %319, %ast.AstNode* %321)
	br label %L.20
L.20:
	%322 = getelementptr %A.2* @debug, i32 0, i32 3
	%323 = load i8* %322
	%324 = icmp ne i8 %323, 0
	br i1 %324, label %L.24, label %L.23
L.24:
	call void @out_nl(i32 2)
	br label %L.23
L.23:
	store i8 1, i8* %rv.0
	br label %return
L.12:
	%325 = load %ast.AstNode** %node
	%326 = getelementptr %ast.AstNode* %325, i32 0, i32 13
	%327 = getelementptr [0 x %ast.AstNode*]* %326, i32 0, i32 0
	%328 = load %ast.AstNode** %327
	%329 = bitcast %ast.AstNode* %328 to %ast.AstNode*
	%330 = load i8* %i
	%331 = zext i8 %330 to i32
	%332 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %331
	%333 = load %type.TypeNode** %332
	%334 = bitcast %type.TypeNode* %333 to %type.TypeNode*
	%335 = call %ast.AstNode* @expr_Cast(%ast.AstNode* %329, %type.TypeNode* %334)
	%336 = bitcast %ast.AstNode* %335 to %ast.AstNode*
	%337 = load %ast.AstNode** %node
	%338 = getelementptr %ast.AstNode* %337, i32 0, i32 13
	%339 = getelementptr [0 x %ast.AstNode*]* %338, i32 0, i32 0
	store %ast.AstNode* %336, %ast.AstNode** %339
	%340 = load i8* %i
	%341 = zext i8 %340 to i32
	%342 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %341
	%343 = load %type.TypeNode** %342
	%344 = getelementptr %type.TypeNode* %343, i32 0, i32 0
	%345 = load %type.TypeNode** %344
	%346 = getelementptr %type.TypeNode* %345, i32 0, i32 9
	%347 = load i32* %346
	%348 = load %ast.AstNode** %node
	%349 = getelementptr %ast.AstNode* %348, i32 0, i32 13
	%350 = getelementptr [0 x %ast.AstNode*]* %349, i32 0, i32 0
	%351 = load %ast.AstNode** %350
	%352 = getelementptr %ast.AstNode* %351, i32 0, i32 6
	store i32 %347, i32* %352
	%353 = load %ast.AstNode** %node
	%354 = getelementptr %ast.AstNode* %353, i32 0, i32 13
	%355 = getelementptr [0 x %ast.AstNode*]* %354, i32 0, i32 1
	%356 = load %ast.AstNode** %355
	%357 = bitcast %ast.AstNode* %356 to %ast.AstNode*
	%358 = load i8* %i
	%359 = zext i8 %358 to i32
	%360 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %359
	%361 = load %type.TypeNode** %360
	%362 = bitcast %type.TypeNode* %361 to %type.TypeNode*
	%363 = call %ast.AstNode* @expr_Cast(%ast.AstNode* %357, %type.TypeNode* %362)
	%364 = bitcast %ast.AstNode* %363 to %ast.AstNode*
	%365 = load %ast.AstNode** %node
	%366 = getelementptr %ast.AstNode* %365, i32 0, i32 13
	%367 = getelementptr [0 x %ast.AstNode*]* %366, i32 0, i32 1
	store %ast.AstNode* %364, %ast.AstNode** %367
	%368 = load i8* %i
	%369 = zext i8 %368 to i32
	%370 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %369
	%371 = load %type.TypeNode** %370
	%372 = getelementptr %type.TypeNode* %371, i32 0, i32 0
	%373 = load %type.TypeNode** %372
	%374 = getelementptr %type.TypeNode* %373, i32 0, i32 9
	%375 = load i32* %374
	%376 = load %ast.AstNode** %node
	%377 = getelementptr %ast.AstNode* %376, i32 0, i32 13
	%378 = getelementptr [0 x %ast.AstNode*]* %377, i32 0, i32 1
	%379 = load %ast.AstNode** %378
	%380 = getelementptr %ast.AstNode* %379, i32 0, i32 6
	store i32 %375, i32* %380
	%381 = load %ast.AstNode** %node
	%382 = getelementptr %ast.AstNode* %381, i32 0, i32 13
	%383 = getelementptr [0 x %ast.AstNode*]* %382, i32 0, i32 0
	%384 = load %ast.AstNode** %383
	%385 = bitcast %ast.AstNode* %384 to %ast.AstNode*
	%386 = call i8 @llvm_GenSub(%ast.AstNode* %385)
	%387 = load %ast.AstNode** %node
	%388 = getelementptr %ast.AstNode* %387, i32 0, i32 13
	%389 = getelementptr [0 x %ast.AstNode*]* %388, i32 0, i32 1
	%390 = load %ast.AstNode** %389
	%391 = bitcast %ast.AstNode* %390 to %ast.AstNode*
	%392 = call i8 @llvm_GenSub(%ast.AstNode* %391)
	%393 = load i32* %size
	%394 = icmp ugt i32 %393, 1
	br i1 %394, label %L.26, label %L.25
L.26:
	%395 = load %type.TypeNode** @type_wordtype
	%396 = bitcast %type.TypeNode* %395 to %type.TypeNode*
	%397 = load %ast.AstNode** %node
	%398 = getelementptr %ast.AstNode* %397, i32 0, i32 13
	%399 = getelementptr [0 x %ast.AstNode*]* %398, i32 0, i32 2
	%400 = load %ast.AstNode** %399
	%401 = bitcast %ast.AstNode* %400 to %ast.AstNode*
	%402 = load %type.TypeNode** @type_wordtype
	%403 = bitcast %type.TypeNode* %402 to %type.TypeNode*
	%404 = load i32* %size
	%405 = zext i32 %404 to i64
	%406 = call %ast.AstNode* @ast_Const(%type.TypeNode* %403, i64 %405)
	%407 = bitcast %ast.AstNode* %406 to %ast.AstNode*
	%408 = call %ast.AstNode* @ast_New2(i8 37, %type.TypeNode* %396, %ast.AstNode* %401, %ast.AstNode* %407)
	%409 = bitcast %ast.AstNode* %408 to %ast.AstNode*
	%410 = load %ast.AstNode** %node
	%411 = getelementptr %ast.AstNode* %410, i32 0, i32 13
	%412 = getelementptr [0 x %ast.AstNode*]* %411, i32 0, i32 2
	store %ast.AstNode* %409, %ast.AstNode** %412
	br label %L.25
L.25:
	%413 = load %ast.AstNode** %node
	%414 = getelementptr %ast.AstNode* %413, i32 0, i32 13
	%415 = getelementptr [0 x %ast.AstNode*]* %414, i32 0, i32 2
	%416 = load %ast.AstNode** %415
	%417 = bitcast %ast.AstNode* %416 to %ast.AstNode*
	%418 = load %type.TypeNode** @type_wordtype
	%419 = bitcast %type.TypeNode* %418 to %type.TypeNode*
	%420 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %417, %type.TypeNode* %419)
	%421 = bitcast %ast.AstNode* %420 to %ast.AstNode*
	%422 = load %ast.AstNode** %node
	%423 = getelementptr %ast.AstNode* %422, i32 0, i32 13
	%424 = getelementptr [0 x %ast.AstNode*]* %423, i32 0, i32 2
	store %ast.AstNode* %421, %ast.AstNode** %424
	%425 = load %ast.AstNode** %node
	%426 = getelementptr %ast.AstNode* %425, i32 0, i32 13
	%427 = getelementptr [0 x %ast.AstNode*]* %426, i32 0, i32 2
	%428 = load %ast.AstNode** %427
	%429 = bitcast %ast.AstNode* %428 to %ast.AstNode*
	%430 = call i8 @llvm_GenSub(%ast.AstNode* %429)
	%431 = load i16* @llvm_Tseqno
	%432 = load %ast.AstNode** %node
	%433 = getelementptr %ast.AstNode* %432, i32 0, i32 9
	store i16 %431, i16* %433
	%434 = load i16* @llvm_Tseqno
	%435 = add i16 %434, 1
	store i16 %435, i16* @llvm_Tseqno
	%436 = load %ast.AstNode** %node
	%437 = getelementptr %ast.AstNode* %436, i32 0, i32 1
	store i8 1, i8* %437
	%438 = load %ast.AstNode** %node
	%439 = getelementptr %ast.AstNode* %438, i32 0, i32 6
	store i32 1, i32* %439
	%440 = getelementptr [32 x i8]* @S.713
	%441 = bitcast [32 x i8]* %440 to [0 x i8]*
	%442 = load %ast.AstNode** %node
	%443 = bitcast %ast.AstNode* %442 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %441, %ast.AstNode* %443)
	%444 = load i8* %i
	%445 = zext i8 %444 to i32
	%446 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 %445
	%447 = load %type.TypeNode** %446
	%448 = getelementptr %type.TypeNode* %447, i32 0, i32 0
	%449 = load %type.TypeNode** %448
	%450 = bitcast %type.TypeNode* %449 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %450)
	%451 = getelementptr [29 x i8]* @S.714
	%452 = bitcast [29 x i8]* %451 to [0 x i8]*
	%453 = load %ast.AstNode** %node
	%454 = bitcast %ast.AstNode* %453 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %452, %ast.AstNode* %454)
	%455 = load i8* %i
	%456 = add i8 5, %455
	%457 = zext i8 %456 to i32
	%458 = getelementptr [10 x i8]* @llvm_UseIntrinsic, i32 0, i32 %457
	store i8 1, i8* %458
	br label %L.10
L.10:
	%459 = getelementptr %A.2* @debug, i32 0, i32 3
	%460 = load i8* %459
	%461 = icmp ne i8 %460, 0
	br i1 %461, label %L.28, label %L.27
L.28:
	call void @out_nl(i32 2)
	br label %L.27
L.27:
	store i8 0, i8* %rv.0
	br label %return
return:
	%462 = load i8* %rv.0
	ret i8 %462
}
@S.715 = internal constant [38 x i8] c"\09%N = call %T @llvm.bswap.%T(%T %0N)\0A\00"define internal void @llvm_Swap(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 13
	%2 = getelementptr [0 x %ast.AstNode*]* %1, i32 0, i32 0
	%3 = load %ast.AstNode** %2
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	%5 = call i8 @llvm_GenSub(%ast.AstNode* %4)
	%6 = load %ast.AstNode** %node
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 6
	%8 = load i32* %7
	switch i32 %8, label %L.1 [
		i32 16, label %L.3
		i32 32, label %L.4
		i32 64, label %L.5
	]
L.3:
	%9 = getelementptr [10 x i8]* @llvm_UseIntrinsic, i32 0, i32 2
	store i8 1, i8* %9
	br label %L.2
L.4:
	%10 = getelementptr [10 x i8]* @llvm_UseIntrinsic, i32 0, i32 3
	store i8 1, i8* %10
	br label %L.2
L.5:
	%11 = getelementptr [10 x i8]* @llvm_UseIntrinsic, i32 0, i32 4
	store i8 1, i8* %11
	br label %L.2
L.1:
	%12 = load %ast.AstNode** %node
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 13
	%14 = getelementptr [0 x %ast.AstNode*]* %13, i32 0, i32 0
	%15 = load %ast.AstNode** %14
	%16 = getelementptr %ast.AstNode* %15, i32 0, i32 9
	%17 = load i16* %16
	%18 = load %ast.AstNode** %node
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 9
	store i16 %17, i16* %19
	br label %return
L.2:
	%20 = load i16* @llvm_Tseqno
	%21 = load %ast.AstNode** %node
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 9
	store i16 %20, i16* %22
	%23 = load i16* @llvm_Tseqno
	%24 = add i16 %23, 1
	store i16 %24, i16* @llvm_Tseqno
	%25 = getelementptr [38 x i8]* @S.715
	%26 = bitcast [38 x i8]* %25 to [0 x i8]*
	%27 = load %ast.AstNode** %node
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %26, %ast.AstNode* %28)
	br label %return
return:
	ret void
}
@S.716 = internal constant [3 x i8] c"\22\22\00"define internal void @llvm_PStringCon(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%p = alloca [0 x i8]*
	%n = alloca i16
	%0 = load %ast.AstNode** %node
	%1 = icmp eq %ast.AstNode* %0, null
	br i1 %1, label %L.2, label %L.3
L.2:
	%2 = load %bout.BufIO** @llvm_f
	%3 = bitcast %bout.BufIO* %2 to %bout.BufIO*
	%4 = getelementptr [3 x i8]* @S.716
	%5 = bitcast [3 x i8]* %4 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %3, [0 x i8]* %5)
	br label %L.1
L.3:
	%6 = load %ast.AstNode** %node
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 12
	%8 = load %symb.SymbNode** %7
	%9 = bitcast %symb.SymbNode* %8 to [0 x i8]*
	%10 = bitcast [0 x i8]* %9 to [0 x i8]*
	store [0 x i8]* %10, [0 x i8]** %p
	%11 = load [0 x i8]** %p
	%12 = bitcast [0 x i8]* %11 to [0 x i8]*
	%13 = call i32 @zstr_len([0 x i8]* %12, i32 4095)
	%14 = trunc i32 %13 to i16
	store i16 %14, i16* %n
	%15 = load [0 x i8]** %p
	%16 = bitcast [0 x i8]* %15 to [0 x i8]*
	%17 = load i16* %n
	call void @llvm_PString([0 x i8]* %16, i16 %17, i8 0)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.717 = internal constant [20 x i8] c"\09%N = extractvalue \00"@S.718 = internal constant [7 x i8] c" %0N, \00"define internal void @llvm_GetRV(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%tl = alloca %type.TypeListEntry*
	%ps = alloca %symb.SymbNode*
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 10
	%2 = load i64* %1
	%3 = icmp eq i64 %2, 0
	br i1 %3, label %L.2, label %L.1
L.2:
	%4 = load %ast.AstNode** %node
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 13
	%6 = getelementptr [0 x %ast.AstNode*]* %5, i32 0, i32 0
	%7 = load %ast.AstNode** %6
	%8 = bitcast %ast.AstNode* %7 to %ast.AstNode*
	%9 = call i8 @llvm_GenSub(%ast.AstNode* %8)
	br label %L.1
L.1:
	%10 = load i16* @llvm_Tseqno
	%11 = load %ast.AstNode** %node
	%12 = getelementptr %ast.AstNode* %11, i32 0, i32 9
	store i16 %10, i16* %12
	%13 = load i16* @llvm_Tseqno
	%14 = add i16 %13, 1
	store i16 %14, i16* @llvm_Tseqno
	%15 = getelementptr [20 x i8]* @S.717
	%16 = bitcast [20 x i8]* %15 to [0 x i8]*
	%17 = load %ast.AstNode** %node
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %16, %ast.AstNode* %18)
	%19 = load %ast.AstNode** %node
	%20 = getelementptr %ast.AstNode* %19, i32 0, i32 13
	%21 = getelementptr [0 x %ast.AstNode*]* %20, i32 0, i32 0
	%22 = load %ast.AstNode** %21
	%23 = getelementptr %ast.AstNode* %22, i32 0, i32 12
	%24 = load %symb.SymbNode** %23
	%25 = bitcast %symb.SymbNode* %24 to %symb.SymbNode*
	store %symb.SymbNode* %25, %symb.SymbNode** %ps
	%26 = load %symb.SymbNode** %ps
	%27 = icmp ne %symb.SymbNode* %26, null
	br i1 %27, label %L.4, label %L.5
L.4:
	%28 = load %symb.SymbNode** %ps
	%29 = getelementptr %symb.SymbNode* %28, i32 0, i32 4
	%30 = load %type.TypeListEntry** %29
	%31 = bitcast %type.TypeListEntry* %30 to %type.TypeListEntry*
	store %type.TypeListEntry* %31, %type.TypeListEntry** %tl
	br label %L.3
L.5:
	%32 = load %ast.AstNode** %node
	%33 = getelementptr %ast.AstNode* %32, i32 0, i32 13
	%34 = getelementptr [0 x %ast.AstNode*]* %33, i32 0, i32 0
	%35 = load %ast.AstNode** %34
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 11
	%37 = load %type.TypeNode** %36
	%38 = bitcast %type.TypeNode* %37 to %type.TypeListEntry*
	%39 = bitcast %type.TypeListEntry* %38 to %type.TypeListEntry*
	store %type.TypeListEntry* %39, %type.TypeListEntry** %tl
	br label %L.3
L.3:
	%40 = load %type.TypeListEntry** %tl
	%41 = bitcast %type.TypeListEntry* %40 to %type.TypeListEntry*
	call void @llvm_PRetvType(%type.TypeListEntry* %41, i8 0)
	%42 = getelementptr [7 x i8]* @S.718
	%43 = bitcast [7 x i8]* %42 to [0 x i8]*
	%44 = load %ast.AstNode** %node
	%45 = bitcast %ast.AstNode* %44 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %43, %ast.AstNode* %45)
	%46 = load %bout.BufIO** @llvm_f
	%47 = bitcast %bout.BufIO* %46 to %bout.BufIO*
	%48 = load %ast.AstNode** %node
	%49 = getelementptr %ast.AstNode* %48, i32 0, i32 10
	%50 = load i64* %49
	%51 = trunc i64 %50 to i32
	call void @bout_uint32(%bout.BufIO* %47, i32 %51)
	%52 = load %bout.BufIO** @llvm_f
	%53 = bitcast %bout.BufIO* %52 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %53)
	br label %return
return:
	ret void
}
@S.719 = internal constant [6 x i8] c"%N = \00"@S.720 = internal constant [5 x i8] c"call\00"@S.721 = internal constant [17 x i8] c" asm sideeffect \00"@S.722 = internal constant [3 x i8] c", \00"@S.723 = internal constant [3 x i8] c" (\00"@S.724 = internal constant [6 x i8] c"%T %N\00"@S.725 = internal constant [3 x i8] c", \00"@S.726 = internal constant [3 x i8] c")\0A\00"define internal void @llvm_Asm(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%i = alloca i16
	store i16 2, i16* %i
	br label %L.1
L.1:
	%0 = load i16* %i
	%1 = load %ast.AstNode** %node
	%2 = getelementptr %ast.AstNode* %1, i32 0, i32 2
	%3 = load i16* %2
	%4 = icmp ult i16 %0, %3
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %ast.AstNode** %node
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 13
	%8 = load i16* %i
	%9 = zext i16 %8 to i32
	%10 = getelementptr [0 x %ast.AstNode*]* %7, i32 0, i32 %9
	%11 = load %ast.AstNode** %10
	%12 = bitcast %ast.AstNode* %11 to %ast.AstNode*
	%13 = call i8 @llvm_GenSub(%ast.AstNode* %12)
	%14 = load i16* %i
	%15 = add i16 %14, 1
	store i16 %15, i16* %i
	br label %L.1
L.2:
	%16 = load %bout.BufIO** @llvm_f
	%17 = bitcast %bout.BufIO* %16 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %17, i8 9)
	%18 = load %ast.AstNode** %node
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 11
	%20 = load %type.TypeNode** %19
	%21 = icmp ne %type.TypeNode* %20, null
	br i1 %21, label %L.5, label %L.4
L.5:
	%22 = load i16* @llvm_Tseqno
	%23 = load %ast.AstNode** %node
	%24 = getelementptr %ast.AstNode* %23, i32 0, i32 9
	store i16 %22, i16* %24
	%25 = load i16* @llvm_Tseqno
	%26 = add i16 %25, 1
	store i16 %26, i16* @llvm_Tseqno
	%27 = getelementptr [6 x i8]* @S.719
	%28 = bitcast [6 x i8]* %27 to [0 x i8]*
	%29 = load %ast.AstNode** %node
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %28, %ast.AstNode* %30)
	br label %L.4
L.4:
	%31 = load %bout.BufIO** @llvm_f
	%32 = bitcast %bout.BufIO* %31 to %bout.BufIO*
	%33 = getelementptr [5 x i8]* @S.720
	%34 = bitcast [5 x i8]* %33 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %32, [0 x i8]* %34)
	%35 = load %ast.AstNode** %node
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 11
	%37 = load %type.TypeNode** %36
	%38 = bitcast %type.TypeNode* %37 to %type.TypeListEntry*
	%39 = bitcast %type.TypeListEntry* %38 to %type.TypeListEntry*
	call void @llvm_PRetvType(%type.TypeListEntry* %39, i8 0)
	%40 = load %bout.BufIO** @llvm_f
	%41 = bitcast %bout.BufIO* %40 to %bout.BufIO*
	%42 = getelementptr [17 x i8]* @S.721
	%43 = bitcast [17 x i8]* %42 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %41, [0 x i8]* %43)
	%44 = load %ast.AstNode** %node
	%45 = getelementptr %ast.AstNode* %44, i32 0, i32 13
	%46 = getelementptr [0 x %ast.AstNode*]* %45, i32 0, i32 0
	%47 = load %ast.AstNode** %46
	%48 = bitcast %ast.AstNode* %47 to %ast.AstNode*
	call void @llvm_PStringCon(%ast.AstNode* %48)
	%49 = load %bout.BufIO** @llvm_f
	%50 = bitcast %bout.BufIO* %49 to %bout.BufIO*
	%51 = getelementptr [3 x i8]* @S.722
	%52 = bitcast [3 x i8]* %51 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %50, [0 x i8]* %52)
	%53 = load %ast.AstNode** %node
	%54 = getelementptr %ast.AstNode* %53, i32 0, i32 13
	%55 = getelementptr [0 x %ast.AstNode*]* %54, i32 0, i32 1
	%56 = load %ast.AstNode** %55
	%57 = bitcast %ast.AstNode* %56 to %ast.AstNode*
	call void @llvm_PStringCon(%ast.AstNode* %57)
	%58 = load %bout.BufIO** @llvm_f
	%59 = bitcast %bout.BufIO* %58 to %bout.BufIO*
	%60 = getelementptr [3 x i8]* @S.723
	%61 = bitcast [3 x i8]* %60 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %59, [0 x i8]* %61)
	store i16 2, i16* %i
	%62 = load %ast.AstNode** %node
	%63 = getelementptr %ast.AstNode* %62, i32 0, i32 2
	%64 = load i16* %63
	%65 = load i16* %i
	%66 = icmp ugt i16 %64, %65
	br i1 %66, label %L.7, label %L.6
L.7:
	br label %L.8
L.8:
	%67 = getelementptr [6 x i8]* @S.724
	%68 = bitcast [6 x i8]* %67 to [0 x i8]*
	%69 = load %ast.AstNode** %node
	%70 = getelementptr %ast.AstNode* %69, i32 0, i32 13
	%71 = load i16* %i
	%72 = zext i16 %71 to i32
	%73 = getelementptr [0 x %ast.AstNode*]* %70, i32 0, i32 %72
	%74 = load %ast.AstNode** %73
	%75 = bitcast %ast.AstNode* %74 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %68, %ast.AstNode* %75)
	%76 = load i16* %i
	%77 = add i16 %76, 1
	store i16 %77, i16* %i
	%78 = load i16* %i
	%79 = load %ast.AstNode** %node
	%80 = getelementptr %ast.AstNode* %79, i32 0, i32 2
	%81 = load i16* %80
	%82 = icmp uge i16 %78, %81
	br i1 %82, label %L.9, label %L.10
L.10:
	%83 = load %bout.BufIO** @llvm_f
	%84 = bitcast %bout.BufIO* %83 to %bout.BufIO*
	%85 = getelementptr [3 x i8]* @S.725
	%86 = bitcast [3 x i8]* %85 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %84, [0 x i8]* %86)
	br label %L.8
L.9:
	br label %L.6
L.6:
	%87 = load %bout.BufIO** @llvm_f
	%88 = bitcast %bout.BufIO* %87 to %bout.BufIO*
	%89 = getelementptr [3 x i8]* @S.726
	%90 = bitcast [3 x i8]* %89 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %88, [0 x i8]* %90)
	br label %return
return:
	ret void
}
define internal void @llvm_DclParmRetv(%symb.SymbNode* %ps.arg) nounwind {
L.0:
	%ps = alloca %symb.SymbNode*
	store %symb.SymbNode* %ps.arg, %symb.SymbNode** %ps
	%tl = alloca %type.TypeListEntry*
	%s = alloca %symb.SymbNode*
	%0 = load %symb.SymbNode** %ps
	%1 = getelementptr %symb.SymbNode* %0, i32 0, i32 3
	%2 = load %symb.SymbNode** %1
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %s
	br label %L.1
L.1:
	%4 = load %symb.SymbNode** %s
	%5 = icmp ne %symb.SymbNode* %4, null
	%6 = xor i1 %5, true
	br i1 %6, label %L.2, label %L.3
L.3:
	%7 = load %symb.SymbNode** %s
	%8 = getelementptr %symb.SymbNode* %7, i32 0, i32 1
	%9 = load %type.TypeNode** %8
	%10 = bitcast %type.TypeNode* %9 to %type.TypeNode*
	call void @llvm_DclType(%type.TypeNode* %10)
	%11 = load %symb.SymbNode** %s
	%12 = getelementptr %symb.SymbNode* %11, i32 0, i32 0
	%13 = load %symb.SymbNode** %12
	%14 = bitcast %symb.SymbNode* %13 to %symb.SymbNode*
	store %symb.SymbNode* %14, %symb.SymbNode** %s
	br label %L.1
L.2:
	%15 = load %symb.SymbNode** %ps
	%16 = getelementptr %symb.SymbNode* %15, i32 0, i32 4
	%17 = load %type.TypeListEntry** %16
	%18 = bitcast %type.TypeListEntry* %17 to %type.TypeListEntry*
	store %type.TypeListEntry* %18, %type.TypeListEntry** %tl
	br label %L.4
L.4:
	%19 = load %type.TypeListEntry** %tl
	%20 = icmp ne %type.TypeListEntry* %19, null
	%21 = xor i1 %20, true
	br i1 %21, label %L.5, label %L.6
L.6:
	%22 = load %type.TypeListEntry** %tl
	%23 = getelementptr %type.TypeListEntry* %22, i32 0, i32 1
	%24 = load %type.TypeNode** %23
	%25 = bitcast %type.TypeNode* %24 to %type.TypeNode*
	call void @llvm_DclType(%type.TypeNode* %25)
	%26 = load %type.TypeListEntry** %tl
	%27 = getelementptr %type.TypeListEntry* %26, i32 0, i32 0
	%28 = load %type.TypeListEntry** %27
	%29 = bitcast %type.TypeListEntry* %28 to %type.TypeListEntry*
	store %type.TypeListEntry* %29, %type.TypeListEntry** %tl
	br label %L.4
L.5:
	br label %return
return:
	ret void
}
@S.727 = internal constant [6 x i8] c"%N = \00"@S.728 = internal constant [6 x i8] c"tail \00"@S.729 = internal constant [5 x i8] c"call\00"@S.730 = internal constant [6 x i8] c" %0N(\00"@S.731 = internal constant [5 x i8] c" %I(\00"@S.732 = internal constant [6 x i8] c"%T %N\00"@S.733 = internal constant [3 x i8] c", \00"@S.734 = internal constant [3 x i8] c")\0A\00"define internal void @llvm_Call(%ast.AstNode* %node.arg, i8 zeroext %indirect.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	%indirect = alloca i8
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	store i8 %indirect.arg, i8* %indirect
	%i = alloca i16
	store i16 0, i16* %i
	br label %L.1
L.1:
	%0 = load i16* %i
	%1 = load %ast.AstNode** %node
	%2 = getelementptr %ast.AstNode* %1, i32 0, i32 2
	%3 = load i16* %2
	%4 = icmp ult i16 %0, %3
	%5 = xor i1 %4, true
	br i1 %5, label %L.2, label %L.3
L.3:
	%6 = load %ast.AstNode** %node
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 13
	%8 = load i16* %i
	%9 = zext i16 %8 to i32
	%10 = getelementptr [0 x %ast.AstNode*]* %7, i32 0, i32 %9
	%11 = load %ast.AstNode** %10
	%12 = bitcast %ast.AstNode* %11 to %ast.AstNode*
	%13 = call i8 @llvm_GenSub(%ast.AstNode* %12)
	%14 = load i16* %i
	%15 = add i16 %14, 1
	store i16 %15, i16* %i
	br label %L.1
L.2:
	%16 = load %bout.BufIO** @llvm_f
	%17 = bitcast %bout.BufIO* %16 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %17, i8 9)
	%18 = load %ast.AstNode** %node
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 11
	%20 = load %type.TypeNode** %19
	%21 = icmp ne %type.TypeNode* %20, null
	br i1 %21, label %L.5, label %L.4
L.5:
	%22 = load i16* @llvm_Tseqno
	%23 = load %ast.AstNode** %node
	%24 = getelementptr %ast.AstNode* %23, i32 0, i32 9
	store i16 %22, i16* %24
	%25 = load i16* @llvm_Tseqno
	%26 = add i16 %25, 1
	store i16 %26, i16* @llvm_Tseqno
	%27 = getelementptr [6 x i8]* @S.727
	%28 = bitcast [6 x i8]* %27 to [0 x i8]*
	%29 = load %ast.AstNode** %node
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %28, %ast.AstNode* %30)
	br label %L.4
L.4:
	%31 = getelementptr %A.3* @feature, i32 0, i32 5
	%32 = load i8* %31
	%33 = icmp ne i8 %32, 0
	br i1 %33, label %L.7, label %L.6
L.7:
	%34 = load %bout.BufIO** @llvm_f
	%35 = bitcast %bout.BufIO* %34 to %bout.BufIO*
	%36 = getelementptr [6 x i8]* @S.728
	%37 = bitcast [6 x i8]* %36 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %35, [0 x i8]* %37)
	br label %L.6
L.6:
	%38 = load %bout.BufIO** @llvm_f
	%39 = bitcast %bout.BufIO* %38 to %bout.BufIO*
	%40 = getelementptr [5 x i8]* @S.729
	%41 = bitcast [5 x i8]* %40 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %39, [0 x i8]* %41)
	%42 = load %ast.AstNode** %node
	%43 = getelementptr %ast.AstNode* %42, i32 0, i32 12
	%44 = load %symb.SymbNode** %43
	%45 = getelementptr %symb.SymbNode* %44, i32 0, i32 4
	%46 = load %type.TypeListEntry** %45
	%47 = bitcast %type.TypeListEntry* %46 to %type.TypeListEntry*
	call void @llvm_PRetvType(%type.TypeListEntry* %47, i8 0)
	%48 = load i8* %indirect
	%49 = icmp ne i8 %48, 0
	br i1 %49, label %L.9, label %L.10
L.9:
	%50 = getelementptr [6 x i8]* @S.730
	%51 = bitcast [6 x i8]* %50 to [0 x i8]*
	%52 = load %ast.AstNode** %node
	%53 = bitcast %ast.AstNode* %52 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %51, %ast.AstNode* %53)
	store i16 1, i16* %i
	br label %L.8
L.10:
	%54 = getelementptr [5 x i8]* @S.731
	%55 = bitcast [5 x i8]* %54 to [0 x i8]*
	%56 = load %ast.AstNode** %node
	%57 = bitcast %ast.AstNode* %56 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %55, %ast.AstNode* %57)
	store i16 0, i16* %i
	br label %L.8
L.8:
	%58 = load %ast.AstNode** %node
	%59 = getelementptr %ast.AstNode* %58, i32 0, i32 2
	%60 = load i16* %59
	%61 = load i16* %i
	%62 = icmp ugt i16 %60, %61
	br i1 %62, label %L.12, label %L.11
L.12:
	br label %L.13
L.13:
	%63 = getelementptr [6 x i8]* @S.732
	%64 = bitcast [6 x i8]* %63 to [0 x i8]*
	%65 = load %ast.AstNode** %node
	%66 = getelementptr %ast.AstNode* %65, i32 0, i32 13
	%67 = load i16* %i
	%68 = zext i16 %67 to i32
	%69 = getelementptr [0 x %ast.AstNode*]* %66, i32 0, i32 %68
	%70 = load %ast.AstNode** %69
	%71 = bitcast %ast.AstNode* %70 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %64, %ast.AstNode* %71)
	%72 = load i16* %i
	%73 = add i16 %72, 1
	store i16 %73, i16* %i
	%74 = load i16* %i
	%75 = load %ast.AstNode** %node
	%76 = getelementptr %ast.AstNode* %75, i32 0, i32 2
	%77 = load i16* %76
	%78 = icmp uge i16 %74, %77
	br i1 %78, label %L.14, label %L.15
L.15:
	%79 = load %bout.BufIO** @llvm_f
	%80 = bitcast %bout.BufIO* %79 to %bout.BufIO*
	%81 = getelementptr [3 x i8]* @S.733
	%82 = bitcast [3 x i8]* %81 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %80, [0 x i8]* %82)
	br label %L.13
L.14:
	br label %L.11
L.11:
	%83 = load %bout.BufIO** @llvm_f
	%84 = bitcast %bout.BufIO* %83 to %bout.BufIO*
	%85 = getelementptr [3 x i8]* @S.734
	%86 = bitcast [3 x i8]* %85 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %84, [0 x i8]* %86)
	%87 = load %ast.AstNode** %node
	%88 = getelementptr %ast.AstNode* %87, i32 0, i32 12
	%89 = load %symb.SymbNode** %88
	%90 = getelementptr %symb.SymbNode* %89, i32 0, i32 14
	%91 = load i8* %90
	%92 = icmp ne i8 %91, 0
	br i1 %92, label %L.17, label %L.16
L.17:
	%93 = load %ast.AstNode** %node
	%94 = getelementptr %ast.AstNode* %93, i32 0, i32 12
	%95 = load %symb.SymbNode** %94
	%96 = getelementptr %symb.SymbNode* %95, i32 0, i32 19
	%97 = getelementptr [0 x i8]* %96
	%98 = bitcast [0 x i8]* %97 to [0 x i8]*
	call void @lex_ErrorI(i8 42, [0 x i8]* %98)
	br label %L.16
L.16:
	br label %return
return:
	ret void
}
@S.735 = internal constant [3 x i8] c";\0A\00"define internal void @llvm_DclProcSearch(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%i = alloca i16
	%lhs = alloca %ast.AstNode*
	%rhs = alloca %ast.AstNode*
	%s = alloca %symb.SymbNode*
	%op = alloca i8
	%0 = load %ast.AstNode** %node
	%1 = icmp ne %ast.AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load %ast.AstNode** %node
	%3 = getelementptr %ast.AstNode* %2, i32 0, i32 0
	%4 = load i8* %3
	%5 = zext i8 %4 to i32
	switch i32 %5, label %L.3 [
		i32 5, label %L.5
		i32 6, label %L.6
		i32 8, label %L.7
		i32 14, label %L.8
		i32 10, label %L.9
		i32 33, label %L.10
		i32 49, label %L.11
		i32 50, label %L.11
		i32 51, label %L.11
		i32 52, label %L.11
		i32 12, label %L.12
	]
L.5:
	%6 = load %ast.AstNode** %node
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 12
	%8 = load %symb.SymbNode** %7
	%9 = bitcast %symb.SymbNode* %8 to %symb.SymbNode*
	store %symb.SymbNode* %9, %symb.SymbNode** %s
	%10 = load %symb.SymbNode** %s
	%11 = getelementptr %symb.SymbNode* %10, i32 0, i32 1
	%12 = load %type.TypeNode** %11
	%13 = bitcast %type.TypeNode* %12 to %type.TypeNode*
	call void @llvm_DclType(%type.TypeNode* %13)
	%14 = load %symb.SymbNode** %s
	%15 = getelementptr %symb.SymbNode* %14, i32 0, i32 13
	%16 = load i8* %15
	%17 = icmp ne i8 %16, 0
	br i1 %17, label %L.14, label %L.13
L.14:
	%18 = load %ast.AstNode** %node
	%19 = bitcast %ast.AstNode* %18 to %ast.AstNode*
	call void @llvm_DclVar(%ast.AstNode* %19)
	%20 = load %ast.AstNode** %node
	%21 = getelementptr %ast.AstNode* %20, i32 0, i32 0
	store i8 0, i8* %21
	br label %L.13
L.13:
	br label %return
L.6:
	%22 = load %ast.AstNode** %node
	%23 = getelementptr %ast.AstNode* %22, i32 0, i32 12
	%24 = load %symb.SymbNode** %23
	%25 = bitcast %symb.SymbNode* %24 to %symb.SymbNode*
	store %symb.SymbNode* %25, %symb.SymbNode** %s
	%26 = load %symb.SymbNode** %s
	%27 = icmp ne %symb.SymbNode* %26, null
	br i1 %27, label %L.16, label %L.15
L.16:
	%28 = load %symb.SymbNode** %s
	%29 = getelementptr %symb.SymbNode* %28, i32 0, i32 13
	store i8 1, i8* %29
	%30 = load %ast.AstNode** %node
	%31 = bitcast %ast.AstNode* %30 to %ast.AstNode*
	call void @llvm_DclCon(%ast.AstNode* %31)
	br label %L.15
L.15:
	%32 = load %ast.AstNode** %node
	%33 = getelementptr %ast.AstNode* %32, i32 0, i32 0
	store i8 0, i8* %33
	br label %return
L.7:
	%34 = load %ast.AstNode** %node
	%35 = bitcast %ast.AstNode* %34 to %ast.AstNode*
	call void @llvm_DclString(%ast.AstNode* %35)
	br label %return
L.8:
	%36 = load %ast.AstNode** %node
	%37 = bitcast %ast.AstNode* %36 to %ast.AstNode*
	call void @llvm_DclAggregate(%ast.AstNode* %37)
	br label %L.4
L.9:
	%ps = alloca %symb.SymbNode*
	%38 = load %ast.AstNode** %node
	%39 = getelementptr %ast.AstNode* %38, i32 0, i32 12
	%40 = load %symb.SymbNode** %39
	%41 = bitcast %symb.SymbNode* %40 to %symb.SymbNode*
	store %symb.SymbNode* %41, %symb.SymbNode** %ps
	%42 = load %symb.SymbNode** %ps
	%43 = getelementptr %symb.SymbNode* %42, i32 0, i32 13
	%44 = load i8* %43
	%45 = icmp eq i8 %44, 3
	br i1 %45, label %L.17, label %L.18
L.17:
	%46 = load %symb.SymbNode** %ps
	%47 = getelementptr %symb.SymbNode* %46, i32 0, i32 18
	%48 = load i8* %47
	%49 = icmp ne i8 %48, 0
	%50 = xor i1 %49, true
	br label %L.18
L.18:
	%51 = phi i1 [ false, %L.9 ], [ %50, %L.17 ]
	br i1 %51, label %L.20, label %L.19
L.20:
	%52 = load %symb.SymbNode** %ps
	%53 = bitcast %symb.SymbNode* %52 to %symb.SymbNode*
	call void @llvm_DclParmRetv(%symb.SymbNode* %53)
	%54 = load %ast.AstNode** %node
	%55 = bitcast %ast.AstNode* %54 to %ast.AstNode*
	call void @llvm_DclProc(%ast.AstNode* %55, i8 0)
	%56 = load %bout.BufIO** @llvm_f
	%57 = bitcast %bout.BufIO* %56 to %bout.BufIO*
	%58 = getelementptr [3 x i8]* @S.735
	%59 = bitcast [3 x i8]* %58 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %57, [0 x i8]* %59)
	%60 = load %symb.SymbNode** %ps
	%61 = getelementptr %symb.SymbNode* %60, i32 0, i32 18
	store i8 1, i8* %61
	br label %L.19
L.19:
	br label %L.4
L.10:
	%62 = load %ast.AstNode** %node
	%63 = getelementptr %ast.AstNode* %62, i32 0, i32 13
	%64 = getelementptr [0 x %ast.AstNode*]* %63, i32 0, i32 0
	%65 = load %ast.AstNode** %64
	%66 = bitcast %ast.AstNode* %65 to %ast.AstNode*
	store %ast.AstNode* %66, %ast.AstNode** %rhs
	%67 = load %ast.AstNode** %rhs
	%68 = getelementptr %ast.AstNode* %67, i32 0, i32 11
	%69 = load %type.TypeNode** %68
	%70 = bitcast %type.TypeNode* %69 to %type.TypeNode*
	%71 = load %ast.AstNode** %rhs
	%72 = bitcast %ast.AstNode* %71 to %ast.AstNode*
	%73 = call %ast.AstNode* @ast_New1(i8 31, %type.TypeNode* %70, %ast.AstNode* %72)
	%74 = bitcast %ast.AstNode* %73 to %ast.AstNode*
	store %ast.AstNode* %74, %ast.AstNode** %lhs
	%75 = load %type.TypeNode** @type_booltype
	%76 = bitcast %type.TypeNode* %75 to %type.TypeNode*
	%77 = load %ast.AstNode** %rhs
	%78 = bitcast %ast.AstNode* %77 to %ast.AstNode*
	%79 = load %ast.AstNode** %rhs
	%80 = getelementptr %ast.AstNode* %79, i32 0, i32 11
	%81 = load %type.TypeNode** %80
	%82 = bitcast %type.TypeNode* %81 to %type.TypeNode*
	%83 = call %ast.AstNode* @ast_Const(%type.TypeNode* %82, i64 0)
	%84 = bitcast %ast.AstNode* %83 to %ast.AstNode*
	%85 = call %ast.AstNode* @ast_New2(i8 45, %type.TypeNode* %76, %ast.AstNode* %78, %ast.AstNode* %84)
	%86 = bitcast %ast.AstNode* %85 to %ast.AstNode*
	%87 = load %ast.AstNode** %node
	%88 = getelementptr %ast.AstNode* %87, i32 0, i32 13
	%89 = getelementptr [0 x %ast.AstNode*]* %88, i32 0, i32 0
	store %ast.AstNode* %86, %ast.AstNode** %89
	%90 = load %ast.AstNode** %node
	%91 = bitcast %ast.AstNode* %90 to %ast.AstNode*
	%92 = load %ast.AstNode** %lhs
	%93 = bitcast %ast.AstNode* %92 to %ast.AstNode*
	%94 = call %ast.AstNode* @ast_Child(%ast.AstNode* %91, %ast.AstNode* %93)
	%95 = bitcast %ast.AstNode* %94 to %ast.AstNode*
	store %ast.AstNode* %95, %ast.AstNode** %node
	%96 = load %ast.AstNode** %node
	%97 = bitcast %ast.AstNode* %96 to %ast.AstNode*
	%98 = load %ast.AstNode** %rhs
	%99 = bitcast %ast.AstNode* %98 to %ast.AstNode*
	%100 = call %ast.AstNode* @ast_Child(%ast.AstNode* %97, %ast.AstNode* %99)
	%101 = bitcast %ast.AstNode* %100 to %ast.AstNode*
	store %ast.AstNode* %101, %ast.AstNode** %node
	%102 = load %ast.AstNode** %node
	%103 = getelementptr %ast.AstNode* %102, i32 0, i32 0
	store i8 63, i8* %103
	br label %L.4
L.11:
	%104 = load %ast.AstNode** %node
	%105 = getelementptr %ast.AstNode* %104, i32 0, i32 13
	%106 = getelementptr [0 x %ast.AstNode*]* %105, i32 0, i32 0
	%107 = load %ast.AstNode** %106
	%108 = bitcast %ast.AstNode* %107 to %ast.AstNode*
	store %ast.AstNode* %108, %ast.AstNode** %lhs
	%109 = load %ast.AstNode** %node
	%110 = getelementptr %ast.AstNode* %109, i32 0, i32 13
	%111 = getelementptr [0 x %ast.AstNode*]* %110, i32 0, i32 1
	%112 = load %ast.AstNode** %111
	%113 = bitcast %ast.AstNode* %112 to %ast.AstNode*
	store %ast.AstNode* %113, %ast.AstNode** %rhs
	%114 = load %ast.AstNode** %node
	%115 = getelementptr %ast.AstNode* %114, i32 0, i32 0
	%116 = load i8* %115
	%117 = zext i8 %116 to i32
	switch i32 %117, label %L.21 [
		i32 51, label %L.23
		i32 52, label %L.24
		i32 49, label %L.25
		i32 50, label %L.26
	]
L.23:
	store i8 45, i8* %op
	br label %L.22
L.24:
	store i8 46, i8* %op
	br label %L.22
L.25:
	store i8 41, i8* %op
	br label %L.22
L.26:
	store i8 42, i8* %op
	br label %L.22
L.21:
	br label %L.22
L.22:
	%118 = load i8* %op
	%119 = load %type.TypeNode** @type_booltype
	%120 = bitcast %type.TypeNode* %119 to %type.TypeNode*
	%121 = load %ast.AstNode** %lhs
	%122 = bitcast %ast.AstNode* %121 to %ast.AstNode*
	%123 = load %ast.AstNode** %rhs
	%124 = bitcast %ast.AstNode* %123 to %ast.AstNode*
	%125 = call %ast.AstNode* @ast_New2(i8 %118, %type.TypeNode* %120, %ast.AstNode* %122, %ast.AstNode* %124)
	%126 = bitcast %ast.AstNode* %125 to %ast.AstNode*
	%127 = load %ast.AstNode** %node
	%128 = getelementptr %ast.AstNode* %127, i32 0, i32 13
	%129 = getelementptr [0 x %ast.AstNode*]* %128, i32 0, i32 0
	store %ast.AstNode* %126, %ast.AstNode** %129
	%130 = load %ast.AstNode** %lhs
	%131 = bitcast %ast.AstNode* %130 to %ast.AstNode*
	%132 = load %ast.AstNode** %node
	%133 = getelementptr %ast.AstNode* %132, i32 0, i32 13
	%134 = getelementptr [0 x %ast.AstNode*]* %133, i32 0, i32 1
	store %ast.AstNode* %131, %ast.AstNode** %134
	%135 = load %ast.AstNode** %node
	%136 = bitcast %ast.AstNode* %135 to %ast.AstNode*
	%137 = load %ast.AstNode** %rhs
	%138 = bitcast %ast.AstNode* %137 to %ast.AstNode*
	%139 = call %ast.AstNode* @ast_Child(%ast.AstNode* %136, %ast.AstNode* %138)
	%140 = bitcast %ast.AstNode* %139 to %ast.AstNode*
	store %ast.AstNode* %140, %ast.AstNode** %node
	%141 = load %ast.AstNode** %node
	%142 = getelementptr %ast.AstNode* %141, i32 0, i32 0
	store i8 63, i8* %142
	br label %L.4
L.12:
	br label %return
L.3:
	br label %L.4
L.4:
	store i16 0, i16* %i
	br label %L.27
L.27:
	%143 = load i16* %i
	%144 = load %ast.AstNode** %node
	%145 = getelementptr %ast.AstNode* %144, i32 0, i32 2
	%146 = load i16* %145
	%147 = icmp ult i16 %143, %146
	%148 = xor i1 %147, true
	br i1 %148, label %L.28, label %L.29
L.29:
	%149 = load %ast.AstNode** %node
	%150 = getelementptr %ast.AstNode* %149, i32 0, i32 13
	%151 = load i16* %i
	%152 = zext i16 %151 to i32
	%153 = getelementptr [0 x %ast.AstNode*]* %150, i32 0, i32 %152
	%154 = load %ast.AstNode** %153
	%155 = bitcast %ast.AstNode* %154 to %ast.AstNode*
	call void @llvm_DclProcSearch(%ast.AstNode* %155)
	%156 = load i16* %i
	%157 = add i16 %156, 1
	store i16 %157, i16* %i
	br label %L.27
L.28:
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.736 = internal constant [14 x i8] c" alwaysinline\00"@S.737 = internal constant [9 x i8] c" optsize\00"@S.738 = internal constant [13 x i8] c" nounwind {\0A\00"@S.739 = internal constant [11 x i8] c" = alloca \00"@S.740 = internal constant [3 x i8] c"\09%\00"@S.741 = internal constant [11 x i8] c" = alloca \00"@S.742 = internal constant [8 x i8] c"\09store \00"@S.743 = internal constant [3 x i8] c" %\00"@S.744 = internal constant [7 x i8] c".arg, \00"@S.745 = internal constant [4 x i8] c"* %\00"@S.746 = internal constant [18 x i8] c"\09br label %return\00"@S.747 = internal constant [9 x i8] c"return:\0A\00"@S.748 = internal constant [9 x i8] c" = load \00"@S.749 = internal constant [3 x i8] c"* \00"@S.750 = internal constant [6 x i8] c"\09%mrv\00"@S.751 = internal constant [15 x i8] c" = insertvalue\00"@S.752 = internal constant [7 x i8] c" undef\00"@S.753 = internal constant [6 x i8] c" %mrv\00"@S.754 = internal constant [6 x i8] c"\09ret \00"@S.755 = internal constant [6 x i8] c" %mrv\00"@S.756 = internal constant [6 x i8] c"\09ret \00"@S.757 = internal constant [10 x i8] c"\09ret void\00"@S.758 = internal constant [4 x i8] c"\0A}\0A\00"define internal void @llvm_Procedure(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%s = alloca %symb.SymbNode*
	%ps = alloca %symb.SymbNode*
	%tl = alloca %type.TypeListEntry*
	%i = alloca i16
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 12
	%2 = load %symb.SymbNode** %1
	%3 = bitcast %symb.SymbNode* %2 to %symb.SymbNode*
	store %symb.SymbNode* %3, %symb.SymbNode** %ps
	%4 = load %symb.SymbNode** %ps
	%5 = icmp ne %symb.SymbNode* %4, null
	br i1 %5, label %L.2, label %L.1
L.2:
	%6 = load %symb.SymbNode** %ps
	%7 = bitcast %symb.SymbNode* %6 to %symb.SymbNode*
	call void @llvm_DclParmRetv(%symb.SymbNode* %7)
	%8 = load %ast.AstNode** %node
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 13
	%10 = getelementptr [0 x %ast.AstNode*]* %9, i32 0, i32 0
	%11 = load %ast.AstNode** %10
	%12 = bitcast %ast.AstNode* %11 to %ast.AstNode*
	call void @llvm_DclProcSearch(%ast.AstNode* %12)
	%13 = load %ast.AstNode** %node
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	call void @llvm_DclProc(%ast.AstNode* %14, i8 1)
	%15 = load %symb.SymbNode** %ps
	%16 = getelementptr %symb.SymbNode* %15, i32 0, i32 13
	%17 = load i8* %16
	%18 = icmp eq i8 %17, 5
	br i1 %18, label %L.4, label %L.3
L.4:
	%19 = load %bout.BufIO** @llvm_f
	%20 = bitcast %bout.BufIO* %19 to %bout.BufIO*
	%21 = getelementptr [14 x i8]* @S.736
	%22 = bitcast [14 x i8]* %21 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %20, [0 x i8]* %22)
	br label %L.3
L.3:
	%23 = getelementptr %A.3* @feature, i32 0, i32 0
	%24 = load i8* %23
	%25 = icmp ne i8 %24, 0
	br i1 %25, label %L.6, label %L.5
L.6:
	%26 = load %bout.BufIO** @llvm_f
	%27 = bitcast %bout.BufIO* %26 to %bout.BufIO*
	%28 = getelementptr [9 x i8]* @S.737
	%29 = bitcast [9 x i8]* %28 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %27, [0 x i8]* %29)
	br label %L.5
L.5:
	%30 = load %bout.BufIO** @llvm_f
	%31 = bitcast %bout.BufIO* %30 to %bout.BufIO*
	%32 = getelementptr [13 x i8]* @S.738
	%33 = bitcast [13 x i8]* %32 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %31, [0 x i8]* %33)
	%34 = load i16* @llvm_Pseqno
	%35 = add i16 %34, 1
	store i16 %35, i16* @llvm_Pseqno
	store i16 1, i16* @llvm_Tseqno
	store i16 0, i16* @llvm_Lseqno
	%36 = load i16* @llvm_Lseqno
	call void @llvm_Label(i16 %36)
	%37 = load i16* @llvm_Lseqno
	%38 = add i16 %37, 1
	store i16 %38, i16* @llvm_Lseqno
	%39 = load %symb.SymbNode** %ps
	%40 = getelementptr %symb.SymbNode* %39, i32 0, i32 4
	%41 = load %type.TypeListEntry** %40
	%42 = bitcast %type.TypeListEntry* %41 to %type.TypeListEntry*
	store %type.TypeListEntry* %42, %type.TypeListEntry** %tl
	store i16 0, i16* %i
	br label %L.7
L.7:
	%43 = load %type.TypeListEntry** %tl
	%44 = icmp ne %type.TypeListEntry* %43, null
	%45 = xor i1 %44, true
	br i1 %45, label %L.8, label %L.9
L.9:
	%46 = load %bout.BufIO** @llvm_f
	%47 = bitcast %bout.BufIO* %46 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %47, i8 9)
	%48 = load i16* %i
	call void @llvm_PRetValName(i16 %48)
	%49 = load %bout.BufIO** @llvm_f
	%50 = bitcast %bout.BufIO* %49 to %bout.BufIO*
	%51 = getelementptr [11 x i8]* @S.739
	%52 = bitcast [11 x i8]* %51 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %50, [0 x i8]* %52)
	%53 = load %type.TypeListEntry** %tl
	%54 = getelementptr %type.TypeListEntry* %53, i32 0, i32 1
	%55 = load %type.TypeNode** %54
	%56 = bitcast %type.TypeNode* %55 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %56)
	%57 = load %bout.BufIO** @llvm_f
	%58 = bitcast %bout.BufIO* %57 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %58)
	%59 = load i16* %i
	%60 = add i16 %59, 1
	store i16 %60, i16* %i
	%61 = load %type.TypeListEntry** %tl
	%62 = getelementptr %type.TypeListEntry* %61, i32 0, i32 0
	%63 = load %type.TypeListEntry** %62
	%64 = bitcast %type.TypeListEntry* %63 to %type.TypeListEntry*
	store %type.TypeListEntry* %64, %type.TypeListEntry** %tl
	br label %L.7
L.8:
	%65 = load %symb.SymbNode** %ps
	%66 = getelementptr %symb.SymbNode* %65, i32 0, i32 3
	%67 = load %symb.SymbNode** %66
	%68 = bitcast %symb.SymbNode* %67 to %symb.SymbNode*
	store %symb.SymbNode* %68, %symb.SymbNode** %s
	br label %L.10
L.10:
	%69 = load %symb.SymbNode** %s
	%70 = icmp ne %symb.SymbNode* %69, null
	%71 = xor i1 %70, true
	br i1 %71, label %L.11, label %L.12
L.12:
	%72 = load %bout.BufIO** @llvm_f
	%73 = bitcast %bout.BufIO* %72 to %bout.BufIO*
	%74 = getelementptr [3 x i8]* @S.740
	%75 = bitcast [3 x i8]* %74 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %73, [0 x i8]* %75)
	%76 = load %bout.BufIO** @llvm_f
	%77 = bitcast %bout.BufIO* %76 to %bout.BufIO*
	%78 = load %symb.SymbNode** %s
	%79 = getelementptr %symb.SymbNode* %78, i32 0, i32 19
	%80 = getelementptr [0 x i8]* %79
	%81 = bitcast [0 x i8]* %80 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %77, [0 x i8]* %81)
	%82 = load %bout.BufIO** @llvm_f
	%83 = bitcast %bout.BufIO* %82 to %bout.BufIO*
	%84 = getelementptr [11 x i8]* @S.741
	%85 = bitcast [11 x i8]* %84 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %83, [0 x i8]* %85)
	%86 = load %symb.SymbNode** %s
	%87 = getelementptr %symb.SymbNode* %86, i32 0, i32 1
	%88 = load %type.TypeNode** %87
	%89 = bitcast %type.TypeNode* %88 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %89)
	%90 = load %bout.BufIO** @llvm_f
	%91 = bitcast %bout.BufIO* %90 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %91)
	%92 = load %symb.SymbNode** %s
	%93 = getelementptr %symb.SymbNode* %92, i32 0, i32 0
	%94 = load %symb.SymbNode** %93
	%95 = bitcast %symb.SymbNode* %94 to %symb.SymbNode*
	store %symb.SymbNode* %95, %symb.SymbNode** %s
	br label %L.10
L.11:
	%96 = load %symb.SymbNode** %ps
	%97 = getelementptr %symb.SymbNode* %96, i32 0, i32 3
	%98 = load %symb.SymbNode** %97
	%99 = bitcast %symb.SymbNode* %98 to %symb.SymbNode*
	store %symb.SymbNode* %99, %symb.SymbNode** %s
	br label %L.13
L.13:
	%100 = load %symb.SymbNode** %s
	%101 = icmp ne %symb.SymbNode* %100, null
	%102 = xor i1 %101, true
	br i1 %102, label %L.14, label %L.15
L.15:
	%103 = load %bout.BufIO** @llvm_f
	%104 = bitcast %bout.BufIO* %103 to %bout.BufIO*
	%105 = getelementptr [8 x i8]* @S.742
	%106 = bitcast [8 x i8]* %105 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %104, [0 x i8]* %106)
	%107 = load %symb.SymbNode** %s
	%108 = getelementptr %symb.SymbNode* %107, i32 0, i32 1
	%109 = load %type.TypeNode** %108
	%110 = bitcast %type.TypeNode* %109 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %110)
	%111 = load %bout.BufIO** @llvm_f
	%112 = bitcast %bout.BufIO* %111 to %bout.BufIO*
	%113 = getelementptr [3 x i8]* @S.743
	%114 = bitcast [3 x i8]* %113 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %112, [0 x i8]* %114)
	%115 = load %bout.BufIO** @llvm_f
	%116 = bitcast %bout.BufIO* %115 to %bout.BufIO*
	%117 = load %symb.SymbNode** %s
	%118 = getelementptr %symb.SymbNode* %117, i32 0, i32 19
	%119 = getelementptr [0 x i8]* %118
	%120 = bitcast [0 x i8]* %119 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %116, [0 x i8]* %120)
	%121 = load %bout.BufIO** @llvm_f
	%122 = bitcast %bout.BufIO* %121 to %bout.BufIO*
	%123 = getelementptr [7 x i8]* @S.744
	%124 = bitcast [7 x i8]* %123 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %122, [0 x i8]* %124)
	%125 = load %symb.SymbNode** %s
	%126 = getelementptr %symb.SymbNode* %125, i32 0, i32 1
	%127 = load %type.TypeNode** %126
	%128 = bitcast %type.TypeNode* %127 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %128)
	%129 = load %bout.BufIO** @llvm_f
	%130 = bitcast %bout.BufIO* %129 to %bout.BufIO*
	%131 = getelementptr [4 x i8]* @S.745
	%132 = bitcast [4 x i8]* %131 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %130, [0 x i8]* %132)
	%133 = load %bout.BufIO** @llvm_f
	%134 = bitcast %bout.BufIO* %133 to %bout.BufIO*
	%135 = load %symb.SymbNode** %s
	%136 = getelementptr %symb.SymbNode* %135, i32 0, i32 19
	%137 = getelementptr [0 x i8]* %136
	%138 = bitcast [0 x i8]* %137 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %134, [0 x i8]* %138)
	%139 = load %bout.BufIO** @llvm_f
	%140 = bitcast %bout.BufIO* %139 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %140)
	%141 = getelementptr %A.3* @feature, i32 0, i32 3
	%142 = load i8* %141
	%143 = icmp ne i8 %142, 0
	br i1 %143, label %L.17, label %L.16
L.17:
	%144 = load %symb.SymbNode** %s
	%145 = bitcast %symb.SymbNode* %144 to %symb.SymbNode*
	%146 = call i16 @llvmdb_DefVar(%symb.SymbNode* %145)
	br label %L.16
L.16:
	%147 = load %symb.SymbNode** %s
	%148 = getelementptr %symb.SymbNode* %147, i32 0, i32 0
	%149 = load %symb.SymbNode** %148
	%150 = bitcast %symb.SymbNode* %149 to %symb.SymbNode*
	store %symb.SymbNode* %150, %symb.SymbNode** %s
	br label %L.13
L.14:
	%151 = load %ast.AstNode** %node
	%152 = getelementptr %ast.AstNode* %151, i32 0, i32 13
	%153 = getelementptr [0 x %ast.AstNode*]* %152, i32 0, i32 0
	%154 = load %ast.AstNode** %153
	%155 = bitcast %ast.AstNode* %154 to %ast.AstNode*
	%156 = call i8 @llvm_GenSub(%ast.AstNode* %155)
	%157 = icmp ne i8 %156, 0
	%158 = xor i1 %157, true
	br i1 %158, label %L.19, label %L.18
L.19:
	%159 = load %bout.BufIO** @llvm_f
	%160 = bitcast %bout.BufIO* %159 to %bout.BufIO*
	%161 = getelementptr [18 x i8]* @S.746
	%162 = bitcast [18 x i8]* %161 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %160, [0 x i8]* %162)
	%163 = load %ast.AstNode** %node
	%164 = bitcast %ast.AstNode* %163 to %ast.AstNode*
	call void @llvm_PEndLine(%ast.AstNode* %164)
	br label %L.18
L.18:
	%165 = load %bout.BufIO** @llvm_f
	%166 = bitcast %bout.BufIO* %165 to %bout.BufIO*
	%167 = getelementptr [9 x i8]* @S.747
	%168 = bitcast [9 x i8]* %167 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %166, [0 x i8]* %168)
	%169 = load %symb.SymbNode** %ps
	%170 = getelementptr %symb.SymbNode* %169, i32 0, i32 4
	%171 = load %type.TypeListEntry** %170
	%172 = bitcast %type.TypeListEntry* %171 to %type.TypeListEntry*
	store %type.TypeListEntry* %172, %type.TypeListEntry** %tl
	%173 = load %type.TypeListEntry** %tl
	%174 = icmp ne %type.TypeListEntry* %173, null
	br i1 %174, label %L.21, label %L.22
L.21:
	store i16 0, i16* %i
	br label %L.23
L.23:
	%175 = load %type.TypeListEntry** %tl
	%176 = icmp ne %type.TypeListEntry* %175, null
	%177 = xor i1 %176, true
	br i1 %177, label %L.24, label %L.25
L.25:
	%178 = load %bout.BufIO** @llvm_f
	%179 = bitcast %bout.BufIO* %178 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %179, i8 9)
	%180 = load i16* @llvm_Tseqno
	%181 = load i16* %i
	%182 = add i16 %180, %181
	call void @llvm_PTempName(i16 %182)
	%183 = load %bout.BufIO** @llvm_f
	%184 = bitcast %bout.BufIO* %183 to %bout.BufIO*
	%185 = getelementptr [9 x i8]* @S.748
	%186 = bitcast [9 x i8]* %185 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %184, [0 x i8]* %186)
	%187 = load %type.TypeListEntry** %tl
	%188 = getelementptr %type.TypeListEntry* %187, i32 0, i32 1
	%189 = load %type.TypeNode** %188
	%190 = bitcast %type.TypeNode* %189 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %190)
	%191 = load %bout.BufIO** @llvm_f
	%192 = bitcast %bout.BufIO* %191 to %bout.BufIO*
	%193 = getelementptr [3 x i8]* @S.749
	%194 = bitcast [3 x i8]* %193 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %192, [0 x i8]* %194)
	%195 = load i16* %i
	call void @llvm_PRetValName(i16 %195)
	%196 = load %bout.BufIO** @llvm_f
	%197 = bitcast %bout.BufIO* %196 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %197)
	%198 = load i16* %i
	%199 = add i16 %198, 1
	store i16 %199, i16* %i
	%200 = load %type.TypeListEntry** %tl
	%201 = getelementptr %type.TypeListEntry* %200, i32 0, i32 0
	%202 = load %type.TypeListEntry** %201
	%203 = bitcast %type.TypeListEntry* %202 to %type.TypeListEntry*
	store %type.TypeListEntry* %203, %type.TypeListEntry** %tl
	br label %L.23
L.24:
	%204 = load %symb.SymbNode** %ps
	%205 = getelementptr %symb.SymbNode* %204, i32 0, i32 4
	%206 = load %type.TypeListEntry** %205
	%207 = bitcast %type.TypeListEntry* %206 to %type.TypeListEntry*
	store %type.TypeListEntry* %207, %type.TypeListEntry** %tl
	store i16 0, i16* %i
	%208 = load %type.TypeListEntry** %tl
	%209 = getelementptr %type.TypeListEntry* %208, i32 0, i32 0
	%210 = load %type.TypeListEntry** %209
	%211 = icmp ne %type.TypeListEntry* %210, null
	br i1 %211, label %L.27, label %L.28
L.27:
	br label %L.29
L.29:
	%212 = load %bout.BufIO** @llvm_f
	%213 = bitcast %bout.BufIO* %212 to %bout.BufIO*
	%214 = getelementptr [6 x i8]* @S.750
	%215 = bitcast [6 x i8]* %214 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %213, [0 x i8]* %215)
	%216 = load %bout.BufIO** @llvm_f
	%217 = bitcast %bout.BufIO* %216 to %bout.BufIO*
	%218 = load i16* %i
	%219 = zext i16 %218 to i32
	call void @bout_uint(%bout.BufIO* %217, i32 %219)
	%220 = load %bout.BufIO** @llvm_f
	%221 = bitcast %bout.BufIO* %220 to %bout.BufIO*
	%222 = getelementptr [15 x i8]* @S.751
	%223 = bitcast [15 x i8]* %222 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %221, [0 x i8]* %223)
	%224 = load %symb.SymbNode** %ps
	%225 = getelementptr %symb.SymbNode* %224, i32 0, i32 4
	%226 = load %type.TypeListEntry** %225
	%227 = bitcast %type.TypeListEntry* %226 to %type.TypeListEntry*
	call void @llvm_PRetvType(%type.TypeListEntry* %227, i8 0)
	%228 = load i16* %i
	%229 = icmp eq i16 %228, 0
	br i1 %229, label %L.32, label %L.33
L.32:
	%230 = load %bout.BufIO** @llvm_f
	%231 = bitcast %bout.BufIO* %230 to %bout.BufIO*
	%232 = getelementptr [7 x i8]* @S.752
	%233 = bitcast [7 x i8]* %232 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %231, [0 x i8]* %233)
	br label %L.31
L.33:
	%234 = load %bout.BufIO** @llvm_f
	%235 = bitcast %bout.BufIO* %234 to %bout.BufIO*
	%236 = getelementptr [6 x i8]* @S.753
	%237 = bitcast [6 x i8]* %236 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %235, [0 x i8]* %237)
	%238 = load %bout.BufIO** @llvm_f
	%239 = bitcast %bout.BufIO* %238 to %bout.BufIO*
	%240 = load i16* %i
	%241 = sub i16 %240, 1
	%242 = zext i16 %241 to i32
	call void @bout_uint(%bout.BufIO* %239, i32 %242)
	br label %L.31
L.31:
	%243 = load %bout.BufIO** @llvm_f
	%244 = bitcast %bout.BufIO* %243 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %244, i8 44)
	%245 = load %type.TypeListEntry** %tl
	%246 = getelementptr %type.TypeListEntry* %245, i32 0, i32 1
	%247 = load %type.TypeNode** %246
	%248 = bitcast %type.TypeNode* %247 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %248)
	%249 = load %bout.BufIO** @llvm_f
	%250 = bitcast %bout.BufIO* %249 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %250, i8 32)
	%251 = load i16* @llvm_Tseqno
	%252 = load i16* %i
	%253 = add i16 %251, %252
	call void @llvm_PTempName(i16 %253)
	%254 = load %bout.BufIO** @llvm_f
	%255 = bitcast %bout.BufIO* %254 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %255, i8 44)
	%256 = load %bout.BufIO** @llvm_f
	%257 = bitcast %bout.BufIO* %256 to %bout.BufIO*
	%258 = load i16* %i
	%259 = zext i16 %258 to i32
	call void @bout_uint(%bout.BufIO* %257, i32 %259)
	%260 = load %bout.BufIO** @llvm_f
	%261 = bitcast %bout.BufIO* %260 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %261)
	%262 = load i16* %i
	%263 = add i16 %262, 1
	store i16 %263, i16* %i
	%264 = load %type.TypeListEntry** %tl
	%265 = getelementptr %type.TypeListEntry* %264, i32 0, i32 0
	%266 = load %type.TypeListEntry** %265
	%267 = bitcast %type.TypeListEntry* %266 to %type.TypeListEntry*
	store %type.TypeListEntry* %267, %type.TypeListEntry** %tl
	%268 = load %type.TypeListEntry** %tl
	%269 = icmp eq %type.TypeListEntry* %268, null
	br i1 %269, label %L.30, label %L.34
L.34:
	br label %L.29
L.30:
	%270 = load %bout.BufIO** @llvm_f
	%271 = bitcast %bout.BufIO* %270 to %bout.BufIO*
	%272 = getelementptr [6 x i8]* @S.754
	%273 = bitcast [6 x i8]* %272 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %271, [0 x i8]* %273)
	%274 = load %symb.SymbNode** %ps
	%275 = getelementptr %symb.SymbNode* %274, i32 0, i32 4
	%276 = load %type.TypeListEntry** %275
	%277 = bitcast %type.TypeListEntry* %276 to %type.TypeListEntry*
	call void @llvm_PRetvType(%type.TypeListEntry* %277, i8 0)
	%278 = load %bout.BufIO** @llvm_f
	%279 = bitcast %bout.BufIO* %278 to %bout.BufIO*
	%280 = getelementptr [6 x i8]* @S.755
	%281 = bitcast [6 x i8]* %280 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %279, [0 x i8]* %281)
	%282 = load %bout.BufIO** @llvm_f
	%283 = bitcast %bout.BufIO* %282 to %bout.BufIO*
	%284 = load i16* %i
	%285 = sub i16 %284, 1
	%286 = zext i16 %285 to i32
	call void @bout_uint(%bout.BufIO* %283, i32 %286)
	%287 = load %bout.BufIO** @llvm_f
	%288 = bitcast %bout.BufIO* %287 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %288)
	br label %L.26
L.28:
	%289 = load %bout.BufIO** @llvm_f
	%290 = bitcast %bout.BufIO* %289 to %bout.BufIO*
	%291 = getelementptr [6 x i8]* @S.756
	%292 = bitcast [6 x i8]* %291 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %290, [0 x i8]* %292)
	%293 = load %type.TypeListEntry** %tl
	%294 = getelementptr %type.TypeListEntry* %293, i32 0, i32 1
	%295 = load %type.TypeNode** %294
	%296 = bitcast %type.TypeNode* %295 to %type.TypeNode*
	call void @llvm_PType(%type.TypeNode* %296)
	%297 = load %bout.BufIO** @llvm_f
	%298 = bitcast %bout.BufIO* %297 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %298, i8 32)
	%299 = load i16* @llvm_Tseqno
	%300 = load i16* %i
	%301 = add i16 %299, %300
	call void @llvm_PTempName(i16 %301)
	br label %L.26
L.26:
	br label %L.20
L.22:
	%302 = load %bout.BufIO** @llvm_f
	%303 = bitcast %bout.BufIO* %302 to %bout.BufIO*
	%304 = getelementptr [10 x i8]* @S.757
	%305 = bitcast [10 x i8]* %304 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %303, [0 x i8]* %305)
	br label %L.20
L.20:
	%306 = load %bout.BufIO** @llvm_f
	%307 = bitcast %bout.BufIO* %306 to %bout.BufIO*
	%308 = getelementptr [4 x i8]* @S.758
	%309 = bitcast [4 x i8]* %308 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %307, [0 x i8]* %309)
	br label %L.1
L.1:
	br label %return
return:
	ret void
}
@S.759 = internal constant [7 x i8] c"\09%N = \00"@S.760 = internal constant [13 x i8] c" %T %0N, %1N\00"define internal zeroext i8 @llvm_BinaryOp(%ast.AstNode* %node.arg, [0 x i8]* %op.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast.AstNode*
	%op = alloca [0 x i8]*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	store [0 x i8]* %op.arg, [0 x i8]** %op
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 13
	%2 = getelementptr [0 x %ast.AstNode*]* %1, i32 0, i32 0
	%3 = load %ast.AstNode** %2
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	%5 = call i8 @llvm_GenSub(%ast.AstNode* %4)
	%6 = load %ast.AstNode** %node
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 13
	%8 = getelementptr [0 x %ast.AstNode*]* %7, i32 0, i32 1
	%9 = load %ast.AstNode** %8
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	%11 = call i8 @llvm_GenSub(%ast.AstNode* %10)
	%12 = load i16* @llvm_Tseqno
	%13 = load %ast.AstNode** %node
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 9
	store i16 %12, i16* %14
	%15 = load i16* @llvm_Tseqno
	%16 = add i16 %15, 1
	store i16 %16, i16* @llvm_Tseqno
	%17 = getelementptr [7 x i8]* @S.759
	%18 = bitcast [7 x i8]* %17 to [0 x i8]*
	%19 = load %ast.AstNode** %node
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %18, %ast.AstNode* %20)
	%21 = load %bout.BufIO** @llvm_f
	%22 = bitcast %bout.BufIO* %21 to %bout.BufIO*
	%23 = load [0 x i8]** %op
	%24 = bitcast [0 x i8]* %23 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %22, [0 x i8]* %24)
	%25 = getelementptr [13 x i8]* @S.760
	%26 = bitcast [13 x i8]* %25 to [0 x i8]*
	%27 = load %ast.AstNode** %node
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %26, %ast.AstNode* %28)
	%29 = load %ast.AstNode** %node
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	call void @llvm_PEndLine(%ast.AstNode* %30)
	store i8 0, i8* %rv.0
	br label %return
return:
	%31 = load i8* %rv.0
	ret i8 %31
}
@S.761 = internal constant [7 x i8] c"\09%N = \00"@S.762 = internal constant [14 x i8] c" %0T %0N, %1N\00"define internal zeroext i8 @llvm_CompareOp(%ast.AstNode* %node.arg, [0 x i8]* %op.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast.AstNode*
	%op = alloca [0 x i8]*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	store [0 x i8]* %op.arg, [0 x i8]** %op
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 13
	%2 = getelementptr [0 x %ast.AstNode*]* %1, i32 0, i32 0
	%3 = load %ast.AstNode** %2
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	%5 = call i8 @llvm_GenSub(%ast.AstNode* %4)
	%6 = load %ast.AstNode** %node
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 13
	%8 = getelementptr [0 x %ast.AstNode*]* %7, i32 0, i32 1
	%9 = load %ast.AstNode** %8
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	%11 = call i8 @llvm_GenSub(%ast.AstNode* %10)
	%12 = load i16* @llvm_Tseqno
	%13 = load %ast.AstNode** %node
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 9
	store i16 %12, i16* %14
	%15 = load i16* @llvm_Tseqno
	%16 = add i16 %15, 1
	store i16 %16, i16* @llvm_Tseqno
	%17 = getelementptr [7 x i8]* @S.761
	%18 = bitcast [7 x i8]* %17 to [0 x i8]*
	%19 = load %ast.AstNode** %node
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %18, %ast.AstNode* %20)
	%21 = load %bout.BufIO** @llvm_f
	%22 = bitcast %bout.BufIO* %21 to %bout.BufIO*
	%23 = load [0 x i8]** %op
	%24 = bitcast [0 x i8]* %23 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %22, [0 x i8]* %24)
	%25 = getelementptr [14 x i8]* @S.762
	%26 = bitcast [14 x i8]* %25 to [0 x i8]*
	%27 = load %ast.AstNode** %node
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %26, %ast.AstNode* %28)
	%29 = load %ast.AstNode** %node
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	call void @llvm_PEndLine(%ast.AstNode* %30)
	store i8 1, i8* %rv.0
	br label %return
return:
	%31 = load i8* %rv.0
	ret i8 %31
}
@S.763 = internal constant [7 x i8] c"\09%N = \00"@S.764 = internal constant [15 x i8] c" %0T %0N to %T\00"define internal void @llvm_ChangeSize(%ast.AstNode* %node.arg, [0 x i8]* %op.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	%op = alloca [0 x i8]*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	store [0 x i8]* %op.arg, [0 x i8]** %op
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 13
	%2 = getelementptr [0 x %ast.AstNode*]* %1, i32 0, i32 0
	%3 = load %ast.AstNode** %2
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	%5 = call i8 @llvm_GenSub(%ast.AstNode* %4)
	%6 = load i16* @llvm_Tseqno
	%7 = load %ast.AstNode** %node
	%8 = getelementptr %ast.AstNode* %7, i32 0, i32 9
	store i16 %6, i16* %8
	%9 = load i16* @llvm_Tseqno
	%10 = add i16 %9, 1
	store i16 %10, i16* @llvm_Tseqno
	%11 = getelementptr [7 x i8]* @S.763
	%12 = bitcast [7 x i8]* %11 to [0 x i8]*
	%13 = load %ast.AstNode** %node
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %12, %ast.AstNode* %14)
	%15 = load %bout.BufIO** @llvm_f
	%16 = bitcast %bout.BufIO* %15 to %bout.BufIO*
	%17 = load [0 x i8]** %op
	%18 = bitcast [0 x i8]* %17 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %16, [0 x i8]* %18)
	%19 = getelementptr [15 x i8]* @S.764
	%20 = bitcast [15 x i8]* %19 to [0 x i8]*
	%21 = load %ast.AstNode** %node
	%22 = bitcast %ast.AstNode* %21 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %20, %ast.AstNode* %22)
	%23 = load %ast.AstNode** %node
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	call void @llvm_PEndLine(%ast.AstNode* %24)
	br label %return
return:
	ret void
}
define internal i32 @llvm_BitfieldOffset(%type.TypeNode* %trec.arg, i64 %fno.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%trec = alloca %type.TypeNode*
	%fno = alloca i64
	store %type.TypeNode* %trec.arg, %type.TypeNode** %trec
	store i64 %fno.arg, i64* %fno
	%foffs = alloca i32
	%rsize = alloca i32
	%fsize = alloca i32
	%s = alloca %symb.SymbNode*
	%i = alloca i16
	%0 = load %type.TypeNode** %trec
	%1 = getelementptr %type.TypeNode* %0, i32 0, i32 9
	%2 = load i32* %1
	store i32 %2, i32* %rsize
	%3 = load %type.TypeNode** %trec
	%4 = getelementptr %type.TypeNode* %3, i32 0, i32 15
	%5 = load i8* %4
	%6 = icmp eq i8 %5, 1
	br i1 %6, label %L.2, label %L.3
L.2:
	%7 = load i32* %rsize
	store i32 %7, i32* %foffs
	br label %L.1
L.3:
	store i32 0, i32* %foffs
	br label %L.1
L.1:
	%8 = load %type.TypeNode** %trec
	%9 = getelementptr %type.TypeNode* %8, i32 0, i32 4
	%10 = load %symb.SymbNode** %9
	%11 = bitcast %symb.SymbNode* %10 to %symb.SymbNode*
	store %symb.SymbNode* %11, %symb.SymbNode** %s
	store i16 0, i16* %i
	br label %L.4
L.4:
	%12 = load %symb.SymbNode** %s
	%13 = icmp ne %symb.SymbNode* %12, null
	%14 = xor i1 %13, true
	br i1 %14, label %L.5, label %L.6
L.6:
	%15 = load %symb.SymbNode** %s
	%16 = getelementptr %symb.SymbNode* %15, i32 0, i32 1
	%17 = load %type.TypeNode** %16
	%18 = getelementptr %type.TypeNode* %17, i32 0, i32 8
	%19 = load i32* %18
	store i32 %19, i32* %fsize
	%20 = load %type.TypeNode** %trec
	%21 = getelementptr %type.TypeNode* %20, i32 0, i32 15
	%22 = load i8* %21
	%23 = icmp eq i8 %22, 1
	br i1 %23, label %L.8, label %L.7
L.8:
	%24 = load i32* %foffs
	%25 = load i32* %fsize
	%26 = sub i32 %24, %25
	store i32 %26, i32* %foffs
	br label %L.7
L.7:
	%27 = load i16* %i
	%28 = zext i16 %27 to i64
	%29 = load i64* %fno
	%30 = icmp eq i64 %28, %29
	br i1 %30, label %L.5, label %L.9
L.9:
	%31 = load %type.TypeNode** %trec
	%32 = getelementptr %type.TypeNode* %31, i32 0, i32 15
	%33 = load i8* %32
	%34 = icmp ne i8 %33, 1
	br i1 %34, label %L.11, label %L.10
L.11:
	%35 = load i32* %foffs
	%36 = load i32* %fsize
	%37 = add i32 %35, %36
	store i32 %37, i32* %foffs
	br label %L.10
L.10:
	%38 = load %symb.SymbNode** %s
	%39 = getelementptr %symb.SymbNode* %38, i32 0, i32 0
	%40 = load %symb.SymbNode** %39
	%41 = bitcast %symb.SymbNode* %40 to %symb.SymbNode*
	store %symb.SymbNode* %41, %symb.SymbNode** %s
	%42 = load i16* %i
	%43 = add i16 %42, 1
	store i16 %43, i16* %i
	br label %L.4
L.5:
	%44 = load i32* %foffs
	store i32 %44, i32* %rv.0
	br label %return
return:
	%45 = load i32* %rv.0
	ret i32 %45
}
define internal %ast.AstNode* @llvm_BitfieldIndex(%ast.AstNode* %node.arg, i32 %size.arg, %ast.AstNode* %tree.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%node = alloca %ast.AstNode*
	%size = alloca i32
	%tree = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	store i32 %size.arg, i32* %size
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	%indx = alloca %ast.AstNode*
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 13
	%2 = getelementptr [0 x %ast.AstNode*]* %1, i32 0, i32 1
	%3 = load %ast.AstNode** %2
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	%5 = load %type.TypeNode** @type_wordtype
	%6 = bitcast %type.TypeNode* %5 to %type.TypeNode*
	%7 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %4, %type.TypeNode* %6)
	%8 = bitcast %ast.AstNode* %7 to %ast.AstNode*
	store %ast.AstNode* %8, %ast.AstNode** %indx
	%9 = load %type.TypeNode** @type_wordtype
	%10 = bitcast %type.TypeNode* %9 to %type.TypeNode*
	%11 = load %ast.AstNode** %indx
	%12 = bitcast %ast.AstNode* %11 to %ast.AstNode*
	%13 = load %type.TypeNode** @type_wordtype
	%14 = bitcast %type.TypeNode* %13 to %type.TypeNode*
	%15 = load i32* %size
	%16 = zext i32 %15 to i64
	%17 = call %ast.AstNode* @ast_Const(%type.TypeNode* %14, i64 %16)
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	%19 = call %ast.AstNode* @ast_New2(i8 36, %type.TypeNode* %10, %ast.AstNode* %12, %ast.AstNode* %18)
	%20 = bitcast %ast.AstNode* %19 to %ast.AstNode*
	store %ast.AstNode* %20, %ast.AstNode** %indx
	%21 = load %ast.AstNode** %tree
	%22 = icmp ne %ast.AstNode* %21, null
	br i1 %22, label %L.2, label %L.3
L.2:
	%23 = load %type.TypeNode** @type_wordtype
	%24 = bitcast %type.TypeNode* %23 to %type.TypeNode*
	%25 = load %ast.AstNode** %tree
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	%27 = load %ast.AstNode** %indx
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	%29 = call %ast.AstNode* @ast_New2(i8 34, %type.TypeNode* %24, %ast.AstNode* %26, %ast.AstNode* %28)
	%30 = bitcast %ast.AstNode* %29 to %ast.AstNode*
	store %ast.AstNode* %30, %ast.AstNode** %tree
	br label %L.1
L.3:
	%31 = load %ast.AstNode** %indx
	%32 = bitcast %ast.AstNode* %31 to %ast.AstNode*
	store %ast.AstNode* %32, %ast.AstNode** %tree
	br label %L.1
L.1:
	%33 = load %ast.AstNode** %tree
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	store %ast.AstNode* %34, %ast.AstNode** %rv.0
	br label %return
return:
	%35 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %35
}
define internal { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } @llvm_BitfieldRewrite(%ast.AstNode* %offs.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%rv.1 = alloca %ast.AstNode*
	%rv.2 = alloca %ast.AstNode*
	%offs = alloca %ast.AstNode*
	store %ast.AstNode* %offs.arg, %ast.AstNode** %offs
	%varb = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%shft = alloca i32
	store i32 0, i32* %shft
	%0 = bitcast %ast.AstNode* null to %ast.AstNode*
	store %ast.AstNode* %0, %ast.AstNode** %varb
	br label %L.1
L.1:
	%1 = load %ast.AstNode** %offs
	%2 = getelementptr %ast.AstNode* %1, i32 0, i32 0
	%3 = load i8* %2
	%4 = zext i8 %3 to i32
	switch i32 %4, label %L.3 [
		i32 16, label %L.5
		i32 17, label %L.6
		i32 18, label %L.7
	]
L.5:
	%5 = load %ast.AstNode** %offs
	%6 = getelementptr %ast.AstNode* %5, i32 0, i32 13
	%7 = getelementptr [0 x %ast.AstNode*]* %6, i32 0, i32 0
	%8 = load %ast.AstNode** %7
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 11
	%10 = load %type.TypeNode** %9
	%11 = bitcast %type.TypeNode* %10 to %type.TypeNode*
	%12 = load %ast.AstNode** %offs
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 10
	%14 = load i64* %13
	%15 = call i32 @llvm_BitfieldOffset(%type.TypeNode* %11, i64 %14)
	store i32 %15, i32* %shft
	br label %L.4
L.6:
	%16 = load %ast.AstNode** %offs
	%17 = bitcast %ast.AstNode* %16 to %ast.AstNode*
	%18 = load %ast.AstNode** %offs
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 11
	%20 = load %type.TypeNode** %19
	%21 = getelementptr %type.TypeNode* %20, i32 0, i32 8
	%22 = load i32* %21
	%23 = load %ast.AstNode** %varb
	%24 = bitcast %ast.AstNode* %23 to %ast.AstNode*
	%25 = call %ast.AstNode* @llvm_BitfieldIndex(%ast.AstNode* %17, i32 %22, %ast.AstNode* %24)
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	store %ast.AstNode* %26, %ast.AstNode** %varb
	br label %L.4
L.7:
	%27 = load %ast.AstNode** %offs
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	%29 = load %ast.AstNode** %offs
	%30 = getelementptr %ast.AstNode* %29, i32 0, i32 11
	%31 = load %type.TypeNode** %30
	%32 = getelementptr %type.TypeNode* %31, i32 0, i32 0
	%33 = load %type.TypeNode** %32
	%34 = getelementptr %type.TypeNode* %33, i32 0, i32 8
	%35 = load i32* %34
	%36 = load %ast.AstNode** %varb
	%37 = bitcast %ast.AstNode* %36 to %ast.AstNode*
	%38 = call %ast.AstNode* @llvm_BitfieldIndex(%ast.AstNode* %28, i32 %35, %ast.AstNode* %37)
	%39 = bitcast %ast.AstNode* %38 to %ast.AstNode*
	store %ast.AstNode* %39, %ast.AstNode** %varb
	br label %L.4
L.3:
	br label %L.4
L.4:
	%40 = load %ast.AstNode** %offs
	%41 = getelementptr %ast.AstNode* %40, i32 0, i32 13
	%42 = getelementptr [0 x %ast.AstNode*]* %41, i32 0, i32 0
	%43 = load %ast.AstNode** %42
	%44 = bitcast %ast.AstNode* %43 to %ast.AstNode*
	store %ast.AstNode* %44, %ast.AstNode** %offs
	%45 = load %ast.AstNode** %offs
	%46 = getelementptr %ast.AstNode* %45, i32 0, i32 0
	%47 = load i8* %46
	%48 = icmp ult i8 %47, 16
	br i1 %48, label %L.12, label %L.11
L.11:
	%49 = load %ast.AstNode** %offs
	%50 = getelementptr %ast.AstNode* %49, i32 0, i32 0
	%51 = load i8* %50
	%52 = icmp ugt i8 %51, 18
	br label %L.12
L.12:
	%53 = phi i1 [ true, %L.4 ], [ %52, %L.11 ]
	br i1 %53, label %L.10, label %L.9
L.9:
	%54 = load %ast.AstNode** %offs
	%55 = getelementptr %ast.AstNode* %54, i32 0, i32 13
	%56 = getelementptr [0 x %ast.AstNode*]* %55, i32 0, i32 0
	%57 = load %ast.AstNode** %56
	%58 = getelementptr %ast.AstNode* %57, i32 0, i32 11
	%59 = load %type.TypeNode** %58
	%60 = getelementptr %type.TypeNode* %59, i32 0, i32 14
	%61 = load i8* %60
	%62 = icmp ne i8 %61, 2
	br label %L.10
L.10:
	%63 = phi i1 [ true, %L.12 ], [ %62, %L.9 ]
	br i1 %63, label %L.2, label %L.8
L.8:
	br label %L.1
L.2:
	%64 = load i32* %shft
	%65 = icmp ne i32 %64, 0
	br i1 %65, label %L.14, label %L.13
L.14:
	%66 = load %type.TypeNode** @type_wordtype
	%67 = bitcast %type.TypeNode* %66 to %type.TypeNode*
	%68 = load i32* %shft
	%69 = zext i32 %68 to i64
	%70 = call %ast.AstNode* @ast_Const(%type.TypeNode* %67, i64 %69)
	%71 = bitcast %ast.AstNode* %70 to %ast.AstNode*
	store %ast.AstNode* %71, %ast.AstNode** %tree
	%72 = load %ast.AstNode** %varb
	%73 = icmp ne %ast.AstNode* %72, null
	br i1 %73, label %L.16, label %L.17
L.16:
	%74 = load %type.TypeNode** @type_wordtype
	%75 = bitcast %type.TypeNode* %74 to %type.TypeNode*
	%76 = load %ast.AstNode** %varb
	%77 = bitcast %ast.AstNode* %76 to %ast.AstNode*
	%78 = load %ast.AstNode** %tree
	%79 = bitcast %ast.AstNode* %78 to %ast.AstNode*
	%80 = call %ast.AstNode* @ast_New2(i8 34, %type.TypeNode* %75, %ast.AstNode* %77, %ast.AstNode* %79)
	%81 = bitcast %ast.AstNode* %80 to %ast.AstNode*
	store %ast.AstNode* %81, %ast.AstNode** %varb
	br label %L.15
L.17:
	%82 = load %ast.AstNode** %tree
	%83 = bitcast %ast.AstNode* %82 to %ast.AstNode*
	store %ast.AstNode* %83, %ast.AstNode** %varb
	br label %L.15
L.15:
	br label %L.13
L.13:
	%84 = load %ast.AstNode** %offs
	%85 = getelementptr %ast.AstNode* %84, i32 0, i32 11
	%86 = load %type.TypeNode** %85
	%87 = bitcast %type.TypeNode* %86 to %type.TypeNode*
	%88 = load %ast.AstNode** %offs
	%89 = bitcast %ast.AstNode* %88 to %ast.AstNode*
	%90 = call %ast.AstNode* @ast_New1(i8 25, %type.TypeNode* %87, %ast.AstNode* %89)
	%91 = bitcast %ast.AstNode* %90 to %ast.AstNode*
	store %ast.AstNode* %91, %ast.AstNode** %tree
	%92 = load %ast.AstNode** %tree
	%93 = getelementptr %ast.AstNode* %92, i32 0, i32 1
	store i8 2, i8* %93
	%94 = load %ast.AstNode** %offs
	%95 = getelementptr %ast.AstNode* %94, i32 0, i32 11
	%96 = load %type.TypeNode** %95
	%97 = getelementptr %type.TypeNode* %96, i32 0, i32 9
	%98 = load i32* %97
	%99 = load %ast.AstNode** %tree
	%100 = getelementptr %ast.AstNode* %99, i32 0, i32 6
	store i32 %98, i32* %100
	%101 = load %ast.AstNode** %tree
	%102 = getelementptr %ast.AstNode* %101, i32 0, i32 6
	%103 = load i32* %102
	%104 = load %target.TargetT** @target_Target
	%105 = getelementptr %target.TargetT* %104, i32 0, i32 3
	%106 = load i8* %105
	%107 = zext i8 %106 to i32
	%108 = icmp ugt i32 %103, %107
	br i1 %108, label %L.18, label %L.19
L.18:
	%109 = load %ast.AstNode** %tree
	%110 = getelementptr %ast.AstNode* %109, i32 0, i32 11
	%111 = load %type.TypeNode** %110
	%112 = getelementptr %type.TypeNode* %111, i32 0, i32 16
	%113 = load i8* %112
	%114 = load %target.TargetT** @target_Target
	%115 = getelementptr %target.TargetT* %114, i32 0, i32 2
	%116 = load i8* %115
	%117 = icmp ne i8 %113, %116
	br label %L.19
L.19:
	%118 = phi i1 [ false, %L.13 ], [ %117, %L.18 ]
	br i1 %118, label %L.21, label %L.20
L.21:
	%119 = load %ast.AstNode** %tree
	%120 = getelementptr %ast.AstNode* %119, i32 0, i32 11
	%121 = load %type.TypeNode** %120
	%122 = bitcast %type.TypeNode* %121 to %type.TypeNode*
	%123 = load %ast.AstNode** %tree
	%124 = bitcast %ast.AstNode* %123 to %ast.AstNode*
	%125 = call %ast.AstNode* @ast_New1(i8 30, %type.TypeNode* %122, %ast.AstNode* %124)
	%126 = bitcast %ast.AstNode* %125 to %ast.AstNode*
	store %ast.AstNode* %126, %ast.AstNode** %tree
	br label %L.20
L.20:
	%127 = load %ast.AstNode** %tree
	%128 = bitcast %ast.AstNode* %127 to %ast.AstNode*
	%129 = load %type.TypeNode** @type_wordtype
	%130 = bitcast %type.TypeNode* %129 to %type.TypeNode*
	%131 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %128, %type.TypeNode* %130)
	%132 = bitcast %ast.AstNode* %131 to %ast.AstNode*
	store %ast.AstNode* %132, %ast.AstNode** %tree
	%133 = load %ast.AstNode** %tree
	%134 = bitcast %ast.AstNode* %133 to %ast.AstNode*
	store %ast.AstNode* %134, %ast.AstNode** %rv.0
	%135 = load %ast.AstNode** %varb
	%136 = bitcast %ast.AstNode* %135 to %ast.AstNode*
	store %ast.AstNode* %136, %ast.AstNode** %rv.1
	%137 = load %ast.AstNode** %offs
	%138 = bitcast %ast.AstNode* %137 to %ast.AstNode*
	store %ast.AstNode* %138, %ast.AstNode** %rv.2
	br label %return
return:
	%139 = load %ast.AstNode** %rv.0
	%140 = load %ast.AstNode** %rv.1
	%141 = load %ast.AstNode** %rv.2
	%mrv0 = insertvalue { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } undef,%ast.AstNode* %139,0
	%mrv1 = insertvalue { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } %mrv0,%ast.AstNode* %140,1
	%mrv2 = insertvalue { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } %mrv1,%ast.AstNode* %141,2
	ret  { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } %mrv2

}
@S.765 = internal constant [32 x i8] c"BitfieldMask of variable SLICE\0A\00"define internal %ast.AstNode* @llvm_BitfieldMask(%ast.AstNode* %node.arg) nounwind {
L.0:
	%rv.0 = alloca %ast.AstNode*
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%mask = alloca %ast.AstNode*
	%bits = alloca i64
	%size = alloca i32
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 0
	%2 = load i8* %1
	%3 = icmp eq i8 %2, 18
	br i1 %3, label %L.2, label %L.3
L.2:
	%4 = load %ast.AstNode** %node
	%5 = getelementptr %ast.AstNode* %4, i32 0, i32 13
	%6 = getelementptr [0 x %ast.AstNode*]* %5, i32 0, i32 2
	%7 = load %ast.AstNode** %6
	%8 = getelementptr %ast.AstNode* %7, i32 0, i32 0
	%9 = load i8* %8
	%10 = icmp ne i8 %9, 7
	br i1 %10, label %L.5, label %L.6
L.5:
	%11 = getelementptr [32 x i8]* @S.765
	%12 = bitcast [32 x i8]* %11 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %12)
	br label %L.4
L.6:
	%13 = load %ast.AstNode** %node
	%14 = getelementptr %ast.AstNode* %13, i32 0, i32 11
	%15 = load %type.TypeNode** %14
	%16 = getelementptr %type.TypeNode* %15, i32 0, i32 0
	%17 = load %type.TypeNode** %16
	%18 = getelementptr %type.TypeNode* %17, i32 0, i32 8
	%19 = load i32* %18
	store i32 %19, i32* %size
	%20 = load i32* %size
	%21 = load %ast.AstNode** %node
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 13
	%23 = getelementptr [0 x %ast.AstNode*]* %22, i32 0, i32 2
	%24 = load %ast.AstNode** %23
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 10
	%26 = load i64* %25
	%27 = trunc i64 %26 to i32
	%28 = mul i32 %20, %27
	store i32 %28, i32* %size
	br label %L.4
L.4:
	br label %L.1
L.3:
	%29 = load %ast.AstNode** %node
	%30 = getelementptr %ast.AstNode* %29, i32 0, i32 11
	%31 = load %type.TypeNode** %30
	%32 = getelementptr %type.TypeNode* %31, i32 0, i32 8
	%33 = load i32* %32
	store i32 %33, i32* %size
	br label %L.1
L.1:
	%34 = load i32* %size
	%35 = zext i32 %34 to i64
	%36 = shl i64 1, %35
	%37 = sub i64 %36, 1
	store i64 %37, i64* %bits
	%38 = load %type.TypeNode** @type_wordtype
	%39 = bitcast %type.TypeNode* %38 to %type.TypeNode*
	%40 = load i64* %bits
	%41 = call %ast.AstNode* @ast_Const(%type.TypeNode* %39, i64 %40)
	%42 = bitcast %ast.AstNode* %41 to %ast.AstNode*
	store %ast.AstNode* %42, %ast.AstNode** %mask
	%43 = load %ast.AstNode** %mask
	%44 = bitcast %ast.AstNode* %43 to %ast.AstNode*
	store %ast.AstNode* %44, %ast.AstNode** %rv.0
	br label %return
return:
	%45 = load %ast.AstNode** %rv.0
	ret %ast.AstNode* %45
}
@S.766 = internal constant [7 x i8] c"\09%N = \00"@S.767 = internal constant [10 x i8] c"volatile \00"@S.768 = internal constant [13 x i8] c"load %T* %0N\00"define internal void @llvm_Load(%ast.AstNode* %load.arg) nounwind {
L.0:
	%load = alloca %ast.AstNode*
	store %ast.AstNode* %load.arg, %ast.AstNode** %load
	%offs = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%varb = alloca %ast.AstNode*
	%mask = alloca %ast.AstNode*
	%size = alloca i32
	%t = alloca %type.TypeNode*
	%0 = load %ast.AstNode** %load
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 13
	%2 = getelementptr [0 x %ast.AstNode*]* %1, i32 0, i32 0
	%3 = load %ast.AstNode** %2
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	store %ast.AstNode* %4, %ast.AstNode** %offs
	%5 = load %ast.AstNode** %offs
	%6 = getelementptr %ast.AstNode* %5, i32 0, i32 0
	%7 = load i8* %6
	%8 = icmp uge i8 %7, 16
	br i1 %8, label %L.3, label %L.4
L.3:
	%9 = load %ast.AstNode** %offs
	%10 = getelementptr %ast.AstNode* %9, i32 0, i32 0
	%11 = load i8* %10
	%12 = icmp ule i8 %11, 18
	br label %L.4
L.4:
	%13 = phi i1 [ false, %L.0 ], [ %12, %L.3 ]
	br i1 %13, label %L.1, label %L.2
L.1:
	%14 = load %ast.AstNode** %offs
	%15 = getelementptr %ast.AstNode* %14, i32 0, i32 13
	%16 = getelementptr [0 x %ast.AstNode*]* %15, i32 0, i32 0
	%17 = load %ast.AstNode** %16
	%18 = getelementptr %ast.AstNode* %17, i32 0, i32 11
	%19 = load %type.TypeNode** %18
	%20 = getelementptr %type.TypeNode* %19, i32 0, i32 14
	%21 = load i8* %20
	%22 = icmp eq i8 %21, 2
	br label %L.2
L.2:
	%23 = phi i1 [ false, %L.4 ], [ %22, %L.1 ]
	br i1 %23, label %L.6, label %L.7
L.6:
	%24 = load %ast.AstNode** %offs
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 11
	%26 = load %type.TypeNode** %25
	%27 = bitcast %type.TypeNode* %26 to %type.TypeNode*
	store %type.TypeNode* %27, %type.TypeNode** %t
	%28 = load %type.TypeNode** %t
	%29 = getelementptr %type.TypeNode* %28, i32 0, i32 8
	%30 = load i32* %29
	store i32 %30, i32* %size
	%31 = load %ast.AstNode** %offs
	%32 = bitcast %ast.AstNode* %31 to %ast.AstNode*
	%33 = call %ast.AstNode* @llvm_BitfieldMask(%ast.AstNode* %32)
	%34 = bitcast %ast.AstNode* %33 to %ast.AstNode*
	store %ast.AstNode* %34, %ast.AstNode** %mask
	%35 = load %ast.AstNode** %offs
	%36 = bitcast %ast.AstNode* %35 to %ast.AstNode*
	%37 = call { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } @llvm_BitfieldRewrite(%ast.AstNode* %36)
	%38 = extractvalue  { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } %37, 0
	%39 = extractvalue  { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } %37, 1
	%40 = extractvalue  { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } %37, 2
	store %ast.AstNode* %38, %ast.AstNode** %tree
	store %ast.AstNode* %39, %ast.AstNode** %varb
	store %ast.AstNode* %40, %ast.AstNode** %offs
	%41 = load %ast.AstNode** %varb
	%42 = icmp ne %ast.AstNode* %41, null
	br i1 %42, label %L.9, label %L.8
L.9:
	%43 = load %type.TypeNode** %t
	%44 = bitcast %type.TypeNode* %43 to %type.TypeNode*
	%45 = load %ast.AstNode** %tree
	%46 = bitcast %ast.AstNode* %45 to %ast.AstNode*
	%47 = load %ast.AstNode** %varb
	%48 = bitcast %ast.AstNode* %47 to %ast.AstNode*
	%49 = call %ast.AstNode* @ast_New2(i8 54, %type.TypeNode* %44, %ast.AstNode* %46, %ast.AstNode* %48)
	%50 = bitcast %ast.AstNode* %49 to %ast.AstNode*
	store %ast.AstNode* %50, %ast.AstNode** %tree
	br label %L.8
L.8:
	%51 = load %type.TypeNode** %t
	%52 = bitcast %type.TypeNode* %51 to %type.TypeNode*
	%53 = load %ast.AstNode** %tree
	%54 = bitcast %ast.AstNode* %53 to %ast.AstNode*
	%55 = load %ast.AstNode** %mask
	%56 = bitcast %ast.AstNode* %55 to %ast.AstNode*
	%57 = call %ast.AstNode* @ast_New2(i8 57, %type.TypeNode* %52, %ast.AstNode* %54, %ast.AstNode* %56)
	%58 = bitcast %ast.AstNode* %57 to %ast.AstNode*
	store %ast.AstNode* %58, %ast.AstNode** %tree
	%59 = load %ast.AstNode** %tree
	%60 = bitcast %ast.AstNode* %59 to %ast.AstNode*
	%61 = load %ast.AstNode** %load
	%62 = getelementptr %ast.AstNode* %61, i32 0, i32 6
	%63 = load i32* %62
	%64 = call %ast.AstNode* @expr_Extend(%ast.AstNode* %60, i32 %63, i8 1)
	%65 = bitcast %ast.AstNode* %64 to %ast.AstNode*
	store %ast.AstNode* %65, %ast.AstNode** %tree
	%66 = load %ast.AstNode** %tree
	%67 = bitcast %ast.AstNode* %66 to %ast.AstNode*
	%68 = call i8 @llvm_GenSub(%ast.AstNode* %67)
	%69 = load %ast.AstNode** %tree
	%70 = bitcast %ast.AstNode* %69 to %ast.AstNode*
	%71 = load %ast.AstNode** %load
	%72 = getelementptr %ast.AstNode* %71, i32 0, i32 13
	%73 = getelementptr [0 x %ast.AstNode*]* %72, i32 0, i32 0
	store %ast.AstNode* %70, %ast.AstNode** %73
	%74 = load %ast.AstNode** %tree
	%75 = getelementptr %ast.AstNode* %74, i32 0, i32 9
	%76 = load i16* %75
	%77 = load %ast.AstNode** %load
	%78 = getelementptr %ast.AstNode* %77, i32 0, i32 9
	store i16 %76, i16* %78
	br label %L.5
L.7:
	%79 = load %ast.AstNode** %offs
	%80 = bitcast %ast.AstNode* %79 to %ast.AstNode*
	%81 = call i8 @llvm_GenSub(%ast.AstNode* %80)
	%82 = load i16* @llvm_Tseqno
	%83 = load %ast.AstNode** %load
	%84 = getelementptr %ast.AstNode* %83, i32 0, i32 9
	store i16 %82, i16* %84
	%85 = load i16* @llvm_Tseqno
	%86 = add i16 %85, 1
	store i16 %86, i16* @llvm_Tseqno
	%87 = getelementptr [7 x i8]* @S.766
	%88 = bitcast [7 x i8]* %87 to [0 x i8]*
	%89 = load %ast.AstNode** %load
	%90 = bitcast %ast.AstNode* %89 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %88, %ast.AstNode* %90)
	%91 = load %ast.AstNode** %offs
	%92 = getelementptr %ast.AstNode* %91, i32 0, i32 11
	%93 = load %type.TypeNode** %92
	%94 = getelementptr %type.TypeNode* %93, i32 0, i32 19
	%95 = load i8* %94
	%96 = icmp ne i8 %95, 0
	br i1 %96, label %L.11, label %L.10
L.11:
	%97 = load %bout.BufIO** @llvm_f
	%98 = bitcast %bout.BufIO* %97 to %bout.BufIO*
	%99 = getelementptr [10 x i8]* @S.767
	%100 = bitcast [10 x i8]* %99 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %98, [0 x i8]* %100)
	br label %L.10
L.10:
	%101 = getelementptr [13 x i8]* @S.768
	%102 = bitcast [13 x i8]* %101 to [0 x i8]*
	%103 = load %ast.AstNode** %load
	%104 = bitcast %ast.AstNode* %103 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %102, %ast.AstNode* %104)
	%105 = load %ast.AstNode** %load
	%106 = bitcast %ast.AstNode* %105 to %ast.AstNode*
	call void @llvm_PEndLine(%ast.AstNode* %106)
	br label %L.5
L.5:
	br label %return
return:
	ret void
}
@S.769 = internal constant [10 x i8] c"volatile \00"@S.770 = internal constant [7 x i8] c"store \00"@S.771 = internal constant [3 x i8] c", \00"define internal void @llvm_Store(%ast.AstNode* %store.arg) nounwind {
L.0:
	%store = alloca %ast.AstNode*
	store %ast.AstNode* %store.arg, %ast.AstNode** %store
	%rhs = alloca %ast.AstNode*
	%lhs = alloca %ast.AstNode*
	%varb = alloca %ast.AstNode*
	%tree = alloca %ast.AstNode*
	%mask = alloca %ast.AstNode*
	%size = alloca i32
	%t = alloca %type.TypeNode*
	%i = alloca i16
	%n = alloca i16
	store i16 0, i16* %i
	%0 = load %ast.AstNode** %store
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 2
	%2 = load i16* %1
	%3 = udiv i16 %2, 2
	store i16 %3, i16* %n
	br label %L.1
L.1:
	%4 = load i16* %i
	%5 = load i16* %n
	%6 = icmp ult i16 %4, %5
	%7 = xor i1 %6, true
	br i1 %7, label %L.2, label %L.3
L.3:
	%8 = load %ast.AstNode** %store
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 13
	%10 = load i16* %i
	%11 = zext i16 %10 to i32
	%12 = getelementptr [0 x %ast.AstNode*]* %9, i32 0, i32 %11
	%13 = load %ast.AstNode** %12
	%14 = bitcast %ast.AstNode* %13 to %ast.AstNode*
	store %ast.AstNode* %14, %ast.AstNode** %lhs
	%15 = load %ast.AstNode** %store
	%16 = getelementptr %ast.AstNode* %15, i32 0, i32 13
	%17 = load i16* %n
	%18 = load i16* %i
	%19 = add i16 %17, %18
	%20 = zext i16 %19 to i32
	%21 = getelementptr [0 x %ast.AstNode*]* %16, i32 0, i32 %20
	%22 = load %ast.AstNode** %21
	%23 = bitcast %ast.AstNode* %22 to %ast.AstNode*
	store %ast.AstNode* %23, %ast.AstNode** %rhs
	%24 = load %ast.AstNode** %lhs
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 0
	%26 = load i8* %25
	%27 = icmp uge i8 %26, 16
	br i1 %27, label %L.6, label %L.7
L.6:
	%28 = load %ast.AstNode** %lhs
	%29 = getelementptr %ast.AstNode* %28, i32 0, i32 0
	%30 = load i8* %29
	%31 = icmp ule i8 %30, 18
	br label %L.7
L.7:
	%32 = phi i1 [ false, %L.3 ], [ %31, %L.6 ]
	br i1 %32, label %L.4, label %L.5
L.4:
	%33 = load %ast.AstNode** %lhs
	%34 = getelementptr %ast.AstNode* %33, i32 0, i32 13
	%35 = getelementptr [0 x %ast.AstNode*]* %34, i32 0, i32 0
	%36 = load %ast.AstNode** %35
	%37 = getelementptr %ast.AstNode* %36, i32 0, i32 11
	%38 = load %type.TypeNode** %37
	%39 = getelementptr %type.TypeNode* %38, i32 0, i32 14
	%40 = load i8* %39
	%41 = icmp eq i8 %40, 2
	br label %L.5
L.5:
	%42 = phi i1 [ false, %L.7 ], [ %41, %L.4 ]
	br i1 %42, label %L.9, label %L.8
L.9:
	%43 = load %ast.AstNode** %lhs
	%44 = getelementptr %ast.AstNode* %43, i32 0, i32 11
	%45 = load %type.TypeNode** %44
	%46 = bitcast %type.TypeNode* %45 to %type.TypeNode*
	store %type.TypeNode* %46, %type.TypeNode** %t
	%47 = load %type.TypeNode** %t
	%48 = getelementptr %type.TypeNode* %47, i32 0, i32 8
	%49 = load i32* %48
	store i32 %49, i32* %size
	%50 = load %ast.AstNode** %lhs
	%51 = bitcast %ast.AstNode* %50 to %ast.AstNode*
	%52 = call %ast.AstNode* @llvm_BitfieldMask(%ast.AstNode* %51)
	%53 = bitcast %ast.AstNode* %52 to %ast.AstNode*
	store %ast.AstNode* %53, %ast.AstNode** %mask
	%54 = load %ast.AstNode** %lhs
	%55 = bitcast %ast.AstNode* %54 to %ast.AstNode*
	%56 = call { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } @llvm_BitfieldRewrite(%ast.AstNode* %55)
	%57 = extractvalue  { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } %56, 0
	%58 = extractvalue  { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } %56, 1
	%59 = extractvalue  { %ast.AstNode*, %ast.AstNode*, %ast.AstNode* } %56, 2
	store %ast.AstNode* %57, %ast.AstNode** %tree
	store %ast.AstNode* %58, %ast.AstNode** %varb
	store %ast.AstNode* %59, %ast.AstNode** %lhs
	%60 = load %ast.AstNode** %varb
	%61 = icmp ne %ast.AstNode* %60, null
	br i1 %61, label %L.11, label %L.10
L.11:
	%62 = load %type.TypeNode** @type_wordtype
	%63 = bitcast %type.TypeNode* %62 to %type.TypeNode*
	%64 = load %ast.AstNode** %mask
	%65 = bitcast %ast.AstNode* %64 to %ast.AstNode*
	%66 = load %ast.AstNode** %varb
	%67 = bitcast %ast.AstNode* %66 to %ast.AstNode*
	%68 = call %ast.AstNode* @ast_New2(i8 53, %type.TypeNode* %63, %ast.AstNode* %65, %ast.AstNode* %67)
	%69 = bitcast %ast.AstNode* %68 to %ast.AstNode*
	store %ast.AstNode* %69, %ast.AstNode** %mask
	br label %L.10
L.10:
	%70 = load %type.TypeNode** @type_wordtype
	%71 = bitcast %type.TypeNode* %70 to %type.TypeNode*
	%72 = load %ast.AstNode** %mask
	%73 = bitcast %ast.AstNode* %72 to %ast.AstNode*
	%74 = call %ast.AstNode* @ast_New1(i8 32, %type.TypeNode* %71, %ast.AstNode* %73)
	%75 = bitcast %ast.AstNode* %74 to %ast.AstNode*
	store %ast.AstNode* %75, %ast.AstNode** %mask
	%76 = load %type.TypeNode** @type_wordtype
	%77 = bitcast %type.TypeNode* %76 to %type.TypeNode*
	%78 = load %ast.AstNode** %tree
	%79 = bitcast %ast.AstNode* %78 to %ast.AstNode*
	%80 = load %ast.AstNode** %mask
	%81 = bitcast %ast.AstNode* %80 to %ast.AstNode*
	%82 = call %ast.AstNode* @ast_New2(i8 57, %type.TypeNode* %77, %ast.AstNode* %79, %ast.AstNode* %81)
	%83 = bitcast %ast.AstNode* %82 to %ast.AstNode*
	store %ast.AstNode* %83, %ast.AstNode** %tree
	%84 = load %ast.AstNode** %rhs
	%85 = bitcast %ast.AstNode* %84 to %ast.AstNode*
	%86 = load %type.TypeNode** @type_wordtype
	%87 = bitcast %type.TypeNode* %86 to %type.TypeNode*
	%88 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %85, %type.TypeNode* %87)
	%89 = bitcast %ast.AstNode* %88 to %ast.AstNode*
	store %ast.AstNode* %89, %ast.AstNode** %rhs
	%90 = load %ast.AstNode** %varb
	%91 = icmp ne %ast.AstNode* %90, null
	br i1 %91, label %L.13, label %L.12
L.13:
	%92 = load %type.TypeNode** @type_wordtype
	%93 = bitcast %type.TypeNode* %92 to %type.TypeNode*
	%94 = load %ast.AstNode** %rhs
	%95 = bitcast %ast.AstNode* %94 to %ast.AstNode*
	%96 = load %ast.AstNode** %varb
	%97 = bitcast %ast.AstNode* %96 to %ast.AstNode*
	%98 = call %ast.AstNode* @ast_New2(i8 53, %type.TypeNode* %93, %ast.AstNode* %95, %ast.AstNode* %97)
	%99 = bitcast %ast.AstNode* %98 to %ast.AstNode*
	store %ast.AstNode* %99, %ast.AstNode** %rhs
	br label %L.12
L.12:
	%100 = load %type.TypeNode** @type_wordtype
	%101 = bitcast %type.TypeNode* %100 to %type.TypeNode*
	%102 = load %ast.AstNode** %tree
	%103 = bitcast %ast.AstNode* %102 to %ast.AstNode*
	%104 = load %ast.AstNode** %rhs
	%105 = bitcast %ast.AstNode* %104 to %ast.AstNode*
	%106 = call %ast.AstNode* @ast_New2(i8 58, %type.TypeNode* %101, %ast.AstNode* %103, %ast.AstNode* %105)
	%107 = bitcast %ast.AstNode* %106 to %ast.AstNode*
	store %ast.AstNode* %107, %ast.AstNode** %rhs
	%108 = load %ast.AstNode** %rhs
	%109 = bitcast %ast.AstNode* %108 to %ast.AstNode*
	%110 = load %ast.AstNode** %lhs
	%111 = getelementptr %ast.AstNode* %110, i32 0, i32 11
	%112 = load %type.TypeNode** %111
	%113 = getelementptr %type.TypeNode* %112, i32 0, i32 9
	%114 = load i32* %113
	%115 = call %ast.AstNode* @expr_Extend(%ast.AstNode* %109, i32 %114, i8 1)
	%116 = bitcast %ast.AstNode* %115 to %ast.AstNode*
	store %ast.AstNode* %116, %ast.AstNode** %rhs
	%117 = load %ast.AstNode** %lhs
	%118 = getelementptr %ast.AstNode* %117, i32 0, i32 6
	%119 = load i32* %118
	%120 = load %target.TargetT** @target_Target
	%121 = getelementptr %target.TargetT* %120, i32 0, i32 3
	%122 = load i8* %121
	%123 = zext i8 %122 to i32
	%124 = icmp ugt i32 %119, %123
	br i1 %124, label %L.14, label %L.15
L.14:
	%125 = load %ast.AstNode** %lhs
	%126 = getelementptr %ast.AstNode* %125, i32 0, i32 11
	%127 = load %type.TypeNode** %126
	%128 = getelementptr %type.TypeNode* %127, i32 0, i32 16
	%129 = load i8* %128
	%130 = load %target.TargetT** @target_Target
	%131 = getelementptr %target.TargetT* %130, i32 0, i32 2
	%132 = load i8* %131
	%133 = icmp ne i8 %129, %132
	br label %L.15
L.15:
	%134 = phi i1 [ false, %L.12 ], [ %133, %L.14 ]
	br i1 %134, label %L.17, label %L.16
L.17:
	%135 = load %ast.AstNode** %rhs
	%136 = getelementptr %ast.AstNode* %135, i32 0, i32 11
	%137 = load %type.TypeNode** %136
	%138 = bitcast %type.TypeNode* %137 to %type.TypeNode*
	%139 = load %ast.AstNode** %rhs
	%140 = bitcast %ast.AstNode* %139 to %ast.AstNode*
	%141 = call %ast.AstNode* @ast_New1(i8 30, %type.TypeNode* %138, %ast.AstNode* %140)
	%142 = bitcast %ast.AstNode* %141 to %ast.AstNode*
	store %ast.AstNode* %142, %ast.AstNode** %rhs
	br label %L.16
L.16:
	%143 = load %ast.AstNode** %lhs
	%144 = bitcast %ast.AstNode* %143 to %ast.AstNode*
	%145 = load %ast.AstNode** %store
	%146 = getelementptr %ast.AstNode* %145, i32 0, i32 13
	%147 = load i16* %i
	%148 = zext i16 %147 to i32
	%149 = getelementptr [0 x %ast.AstNode*]* %146, i32 0, i32 %148
	store %ast.AstNode* %144, %ast.AstNode** %149
	%150 = load %ast.AstNode** %rhs
	%151 = bitcast %ast.AstNode* %150 to %ast.AstNode*
	%152 = load %ast.AstNode** %store
	%153 = getelementptr %ast.AstNode* %152, i32 0, i32 13
	%154 = load i16* %n
	%155 = load i16* %i
	%156 = add i16 %154, %155
	%157 = zext i16 %156 to i32
	%158 = getelementptr [0 x %ast.AstNode*]* %153, i32 0, i32 %157
	store %ast.AstNode* %151, %ast.AstNode** %158
	br label %L.8
L.8:
	%159 = load %ast.AstNode** %rhs
	%160 = bitcast %ast.AstNode* %159 to %ast.AstNode*
	%161 = call i8 @llvm_GenSub(%ast.AstNode* %160)
	%162 = load i16* %i
	%163 = add i16 %162, 1
	store i16 %163, i16* %i
	br label %L.1
L.2:
	store i16 0, i16* %i
	br label %L.18
L.18:
	%164 = load i16* %i
	%165 = load i16* %n
	%166 = icmp ult i16 %164, %165
	%167 = xor i1 %166, true
	br i1 %167, label %L.19, label %L.20
L.20:
	%168 = load %ast.AstNode** %store
	%169 = getelementptr %ast.AstNode* %168, i32 0, i32 13
	%170 = load i16* %i
	%171 = zext i16 %170 to i32
	%172 = getelementptr [0 x %ast.AstNode*]* %169, i32 0, i32 %171
	%173 = load %ast.AstNode** %172
	%174 = bitcast %ast.AstNode* %173 to %ast.AstNode*
	store %ast.AstNode* %174, %ast.AstNode** %lhs
	%175 = load %ast.AstNode** %store
	%176 = getelementptr %ast.AstNode* %175, i32 0, i32 13
	%177 = load i16* %n
	%178 = load i16* %i
	%179 = add i16 %177, %178
	%180 = zext i16 %179 to i32
	%181 = getelementptr [0 x %ast.AstNode*]* %176, i32 0, i32 %180
	%182 = load %ast.AstNode** %181
	%183 = bitcast %ast.AstNode* %182 to %ast.AstNode*
	store %ast.AstNode* %183, %ast.AstNode** %rhs
	%184 = load %ast.AstNode** %lhs
	%185 = icmp ne %ast.AstNode* %184, null
	br i1 %185, label %L.22, label %L.21
L.22:
	%186 = load %ast.AstNode** %lhs
	%187 = bitcast %ast.AstNode* %186 to %ast.AstNode*
	%188 = call i8 @llvm_GenSub(%ast.AstNode* %187)
	%189 = load %bout.BufIO** @llvm_f
	%190 = bitcast %bout.BufIO* %189 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %190, i8 9)
	%191 = load %ast.AstNode** %store
	%192 = getelementptr %ast.AstNode* %191, i32 0, i32 13
	%193 = load i16* %i
	%194 = zext i16 %193 to i32
	%195 = getelementptr [0 x %ast.AstNode*]* %192, i32 0, i32 %194
	%196 = load %ast.AstNode** %195
	%197 = getelementptr %ast.AstNode* %196, i32 0, i32 11
	%198 = load %type.TypeNode** %197
	%199 = getelementptr %type.TypeNode* %198, i32 0, i32 20
	%200 = load i8* %199
	%201 = icmp ne i8 %200, 0
	br i1 %201, label %L.24, label %L.23
L.24:
	%202 = load %bout.BufIO** @llvm_f
	%203 = bitcast %bout.BufIO* %202 to %bout.BufIO*
	%204 = getelementptr [10 x i8]* @S.769
	%205 = bitcast [10 x i8]* %204 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %203, [0 x i8]* %205)
	br label %L.23
L.23:
	%206 = load %bout.BufIO** @llvm_f
	%207 = bitcast %bout.BufIO* %206 to %bout.BufIO*
	%208 = getelementptr [7 x i8]* @S.770
	%209 = bitcast [7 x i8]* %208 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %207, [0 x i8]* %209)
	%210 = load %ast.AstNode** %rhs
	%211 = bitcast %ast.AstNode* %210 to %ast.AstNode*
	call void @llvm_NodeType(%ast.AstNode* %211)
	%212 = load %bout.BufIO** @llvm_f
	%213 = bitcast %bout.BufIO* %212 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %213, i8 32)
	%214 = load %ast.AstNode** %rhs
	%215 = bitcast %ast.AstNode* %214 to %ast.AstNode*
	call void @llvm_NodeSrc(%ast.AstNode* %215)
	%216 = load %bout.BufIO** @llvm_f
	%217 = bitcast %bout.BufIO* %216 to %bout.BufIO*
	%218 = getelementptr [3 x i8]* @S.771
	%219 = bitcast [3 x i8]* %218 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %217, [0 x i8]* %219)
	%220 = load %ast.AstNode** %lhs
	%221 = bitcast %ast.AstNode* %220 to %ast.AstNode*
	call void @llvm_NodeType(%ast.AstNode* %221)
	%222 = load %bout.BufIO** @llvm_f
	%223 = bitcast %bout.BufIO* %222 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %223, i8 32)
	%224 = load %ast.AstNode** %lhs
	%225 = bitcast %ast.AstNode* %224 to %ast.AstNode*
	call void @llvm_NodeDst(%ast.AstNode* %225)
	%226 = load %ast.AstNode** %store
	%227 = bitcast %ast.AstNode* %226 to %ast.AstNode*
	call void @llvm_PEndLine(%ast.AstNode* %227)
	br label %L.21
L.21:
	%228 = load i16* %i
	%229 = add i16 %228, 1
	store i16 %229, i16* %i
	br label %L.18
L.19:
	br label %return
return:
	ret void
}
@S.772 = internal constant [19 x i8] c"\09store %T %N, %T* \00"@S.773 = internal constant [18 x i8] c"\09br label %return\00"define internal zeroext i8 @llvm_Return(%ast.AstNode* %node.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%i = alloca i16
	%rnode = alloca %ast.AstNode*
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 2
	%2 = load i16* %1
	%3 = icmp ugt i16 %2, 0
	br i1 %3, label %L.2, label %L.1
L.2:
	store i16 0, i16* %i
	br label %L.3
L.3:
	%4 = load i16* %i
	%5 = load %ast.AstNode** %node
	%6 = getelementptr %ast.AstNode* %5, i32 0, i32 2
	%7 = load i16* %6
	%8 = icmp ult i16 %4, %7
	%9 = xor i1 %8, true
	br i1 %9, label %L.4, label %L.5
L.5:
	%10 = load %ast.AstNode** %node
	%11 = getelementptr %ast.AstNode* %10, i32 0, i32 13
	%12 = load i16* %i
	%13 = zext i16 %12 to i32
	%14 = getelementptr [0 x %ast.AstNode*]* %11, i32 0, i32 %13
	%15 = load %ast.AstNode** %14
	%16 = bitcast %ast.AstNode* %15 to %ast.AstNode*
	store %ast.AstNode* %16, %ast.AstNode** %rnode
	%17 = load %ast.AstNode** %rnode
	%18 = bitcast %ast.AstNode* %17 to %ast.AstNode*
	%19 = call i8 @llvm_GenSub(%ast.AstNode* %18)
	%20 = getelementptr [19 x i8]* @S.772
	%21 = bitcast [19 x i8]* %20 to [0 x i8]*
	%22 = load %ast.AstNode** %rnode
	%23 = bitcast %ast.AstNode* %22 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %21, %ast.AstNode* %23)
	%24 = load i16* %i
	call void @llvm_PRetValName(i16 %24)
	%25 = load %ast.AstNode** %node
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	call void @llvm_PEndLine(%ast.AstNode* %26)
	%27 = load i16* %i
	%28 = add i16 %27, 1
	store i16 %28, i16* %i
	br label %L.3
L.4:
	%29 = load %ast.AstNode** %node
	%30 = getelementptr %ast.AstNode* %29, i32 0, i32 13
	%31 = getelementptr [0 x %ast.AstNode*]* %30, i32 0, i32 0
	%32 = load %ast.AstNode** %31
	%33 = getelementptr %ast.AstNode* %32, i32 0, i32 9
	%34 = load i16* %33
	%35 = load %ast.AstNode** %node
	%36 = getelementptr %ast.AstNode* %35, i32 0, i32 9
	store i16 %34, i16* %36
	br label %L.1
L.1:
	%37 = load %bout.BufIO** @llvm_f
	%38 = bitcast %bout.BufIO* %37 to %bout.BufIO*
	%39 = getelementptr [18 x i8]* @S.773
	%40 = bitcast [18 x i8]* %39 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %38, [0 x i8]* %40)
	%41 = load %ast.AstNode** %node
	%42 = bitcast %ast.AstNode* %41 to %ast.AstNode*
	call void @llvm_PEndLine(%ast.AstNode* %42)
	store i8 1, i8* %rv.0
	br label %return
return:
	%43 = load i8* %rv.0
	ret i8 %43
}
@S.774 = internal constant [38 x i8] c"\09%N = select i1 %0N, %1T %1N, %2T %2N\00"define internal void @llvm_IfExpr(%ast.AstNode* %node.arg) nounwind {
L.0:
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%0 = load %ast.AstNode** %node
	%1 = getelementptr %ast.AstNode* %0, i32 0, i32 13
	%2 = getelementptr [0 x %ast.AstNode*]* %1, i32 0, i32 1
	%3 = load %ast.AstNode** %2
	%4 = bitcast %ast.AstNode* %3 to %ast.AstNode*
	%5 = call i8 @llvm_GenSub(%ast.AstNode* %4)
	%6 = load %ast.AstNode** %node
	%7 = getelementptr %ast.AstNode* %6, i32 0, i32 13
	%8 = getelementptr [0 x %ast.AstNode*]* %7, i32 0, i32 2
	%9 = load %ast.AstNode** %8
	%10 = bitcast %ast.AstNode* %9 to %ast.AstNode*
	%11 = call i8 @llvm_GenSub(%ast.AstNode* %10)
	%12 = load %ast.AstNode** %node
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 13
	%14 = getelementptr [0 x %ast.AstNode*]* %13, i32 0, i32 0
	%15 = load %ast.AstNode** %14
	%16 = bitcast %ast.AstNode* %15 to %ast.AstNode*
	%17 = call i8 @llvm_GenSub(%ast.AstNode* %16)
	%18 = load i16* @llvm_Tseqno
	%19 = load %ast.AstNode** %node
	%20 = getelementptr %ast.AstNode* %19, i32 0, i32 9
	store i16 %18, i16* %20
	%21 = load i16* @llvm_Tseqno
	%22 = add i16 %21, 1
	store i16 %22, i16* @llvm_Tseqno
	%23 = getelementptr [38 x i8]* @S.774
	%24 = bitcast [38 x i8]* %23 to [0 x i8]*
	%25 = load %ast.AstNode** %node
	%26 = bitcast %ast.AstNode* %25 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %24, %ast.AstNode* %26)
	%27 = load %ast.AstNode** %node
	%28 = bitcast %ast.AstNode* %27 to %ast.AstNode*
	call void @llvm_PEndLine(%ast.AstNode* %28)
	br label %return
return:
	ret void
}
@S.775 = internal constant [27 x i8] c"\09%N = getelementptr %T %S\0A\00"@S.776 = internal constant [28 x i8] c"\09%N = getelementptr %T %0N\0A\00"@S.777 = internal constant [40 x i8] c"\09%N = getelementptr %0T %0N, %W 0, i32 \00"@S.778 = internal constant [44 x i8] c"\09%N = getelementptr %0T %0N, %W 0, %1T %1N\0A\00"@S.779 = internal constant [44 x i8] c"\09%N = getelementptr %0T %0N, %W 0, %1T %1N\0A\00"@S.780 = internal constant [25 x i8] c" = bitcast %A* %N to %T\0A\00"@S.781 = internal constant [29 x i8] c"\09%N = bitcast %0T %0N to %T\0A\00"@S.782 = internal constant [30 x i8] c"\09%N = inttoptr %0T %0N to %T\0A\00"@S.783 = internal constant [30 x i8] c"\09%N = ptrtoint %0T %0N to %T\0A\00"@S.784 = internal constant [29 x i8] c"\09%N = bitcast %0T %0N to %T\0A\00"@S.785 = internal constant [5 x i8] c"zext\00"@S.786 = internal constant [5 x i8] c"sext\00"@S.787 = internal constant [6 x i8] c"trunc\00"@S.788 = internal constant [23 x i8] c"\09%N = xor %0T %0N, -1\0A\00"@S.789 = internal constant [22 x i8] c"\09%N = sub %0T 0, %0N\0A\00"@S.790 = internal constant [4 x i8] c"add\00"@S.791 = internal constant [4 x i8] c"sub\00"@S.792 = internal constant [4 x i8] c"mul\00"@S.793 = internal constant [5 x i8] c"udiv\00"@S.794 = internal constant [5 x i8] c"urem\00"@S.795 = internal constant [4 x i8] c"shl\00"@S.796 = internal constant [5 x i8] c"lshr\00"@S.797 = internal constant [5 x i8] c"ashr\00"@S.798 = internal constant [8 x i8] c"icmp eq\00"@S.799 = internal constant [8 x i8] c"icmp ne\00"@S.800 = internal constant [9 x i8] c"icmp ugt\00"@S.801 = internal constant [9 x i8] c"icmp ult\00"@S.802 = internal constant [9 x i8] c"icmp uge\00"@S.803 = internal constant [9 x i8] c"icmp ule\00"@S.804 = internal constant [9 x i8] c"icmp sgt\00"@S.805 = internal constant [9 x i8] c"icmp slt\00"@S.806 = internal constant [9 x i8] c"icmp sge\00"@S.807 = internal constant [9 x i8] c"icmp sle\00"@S.808 = internal constant [4 x i8] c"and\00"@S.809 = internal constant [3 x i8] c"or\00"@S.810 = internal constant [4 x i8] c"xor\00"@S.811 = internal constant [24 x i8] c"\09%N = xor i1 %0N, true\0A\00"define internal zeroext i8 @llvm_GenSub(%ast.AstNode* %node.arg) nounwind {
L.0:
	%rv.0 = alloca i8
	%node = alloca %ast.AstNode*
	store %ast.AstNode* %node.arg, %ast.AstNode** %node
	%term = alloca i8
	store i8 0, i8* %term
	%0 = load %ast.AstNode** %node
	%1 = icmp eq %ast.AstNode* %0, null
	br i1 %1, label %L.2, label %L.1
L.2:
	%2 = load i8* %term
	store i8 %2, i8* %rv.0
	br label %return
L.1:
	%3 = load %ast.AstNode** %node
	%4 = getelementptr %ast.AstNode* %3, i32 0, i32 9
	%5 = load i16* %4
	%6 = icmp ne i16 %5, 0
	br i1 %6, label %L.4, label %L.3
L.4:
	%7 = load i8* %term
	store i8 %7, i8* %rv.0
	br label %return
L.3:
	%8 = load %ast.AstNode** %node
	%9 = getelementptr %ast.AstNode* %8, i32 0, i32 0
	%10 = load i8* %9
	%11 = zext i8 %10 to i32
	switch i32 %11, label %L.5 [
		i32 1, label %L.7
		i32 3, label %L.8
		i32 4, label %L.9
		i32 71, label %L.10
		i32 5, label %L.11
		i32 6, label %L.12
		i32 9, label %L.13
		i32 7, label %L.13
		i32 8, label %L.14
		i32 14, label %L.14
		i32 21, label %L.15
		i32 22, label %L.16
		i32 23, label %L.16
		i32 20, label %L.17
		i32 70, label %L.18
		i32 24, label %L.19
		i32 26, label %L.20
		i32 25, label %L.21
		i32 19, label %L.22
		i32 16, label %L.23
		i32 17, label %L.24
		i32 18, label %L.25
		i32 15, label %L.26
		i32 27, label %L.27
		i32 28, label %L.28
		i32 29, label %L.29
		i32 30, label %L.30
		i32 32, label %L.31
		i32 31, label %L.32
		i32 34, label %L.33
		i32 35, label %L.34
		i32 36, label %L.35
		i32 37, label %L.36
		i32 38, label %L.37
		i32 53, label %L.38
		i32 55, label %L.38
		i32 54, label %L.39
		i32 56, label %L.40
		i32 39, label %L.41
		i32 40, label %L.42
		i32 42, label %L.43
		i32 41, label %L.44
		i32 44, label %L.45
		i32 43, label %L.46
		i32 46, label %L.47
		i32 45, label %L.48
		i32 48, label %L.49
		i32 47, label %L.50
		i32 57, label %L.51
		i32 58, label %L.52
		i32 59, label %L.53
		i32 62, label %L.54
		i32 61, label %L.55
		i32 60, label %L.56
		i32 63, label %L.57
		i32 10, label %L.58
		i32 11, label %L.59
		i32 12, label %L.60
		i32 67, label %L.61
		i32 68, label %L.62
		i32 65, label %L.63
		i32 66, label %L.64
		i32 64, label %L.65
	]
L.7:
	%12 = load %ast.AstNode** %node
	%13 = getelementptr %ast.AstNode* %12, i32 0, i32 13
	%14 = getelementptr [0 x %ast.AstNode*]* %13, i32 0, i32 0
	%15 = load %ast.AstNode** %14
	%16 = bitcast %ast.AstNode* %15 to %ast.AstNode*
	%17 = call i8 @llvm_GenSub(%ast.AstNode* %16)
	%18 = load %ast.AstNode** %node
	%19 = getelementptr %ast.AstNode* %18, i32 0, i32 13
	%20 = getelementptr [0 x %ast.AstNode*]* %19, i32 0, i32 0
	%21 = load %ast.AstNode** %20
	%22 = getelementptr %ast.AstNode* %21, i32 0, i32 9
	%23 = load i16* %22
	%24 = load %ast.AstNode** %node
	%25 = getelementptr %ast.AstNode* %24, i32 0, i32 9
	store i16 %23, i16* %25
	br label %L.6
L.8:
	%26 = getelementptr %A.3* @feature, i32 0, i32 3
	%27 = load i8* %26
	%28 = icmp ne i8 %27, 0
	br i1 %28, label %L.67, label %L.66
L.67:
	%29 = load %ast.AstNode** %node
	%30 = getelementptr %ast.AstNode* %29, i32 0, i32 12
	%31 = load %symb.SymbNode** %30
	%32 = getelementptr %symb.SymbNode* %31
	%33 = bitcast %symb.SymbNode* %32 to %symb.SymbNode*
	call void @llvmdb_FileStart(%symb.SymbNode* %33)
	br label %L.66
L.66:
	%34 = load %ast.AstNode** %node
	%35 = getelementptr %ast.AstNode* %34, i32 0, i32 13
	%36 = getelementptr [0 x %ast.AstNode*]* %35, i32 0, i32 0
	%37 = load %ast.AstNode** %36
	%38 = bitcast %ast.AstNode* %37 to %ast.AstNode*
	%39 = call i8 @llvm_GenSub(%ast.AstNode* %38)
	%40 = getelementptr %A.3* @feature, i32 0, i32 3
	%41 = load i8* %40
	%42 = icmp ne i8 %41, 0
	br i1 %42, label %L.69, label %L.68
L.69:
	%43 = load %ast.AstNode** %node
	%44 = getelementptr %ast.AstNode* %43, i32 0, i32 12
	%45 = load %symb.SymbNode** %44
	%46 = getelementptr %symb.SymbNode* %45
	%47 = bitcast %symb.SymbNode* %46 to %symb.SymbNode*
	call void @llvmdb_FileFinish(%symb.SymbNode* %47)
	br label %L.68
L.68:
	br label %L.6
L.9:
	%48 = getelementptr %A.3* @feature, i32 0, i32 3
	%49 = load i8* %48
	%50 = icmp ne i8 %49, 0
	br i1 %50, label %L.71, label %L.70
L.71:
	%51 = load %ast.AstNode** %node
	%52 = getelementptr %ast.AstNode* %51, i32 0, i32 12
	%53 = load %symb.SymbNode** %52
	%54 = getelementptr %symb.SymbNode* %53, i32 0, i32 19
	%55 = getelementptr [0 x i8]* %54
	%56 = bitcast [0 x i8]* %55 to [0 x i8]*
	call void @llvmdb_PackageStart([0 x i8]* %56)
	br label %L.70
L.70:
	%57 = load %ast.AstNode** %node
	%58 = getelementptr %ast.AstNode* %57, i32 0, i32 13
	%59 = getelementptr [0 x %ast.AstNode*]* %58, i32 0, i32 0
	%60 = load %ast.AstNode** %59
	%61 = bitcast %ast.AstNode* %60 to %ast.AstNode*
	%62 = call i8 @llvm_GenSub(%ast.AstNode* %61)
	%63 = getelementptr %A.3* @feature, i32 0, i32 3
	%64 = load i8* %63
	%65 = icmp ne i8 %64, 0
	br i1 %65, label %L.73, label %L.72
L.73:
	call void @llvmdb_PackageEnd()
	br label %L.72
L.72:
	br label %L.6
L.10:
	%66 = getelementptr %A.3* @feature, i32 0, i32 3
	%67 = load i8* %66
	%68 = icmp ne i8 %67, 0
	br i1 %68, label %L.75, label %L.74
L.75:
	%69 = load %ast.AstNode** %node
	%70 = getelementptr %ast.AstNode* %69, i32 0, i32 12
	%71 = load %symb.SymbNode** %70
	%72 = getelementptr %symb.SymbNode* %71
	%73 = bitcast %symb.SymbNode* %72 to %symb.SymbNode*
	call void @llvmdb_ProcStart(%symb.SymbNode* %73)
	br label %L.74
L.74:
	%74 = load %ast.AstNode** %node
	%75 = bitcast %ast.AstNode* %74 to %ast.AstNode*
	call void @llvm_Procedure(%ast.AstNode* %75)
	%76 = getelementptr %A.3* @feature, i32 0, i32 3
	%77 = load i8* %76
	%78 = icmp ne i8 %77, 0
	br i1 %78, label %L.77, label %L.76
L.77:
	%79 = load %ast.AstNode** %node
	%80 = getelementptr %ast.AstNode* %79, i32 0, i32 12
	%81 = load %symb.SymbNode** %80
	%82 = getelementptr %symb.SymbNode* %81
	%83 = bitcast %symb.SymbNode* %82 to %symb.SymbNode*
	call void @llvmdb_ProcFinish(%symb.SymbNode* %83)
	br label %L.76
L.76:
	br label %L.6
L.11:
	%84 = load %ast.AstNode** %node
	%85 = bitcast %ast.AstNode* %84 to %ast.AstNode*
	call void @llvm_DclVar(%ast.AstNode* %85)
	br label %L.6
L.12:
	%86 = load %ast.AstNode** %node
	%87 = bitcast %ast.AstNode* %86 to %ast.AstNode*
	call void @llvm_DclCon(%ast.AstNode* %87)
	br label %L.6
L.13:
	br label %L.6
L.14:
	%88 = load i16* @llvm_Tseqno
	%89 = load %ast.AstNode** %node
	%90 = getelementptr %ast.AstNode* %89, i32 0, i32 9
	store i16 %88, i16* %90
	%91 = load i16* @llvm_Tseqno
	%92 = add i16 %91, 1
	store i16 %92, i16* @llvm_Tseqno
	%93 = getelementptr [27 x i8]* @S.775
	%94 = bitcast [27 x i8]* %93 to [0 x i8]*
	%95 = load %ast.AstNode** %node
	%96 = bitcast %ast.AstNode* %95 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %94, %ast.AstNode* %96)
	br label %L.6
L.15:
	%97 = load %ast.AstNode** %node
	%98 = bitcast %ast.AstNode* %97 to %ast.AstNode*
	call void @llvm_Copy(%ast.AstNode* %98)
	br label %L.6
L.16:
	%99 = load %ast.AstNode** %node
	%100 = bitcast %ast.AstNode* %99 to %ast.AstNode*
	%101 = call i8 @llvm_ArrayCompare(%ast.AstNode* %100)
	store i8 %101, i8* %term
	br label %L.6
L.17:
	%102 = load %ast.AstNode** %node
	%103 = bitcast %ast.AstNode* %102 to %ast.AstNode*
	call void @llvm_Copy(%ast.AstNode* %103)
	br label %L.6
L.18:
	%104 = load %ast.AstNode** %node
	%105 = bitcast %ast.AstNode* %104 to %ast.AstNode*
	%106 = call i8 @llvm_Return(%ast.AstNode* %105)
	store i8 %106, i8* %term
	br label %L.6
L.19:
	%107 = load %ast.AstNode** %node
	%108 = bitcast %ast.AstNode* %107 to %ast.AstNode*
	call void @llvm_GetRV(%ast.AstNode* %108)
	br label %L.6
L.20:
	%109 = load %ast.AstNode** %node
	%110 = bitcast %ast.AstNode* %109 to %ast.AstNode*
	call void @llvm_Store(%ast.AstNode* %110)
	br label %L.6
L.21:
	%111 = load %ast.AstNode** %node
	%112 = bitcast %ast.AstNode* %111 to %ast.AstNode*
	call void @llvm_Load(%ast.AstNode* %112)
	br label %L.6
L.22:
	%113 = load %ast.AstNode** %node
	%114 = getelementptr %ast.AstNode* %113, i32 0, i32 13
	%115 = getelementptr [0 x %ast.AstNode*]* %114, i32 0, i32 0
	%116 = load %ast.AstNode** %115
	%117 = bitcast %ast.AstNode* %116 to %ast.AstNode*
	%118 = call i8 @llvm_GenSub(%ast.AstNode* %117)
	%119 = load i16* @llvm_Tseqno
	%120 = load %ast.AstNode** %node
	%121 = getelementptr %ast.AstNode* %120, i32 0, i32 9
	store i16 %119, i16* %121
	%122 = load i16* @llvm_Tseqno
	%123 = add i16 %122, 1
	store i16 %123, i16* @llvm_Tseqno
	%124 = getelementptr [28 x i8]* @S.776
	%125 = bitcast [28 x i8]* %124 to [0 x i8]*
	%126 = load %ast.AstNode** %node
	%127 = bitcast %ast.AstNode* %126 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %125, %ast.AstNode* %127)
	br label %L.6
L.23:
	%128 = load %ast.AstNode** %node
	%129 = getelementptr %ast.AstNode* %128, i32 0, i32 13
	%130 = getelementptr [0 x %ast.AstNode*]* %129, i32 0, i32 0
	%131 = load %ast.AstNode** %130
	%132 = bitcast %ast.AstNode* %131 to %ast.AstNode*
	%133 = call i8 @llvm_GenSub(%ast.AstNode* %132)
	%134 = load i16* @llvm_Tseqno
	%135 = load %ast.AstNode** %node
	%136 = getelementptr %ast.AstNode* %135, i32 0, i32 9
	store i16 %134, i16* %136
	%137 = load i16* @llvm_Tseqno
	%138 = add i16 %137, 1
	store i16 %138, i16* @llvm_Tseqno
	%139 = getelementptr [40 x i8]* @S.777
	%140 = bitcast [40 x i8]* %139 to [0 x i8]*
	%141 = load %ast.AstNode** %node
	%142 = bitcast %ast.AstNode* %141 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %140, %ast.AstNode* %142)
	%143 = load %bout.BufIO** @llvm_f
	%144 = bitcast %bout.BufIO* %143 to %bout.BufIO*
	%145 = load %ast.AstNode** %node
	%146 = getelementptr %ast.AstNode* %145, i32 0, i32 10
	%147 = load i64* %146
	%148 = trunc i64 %147 to i32
	call void @bout_uint32(%bout.BufIO* %144, i32 %148)
	%149 = load %bout.BufIO** @llvm_f
	%150 = bitcast %bout.BufIO* %149 to %bout.BufIO*
	call void @bout_nl(%bout.BufIO* %150)
	br label %L.6
L.24:
	%151 = load %ast.AstNode** %node
	%152 = getelementptr %ast.AstNode* %151, i32 0, i32 13
	%153 = getelementptr [0 x %ast.AstNode*]* %152, i32 0, i32 0
	%154 = load %ast.AstNode** %153
	%155 = bitcast %ast.AstNode* %154 to %ast.AstNode*
	%156 = call i8 @llvm_GenSub(%ast.AstNode* %155)
	%157 = load %ast.AstNode** %node
	%158 = getelementptr %ast.AstNode* %157, i32 0, i32 13
	%159 = getelementptr [0 x %ast.AstNode*]* %158, i32 0, i32 1
	%160 = load %ast.AstNode** %159
	%161 = bitcast %ast.AstNode* %160 to %ast.AstNode*
	%162 = load %type.TypeNode** @type_wordtype
	%163 = bitcast %type.TypeNode* %162 to %type.TypeNode*
	%164 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %161, %type.TypeNode* %163)
	%165 = bitcast %ast.AstNode* %164 to %ast.AstNode*
	%166 = load %ast.AstNode** %node
	%167 = getelementptr %ast.AstNode* %166, i32 0, i32 13
	%168 = getelementptr [0 x %ast.AstNode*]* %167, i32 0, i32 1
	store %ast.AstNode* %165, %ast.AstNode** %168
	%169 = load %ast.AstNode** %node
	%170 = getelementptr %ast.AstNode* %169, i32 0, i32 13
	%171 = getelementptr [0 x %ast.AstNode*]* %170, i32 0, i32 1
	%172 = load %ast.AstNode** %171
	%173 = bitcast %ast.AstNode* %172 to %ast.AstNode*
	%174 = call i8 @llvm_GenSub(%ast.AstNode* %173)
	%175 = load i16* @llvm_Tseqno
	%176 = load %ast.AstNode** %node
	%177 = getelementptr %ast.AstNode* %176, i32 0, i32 9
	store i16 %175, i16* %177
	%178 = load i16* @llvm_Tseqno
	%179 = add i16 %178, 1
	store i16 %179, i16* @llvm_Tseqno
	%180 = getelementptr [44 x i8]* @S.778
	%181 = bitcast [44 x i8]* %180 to [0 x i8]*
	%182 = load %ast.AstNode** %node
	%183 = bitcast %ast.AstNode* %182 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %181, %ast.AstNode* %183)
	br label %L.6
L.25:
	%nextseqno = alloca i16
	%184 = load %ast.AstNode** %node
	%185 = getelementptr %ast.AstNode* %184, i32 0, i32 13
	%186 = getelementptr [0 x %ast.AstNode*]* %185, i32 0, i32 0
	%187 = load %ast.AstNode** %186
	%188 = bitcast %ast.AstNode* %187 to %ast.AstNode*
	%189 = call i8 @llvm_GenSub(%ast.AstNode* %188)
	%190 = load %ast.AstNode** %node
	%191 = getelementptr %ast.AstNode* %190, i32 0, i32 13
	%192 = getelementptr [0 x %ast.AstNode*]* %191, i32 0, i32 1
	%193 = load %ast.AstNode** %192
	%194 = bitcast %ast.AstNode* %193 to %ast.AstNode*
	%195 = load %type.TypeNode** @type_wordtype
	%196 = bitcast %type.TypeNode* %195 to %type.TypeNode*
	%197 = call %ast.AstNode* @expr_ExtendT(%ast.AstNode* %194, %type.TypeNode* %196)
	%198 = bitcast %ast.AstNode* %197 to %ast.AstNode*
	%199 = load %ast.AstNode** %node
	%200 = getelementptr %ast.AstNode* %199, i32 0, i32 13
	%201 = getelementptr [0 x %ast.AstNode*]* %200, i32 0, i32 1
	store %ast.AstNode* %198, %ast.AstNode** %201
	%202 = load %ast.AstNode** %node
	%203 = getelementptr %ast.AstNode* %202, i32 0, i32 13
	%204 = getelementptr [0 x %ast.AstNode*]* %203, i32 0, i32 1
	%205 = load %ast.AstNode** %204
	%206 = bitcast %ast.AstNode* %205 to %ast.AstNode*
	%207 = call i8 @llvm_GenSub(%ast.AstNode* %206)
	%208 = load i16* @llvm_Tseqno
	%209 = load %ast.AstNode** %node
	%210 = getelementptr %ast.AstNode* %209, i32 0, i32 9
	store i16 %208, i16* %210
	%211 = load i16* @llvm_Tseqno
	%212 = add i16 %211, 1
	store i16 %212, i16* @llvm_Tseqno
	%213 = load i16* @llvm_Tseqno
	store i16 %213, i16* %nextseqno
	%214 = load i16* @llvm_Tseqno
	%215 = add i16 %214, 1
	store i16 %215, i16* @llvm_Tseqno
	%216 = getelementptr [44 x i8]* @S.779
	%217 = bitcast [44 x i8]* %216 to [0 x i8]*
	%218 = load %ast.AstNode** %node
	%219 = bitcast %ast.AstNode* %218 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %217, %ast.AstNode* %219)
	%220 = load %bout.BufIO** @llvm_f
	%221 = bitcast %bout.BufIO* %220 to %bout.BufIO*
	call void @bout_chr(%bout.BufIO* %221, i8 9)
	%222 = load i16* %nextseqno
	call void @llvm_PTempName(i16 %222)
	%223 = getelementptr [25 x i8]* @S.780
	%224 = bitcast [25 x i8]* %223 to [0 x i8]*
	%225 = load %ast.AstNode** %node
	%226 = bitcast %ast.AstNode* %225 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %224, %ast.AstNode* %226)
	%227 = load i16* %nextseqno
	%228 = load %ast.AstNode** %node
	%229 = getelementptr %ast.AstNode* %228, i32 0, i32 9
	store i16 %227, i16* %229
	br label %L.6
L.26:
	%230 = load %ast.AstNode** %node
	%231 = getelementptr %ast.AstNode* %230, i32 0, i32 13
	%232 = getelementptr [0 x %ast.AstNode*]* %231, i32 0, i32 0
	%233 = load %ast.AstNode** %232
	%234 = bitcast %ast.AstNode* %233 to %ast.AstNode*
	%235 = call i8 @llvm_GenSub(%ast.AstNode* %234)
	%236 = load i16* @llvm_Tseqno
	%237 = load %ast.AstNode** %node
	%238 = getelementptr %ast.AstNode* %237, i32 0, i32 9
	store i16 %236, i16* %238
	%239 = load i16* @llvm_Tseqno
	%240 = add i16 %239, 1
	store i16 %240, i16* @llvm_Tseqno
	%241 = load %ast.AstNode** %node
	%242 = getelementptr %ast.AstNode* %241, i32 0, i32 1
	%243 = load i8* %242
	%244 = icmp eq i8 %243, 4
	br i1 %244, label %L.79, label %L.80
L.79:
	%245 = load %ast.AstNode** %node
	%246 = getelementptr %ast.AstNode* %245, i32 0, i32 13
	%247 = getelementptr [0 x %ast.AstNode*]* %246, i32 0, i32 0
	%248 = load %ast.AstNode** %247
	%249 = getelementptr %ast.AstNode* %248, i32 0, i32 1
	%250 = load i8* %249
	%251 = icmp eq i8 %250, 4
	br i1 %251, label %L.82, label %L.83
L.82:
	%252 = getelementptr [29 x i8]* @S.781
	%253 = bitcast [29 x i8]* %252 to [0 x i8]*
	%254 = load %ast.AstNode** %node
	%255 = bitcast %ast.AstNode* %254 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %253, %ast.AstNode* %255)
	br label %L.81
L.83:
	%256 = getelementptr [30 x i8]* @S.782
	%257 = bitcast [30 x i8]* %256 to [0 x i8]*
	%258 = load %ast.AstNode** %node
	%259 = bitcast %ast.AstNode* %258 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %257, %ast.AstNode* %259)
	br label %L.81
L.81:
	br label %L.78
L.80:
	%260 = load %ast.AstNode** %node
	%261 = getelementptr %ast.AstNode* %260, i32 0, i32 13
	%262 = getelementptr [0 x %ast.AstNode*]* %261, i32 0, i32 0
	%263 = load %ast.AstNode** %262
	%264 = getelementptr %ast.AstNode* %263, i32 0, i32 1
	%265 = load i8* %264
	%266 = icmp eq i8 %265, 4
	br i1 %266, label %L.85, label %L.86
L.85:
	%267 = getelementptr [30 x i8]* @S.783
	%268 = bitcast [30 x i8]* %267 to [0 x i8]*
	%269 = load %ast.AstNode** %node
	%270 = bitcast %ast.AstNode* %269 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %268, %ast.AstNode* %270)
	br label %L.84
L.86:
	%271 = getelementptr [29 x i8]* @S.784
	%272 = bitcast [29 x i8]* %271 to [0 x i8]*
	%273 = load %ast.AstNode** %node
	%274 = bitcast %ast.AstNode* %273 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %272, %ast.AstNode* %274)
	br label %L.84
L.84:
	br label %L.78
L.78:
	br label %L.6
L.27:
	%275 = load %ast.AstNode** %node
	%276 = bitcast %ast.AstNode* %275 to %ast.AstNode*
	%277 = getelementptr [5 x i8]* @S.785
	%278 = bitcast [5 x i8]* %277 to [0 x i8]*
	call void @llvm_ChangeSize(%ast.AstNode* %276, [0 x i8]* %278)
	br label %L.6
L.28:
	%279 = load %ast.AstNode** %node
	%280 = bitcast %ast.AstNode* %279 to %ast.AstNode*
	%281 = getelementptr [5 x i8]* @S.786
	%282 = bitcast [5 x i8]* %281 to [0 x i8]*
	call void @llvm_ChangeSize(%ast.AstNode* %280, [0 x i8]* %282)
	br label %L.6
L.29:
	%283 = load %ast.AstNode** %node
	%284 = bitcast %ast.AstNode* %283 to %ast.AstNode*
	%285 = getelementptr [6 x i8]* @S.787
	%286 = bitcast [6 x i8]* %285 to [0 x i8]*
	call void @llvm_ChangeSize(%ast.AstNode* %284, [0 x i8]* %286)
	br label %L.6
L.30:
	%287 = load %ast.AstNode** %node
	%288 = bitcast %ast.AstNode* %287 to %ast.AstNode*
	call void @llvm_Swap(%ast.AstNode* %288)
	br label %L.6
L.31:
	%289 = load %ast.AstNode** %node
	%290 = getelementptr %ast.AstNode* %289, i32 0, i32 13
	%291 = getelementptr [0 x %ast.AstNode*]* %290, i32 0, i32 0
	%292 = load %ast.AstNode** %291
	%293 = bitcast %ast.AstNode* %292 to %ast.AstNode*
	%294 = call i8 @llvm_GenSub(%ast.AstNode* %293)
	%295 = load i16* @llvm_Tseqno
	%296 = load %ast.AstNode** %node
	%297 = getelementptr %ast.AstNode* %296, i32 0, i32 9
	store i16 %295, i16* %297
	%298 = load i16* @llvm_Tseqno
	%299 = add i16 %298, 1
	store i16 %299, i16* @llvm_Tseqno
	%300 = getelementptr [23 x i8]* @S.788
	%301 = bitcast [23 x i8]* %300 to [0 x i8]*
	%302 = load %ast.AstNode** %node
	%303 = bitcast %ast.AstNode* %302 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %301, %ast.AstNode* %303)
	br label %L.6
L.32:
	%304 = load %ast.AstNode** %node
	%305 = getelementptr %ast.AstNode* %304, i32 0, i32 13
	%306 = getelementptr [0 x %ast.AstNode*]* %305, i32 0, i32 0
	%307 = load %ast.AstNode** %306
	%308 = bitcast %ast.AstNode* %307 to %ast.AstNode*
	%309 = call i8 @llvm_GenSub(%ast.AstNode* %308)
	%310 = load i16* @llvm_Tseqno
	%311 = load %ast.AstNode** %node
	%312 = getelementptr %ast.AstNode* %311, i32 0, i32 9
	store i16 %310, i16* %312
	%313 = load i16* @llvm_Tseqno
	%314 = add i16 %313, 1
	store i16 %314, i16* @llvm_Tseqno
	%315 = getelementptr [22 x i8]* @S.789
	%316 = bitcast [22 x i8]* %315 to [0 x i8]*
	%317 = load %ast.AstNode** %node
	%318 = bitcast %ast.AstNode* %317 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %316, %ast.AstNode* %318)
	br label %L.6
L.33:
	%319 = load %ast.AstNode** %node
	%320 = bitcast %ast.AstNode* %319 to %ast.AstNode*
	%321 = getelementptr [4 x i8]* @S.790
	%322 = bitcast [4 x i8]* %321 to [0 x i8]*
	%323 = call i8 @llvm_BinaryOp(%ast.AstNode* %320, [0 x i8]* %322)
	br label %L.6
L.34:
	%324 = load %ast.AstNode** %node
	%325 = bitcast %ast.AstNode* %324 to %ast.AstNode*
	%326 = getelementptr [4 x i8]* @S.791
	%327 = bitcast [4 x i8]* %326 to [0 x i8]*
	%328 = call i8 @llvm_BinaryOp(%ast.AstNode* %325, [0 x i8]* %327)
	br label %L.6
L.35:
	%329 = load %ast.AstNode** %node
	%330 = bitcast %ast.AstNode* %329 to %ast.AstNode*
	%331 = getelementptr [4 x i8]* @S.792
	%332 = bitcast [4 x i8]* %331 to [0 x i8]*
	%333 = call i8 @llvm_BinaryOp(%ast.AstNode* %330, [0 x i8]* %332)
	br label %L.6
L.36:
	%334 = load %ast.AstNode** %node
	%335 = bitcast %ast.AstNode* %334 to %ast.AstNode*
	%336 = getelementptr [5 x i8]* @S.793
	%337 = bitcast [5 x i8]* %336 to [0 x i8]*
	%338 = call i8 @llvm_BinaryOp(%ast.AstNode* %335, [0 x i8]* %337)
	br label %L.6
L.37:
	%339 = load %ast.AstNode** %node
	%340 = bitcast %ast.AstNode* %339 to %ast.AstNode*
	%341 = getelementptr [5 x i8]* @S.794
	%342 = bitcast [5 x i8]* %341 to [0 x i8]*
	%343 = call i8 @llvm_BinaryOp(%ast.AstNode* %340, [0 x i8]* %342)
	br label %L.6
L.38:
	%344 = load %ast.AstNode** %node
	%345 = bitcast %ast.AstNode* %344 to %ast.AstNode*
	%346 = getelementptr [4 x i8]* @S.795
	%347 = bitcast [4 x i8]* %346 to [0 x i8]*
	%348 = call i8 @llvm_BinaryOp(%ast.AstNode* %345, [0 x i8]* %347)
	br label %L.6
L.39:
	%349 = load %ast.AstNode** %node
	%350 = bitcast %ast.AstNode* %349 to %ast.AstNode*
	%351 = getelementptr [5 x i8]* @S.796
	%352 = bitcast [5 x i8]* %351 to [0 x i8]*
	%353 = call i8 @llvm_BinaryOp(%ast.AstNode* %350, [0 x i8]* %352)
	br label %L.6
L.40:
	%354 = load %ast.AstNode** %node
	%355 = bitcast %ast.AstNode* %354 to %ast.AstNode*
	%356 = getelementptr [5 x i8]* @S.797
	%357 = bitcast [5 x i8]* %356 to [0 x i8]*
	%358 = call i8 @llvm_BinaryOp(%ast.AstNode* %355, [0 x i8]* %357)
	br label %L.6
L.41:
	%359 = load %ast.AstNode** %node
	%360 = bitcast %ast.AstNode* %359 to %ast.AstNode*
	%361 = getelementptr [8 x i8]* @S.798
	%362 = bitcast [8 x i8]* %361 to [0 x i8]*
	%363 = call i8 @llvm_CompareOp(%ast.AstNode* %360, [0 x i8]* %362)
	store i8 %363, i8* %term
	br label %L.6
L.42:
	%364 = load %ast.AstNode** %node
	%365 = bitcast %ast.AstNode* %364 to %ast.AstNode*
	%366 = getelementptr [8 x i8]* @S.799
	%367 = bitcast [8 x i8]* %366 to [0 x i8]*
	%368 = call i8 @llvm_CompareOp(%ast.AstNode* %365, [0 x i8]* %367)
	store i8 %368, i8* %term
	br label %L.6
L.43:
	%369 = load %ast.AstNode** %node
	%370 = bitcast %ast.AstNode* %369 to %ast.AstNode*
	%371 = getelementptr [9 x i8]* @S.800
	%372 = bitcast [9 x i8]* %371 to [0 x i8]*
	%373 = call i8 @llvm_CompareOp(%ast.AstNode* %370, [0 x i8]* %372)
	store i8 %373, i8* %term
	br label %L.6
L.44:
	%374 = load %ast.AstNode** %node
	%375 = bitcast %ast.AstNode* %374 to %ast.AstNode*
	%376 = getelementptr [9 x i8]* @S.801
	%377 = bitcast [9 x i8]* %376 to [0 x i8]*
	%378 = call i8 @llvm_CompareOp(%ast.AstNode* %375, [0 x i8]* %377)
	store i8 %378, i8* %term
	br label %L.6
L.45:
	%379 = load %ast.AstNode** %node
	%380 = bitcast %ast.AstNode* %379 to %ast.AstNode*
	%381 = getelementptr [9 x i8]* @S.802
	%382 = bitcast [9 x i8]* %381 to [0 x i8]*
	%383 = call i8 @llvm_CompareOp(%ast.AstNode* %380, [0 x i8]* %382)
	store i8 %383, i8* %term
	br label %L.6
L.46:
	%384 = load %ast.AstNode** %node
	%385 = bitcast %ast.AstNode* %384 to %ast.AstNode*
	%386 = getelementptr [9 x i8]* @S.803
	%387 = bitcast [9 x i8]* %386 to [0 x i8]*
	%388 = call i8 @llvm_CompareOp(%ast.AstNode* %385, [0 x i8]* %387)
	store i8 %388, i8* %term
	br label %L.6
L.47:
	%389 = load %ast.AstNode** %node
	%390 = bitcast %ast.AstNode* %389 to %ast.AstNode*
	%391 = getelementptr [9 x i8]* @S.804
	%392 = bitcast [9 x i8]* %391 to [0 x i8]*
	%393 = call i8 @llvm_CompareOp(%ast.AstNode* %390, [0 x i8]* %392)
	store i8 %393, i8* %term
	br label %L.6
L.48:
	%394 = load %ast.AstNode** %node
	%395 = bitcast %ast.AstNode* %394 to %ast.AstNode*
	%396 = getelementptr [9 x i8]* @S.805
	%397 = bitcast [9 x i8]* %396 to [0 x i8]*
	%398 = call i8 @llvm_CompareOp(%ast.AstNode* %395, [0 x i8]* %397)
	store i8 %398, i8* %term
	br label %L.6
L.49:
	%399 = load %ast.AstNode** %node
	%400 = bitcast %ast.AstNode* %399 to %ast.AstNode*
	%401 = getelementptr [9 x i8]* @S.806
	%402 = bitcast [9 x i8]* %401 to [0 x i8]*
	%403 = call i8 @llvm_CompareOp(%ast.AstNode* %400, [0 x i8]* %402)
	store i8 %403, i8* %term
	br label %L.6
L.50:
	%404 = load %ast.AstNode** %node
	%405 = bitcast %ast.AstNode* %404 to %ast.AstNode*
	%406 = getelementptr [9 x i8]* @S.807
	%407 = bitcast [9 x i8]* %406 to [0 x i8]*
	%408 = call i8 @llvm_CompareOp(%ast.AstNode* %405, [0 x i8]* %407)
	store i8 %408, i8* %term
	br label %L.6
L.51:
	%409 = load %ast.AstNode** %node
	%410 = bitcast %ast.AstNode* %409 to %ast.AstNode*
	%411 = getelementptr [4 x i8]* @S.808
	%412 = bitcast [4 x i8]* %411 to [0 x i8]*
	%413 = call i8 @llvm_BinaryOp(%ast.AstNode* %410, [0 x i8]* %412)
	br label %L.6
L.52:
	%414 = load %ast.AstNode** %node
	%415 = bitcast %ast.AstNode* %414 to %ast.AstNode*
	%416 = getelementptr [3 x i8]* @S.809
	%417 = bitcast [3 x i8]* %416 to [0 x i8]*
	%418 = call i8 @llvm_BinaryOp(%ast.AstNode* %415, [0 x i8]* %417)
	br label %L.6
L.53:
	%419 = load %ast.AstNode** %node
	%420 = bitcast %ast.AstNode* %419 to %ast.AstNode*
	%421 = getelementptr [4 x i8]* @S.810
	%422 = bitcast [4 x i8]* %421 to [0 x i8]*
	%423 = call i8 @llvm_BinaryOp(%ast.AstNode* %420, [0 x i8]* %422)
	br label %L.6
L.54:
	%424 = load %ast.AstNode** %node
	%425 = getelementptr %ast.AstNode* %424, i32 0, i32 13
	%426 = getelementptr [0 x %ast.AstNode*]* %425, i32 0, i32 0
	%427 = load %ast.AstNode** %426
	%428 = bitcast %ast.AstNode* %427 to %ast.AstNode*
	%429 = call i8 @llvm_GenSub(%ast.AstNode* %428)
	%430 = load i16* @llvm_Tseqno
	%431 = load %ast.AstNode** %node
	%432 = getelementptr %ast.AstNode* %431, i32 0, i32 9
	store i16 %430, i16* %432
	%433 = load i16* @llvm_Tseqno
	%434 = add i16 %433, 1
	store i16 %434, i16* @llvm_Tseqno
	%435 = getelementptr [24 x i8]* @S.811
	%436 = bitcast [24 x i8]* %435 to [0 x i8]*
	%437 = load %ast.AstNode** %node
	%438 = bitcast %ast.AstNode* %437 to %ast.AstNode*
	call void @llvm_Print([0 x i8]* %436, %ast.AstNode* %438)
	br label %L.6
L.55:
	%439 = load %ast.AstNode** %node
	%440 = bitcast %ast.AstNode* %439 to %ast.AstNode*
	%441 = call i8 @llvm_Conditional(%ast.AstNode* %440, i8 0)
	store i8 %441, i8* %term
	br label %L.6
L.56:
	%442 = load %ast.AstNode** %node
	%443 = bitcast %ast.AstNode* %442 to %ast.AstNode*
	%444 = call i8 @llvm_Conditional(%ast.AstNode* %443, i8 1)
	store i8 %444, i8* %term
	br label %L.6
L.57:
	%445 = load %ast.AstNode** %node
	%446 = bitcast %ast.AstNode* %445 to %ast.AstNode*
	call void @llvm_IfExpr(%ast.AstNode* %446)
	br label %L.6
L.58:
	%447 = load %ast.AstNode** %node
	%448 = bitcast %ast.AstNode* %447 to %ast.AstNode*
	call void @llvm_Call(%ast.AstNode* %448, i8 0)
	br label %L.6
L.59:
	%449 = load %ast.AstNode** %node
	%450 = bitcast %ast.AstNode* %449 to %ast.AstNode*
	call void @llvm_Call(%ast.AstNode* %450, i8 1)
	br label %L.6
L.60:
	%451 = load %ast.AstNode** %node
	%452 = bitcast %ast.AstNode* %451 to %ast.AstNode*
	call void @llvm_Asm(%ast.AstNode* %452)
	br label %L.6
L.61:
	%453 = load %ast.AstNode** %node
	%454 = bitcast %ast.AstNode* %453 to %ast.AstNode*
	%455 = call i8 @llvm_If(%ast.AstNode* %454)
	store i8 %455, i8* %term
	br label %L.6
L.62:
	%456 = load %ast.AstNode** %node
	%457 = bitcast %ast.AstNode* %456 to %ast.AstNode*
	%458 = call i8 @llvm_Select(%ast.AstNode* %457)
	store i8 %458, i8* %term
	br label %L.6
L.63:
	%459 = load %ast.AstNode** %node
	%460 = bitcast %ast.AstNode* %459 to %ast.AstNode*
	%461 = call i8 @llvm_Loop(%ast.AstNode* %460)
	store i8 %461, i8* %term
	br label %L.6
L.64:
	%462 = load %ast.AstNode** %node
	%463 = bitcast %ast.AstNode* %462 to %ast.AstNode*
	%464 = call i8 @llvm_Exit(%ast.AstNode* %463)
	store i8 %464, i8* %term
	br label %L.6
L.65:
	%i = alloca i16
	store i16 0, i16* %i
	br label %L.87
L.87:
	%465 = load i16* %i
	%466 = load %ast.AstNode** %node
	%467 = getelementptr %ast.AstNode* %466, i32 0, i32 2
	%468 = load i16* %467
	%469 = icmp ult i16 %465, %468
	%470 = xor i1 %469, true
	br i1 %470, label %L.88, label %L.89
L.89:
	%471 = load i8* %term
	%472 = icmp ne i8 %471, 0
	br i1 %472, label %L.91, label %L.90
L.91:
	%473 = load i16* @llvm_Lseqno
	call void @llvm_Label(i16 %473)
	%474 = load i16* @llvm_Lseqno
	%475 = add i16 %474, 1
	store i16 %475, i16* @llvm_Lseqno
	store i8 0, i8* %term
	br label %L.90
L.90:
	%476 = load %ast.AstNode** %node
	%477 = getelementptr %ast.AstNode* %476, i32 0, i32 13
	%478 = load i16* %i
	%479 = zext i16 %478 to i32
	%480 = getelementptr [0 x %ast.AstNode*]* %477, i32 0, i32 %479
	%481 = load %ast.AstNode** %480
	%482 = bitcast %ast.AstNode* %481 to %ast.AstNode*
	%483 = call i8 @llvm_GenSub(%ast.AstNode* %482)
	store i8 %483, i8* %term
	%484 = load i16* %i
	%485 = add i16 %484, 1
	store i16 %485, i16* %i
	br label %L.87
L.88:
	br label %L.6
L.5:
	br label %L.6
L.6:
	%486 = load i8* %term
	store i8 %486, i8* %rv.0
	br label %return
return:
	%487 = load i8* %rv.0
	ret i8 %487
}
@S.812 = internal constant [22 x i8] c"target datalayout = \22\00"@S.813 = internal constant [2 x i8] c"E\00"@S.814 = internal constant [2 x i8] c"e\00"@S.815 = internal constant [4 x i8] c"-p:\00"@S.816 = internal constant [2 x i8] c":\00"@S.817 = internal constant [2 x i8] c":\00"@S.818 = internal constant [5 x i8] c"-i1:\00"@S.819 = internal constant [2 x i8] c":\00"@S.820 = internal constant [3 x i8] c"-i\00"@S.821 = internal constant [2 x i8] c":\00"@S.822 = internal constant [2 x i8] c":\00"@S.823 = internal constant [20 x i8] c"\22\0Atarget triple = \22\00"@S.824 = internal constant [3 x i8] c"\22\0A\00"define internal void @llvm_Gen(i32 %fd.arg, %ast.AstNode* %tree.arg) nounwind {
L.0:
	%fd = alloca i32
	%tree = alloca %ast.AstNode*
	store i32 %fd.arg, i32* %fd
	store %ast.AstNode* %tree.arg, %ast.AstNode** %tree
	%i = alloca i8
	%0 = load i32* %fd
	%1 = call %bout.BufIO* @bout_buffer(i32 %0, i32 4096)
	%2 = bitcast %bout.BufIO* %1 to %bout.BufIO*
	store %bout.BufIO* %2, %bout.BufIO** @llvm_f
	%3 = call %type.TypeNode* @type_New(i8 4)
	%4 = bitcast %type.TypeNode* %3 to %type.TypeNode*
	store %type.TypeNode* %4, %type.TypeNode** @llvm_pbytetype
	%5 = load %type.TypeNode** @type_bytetype
	%6 = bitcast %type.TypeNode* %5 to %type.TypeNode*
	%7 = load %type.TypeNode** @llvm_pbytetype
	%8 = getelementptr %type.TypeNode* %7, i32 0, i32 0
	store %type.TypeNode* %6, %type.TypeNode** %8
	%9 = call %type.TypeNode* @type_New(i8 4)
	%10 = bitcast %type.TypeNode* %9 to %type.TypeNode*
	%11 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 0
	store %type.TypeNode* %10, %type.TypeNode** %11
	%12 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 0
	%13 = load %type.TypeNode** %12
	%14 = bitcast %type.TypeNode* %13 to %type.TypeNode*
	%15 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 0
	%16 = load %type.TypeNode** %15
	%17 = getelementptr %type.TypeNode* %16, i32 0, i32 0
	store %type.TypeNode* %14, %type.TypeNode** %17
	%18 = call %type.TypeNode* @type_New(i8 4)
	%19 = bitcast %type.TypeNode* %18 to %type.TypeNode*
	%20 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 1
	store %type.TypeNode* %19, %type.TypeNode** %20
	%21 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 1
	%22 = load %type.TypeNode** %21
	%23 = bitcast %type.TypeNode* %22 to %type.TypeNode*
	%24 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 1
	%25 = load %type.TypeNode** %24
	%26 = getelementptr %type.TypeNode* %25, i32 0, i32 0
	store %type.TypeNode* %23, %type.TypeNode** %26
	%27 = call %type.TypeNode* @type_New(i8 4)
	%28 = bitcast %type.TypeNode* %27 to %type.TypeNode*
	%29 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 2
	store %type.TypeNode* %28, %type.TypeNode** %29
	%30 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 2
	%31 = load %type.TypeNode** %30
	%32 = bitcast %type.TypeNode* %31 to %type.TypeNode*
	%33 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 2
	%34 = load %type.TypeNode** %33
	%35 = getelementptr %type.TypeNode* %34, i32 0, i32 0
	store %type.TypeNode* %32, %type.TypeNode** %35
	%36 = call %type.TypeNode* @type_New(i8 4)
	%37 = bitcast %type.TypeNode* %36 to %type.TypeNode*
	%38 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 3
	store %type.TypeNode* %37, %type.TypeNode** %38
	%39 = getelementptr [4 x %type.TypeNode*]* @type_uinttypes, i32 0, i32 3
	%40 = load %type.TypeNode** %39
	%41 = bitcast %type.TypeNode* %40 to %type.TypeNode*
	%42 = getelementptr [4 x %type.TypeNode*]* @llvm_puinttype, i32 0, i32 3
	%43 = load %type.TypeNode** %42
	%44 = getelementptr %type.TypeNode* %43, i32 0, i32 0
	store %type.TypeNode* %41, %type.TypeNode** %44
	%45 = load %bout.BufIO** @llvm_f
	%46 = bitcast %bout.BufIO* %45 to %bout.BufIO*
	%47 = getelementptr [22 x i8]* @S.812
	%48 = bitcast [22 x i8]* %47 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %46, [0 x i8]* %48)
	%49 = load %target.TargetT** @target_Target
	%50 = getelementptr %target.TargetT* %49, i32 0, i32 2
	%51 = load i8* %50
	%52 = icmp eq i8 %51, 1
	br i1 %52, label %L.2, label %L.3
L.2:
	%53 = load %bout.BufIO** @llvm_f
	%54 = bitcast %bout.BufIO* %53 to %bout.BufIO*
	%55 = getelementptr [2 x i8]* @S.813
	%56 = bitcast [2 x i8]* %55 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %54, [0 x i8]* %56)
	br label %L.1
L.3:
	%57 = load %bout.BufIO** @llvm_f
	%58 = bitcast %bout.BufIO* %57 to %bout.BufIO*
	%59 = getelementptr [2 x i8]* @S.814
	%60 = bitcast [2 x i8]* %59 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %58, [0 x i8]* %60)
	br label %L.1
L.1:
	%61 = load %bout.BufIO** @llvm_f
	%62 = bitcast %bout.BufIO* %61 to %bout.BufIO*
	%63 = getelementptr [4 x i8]* @S.815
	%64 = bitcast [4 x i8]* %63 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %62, [0 x i8]* %64)
	%65 = load %bout.BufIO** @llvm_f
	%66 = bitcast %bout.BufIO* %65 to %bout.BufIO*
	%67 = load %target.TargetT** @target_Target
	%68 = getelementptr %target.TargetT* %67, i32 0, i32 8
	%69 = getelementptr %target.SizeAlign* %68, i32 0, i32 0
	%70 = load i8* %69
	%71 = zext i8 %70 to i32
	call void @bout_uint(%bout.BufIO* %66, i32 %71)
	%72 = load %bout.BufIO** @llvm_f
	%73 = bitcast %bout.BufIO* %72 to %bout.BufIO*
	%74 = getelementptr [2 x i8]* @S.816
	%75 = bitcast [2 x i8]* %74 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %73, [0 x i8]* %75)
	%76 = load %bout.BufIO** @llvm_f
	%77 = bitcast %bout.BufIO* %76 to %bout.BufIO*
	%78 = load %target.TargetT** @target_Target
	%79 = getelementptr %target.TargetT* %78, i32 0, i32 8
	%80 = getelementptr %target.SizeAlign* %79, i32 0, i32 1
	%81 = load i8* %80
	%82 = zext i8 %81 to i32
	call void @bout_uint(%bout.BufIO* %77, i32 %82)
	%83 = load %bout.BufIO** @llvm_f
	%84 = bitcast %bout.BufIO* %83 to %bout.BufIO*
	%85 = getelementptr [2 x i8]* @S.817
	%86 = bitcast [2 x i8]* %85 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %84, [0 x i8]* %86)
	%87 = load %bout.BufIO** @llvm_f
	%88 = bitcast %bout.BufIO* %87 to %bout.BufIO*
	%89 = load %target.TargetT** @target_Target
	%90 = getelementptr %target.TargetT* %89, i32 0, i32 8
	%91 = getelementptr %target.SizeAlign* %90, i32 0, i32 1
	%92 = load i8* %91
	%93 = zext i8 %92 to i32
	call void @bout_uint(%bout.BufIO* %88, i32 %93)
	%94 = load %bout.BufIO** @llvm_f
	%95 = bitcast %bout.BufIO* %94 to %bout.BufIO*
	%96 = getelementptr [5 x i8]* @S.818
	%97 = bitcast [5 x i8]* %96 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %95, [0 x i8]* %97)
	%98 = load %bout.BufIO** @llvm_f
	%99 = bitcast %bout.BufIO* %98 to %bout.BufIO*
	%100 = load %target.TargetT** @target_Target
	%101 = getelementptr %target.TargetT* %100, i32 0, i32 9
	%102 = getelementptr [8 x %target.SizeAlign]* %101, i32 0, i32 0
	%103 = getelementptr %target.SizeAlign* %102, i32 0, i32 1
	%104 = load i8* %103
	%105 = zext i8 %104 to i32
	call void @bout_uint(%bout.BufIO* %99, i32 %105)
	%106 = load %bout.BufIO** @llvm_f
	%107 = bitcast %bout.BufIO* %106 to %bout.BufIO*
	%108 = getelementptr [2 x i8]* @S.819
	%109 = bitcast [2 x i8]* %108 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %107, [0 x i8]* %109)
	%110 = load %bout.BufIO** @llvm_f
	%111 = bitcast %bout.BufIO* %110 to %bout.BufIO*
	%112 = load %target.TargetT** @target_Target
	%113 = getelementptr %target.TargetT* %112, i32 0, i32 9
	%114 = getelementptr [8 x %target.SizeAlign]* %113, i32 0, i32 0
	%115 = getelementptr %target.SizeAlign* %114, i32 0, i32 1
	%116 = load i8* %115
	%117 = zext i8 %116 to i32
	call void @bout_uint(%bout.BufIO* %111, i32 %117)
	store i8 0, i8* %i
	br label %L.4
L.4:
	%118 = load i8* %i
	%119 = load %target.TargetT** @target_Target
	%120 = getelementptr %target.TargetT* %119, i32 0, i32 7
	%121 = load i8* %120
	%122 = icmp ult i8 %118, %121
	%123 = xor i1 %122, true
	br i1 %123, label %L.5, label %L.6
L.6:
	%124 = load %bout.BufIO** @llvm_f
	%125 = bitcast %bout.BufIO* %124 to %bout.BufIO*
	%126 = getelementptr [3 x i8]* @S.820
	%127 = bitcast [3 x i8]* %126 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %125, [0 x i8]* %127)
	%128 = load %bout.BufIO** @llvm_f
	%129 = bitcast %bout.BufIO* %128 to %bout.BufIO*
	%130 = load %target.TargetT** @target_Target
	%131 = getelementptr %target.TargetT* %130, i32 0, i32 9
	%132 = load i8* %i
	%133 = zext i8 %132 to i32
	%134 = getelementptr [8 x %target.SizeAlign]* %131, i32 0, i32 %133
	%135 = getelementptr %target.SizeAlign* %134, i32 0, i32 0
	%136 = load i8* %135
	%137 = zext i8 %136 to i32
	call void @bout_uint(%bout.BufIO* %129, i32 %137)
	%138 = load %bout.BufIO** @llvm_f
	%139 = bitcast %bout.BufIO* %138 to %bout.BufIO*
	%140 = getelementptr [2 x i8]* @S.821
	%141 = bitcast [2 x i8]* %140 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %139, [0 x i8]* %141)
	%142 = load %bout.BufIO** @llvm_f
	%143 = bitcast %bout.BufIO* %142 to %bout.BufIO*
	%144 = load %target.TargetT** @target_Target
	%145 = getelementptr %target.TargetT* %144, i32 0, i32 9
	%146 = load i8* %i
	%147 = zext i8 %146 to i32
	%148 = getelementptr [8 x %target.SizeAlign]* %145, i32 0, i32 %147
	%149 = getelementptr %target.SizeAlign* %148, i32 0, i32 1
	%150 = load i8* %149
	%151 = zext i8 %150 to i32
	call void @bout_uint(%bout.BufIO* %143, i32 %151)
	%152 = load %bout.BufIO** @llvm_f
	%153 = bitcast %bout.BufIO* %152 to %bout.BufIO*
	%154 = getelementptr [2 x i8]* @S.822
	%155 = bitcast [2 x i8]* %154 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %153, [0 x i8]* %155)
	%156 = load %bout.BufIO** @llvm_f
	%157 = bitcast %bout.BufIO* %156 to %bout.BufIO*
	%158 = load %target.TargetT** @target_Target
	%159 = getelementptr %target.TargetT* %158, i32 0, i32 9
	%160 = load i8* %i
	%161 = zext i8 %160 to i32
	%162 = getelementptr [8 x %target.SizeAlign]* %159, i32 0, i32 %161
	%163 = getelementptr %target.SizeAlign* %162, i32 0, i32 1
	%164 = load i8* %163
	%165 = zext i8 %164 to i32
	call void @bout_uint(%bout.BufIO* %157, i32 %165)
	%166 = load i8* %i
	%167 = add i8 %166, 1
	store i8 %167, i8* %i
	br label %L.4
L.5:
	%168 = load %bout.BufIO** @llvm_f
	%169 = bitcast %bout.BufIO* %168 to %bout.BufIO*
	%170 = getelementptr [20 x i8]* @S.823
	%171 = bitcast [20 x i8]* %170 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %169, [0 x i8]* %171)
	%172 = load %bout.BufIO** @llvm_f
	%173 = bitcast %bout.BufIO* %172 to %bout.BufIO*
	%174 = load %target.TargetT** @target_Target
	%175 = getelementptr %target.TargetT* %174, i32 0, i32 1
	%176 = load [0 x i8]** %175
	%177 = bitcast [0 x i8]* %176 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %173, [0 x i8]* %177)
	%178 = load %bout.BufIO** @llvm_f
	%179 = bitcast %bout.BufIO* %178 to %bout.BufIO*
	%180 = getelementptr [3 x i8]* @S.824
	%181 = bitcast [3 x i8]* %180 to [0 x i8]*
	call void @bout_str(%bout.BufIO* %179, [0 x i8]* %181)
	%182 = load %ast.AstNode** %tree
	%183 = bitcast %ast.AstNode* %182 to %ast.AstNode*
	%184 = call i8 @llvm_GenSub(%ast.AstNode* %183)
	call void @llvm_Declare()
	%185 = getelementptr %A.3* @feature, i32 0, i32 3
	%186 = load i8* %185
	%187 = icmp ne i8 %186, 0
	br i1 %187, label %L.8, label %L.7
L.8:
	call void @llvmdb_ProgFinish()
	br label %L.7
L.7:
	%188 = load %bout.BufIO** @llvm_f
	%189 = bitcast %bout.BufIO* %188 to %bout.BufIO*
	call void @bout_flush(%bout.BufIO* %189)
	br label %return
return:
	ret void
}
@S.825 = internal constant [5 x i8] c".esl\00"@S.826 = internal constant [5 x i8] c".o: \00"@S.827 = internal constant [21 x i8] c"Unsupported target: \00"@S.828 = internal constant [28 x i8] c"Unable to open input file: \00"@S.829 = internal constant [31 x i8] c"Unable to create output file: \00"define i32 @main(i32 %argc.arg, [0 x [0 x i8]*]* %argv.arg) nounwind {
L.0:
	%rv.0 = alloca i32
	%argc = alloca i32
	%argv = alloca [0 x [0 x i8]*]*
	store i32 %argc.arg, i32* %argc
	store [0 x [0 x i8]*]* %argv.arg, [0 x [0 x i8]*]** %argv
	%tree = alloca %ast.AstNode*
	%i = alloca i32
	%outfd = alloca i32
	%outfile = alloca [0 x i8]*
	%targetarch = alloca [0 x i8]*
	%0 = bitcast [0 x i8]* null to [0 x i8]*
	store [0 x i8]* %0, [0 x i8]** %outfile
	%1 = bitcast [0 x i8]* null to [0 x i8]*
	store [0 x i8]* %1, [0 x i8]** %targetarch
	store i32 1, i32* %outfd
	store i32 1, i32* %i
	br label %L.1
L.1:
	%2 = load i32* %i
	%3 = load i32* %argc
	%4 = icmp ult i32 %2, %3
	br i1 %4, label %L.4, label %L.5
L.4:
	%5 = load [0 x [0 x i8]*]** %argv
	%6 = load i32* %i
	%7 = getelementptr [0 x [0 x i8]*]* %5, i32 0, i32 %6
	%8 = load [0 x i8]** %7
	%9 = getelementptr [0 x i8]* %8, i32 0, i32 0
	%10 = load i8* %9
	%11 = icmp eq i8 %10, 45
	br label %L.5
L.5:
	%12 = phi i1 [ false, %L.1 ], [ %11, %L.4 ]
	%13 = xor i1 %12, true
	br i1 %13, label %L.2, label %L.3
L.3:
	%14 = load [0 x [0 x i8]*]** %argv
	%15 = load i32* %i
	%16 = getelementptr [0 x [0 x i8]*]* %14, i32 0, i32 %15
	%17 = load [0 x i8]** %16
	%18 = getelementptr [0 x i8]* %17, i32 0, i32 1
	%19 = load i8* %18
	%20 = zext i8 %19 to i32
	switch i32 %20, label %L.6 [
		i32 68, label %L.8
		i32 109, label %L.9
		i32 73, label %L.10
		i32 111, label %L.11
		i32 79, label %L.12
		i32 70, label %L.13
		i32 77, label %L.14
		i32 103, label %L.15
	]
L.8:
	%21 = load [0 x [0 x i8]*]** %argv
	%22 = load i32* %i
	%23 = getelementptr [0 x [0 x i8]*]* %21, i32 0, i32 %22
	%24 = load [0 x i8]** %23
	%25 = getelementptr [0 x i8]* %24, i32 0, i32 2
	%26 = load i8* %25
	%27 = zext i8 %26 to i32
	switch i32 %27, label %L.16 [
		i32 97, label %L.18
		i32 115, label %L.19
		i32 102, label %L.20
		i32 116, label %L.21
	]
L.18:
	%28 = getelementptr %A.2* @debug, i32 0, i32 1
	store i8 1, i8* %28
	br label %L.17
L.19:
	%29 = getelementptr %A.2* @debug, i32 0, i32 0
	%30 = getelementptr %A.1* %29, i32 0, i32 0
	store i8 1, i8* %30
	%31 = getelementptr %A.2* @debug, i32 0, i32 0
	%32 = getelementptr %A.1* %31, i32 0, i32 1
	store i8 1, i8* %32
	%33 = getelementptr %A.2* @debug, i32 0, i32 0
	%34 = getelementptr %A.1* %33, i32 0, i32 2
	store i8 1, i8* %34
	%35 = getelementptr %A.2* @debug, i32 0, i32 0
	%36 = getelementptr %A.1* %35, i32 0, i32 3
	store i8 1, i8* %36
	br label %L.17
L.20:
	%37 = getelementptr %A.2* @debug, i32 0, i32 2
	store i8 1, i8* %37
	br label %L.17
L.21:
	%38 = getelementptr %A.2* @debug, i32 0, i32 3
	store i8 1, i8* %38
	br label %L.17
L.16:
	br label %L.17
L.17:
	br label %L.7
L.9:
	%39 = load [0 x [0 x i8]*]** %argv
	%40 = load i32* %i
	%41 = getelementptr [0 x [0 x i8]*]* %39, i32 0, i32 %40
	%42 = load [0 x i8]** %41
	%43 = getelementptr [0 x i8]* %42, i32 0, i32 2
	%44 = load i8* %43
	%45 = icmp ne i8 %44, 0
	br i1 %45, label %L.23, label %L.24
L.23:
	%46 = load [0 x [0 x i8]*]** %argv
	%47 = load i32* %i
	%48 = getelementptr [0 x [0 x i8]*]* %46, i32 0, i32 %47
	%49 = load [0 x i8]** %48
	%50 = getelementptr [0 x i8]* %49, i32 0, i32 2
	%51 = bitcast i8* %50 to [0 x i8]*
	%52 = getelementptr [0 x i8]* %51
	%53 = bitcast [0 x i8]* %52 to [0 x i8]*
	store [0 x i8]* %53, [0 x i8]** %targetarch
	br label %L.22
L.24:
	%54 = load i32* %i
	%55 = add i32 %54, 1
	store i32 %55, i32* %i
	%56 = load [0 x [0 x i8]*]** %argv
	%57 = load i32* %i
	%58 = getelementptr [0 x [0 x i8]*]* %56, i32 0, i32 %57
	%59 = load [0 x i8]** %58
	%60 = bitcast [0 x i8]* %59 to [0 x i8]*
	store [0 x i8]* %60, [0 x i8]** %targetarch
	br label %L.22
L.22:
	br label %L.7
L.10:
	%61 = load [0 x [0 x i8]*]** %argv
	%62 = load i32* %i
	%63 = getelementptr [0 x [0 x i8]*]* %61, i32 0, i32 %62
	%64 = load [0 x i8]** %63
	%65 = getelementptr [0 x i8]* %64, i32 0, i32 2
	%66 = bitcast i8* %65 to [0 x i8]*
	%67 = getelementptr [0 x i8]* %66
	%68 = bitcast [0 x i8]* %67 to [0 x i8]*
	%69 = call %lex.SearchPathEntry* @lex_SearchPathAdd([0 x i8]* %68, i8 0)
	br label %L.7
L.11:
	%70 = load [0 x [0 x i8]*]** %argv
	%71 = load i32* %i
	%72 = getelementptr [0 x [0 x i8]*]* %70, i32 0, i32 %71
	%73 = load [0 x i8]** %72
	%74 = getelementptr [0 x i8]* %73, i32 0, i32 2
	%75 = load i8* %74
	%76 = icmp ne i8 %75, 0
	br i1 %76, label %L.26, label %L.27
L.26:
	%77 = load [0 x [0 x i8]*]** %argv
	%78 = load i32* %i
	%79 = getelementptr [0 x [0 x i8]*]* %77, i32 0, i32 %78
	%80 = load [0 x i8]** %79
	%81 = getelementptr [0 x i8]* %80, i32 0, i32 2
	%82 = bitcast i8* %81 to [0 x i8]*
	%83 = getelementptr [0 x i8]* %82
	%84 = bitcast [0 x i8]* %83 to [0 x i8]*
	store [0 x i8]* %84, [0 x i8]** %outfile
	br label %L.25
L.27:
	%85 = load i32* %i
	%86 = add i32 %85, 1
	store i32 %86, i32* %i
	%87 = load [0 x [0 x i8]*]** %argv
	%88 = load i32* %i
	%89 = getelementptr [0 x [0 x i8]*]* %87, i32 0, i32 %88
	%90 = load [0 x i8]** %89
	%91 = bitcast [0 x i8]* %90 to [0 x i8]*
	store [0 x i8]* %91, [0 x i8]** %outfile
	br label %L.25
L.25:
	br label %L.7
L.12:
	%92 = load [0 x [0 x i8]*]** %argv
	%93 = load i32* %i
	%94 = getelementptr [0 x [0 x i8]*]* %92, i32 0, i32 %93
	%95 = load [0 x i8]** %94
	%96 = getelementptr [0 x i8]* %95, i32 0, i32 2
	%97 = load i8* %96
	%98 = zext i8 %97 to i32
	switch i32 %98, label %L.28 [
		i32 115, label %L.30
	]
L.30:
	%99 = getelementptr %A.3* @feature, i32 0, i32 0
	store i8 1, i8* %99
	br label %L.29
L.28:
	br label %L.29
L.29:
	br label %L.7
L.13:
	%100 = load [0 x [0 x i8]*]** %argv
	%101 = load i32* %i
	%102 = getelementptr [0 x [0 x i8]*]* %100, i32 0, i32 %101
	%103 = load [0 x i8]** %102
	%104 = getelementptr [0 x i8]* %103, i32 0, i32 2
	%105 = load i8* %104
	%106 = zext i8 %105 to i32
	switch i32 %106, label %L.31 [
		i32 117, label %L.33
		i32 116, label %L.34
		i32 99, label %L.35
	]
L.33:
	%107 = getelementptr %A.3* @feature, i32 0, i32 1
	store i8 1, i8* %107
	br label %L.32
L.34:
	%108 = getelementptr %A.3* @feature, i32 0, i32 4
	store i8 1, i8* %108
	br label %L.32
L.35:
	%109 = getelementptr %A.3* @feature, i32 0, i32 5
	store i8 1, i8* %109
	br label %L.32
L.31:
	br label %L.32
L.32:
	br label %L.7
L.14:
	%110 = getelementptr %A.3* @feature, i32 0, i32 2
	store i8 1, i8* %110
	br label %L.7
L.15:
	%111 = getelementptr %A.3* @feature, i32 0, i32 3
	store i8 1, i8* %111
	br label %L.7
L.6:
	br label %L.7
L.7:
	%112 = load i32* %i
	%113 = add i32 %112, 1
	store i32 %113, i32* %i
	br label %L.1
L.2:
	%114 = load i32* %i
	%115 = load i32* %argc
	%116 = icmp uge i32 %114, %115
	br i1 %116, label %L.37, label %L.36
L.37:
	store i32 3, i32* %rv.0
	br label %return
L.36:
	%117 = getelementptr %A.3* @feature, i32 0, i32 2
	%118 = load i8* %117
	%119 = icmp ne i8 %118, 0
	br i1 %119, label %L.39, label %L.38
L.39:
	%n = alloca i32
	%120 = load [0 x [0 x i8]*]** %argv
	%121 = load i32* %i
	%122 = getelementptr [0 x [0 x i8]*]* %120, i32 0, i32 %121
	%123 = load [0 x i8]** %122
	%124 = getelementptr [0 x i8]* %123
	%125 = bitcast [0 x i8]* %124 to [0 x i8]*
	%126 = call i32 @zstr_len([0 x i8]* %125, i32 1024)
	store i32 %126, i32* %n
	%127 = load [0 x [0 x i8]*]** %argv
	%128 = load i32* %i
	%129 = getelementptr [0 x [0 x i8]*]* %127, i32 0, i32 %128
	%130 = load [0 x i8]** %129
	%131 = load i32* %n
	%132 = sub i32 %131, 4
	%133 = getelementptr [0 x i8]* %130, i32 0, i32 %132
	%134 = bitcast i8* %133 to [4 x i8]*
	%135 = getelementptr [4 x i8]* %134
	%136 = bitcast [4 x i8]* %135 to [0 x i8]*
	%137 = getelementptr [5 x i8]* @S.825
	%138 = bitcast [5 x i8]* %137 to [0 x i8]*
	%139 = call i8 @zstr_eq([0 x i8]* %136, [0 x i8]* %138, i32 1024)
	%140 = icmp ne i8 %139, 0
	br i1 %140, label %L.41, label %L.40
L.41:
	%141 = load [0 x [0 x i8]*]** %argv
	%142 = load i32* %i
	%143 = getelementptr [0 x [0 x i8]*]* %141, i32 0, i32 %142
	%144 = load [0 x i8]** %143
	%145 = load i32* %n
	%146 = sub i32 %145, 4
	%147 = getelementptr [0 x i8]* %144, i32 0, i32 %146
	store i8 0, i8* %147
	%148 = load [0 x [0 x i8]*]** %argv
	%149 = load i32* %i
	%150 = getelementptr [0 x [0 x i8]*]* %148, i32 0, i32 %149
	%151 = load [0 x i8]** %150
	%152 = getelementptr [0 x i8]* %151
	%153 = bitcast [0 x i8]* %152 to [0 x i8]*
	call void @out_str(i32 1, [0 x i8]* %153)
	%154 = getelementptr [5 x i8]* @S.826
	%155 = bitcast [5 x i8]* %154 to [0 x i8]*
	call void @out_str(i32 1, [0 x i8]* %155)
	%156 = load [0 x [0 x i8]*]** %argv
	%157 = load i32* %i
	%158 = getelementptr [0 x [0 x i8]*]* %156, i32 0, i32 %157
	%159 = load [0 x i8]** %158
	%160 = load i32* %n
	%161 = sub i32 %160, 4
	%162 = getelementptr [0 x i8]* %159, i32 0, i32 %161
	store i8 46, i8* %162
	br label %L.40
L.40:
	br label %L.38
L.38:
	%163 = load [0 x i8]** %targetarch
	%164 = bitcast [0 x i8]* %163 to [0 x i8]*
	%165 = call i8 @target_set([0 x i8]* %164)
	%166 = icmp ne i8 %165, 0
	%167 = xor i1 %166, true
	br i1 %167, label %L.43, label %L.42
L.43:
	%168 = getelementptr [21 x i8]* @S.827
	%169 = bitcast [21 x i8]* %168 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %169)
	%170 = load [0 x i8]** %targetarch
	%171 = icmp ne [0 x i8]* %170, null
	br i1 %171, label %L.45, label %L.46
L.45:
	%172 = load [0 x i8]** %targetarch
	%173 = bitcast [0 x i8]* %172 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %173)
	br label %L.44
L.46:
	%174 = getelementptr [4 x i8]* @target_DefaultTarget
	%175 = bitcast [4 x i8]* %174 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %175)
	br label %L.44
L.44:
	call void @out_nl(i32 2)
	call void @target_list()
	store i32 2, i32* %rv.0
	br label %return
L.42:
	%176 = load [0 x [0 x i8]*]** %argv
	%177 = load i32* %i
	%178 = getelementptr [0 x [0 x i8]*]* %176, i32 0, i32 %177
	%179 = load [0 x i8]** %178
	%180 = getelementptr [0 x i8]* %179
	%181 = bitcast [0 x i8]* %180 to [0 x i8]*
	%182 = call i8 @lex_FileOpen([0 x i8]* %181)
	%183 = icmp ne i8 %182, 0
	%184 = xor i1 %183, true
	br i1 %184, label %L.48, label %L.47
L.48:
	%185 = getelementptr [28 x i8]* @S.828
	%186 = bitcast [28 x i8]* %185 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %186)
	%187 = load [0 x [0 x i8]*]** %argv
	%188 = load i32* %i
	%189 = getelementptr [0 x [0 x i8]*]* %187, i32 0, i32 %188
	%190 = load [0 x i8]** %189
	%191 = getelementptr [0 x i8]* %190
	%192 = bitcast [0 x i8]* %191 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %192)
	call void @out_nl(i32 2)
	store i32 2, i32* %rv.0
	br label %return
L.47:
	%193 = load [0 x i8]** %outfile
	%194 = icmp ne [0 x i8]* %193, null
	br i1 %194, label %L.50, label %L.49
L.50:
	%195 = load [0 x i8]** %outfile
	%196 = bitcast [0 x i8]* %195 to [0 x i8]*
	%197 = call i32 @open([0 x i8]* %196, i32 577, i32 416)
	store i32 %197, i32* %outfd
	%198 = load i32* %outfd
	%199 = icmp slt i32 %198, 0
	br i1 %199, label %L.52, label %L.51
L.52:
	%200 = getelementptr [31 x i8]* @S.829
	%201 = bitcast [31 x i8]* %200 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %201)
	%202 = load [0 x i8]** %outfile
	%203 = getelementptr [0 x i8]* %202
	%204 = bitcast [0 x i8]* %203 to [0 x i8]*
	call void @out_str(i32 2, [0 x i8]* %204)
	call void @out_nl(i32 2)
	store i32 2, i32* %rv.0
	br label %return
L.51:
	br label %L.49
L.49:
	call void @symb_Init()
	%205 = bitcast %symb.SymbNode* null to %symb.SymbNode*
	call void @symb_Push(%symb.SymbNode* %205)
	%206 = load [0 x [0 x i8]*]** %argv
	%207 = load i32* %i
	%208 = getelementptr [0 x [0 x i8]*]* %206, i32 0, i32 %207
	%209 = load [0 x i8]** %208
	%210 = getelementptr [0 x i8]* %209
	%211 = bitcast [0 x i8]* %210 to [0 x i8]*
	%212 = call %ast.AstNode* @stmt_Program([0 x i8]* %211)
	%213 = bitcast %ast.AstNode* %212 to %ast.AstNode*
	store %ast.AstNode* %213, %ast.AstNode** %tree
	%214 = getelementptr %A.2* @debug, i32 0, i32 0
	%215 = getelementptr %A.1* %214, i32 0, i32 1
	%216 = load i8* %215
	%217 = icmp ne i8 %216, 0
	br i1 %217, label %L.54, label %L.53
L.54:
	call void @symb_Dump(i8 1)
	br label %L.53
L.53:
	call void @symb_Pop()
	%218 = getelementptr %A.2* @debug, i32 0, i32 0
	%219 = getelementptr %A.1* %218, i32 0, i32 0
	%220 = load i8* %219
	%221 = icmp ne i8 %220, 0
	br i1 %221, label %L.56, label %L.55
L.56:
	call void @symb_Dump(i8 1)
	br label %L.55
L.55:
	%222 = getelementptr %A.2* @debug, i32 0, i32 1
	%223 = load i8* %222
	%224 = icmp ne i8 %223, 0
	br i1 %224, label %L.58, label %L.57
L.58:
	%225 = load %ast.AstNode** %tree
	%226 = bitcast %ast.AstNode* %225 to %ast.AstNode*
	call void @ast_Dump(%ast.AstNode* %226)
	br label %L.57
L.57:
	%227 = load i8* @lex_ErrorCount
	%228 = icmp eq i8 %227, 0
	br i1 %228, label %L.60, label %L.59
L.60:
	%229 = getelementptr %A.3* @feature, i32 0, i32 2
	%230 = load i8* %229
	%231 = icmp ne i8 %230, 0
	br i1 %231, label %L.62, label %L.63
L.62:
	call void @out_nl(i32 1)
	br label %L.61
L.63:
	%232 = load i32* %outfd
	%233 = load %ast.AstNode** %tree
	%234 = bitcast %ast.AstNode* %233 to %ast.AstNode*
	call void @llvm_Gen(i32 %232, %ast.AstNode* %234)
	br label %L.61
L.61:
	br label %L.59
L.59:
	%235 = load i8* @lex_ErrorCount
	%236 = icmp ne i8 %235, 0
	br i1 %236, label %L.65, label %L.64
L.65:
	store i32 1, i32* %rv.0
	br label %return
L.64:
	store i32 0, i32* %rv.0
	br label %return
return:
	%237 = load i32* %rv.0
	ret i32 %237
}
declare void @llvm.memcpy.p0i8.p0i8.i32(i8*, i8*, i32, i32, i1) nounwind
