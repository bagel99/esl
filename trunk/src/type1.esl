// Copyright (c) 2009-2011, Brian G. Lucas.  See LICENSE file.
// $Id: type1.esl 647 2011-11-21 17:30:48Z bgl $

package type
{
    type Valu: _uint64;
    type SValu: _int64;
    type TypeT: (UTYPE, ENUM, UINT, SINT, REF, ARRAY, RECORD, REFPROC);
    type BitOrderT: (NATIVE, MSB, LSB);
    type MemOrderT: (NATIVE, BE, LE);
    type AccessT: (RW, RO, WO);
    type BitSize: 0..0xFFFFFFFF;
    type TypeNode:
    {
	base:	@TypeNode;	// for derived types
	atbase: @TypeNode;      // for attribute modified types
	index:  @TypeNode;	// for arrays
	name:	@SymbNode;	// for named types
	list:	@SymbNode;	// for enums, records
	meths:	@SymbNode;	// list of methods for this type
	reftype:@TypeNode;      // type that refs this type
	lo:	Valu;
	hi:	Valu;
	size:	BitSize;	// size in bits
	width:  BitSize;	// size in bits when in memory
	align:	BitSize;	// alignment in bits when in memory
	dbtag:	_uint16;	// tag for debug information
	antag:  _uint16;	// tag for anonymous types (used by llvm)
	kind:	TypeT;		// ENUM, UINT, ...
	bitorder: BitOrderT;	// lsb, msb
	memorder: MemOrderT;	// le, be
	access:	AccessT;	// access restrictions
	packed: boolean;	// packed to bit level
	unalgn: boolean;	// not aligned natively
	flex:   boolean;	// flexible array
	input:  boolean;	// external state changes (like C volatile)	
	output: boolean;	// changes external state (like C volatile)	
	printed:boolean;	// llvm defined printed	
	dumped:	boolean;	// type dump printed
	final:	boolean;	// type properties are final, do not modify	
    };
    type Type: @TypeNode;

    type TypeListEntry:
    {   next:   @TypeListEntry;
	type:   @TypeNode;
    };
    type TypeList: @TypeListEntry;

    var unkntype: Type;		// the "unknown" type
    var booltype: Type;
    var bytetype: Type;
    var wordtype: Type;
    var swordtype: Type;
    var memtype: Type;
    var addrtype: Type;
    const NINTS = 4;		// number of integer types supported
    var uinttypes: [NINTS]Type;
    var inttypes:  [NINTS]Type;

    proc New(kind: TypeT): Type;
    proc NewBuiltin(kind: TypeT, name: @lex.Identifier, size: BitSize): Type;
    proc Final(t: Type);

    proc DumpT(t: Type, full: boolean);
}
// vim: ts=8 sw=4 noet nowrap

