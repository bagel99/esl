// Copyright (c) 2009-2011, Brian G. Lucas.  See LICENSE file.
// $Id$

package ast
{
    type Op:
    (
	NULL,
	NOP,
	TYPE,		// temporary placeholder
	FILE,		// source file boundary
	PACKAGE,	// package boundary
	DCLVAR,		// variable declaration
	DCLCON,		// constant declaration (for aggregates)
	CONST,	FCON,	SCON,	CLIST,	CRANGE,
	VAR,
	OFFSET,	INDEX,	SLICE,	BYREF,
	CAST,
	CALL,	CALLI,	ASM,
	SET,
	COPY,	ACOPY,	AEQ,	ANE,	// record and array operators
	GETRV,
	LOAD,
	STORE,		// assignment
	ZEXT,   SEXT,   TRUNC,	REVB,
	NEG,	NOT,	ABS,
	FNEG,   FCVTL,  FCVTS,
	CVTUF,	CVTIF,  CVTFU,	CVTFI,
	CLZ,	CLZNZ,	CTZ,	CTZNZ,	POP,
	ADD,    SUB,
	MUL,    DIV,    MOD,
	EQ,     NE,
	ULT,    UGT,    ULE,    UGE,
	SLT,    SGT,    SLE,    SGE,
	UMIN,	UMAX,	SMIN,	SMAX,	// temporary, get replaced by expansion
	LSL,    LSR,	ASL,    ASR,
	AND,    OR,     XOR,
	BAND,   BOR,	BNOT,
	FADD,	FSUB,	FMUL,	FDIV,	FREM,
	IFEXPR,		// select expression
	SEQ,		// sequence
	LOOP,
	EXIT,
	IF,		// one or two arm if
	SEL,		// select, multi-arm if
	IS,		// one arm of a select
	RET,		// return value
	PROC		// procedure
    );
    const NumChildDefault: [Op]0..255 =
    {   [NULL]=	  0,
	[NOP]=	  1,
	[TYPE]=   1,	[FILE]=   1,	[PACKAGE]=1,
	[DCLVAR]= 1,
	[DCLCON]= 1,
	[CONST]=  0,	[FCON]=   0,	[SCON]=   0,
	[CLIST]=  8,	[CRANGE]= 2,
	[VAR]=    0,
	[OFFSET]= 1,	[INDEX]=  2,	[SLICE]=  3,	[BYREF]=  1,
	[CAST]=   1,
	[CALL]=   4,	[CALLI]=  5,	[ASM]=    5,
	[SET]=    4,
	[COPY]=   4,	[ACOPY]=  4,	[AEQ]=    4,	[ANE]=    4,
	[GETRV]=  1,	[LOAD]=   1,	[STORE]=  2,
	[ZEXT]=   1,	[SEXT]=   1,	[TRUNC]=  1,	[REVB]=   1,
	[NEG]=    1,	[NOT]=    1,
	[ABS]=	  3,	// will convert into IFEXPR
	[FNEG]=   1,    [FCVTL]=  1,    [FCVTS]=  1,
	[CVTUF]=  1,	[CVTIF]=  1,	[CVTFU]=  1,	[CVTFI]=  1,
	[CLZ]=    1,	[CLZNZ]=  1,	[CTZ]=    1,	[CTZNZ]=  1,
	[POP]=    1,
	[ADD]=	  2,	[SUB]=    2,
	[MUL]=	  2,    [DIV]=	  2,    [MOD]=	  2,
	[EQ]=	  2,    [NE]=     2,
	[ULT]=	  2,    [UGT]=	  2,    [ULE]=	  2,    [UGE]=	  2,
	[SLT]=	  2,	[SGT]=	  2,    [SLE]=	  2,    [SGE]=	  2,
	[UMIN]=   3,	[UMAX]=   3,	[SMIN]=   3,	[SMAX]=   3,  
	[LSL]=	  2,    [LSR]=	  2,	[ASL]=	  2,    [ASR]=	  2,
	[AND]=	  2,    [OR]=	  2,	[XOR]=	  2,
	[BAND]=	  2,	[BOR]=	  2,	[BNOT]=	  2,
	[FADD]=   2,	[FSUB]=   2,
	[FMUL]=   2,	[FDIV]=   2,	[FREM]=   2,
	[IFEXPR]= 3,
	[SEQ]=    8,	[LOOP]=   1,	[EXIT]=   2,
	[IF]=     3,	[SEL]=    8,	[IS]=     4,
	[RET]=    1,
	[PROC]=   3
    };
    type NSubNodes: 0..0xFFFF;
    type AstNode:
    {
	op:	Op;		// what kind of node is this
	num:	NSubNodes;	// number of subnodes
	max:	NSubNodes;	// maximum allocated slots for subnode
	scale:	_int16;
	lineno:	_uint16;	// source code line number
	seqno:	_uint16;	// used by LLVM
	width:	type.BitSize;	// current width in bits
	type:	Type;
	symb:	Symb;
	valu:	type.Valu;
	child:	[]@AstNode;
    };
    type Ast: @AstNode;

    var Null: Ast;

    proc Alloc(op:Op, nc:NSubNodes): Ast
    {   var pa: Ast;

	pa = Ast(sys.zalloc(AstNode?size + nc * Ast?size));
	pa@.op = op;
	pa@.lineno = lex.Lineno();
	pa@.num = 0;
	pa@.max = nc;
	return pa;
    }

    proc Dup(from: Ast): Ast
    {   var pa: Ast;

	pa = Ast(sys.zalloc(AstNode?size + from@.max * Ast?size));
	pa@ = from@;	// record copy
	pa@.lineno = lex.Lineno();
	return pa;
    }	
    
    proc Expand(po: Ast, newsize:NSubNodes): Ast
    {   var pn: Ast;
	var size, i: NSubNodes;

	size = po@.max;
	while size < newsize do
	{   if size >= 16 then
		size += 16;
	    else
		size = 2 * size;
	}
	pn = Alloc(po@.op, size);
	// Record copy?
	pn@.op =    po@.op;
	pn@.width = po@.width;
	pn@.scale = po@.scale;
	pn@.lineno= po@.lineno;
	pn@.num =   po@.num;
	pn@.seqno = po@.seqno;
	pn@.valu =  po@.valu;
	pn@.type =  po@.type;
	pn@.symb =  po@.symb;
	i = 0;
	while i < po@.max do
	{   pn@.child[i] = po@.child[i];
	    i += 1;
	}
	pn@.max =   size;
	return pn;
    }

    proc New(op:Op, t:type.Type): Ast
    {   var pa: Ast;

	pa = Alloc(op, NumChildDefault[op]);
	pa@.type = t;
	if t != 0 then
	    pa@.width = t@.width;
	return pa;
    }

    proc New1(op:Op, t:type.Type, pc0:Ast): Ast
    {   var pa: Ast;
	var n: NSubNodes;

	n = NumChildDefault[op];
	if n < 1 then
	    n = 1;
	pa = Alloc(op, n);
	pa@.child[0] = pc0;
	pa@.num = 1;
	pa@.type = t;
	if pc0 != 0 then
	    pa@.width = pc0@.width;
	return pa;
    }

    proc New2(op:Op, t:type.Type, pc0:Ast, pc1:Ast): Ast
    {   var pa: Ast;
	var n: NSubNodes;

	n = NumChildDefault[op];
	if n < 2 then
	    n = 2;
	pa = Alloc(op, n);
	pa@.child[0] = pc0;
	pa@.child[1] = pc1;
	pa@.num = 2;
	pa@.type = t;
	if pc0 != 0 then
	    pa@.width = pc0@.width;
	return pa;
    }

    proc New3(op:Op, t:type.Type, pc0:Ast, pc1:Ast, pc2:Ast): Ast
    {   var pa: Ast;
	var n: NSubNodes;

	n = NumChildDefault[op];
	if n < 3 then
	    n = 3;
	pa = Alloc(op, n);
	pa@.child[0] = pc0;
	pa@.child[1] = pc1;
	pa@.child[2] = pc2;
	pa@.num = 3;
	pa@.type = t;
	if pc0 != 0 then
	    pa@.width = pc0@.width;
	return pa;
    }

    proc Child(pp:Ast, pc:Ast): Ast
    {   var n: NSubNodes;

	if pp != 0 then
	{   n = pp@.num + 1;
	    if n > pp@.max then
		pp = Expand(pp, n);
	    pp@.child[pp@.num] = pc;
	    pp@.num = n;
	}
	return pp;
    }

    proc ChildIndexed(pp:Ast, n:NSubNodes, pc:Ast): Ast
    {
	n += 1;
	if n > pp@.max then
	    pp = Expand(pp, n);
	pp@.child[n-1] = pc;
	if n > pp@.num then
	    pp@.num = n;
	return pp;
    }

    proc Const(t: Type, value: type.Valu): Ast
    {   var pa: Ast;

	pa = New(CONST, t);
	pa@.valu = value;
	if t != 0 then
	    pa@.width = t@.width;
	return pa;
    }

    proc CheckConstTruncate(node: Ast, size: type.BitSize)
    {
	// assert node@.op == CONST
	if size >= type.Valu?bits then return;
	if node@.type@.kind == SINT then
	{   if type.SValu(node@.valu) < 0 then
	    {   if type.SValu(node@.valu) >> (size+1) != -1 then
		    lex.Error(TRUNC);
	    }
	    else
	    {   if node@.valu >> (size+1) != 0 then
		    lex.Error(TRUNC);
	    }
	}
	else
	{   if node@.valu >> size != 0 then
		lex.Error(TRUNC);
	}
    }
	
    proc Extend(tree: Ast, size: type.BitSize, iscast: boolean): Ast
    {
	if tree@.width < size then
	{   if tree@.op != CONST && tree@.op != FCON then
	    {   if tree@.type@.kind
		is FLOAT then
		    tree = New1(FCVTL, tree@.type, tree);
		is SINT then
		    tree = New1(SEXT, tree@.type, tree);
		else
		    tree = New1(ZEXT, tree@.type, tree);
	    }
	    tree@.width = size;
	}
	else if tree@.width > size then
	{
	    if tree@.op != CONST && tree@.op != FCON then
	    {   if tree@.type@.kind == FLOAT then
		    tree = New1(FCVTS, tree@.type, tree);
		else
		    tree = New1(TRUNC, tree@.type, tree);
		if feature.trunc && !iscast then lex.Error(TRUNC);
	    }
	    else
		CheckConstTruncate(tree, size);
	    tree@.width = size;
	}
	return tree;
    }

    proc ExtendT(tree: Ast, t: Type): Ast
    {
	tree = Extend(tree, t@.width, false);
	tree@.type = t;
	return tree;
    }

    proc ExtendCast(tree: Ast, t: Type): Ast
    {
	tree = Extend(tree, t@.width, true);
	tree@.type = t;
	return tree;
    }

    proc Cast(tree: Ast, to: Type): Ast
    {
	if tree == 0 then return tree;
	if to@.kind
	is ENUM then
	{   if tree@.type@.kind == UINT then		// UINT -> ENUM
		tree = ExtendCast(tree, to);
	    else
		lex.Error(BADCAST);
	}
	is UINT then
	{   if tree@.type@.kind
	    is ENUM, UINT, SINT then		// ENUM|UINT|SINT -> UINT
		tree = ExtendCast(tree, to);
	    is REF then				// REF -> UINT
	    {   tree = New1(CAST, to, tree);
		tree@.width = to@.size;	// FIXME: width?
	    }
	    is RECORD, ARRAY then		// PACKED -> UINT
	    {
		if tree@.type@.packed && tree@.width == to@.size then
		{   tree@.type = to;
		}
		else
		    lex.Error(BADCAST);
	    }
	    is FLOAT then
	    {   tree = New1(CAST, to, tree);
		tree@.width = to@.width;
	    }
	    else
		lex.Error(BADCAST);
	}
	is SINT then
	{   if tree@.type@.kind
	    is UINT, SINT then			// UINT|SINT -> SINT
		tree = ExtendCast(tree, to);
	    else
		lex.Error(BADCAST);
	}
	is FLOAT then
	{   if tree@.type@.kind == UINT then
	    {   tree = New1(CAST, to, tree);
		tree@.width = to@.width;
	    }
	    else
		lex.Error(BADCAST);
	}
	is REF then
	{   if tree@.type@.kind
	    is REF then				// REF -> REF
	    {   tree = New1(CAST, to, tree);
		tree@.width = Target.ptr.size;
	    }
	    is UINT then			// UINT -> REF
	    {   if tree@.width != Target.ptr.size then lex.Error(BADINTPTR);
		tree = New1(CAST, to, tree);
		tree@.width = to@.size;	// FIXME: width?
	    }
	    is ARRAY then	// cast from slice of memory
	    {   if tree@.op == LOAD then
		    tree = tree@.child[0];	// undo load
		// Should check for large enough slice?
		if tree@.op == SLICE && tree@.type@.base@.base == type.bytetype then
		{   tree = New1(CAST, to, tree);
		    tree@.width = to@.size;	// width?
		}
		else
		    lex.Error(BADCAST);
	    }
	    else
		lex.Error(BADCAST);
	}
	is RECORD, ARRAY then
	{   if to@.packed &&
	       tree@.type@.kind == UINT && tree@.width == to@.size then
	    {					// UINT -> PACKED
		tree@.type = to;
	    }
	    else
		lex.Error(BADCAST);
	}
	return tree;
    }

    proc ForceBoolean(tree: Ast): Ast
    {
	if tree@.type != 0 && !type.Compat(tree@.type, type.booltype) then
	    lex.Error(WANTBOOL);
	if tree@.width > 1 then		// llvm wants a 1-bit boolean
	{   if tree@.op != CONST then
		tree = New2(NE, type.booltype, tree, Const(tree@.type, 0));
	    tree@.width = 1;
	}
	return tree;
    }

    // Until all hosts have the popcnt instruction
    proc popcnt(x: type.Valu): _uint
    {   var n: _uint;

	n = 0;
	while x != 0 do
	{   n += 1;
	    x = x & (x-1);
	}
	return n;
    }

    proc OpUnary(op:ast.Op, rhs:Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if rhs != 0 then
	{   if rhs@.op == CONST then	// constant folding
	    {   if op
		is NEG  then rhs@.valu = type.Valu(-rhs@.valu);
		is NOT  then rhs@.valu = ~rhs@.valu;
		is BNOT then rhs@.valu = rhs@.valu ^ 1;
		is ABS  then 
		{   if rhs@.type@.kind == SINT && type.SValu(rhs@.valu) < 0 then
			rhs@.valu = type.Valu(-type.SValu(rhs@.valu));
		}
		is CLZ, CLZNZ  then
		{   if rhs@.valu == 0 then
			rhs@.valu = rhs@.width;
		    else
			rhs@.valu = _clznz(rhs@.valu) -
			    (Valu?size*Target.membits - rhs@.width);
		}
		is CTZ, CTZNZ  then
		{   if rhs@.valu == 0 then
			rhs@.valu = 0;
		    else
			rhs@.valu = _ctznz(rhs@.valu);
		}
		is POP  then rhs@.valu = popcnt(rhs@.valu);
		else lex.ErrorS(COMPILER, "Unhandled unary operation");
		tree = rhs;
	    }
	    else
		tree = New1(op, rhs@.type, rhs);
	}
	return tree; 
    }

    // BAND, BOR
    proc OpBool(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   lhs = ForceBoolean(lhs);
	    rhs = ForceBoolean(rhs);
	    if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   if op
		is BOR  then lhs@.valu = lhs@.valu | rhs@.valu;
		is BAND then lhs@.valu = lhs@.valu & rhs@.valu;
		tree = lhs;
	    }
	    else
		tree = New2(op, type.booltype, lhs, rhs);
	}
	return tree;
    }

    proc OpBinary(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {
	var sl, sr: type.BitSize;

	sl = lhs@.width;
	sr = rhs@.width;
	// make LHS as wide as result wants it
	if t != 0 && t@.width > sl then
	{  lhs = ExtendT(lhs, t);
	   sl = t@.width;
	}
	if sl > sr then
	    rhs = Extend(rhs, sl, false);
	else if sr > sl then
	    lhs = Extend(lhs, sr, false);
	return New2(op, lhs@.type, lhs, rhs);
    }

    // ADD, SUB
    proc OpAdd(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   if op
		is ADD then lhs@.valu += rhs@.valu;
		is SUB then lhs@.valu -= rhs@.valu;
		tree = lhs;
	    }
	    else
		tree = OpBinary(op, lhs, rhs, t);
	}
	return tree;
    }

    proc OpMul(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   if op
		is MUL then lhs@.valu = lhs@.valu * rhs@.valu;
		is LSL,ASL then lhs@.valu = lhs@.valu << rhs@.valu;
		tree = lhs;
	    }
	    else
		tree = OpBinary(op, lhs, rhs, t);
	}
	return tree;
    }

    proc OpDiv(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   if op
		is DIV then lhs@.valu = lhs@.valu / rhs@.valu;
		is MOD then lhs@.valu = lhs@.valu % rhs@.valu;
		is LSR then lhs@.valu = lhs@.valu >> rhs@.valu;
		is ASR then lhs@.valu = Valu(type.SValu(lhs@.valu) << rhs@.valu);
		tree = lhs;
	    }
	    else
		tree = OpBinary(op, lhs, rhs, t);   // FIXME - widen not needed
//		tree = OpBinary(op, lhs, rhs, 0);
	}
	return tree;
    }

    // MIN, MAX
    proc OpMinMax(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   if op
		is UMIN then
		{   if rhs@.valu < lhs.valu then lhs.valu = rhs.valu;
		}
		is UMAX then
		{   if rhs@.valu > lhs.valu then lhs.valu = rhs.valu;
		}
		is SMIN then
		{   if type.SValu(rhs@.valu) < type.SValu(lhs.valu) then
			lhs.valu = rhs.valu;
		}
		is SMAX then
		{   if type.SValu(rhs@.valu) > type.SValu(lhs.valu) then
			lhs.valu = rhs.valu;
		}
		tree = lhs;
	    }
	    else
		tree = OpBinary(op, lhs, rhs, 0);
	}
	return tree;
    }


    // AND, OR, XOR
    proc OpLogic(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   if op
		is OR then  lhs@.valu = lhs@.valu | rhs@.valu;
		is XOR then lhs@.valu = lhs@.valu ^ rhs@.valu;
		is AND then lhs@.valu = lhs@.valu & rhs@.valu;
		tree = lhs;
	    }
	    else
		tree = OpBinary(op, lhs, rhs, 0);
	}
	return tree;
    }

    // EQ, NE, ULT, UGT, ULE, UGE, SLT, SGT, SLE, SGE
    proc OpCompare(op: Op, lhs: Ast, rhs: Ast): Ast
    {   var tree: Ast;

	tree = 0;
	if lhs != 0 && rhs != 0 then
	{   if lhs@.op == CONST && rhs@.op == CONST then  // constant folding
	    {   if op
		is EQ then lhs@.valu = _uint(lhs@.valu == rhs@.valu);
		is NE then lhs@.valu = _uint(lhs@.valu != rhs@.valu);
		is ULT then lhs@.valu = _uint(lhs@.valu < rhs@.valu);
		is UGT then lhs@.valu = _uint(lhs@.valu > rhs@.valu);
		is ULE then lhs@.valu = _uint(lhs@.valu <= rhs@.valu);
		is UGE then lhs@.valu = _uint(lhs@.valu >= rhs@.valu);
		is SLT then
		    lhs@.valu = _uint(type.SValu(lhs@.valu) < type.SValu(rhs@.valu));
		is SGT then
		    lhs@.valu = _uint(type.SValu(lhs@.valu) > type.SValu(rhs@.valu));
		is SLE then
		    lhs@.valu = _uint(type.SValu(lhs@.valu) <= type.SValu(rhs@.valu));
		is SGE then
		    lhs@.valu = _uint(type.SValu(lhs@.valu) >= type.SValu(rhs@.valu));
		tree = lhs;
	    }
	    else
	    {   // FIXME: all the kinds should be examined for legality
		// for the various ops
		if lhs@.type@.kind == REF || lhs@.type@.kind == REFPROC then
		{   if rhs@.op == CONST then
		    {   if op == EQ || op == NE then
			    rhs@.width = Target.ptr.size;
		    }
		}
		tree = OpBinary(op, lhs, rhs, 0);
	    }
	    tree@.type = type.booltype;
	    tree@.width = 1;
	}
	return tree;
    }

    // FADD, FSUB, FMUL, FDIV, FREM
    proc OpFloat(op: Op, lhs: Ast, rhs: Ast, t: Type): Ast
    {   var tree: Ast;
	var sl, sr: type.BitSize;

	tree = 0;
	// FIXME - constant folding
	sl = lhs@.width;
	sr = rhs@.width;
	// make LHS as wide as result wants it
	if t != 0 && t@.width > sl then
	{  lhs = ExtendT(lhs, t);
	   sl = t@.width;
	}
	if sl > sr then
	    rhs = ExtendT(rhs, lhs@.type);
	else if sr > sl then
	    lhs = ExtendT(lhs, rhs@.type);
	return New2(op, lhs@.type, lhs, rhs);
    }



    proc Init()
    {
	Null = New(NULL, type.unkntype);
    }

    const OpName: [Op]@[]Char =
    {   [NULL]=  "NULL",
	[NOP]=   "NOP",
	[TYPE]=  "TYPE",
	[FILE]=  "FILE",
	[PACKAGE]="PACKAGE",
	[DCLVAR]="DCLVAR",
	[DCLCON]="DCLCON",
	[CONST]= "CONST",
	[FCON]=  "FCONST",
	[SCON]=  "STRCON",
	[VAR]=   "VAR",
	[CALL]=  "CALL",
	[CALLI]= "CALLI",
	[ASM]=   "ASM",
	[CRANGE]="CRANGE",
	[CLIST]= "CLIST",
	[CAST]=  "CAST",
	[OFFSET]="OFFSET",
	[INDEX]= "INDEX",
	[SLICE]= "SLICE",
	[BYREF]= "BYREF",
	[SET]=   "SET",
	[COPY]=  "COPY",
	[ACOPY]= "ACOPY",
	[AEQ]=   "AEQ",
	[ANE]=   "ANE",
	[GETRV]= "GETRV",
	[LOAD]=  "LOAD",
	[STORE]= "STORE",
	[ZEXT]=  "ZEXT",
	[SEXT]=  "SEXT",
	[TRUNC]= "TRUNC",
	[REVB]=  "REVB",
	[NEG]=   "NEG",		[NOT]=   "NOT",		[ABS]=   "ABS",
	[FNEG]=  "FNEG",	[FCVTL]= "FCVTL",       [FCVTS]= "FCVTS",
	[CVTUF]= "CVTUF",	[CVTIF]= "CVTIF",
	[CVTFU]= "CVTFU",	[CVTFI]= "CVTFI",
	[CLZ]=   "CLZ",		[CLZNZ]= "CLZNZ",		
	[CTZ]=   "CTZ",		[CTZNZ]= "CTZNZ",
	[POP]=   "POP",
	[ADD]=   "ADD",		[SUB]=   "SUB",
	[MUL]=   "MUL",		[DIV]=   "DIV",		[MOD]=   "MOD",
	[EQ]=    "EQ",		[NE]=    "NE",
	[ULT]=   "ULT",		[UGT]=   "UGT",
	[ULE]=   "ULE",		[UGE]=   "UGE",
	[SLT]=   "SLT",		[SGT]=   "SGT",
	[SLE]=   "SLE",		[SGE]=   "SGE",
	[UMIN]=  "UMIN",	[UMAX]=  "UMAX",
	[SMIN]=  "SMIN",	[SMAX]=  "SMAX",
	[LSL]=   "LSL",		[LSR]=   "LSR",
	[ASL]=   "ASL",		[ASR]=   "ASR",
	[AND]=   "AND",		[OR]=    "OR",		[XOR]=   "XOR",
	[BAND]=  "BAND",	[BOR]=   "BOR",		[BNOT]=  "BNOT",
	[FADD]=  "FADD",	[FSUB]=  "FSUB",
	[FMUL]=  "FMUL",	[FDIV]=  "FDIV",	[FREM]=  "FREM",
	[IFEXPR]="IFEXPR",
	[SEQ]=   "SEQ",
	[LOOP]=  "LOOP",
	[EXIT]=  "EXIT",
	[IF]=    "IF",
	[SEL]=   "SEL",
	[IS]=    "IS",
	[RET]=   "RET",
	[PROC]=  "PROC"
    };

    proc Print(node: Ast)
    {   var s: Symb;
	var t: Type;

	t = node@.type;
	if node@.op == ASM then t = 0;	// ASM overloads to point to typelist
	err.str(OpName[node@.op]);
	err.str("(sz=");
	err.uint(node@.width);
	err.str(" ln=");
	err.uint(node@.lineno);
	err.str(" nc=");
	err.uint(node@.num);
	if node@.op
	is CONST, OFFSET, COPY, GETRV, CLZ, CTZ then
	{   err.str(" value ");
	    if node@.op == CONST && node@.type@.kind == SINT then
		err.int64(_int64(node@.valu));
	    else
		err.uint64(node@.valu);
	}
	is SCON then
	{   err.str(" id ");
	    err.uint32(_uint32(node@.valu));
	    err.str(" value \"");
	    err.strn(node@.symb@.ident, node@.type.Span()-1);
	    err.chr('"');
	}
	is DCLVAR, VAR, PROC, CALL, FILE, PACKAGE then
	{
	    err.str(" name ");
	    s = node@.symb;
	    if s != 0 then
		err.str(s@.ident);
	    else
		err.str("*NULL*");
	}
	err.chr(')');
	if t != 0 then
	{   err.chr(':');
	    type.DumpT(t, false);
	}
	err.nl();
    }

    const blanks:[]_byte =
	"                                                                ";

    proc DumpSub(tree: Ast, level:_uint)
    {   var i: NSubNodes;

	sys.write(2, blanks, level);
	if tree == 0 then
	    err.str("*NULL*\n");
	else
	{   Print(tree);
	    i = 0;
	    while i < tree@.num do
	    {
		DumpSub(tree@.child[i], level+1);
		i += 1;
	    }
	}
    }

    proc Dump(tree: Ast)
    {
	DumpSub(tree, 0);
    }

}
// vim: ts=8 sw=4 noet nowrap

